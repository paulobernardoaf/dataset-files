<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\test\unit\legacy_unit\util\test_str.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_util.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>act</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>act</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\x1b[34m[+][%s]\x1b[39;49m test passed\n"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\x1b[31m[-][%s]\x1b[39;49m test failed (actual = %s\x1b[39;49m, expected = %s\x1b[39;49m)\n"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>act</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_n</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>act</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>act</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\x1b[34m[+][%s]\x1b[39;49m test passed\n"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\x1b[31m[-][%s]\x1b[39;49m test failed (actual = %s\x1b[39;49m, expected = %s\x1b[39;49m)\n"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>act</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_int</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>act</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>==</operator> <name>act</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\x1b[34m[+][%s]\x1b[39;49m test passed\n"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\x1b[31m[-][%s]\x1b[39;49m test failed (actual = %d\x1b[39;49m, expected = %d\x1b[39;49m)\n"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>act</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_array</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>act</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err_found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>exp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>act</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\x1b[31m[-][%s]\x1b[39;49m test failed element %d (actual = %d\x1b[39;49m, expected = %d\x1b[39;49m)\n"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>act</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>exp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err_found</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\x1b[34m[+][%s]\x1b[39;49m test passed\n"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\x1b[31m[-][%s]\x1b[39;49m test failed\n"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>head</name><index>[]</index></name> <init>= <expr><literal type="string">" a"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tail</name><index>[]</index></name> <init>= <expr><literal type="string">"a "</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>head_tail</name><index>[]</index></name> <init>= <expr><literal type="string">" a "</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check</name> <argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><call><name>r_str_trim_head</name> <argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"trim head \" a\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name> <argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><call><name>r_str_trim_tail</name> <argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"trim tail \"a \""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name> <argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>head_tail</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"trim head tail \" a \""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>crop</name> <init>=

<expr><literal type="string">"This is the first line\n"</literal>

<literal type="string">"This is the second\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"And this is the last\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>crop_exp</name> <init>=

<expr><literal type="string">"is is the se\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"d this is th\n"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check</name> <argument_list>(<argument><expr><name>crop_exp</name></expr></argument>, <argument><expr><call><name>r_str_crop</name><argument_list>(<argument><expr><name>crop</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"crop text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><call><name>r_str_crop</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"crop NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>dst</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>src</name><index>[]</index></name> <init>= <expr><literal type="string">"This is my text"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_ncpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name> <argument_list>(<argument><expr><literal type="string">"This"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"r_str_ncpy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_ncpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name> <argument_list>(<argument><expr><literal type="string">"This is my text"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"r_str_ncpy (n &gt; src length)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"This is a $hell &lt; fin.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_sanitize</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><literal type="string">"This is a _hell _ fin.txt"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"r_str_sanitize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"\x1b[30mHel\x1b[28mlo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><literal type="string">"lo"</literal></expr></argument>, <argument><expr><call><name>r_str_ansi_chrn</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_chrn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_int</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name>r_str_ansi_len</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_len 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"Hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_int</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name>r_str_ansi_len</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_len 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"\x1b[30m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_int</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>r_str_ansi_len</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_len 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"Hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_int</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name>r_str_ansi_chop</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_chop (normal string)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><literal type="string">"Hello"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_chop (normal string)(str)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"Hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_int</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>r_str_ansi_chop</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_chop 2 (normal string)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><literal type="string">"He"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_chop 2 (normal string)(str)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"Hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_int</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>r_str_ansi_chop</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_chop 3 (normal string)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_chop 3 (normal string)(str)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"\x1b[30mHel\x1b[29mlo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_int</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>r_str_ansi_chop</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_chop 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_chop 1 (str)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"\x1b[30mHel\x1b[29mlo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_int</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><call><name>r_str_ansi_chop</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_chop 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><literal type="string">"\x1b[30mHe"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_chop 2 (str)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"\x1b[30mHel\x1b[29mlo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_int</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>r_str_ansi_chop</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_chop 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><literal type="string">"\x1b[30mHel"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_chop 3 (str)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>orig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>cpos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"Hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_int</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name>r_str_ansi_filter</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_filter (normal string)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><literal type="string">"Hello"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_filter (normal string(str)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"\x1b[30mHel\x1b[29mlo\x1b[28m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_int</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name>r_str_ansi_filter</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><literal type="string">"Hello"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_filter (str)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"\x1b[30mHel\x1b[29mlo\x1b[28m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_int</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>r_str_ansi_filter</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_filter (length)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_n</name><argument_list>(<argument><expr><literal type="string">"Hel"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_filter (length)(str)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"\x1b[30mHel\x1b[29mlo\x1b[28m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_ansi_filter</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>orig</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><literal type="string">"\x1b[30mHel\x1b[29mlo\x1b[28m"</literal></expr></argument>, <argument><expr><name>orig</name></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_filter out orig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"\x1b[30mHel\x1b[29mlo\x1b[28m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>r_str_ansi_filter</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpos</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check_int</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_filter res"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>exp_cpos</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check_array</name><argument_list>(<argument><expr><name>exp_cpos</name></expr></argument>, <argument><expr><name>cpos</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_filter cpos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>clean</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"\x1b[30mHell\x1b[32mo\nIt'\x1b[33ms a test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>clean</name></expr></argument>, <argument><expr><literal type="string">"Hello\nIt's a test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>thunk</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res_s</name> <init>= <expr><call><name>r_str_replace_thunked</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>clean</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="string">"est"</literal></expr></argument>, <argument><expr><literal type="string">"\x1b[31mest\x1b[39;49m"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><literal type="string">"\x1b[30mHell\x1b[32mo\nIt'\x1b[33ms a t\x1b[31mest\x1b[39;49m\n"</literal></expr></argument>, <argument><expr><name>res_s</name></expr></argument>, <argument><expr><literal type="string">"r_str_replace_thunked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"\x1b[30mHell\x1b[32mo\nIt'\x1b[33ms an hell\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>r_str_ansi_filter</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>orig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res_s</name> <operator>=</operator> <call><name>r_str_replace_thunked</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>cpos</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"ell"</literal></expr></argument>, <argument><expr><literal type="string">"\x1b[31mell\x1b[39;49m"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><literal type="string">"\x1b[30mH\x1b[31mell\x1b[39;49mo\nIt'\x1b[33ms an h\x1b[31mell\x1b[39;49m\n"</literal></expr></argument>, <argument><expr><name>res_s</name></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_filter + replace_thunked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>crop</name> <operator>=</operator>

<literal type="string">"\x1b[30mThis is the \x1b[34mfirst line\n"</literal>

<literal type="string">"\x1b[32mThis \x1b[31mis the\x1b[39;49m second\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"And this is the \x1b[32mlast\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>crop_exp</name> <operator>=</operator>

<literal type="string">"\x1b[30m\x1b[34m\x1b[32mis \x1b[31mis the\x1b[39;49m se\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"d this is th\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>crop_exp</name></expr></argument>, <argument><expr><call><name>r_str_ansi_crop</name><argument_list>(<argument><expr><name>crop</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_str_ansi_crop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
