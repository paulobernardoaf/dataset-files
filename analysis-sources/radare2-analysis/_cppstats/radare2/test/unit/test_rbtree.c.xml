<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\test\unit\test_rbtree.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>random_iota</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>rand</name> <argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<struct>struct <name>Node</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>RBNode</name></type> <name>rb</name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>freefn</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>container_of</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>struct <name>Node</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>size</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>a_</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Node</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>container_of</name> <argument_list>(<argument><expr><name>a_</name></expr></argument>, <argument><expr>struct <name>Node</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a_</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <call><name>container_of</name> <argument_list>(<argument><expr><name><name>a_</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>struct <name>Node</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBNode</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>Node</name> <operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>key</name> <operator>-</operator> <call><name>container_of</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>Node</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>key</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>Node</name></name> <modifier>*</modifier></type><name>make</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Node</name></name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>Node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check1</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>black</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>leftmost</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>black_</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>black</name> <operator>+=</operator> <operator>!</operator><name><name>x</name><operator>-&gt;</operator><name>red</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>red</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>red</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>red</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"error: red violation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>container_of</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr>struct <name>Node</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>size</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>

<operator>(</operator><ternary><condition><expr><name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>container_of</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr>struct <name>Node</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>size</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator>

<call><name>container_of</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr>struct <name>Node</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"error: size violation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check1</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dep</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><name>leftmost</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check1</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dep</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>leftmost</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>black_</name> <operator>=</operator> <name>black</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>black_</name> <operator>!=</operator> <name>black</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"error: different black height\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>check1</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_rbtree_bound_iterate</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Node</name></name></type> <name>key</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBIter</name></type> <name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Node</name></name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBIter</name></type> <name>f</name> <init>= <expr><call><name>r_rbtree_first</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>f</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"iter with 0 length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">99</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>make</name> <argument_list>(<argument><expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_rbtree_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>rb</name></name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>r_rbtree_lower_bound_forward</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

<macro><name>r_rbtree_iter_while</name> <argument_list>(<argument>it</argument>, <argument>x</argument>, <argument>struct Node</argument>, <argument>rb</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"lower_bound_forward equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">98</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"lower_bound_forward complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="number">0x25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>r_rbtree_lower_bound_forward</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0x26</literal></expr>;</expr_stmt>

<macro><name>r_rbtree_iter_while</name> <argument_list>(<argument>it</argument>, <argument>x</argument>, <argument>struct Node</argument>, <argument>rb</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"lower_bound_forward more"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">98</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"lower_bound_forward complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>r_rbtree_upper_bound_backward</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

<macro><name>r_rbtree_iter_while_prev</name> <argument_list>(<argument>it</argument>, <argument>x</argument>, <argument>struct Node</argument>, <argument>rb</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"upper_bound_backward"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"upper_bound_backward complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="number">0x25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>r_rbtree_upper_bound_backward</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

<macro><name>r_rbtree_iter_while_prev</name> <argument_list>(<argument>it</argument>, <argument>x</argument>, <argument>struct Node</argument>, <argument>rb</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"upper_bound_backward less"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"upper_bound_backward complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_rbtree_free</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>freefn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_rbtree_bound</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Node</name></name></type> <name>key</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Node</name></name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">99</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>make</name> <argument_list>(<argument><expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_rbtree_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>rb</name></name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>container_of</name> <argument_list>(<argument><expr><call><name>r_rbtree_lower_bound</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>struct <name>Node</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="number">0x24</literal></expr></argument>, <argument><expr><literal type="string">"lower bound equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="number">0x25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>container_of</name> <argument_list>(<argument><expr><call><name>r_rbtree_lower_bound</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>struct <name>Node</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="number">0x26</literal></expr></argument>, <argument><expr><literal type="string">"lower bound more"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>container_of</name> <argument_list>(<argument><expr><call><name>r_rbtree_upper_bound</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>struct <name>Node</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="number">0x24</literal></expr></argument>, <argument><expr><literal type="string">"upper bound equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="number">0x25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>container_of</name> <argument_list>(<argument><expr><call><name>r_rbtree_upper_bound</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>struct <name>Node</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="number">0x24</literal></expr></argument>, <argument><expr><literal type="string">"upper bound less"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_rbtree_free</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>freefn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>insert_delete</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>RBNodeSum</name></type> <name>sum</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Node</name></name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>make</name> <argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_rbtree_aug_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>rb</name></name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>container_of</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr>struct <name>Node</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>size</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"shape"</literal></expr></argument>, <argument><expr><call><name>check</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>random_iota</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Node</name></name></type> <name>x</name> <init>= <expr><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>r_rbtree_aug_delete</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>freefn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"delete"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>r_rbtree_aug_delete</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>freefn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"delete non-existent"</literal></expr></argument>, <argument><expr><operator>!</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sum</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name>tree</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>n</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>container_of</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr>struct <name>Node</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>size</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"shape"</literal></expr></argument>, <argument><expr><call><name>check</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_rbtree_free</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>freefn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>MU_PASSED</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_rbtree_insert_delete</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>random_iota</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>insert_delete</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>insert_delete</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>N</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>insert_delete</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>N</name></cpp:undef>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_rbtree_augmented_insert_delete</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>random_iota</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>insert_delete</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>insert_delete</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>N</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>insert_delete</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>N</name></cpp:undef>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_rbtree_augmented_insert_delete2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Node</name></name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>random_iota</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>make</name> <argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_rbtree_aug_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>rb</name></name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Node</name></name></type> <name>x</name> <init>= <expr><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>r_rbtree_aug_delete</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>freefn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"delete non-existent"</literal></expr></argument>, <argument><expr><operator>!</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>N</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><call><name>container_of</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr>struct <name>Node</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>size</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"shape"</literal></expr></argument>, <argument><expr><call><name>check</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>r_rbtree_aug_delete</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>freefn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"delete"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"shape"</literal></expr></argument>, <argument><expr><call><name>check</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>N</name></cpp:undef>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_rbtree_traverse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBIter</name></type> <name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Node</name></name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">99</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>make</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_rbtree_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>rb</name></name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>r_rbtree_foreach</name> <argument_list>(<argument>tree</argument>, <argument>it</argument>, <argument>x</argument>, <argument>struct Node</argument>, <argument>rb</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"foreach"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>r_rbtree_foreach_prev</name> <argument_list>(<argument>tree</argument>, <argument>it</argument>, <argument>x</argument>, <argument>struct Node</argument>, <argument>rb</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"foreach_prev"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_rbtree_free</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>freefn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_rbtree_bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_rbtree_bound_iterate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_rbtree_insert_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_rbtree_traverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_rbtree_augmented_insert_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_rbtree_augmented_insert_delete2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>all_tests</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
