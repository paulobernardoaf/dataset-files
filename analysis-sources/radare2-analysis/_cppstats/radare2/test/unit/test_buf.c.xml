<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\test\unit\test_buf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>test_buf</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><literal type="string">"Something To\nSay Here.."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>length</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>buf_sz</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>buf_sz</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><literal type="string">"file size should be computed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><literal type="string">"r_buf_read_at failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_memeq</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>content</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><literal type="string">"r_buf_read_at has corrupted content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><literal type="string">"This is a new content"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>sl</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>r_buf_set_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"New content should be written"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><literal type="string">"r_buf_read_at failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_memeq</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><literal type="string">"r_buf_read_at has corrupted content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"r_buf_read_at failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_memeq</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"Thi"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"r_buf_read_at has corrupted content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"r_buf_read_at failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_memeq</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"s is "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"r_buf_read_at has corrupted content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><literal type="string">", hello world"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>s2l</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_buf_append_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"string should be appended"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_sz</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>buf_sz</name></expr></argument>, <argument><expr><name>sl</name> <operator>+</operator> <name>s2l</name></expr></argument>, <argument><expr><literal type="string">"file size should be computed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_buf_resize</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"file should be resized"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_sz</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>buf_sz</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"file size should be 10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rl</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>rl</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"only 9 bytes can be read from offset 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_memeq</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"his is a "</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"read right bytes from offset 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_set_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"World"</literal></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"World"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>r_buf_to_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="string">"string should be there"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="string">"World"</literal></expr></argument>, <argument><expr><literal type="string">"World there"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s3</name> <init>= <expr><literal type="string">"Hello "</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_buf_prepend_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name>s3</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"bytes should be prepended"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>r_buf_to_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="string">"string should be there"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="string">"Hello World"</literal></expr></argument>, <argument><expr><literal type="string">"hello world there"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_insert_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>st2</name> <init>= <expr><call><name>r_buf_to_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>st2</name></expr></argument>, <argument><expr><literal type="string">"string should be there"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>st2</name></expr></argument>, <argument><expr><literal type="string">"Hello, World"</literal></expr></argument>, <argument><expr><literal type="string">"comma inserted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>st2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><literal type="string">"moving seek out of current length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_write</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"mydata"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"writes 6 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0xf0</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0x16</literal></expr></argument>, <argument><expr><literal type="string">"read 16 bytes at the end of gap and new data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_memeq</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"first bytes should be 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_memeq</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">0x10</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"mydata"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"then there is mydata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_set_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"Hello"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>sec_buf</name> <init>= <expr><call><name>r_buf_new_with_bytes</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">" second"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_buf_append_buf</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>sec_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"append buf should succeed"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>st3</name> <init>= <expr><call><name>r_buf_to_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>st3</name></expr></argument>, <argument><expr><literal type="string">"Hello second"</literal></expr></argument>, <argument><expr><literal type="string">"append buf correctly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>st3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>sec_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sec_buf</name> <operator>=</operator> <call><name>r_buf_new_with_bytes</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"123456789"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_buf_append_buf_slice</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>sec_buf</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"append buf slice should succeed"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>st4</name> <init>= <expr><call><name>r_buf_to_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>st4</name></expr></argument>, <argument><expr><literal type="string">"Hello second678"</literal></expr></argument>, <argument><expr><literal type="string">"append buf slice correctly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>st4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>sec_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>MU_PASSED</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_buf_file</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[]</index></name> <init>= <expr><literal type="string">"r2-XXXXXX"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><literal type="string">"Something To\nSay Here.."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>length</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>mkstemp</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_neq</name> <argument_list>(<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mkstemp failed..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>r_buf_new_file</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"r_buf_new_file failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>test_buf</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>MU_PASSED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mu_fail</name> <argument_list>(<argument><expr><literal type="string">"test failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlink</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_buf_bytes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><literal type="string">"Something To\nSay Here.."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>length</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>r_buf_new_with_bytes</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name>content</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"r_buf_new_with_bytes failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>test_buf</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>MU_PASSED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mu_fail</name> <argument_list>(<argument><expr><literal type="string">"test failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_buf_mmap</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[]</index></name> <init>= <expr><literal type="string">"r2-XXXXXX"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><literal type="string">"Something To\nSay Here.."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>length</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>mkstemp</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_neq</name> <argument_list>(<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>fd</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1LL</literal></expr></argument>, <argument><expr><literal type="string">"mkstemp failed..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>r_buf_new_mmap</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>R_PERM_RW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"r_buf_new_mmap failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>test_buf</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>MU_PASSED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_fail</name> <argument_list>(<argument><expr><literal type="string">"test failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_buf_io</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><literal type="string">"Something To\nSay Here.."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>length</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name> <init>= <expr><call><name>r_io_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>r_io_open_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"file:///tmp/r-buf-io.test"</literal></expr></argument>, <argument><expr><name>R_PERM_RW</name> <operator>|</operator> <name>R_PERM_CREAT</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"file should be opened for writing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>r_io_write_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>content</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"initial content should be written"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RIOBind</name></type> <name>bnd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_io_bind</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>r_buf_new_with_io</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bnd</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"r_buf_new_file failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>test_buf</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>MU_PASSED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mu_fail</name> <argument_list>(<argument><expr><literal type="string">"test failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_close</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_free</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_buf_sparse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><literal type="string">"Something To\nSay Here.."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>length</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>r_buf_new_sparse</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"r_buf_new_file failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_write</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>content</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>test_buf</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>MU_PASSED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mu_fail</name> <argument_list>(<argument><expr><literal type="string">"test failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_buf_sparse2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>r_buf_new_sparse</name> <argument_list>(<argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_write</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"aaaa"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_write</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"bbbbb"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_write</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"cccccc"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"D"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"EEE"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>tmp</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="string">"read only 15 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_memeq</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"aaDabbbEEEccccc"</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="string">"read the right bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>r_buf_resize</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"resized to 0"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"nothing to read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"aaaa"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"read the initial 0xff bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_memeq</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"\xff\xff\xff\x61\x61\x61\x61"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"right 7 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_buf_resize</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"resized to 10"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"size is 10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"read the initial/final 0xff bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_memeq</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"\xff\xff\xff\x61\x61\x61\x61\xff\xff\xff"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"right 10 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"ABCDEF"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"write 6 bytes at 0x100"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0xfe</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"read 8 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_memeq</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"\xff\xff\x41\x42\x43\x44\x45\x46"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"right bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">0x106</literal></expr></argument>, <argument><expr><literal type="string">"size is 0x106"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_buf_bytes_steal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><literal type="string">"Something To\nSay Here.."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>length</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>r_buf_new_with_bytes</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name>content</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"r_buf_new_file failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_buf_to_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><literal type="string">"content is right"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_buf_format</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>a</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xdead</literal></expr>, <expr><literal type="number">0xbeef</literal></expr>, <expr><literal type="number">0xcafe</literal></expr>, <expr><literal type="number">0xbabe</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_fwrite</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>a</name></expr></argument>, <argument><expr><literal type="string">"4s"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_memeq</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"\xad\xde\xef\xbe\xfe\xca\xbe\xba"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"fwrite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>a</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xadde</literal></expr></argument>, <argument><expr><literal type="string">"first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xefbe</literal></expr></argument>, <argument><expr><literal type="string">"second"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xfeca</literal></expr></argument>, <argument><expr><literal type="string">"third"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xbeba</literal></expr></argument>, <argument><expr><literal type="string">"fourth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_buf_with_buf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><literal type="string">"Something To\nSay Here.."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>length</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_buf_new_with_bytes</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>content</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>r_buf_new_with_buf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"r_buf_new_with_buf failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>test_buf</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>MU_PASSED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mu_fail</name> <argument_list>(<argument><expr><literal type="string">"r_buf_with_buf failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_buf_slice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><literal type="string">"AAAAAAAAAASomething To\nSay Here..BBBBBBBBBB"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>length</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_buf_new_with_bytes</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>content</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>r_buf_new_slice</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"r_buf_new_slice failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>buf_sz</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>buf_sz</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="string">"file size should be computed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="string">"r_buf_read_at failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_memeq</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"Something To\nSay Here.."</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="string">"r_buf_read_at has corrupted content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"only 3 read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_memeq</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"eth"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"base should be considered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">23</literal> <operator>-</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"consider limit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>r_buf_resize</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"file should be resized"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_sz</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>buf_sz</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="string">"file size should be 30"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_buf_get_string</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>ch</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch</name><index>[<expr><literal type="number">127</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>r_buf_new_with_bytes</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_buf_get_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ch</name> <operator>+</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><literal type="string">"the string is the same"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_buf_get_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ch</name></expr></argument>, <argument><expr><literal type="string">"the string is the same"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_buf_get_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\x00"</literal></expr></argument>, <argument><expr><literal type="string">"the string is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_buf_get_string_nothing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>r_buf_new_with_bytes</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"\x33\x22"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_buf_get_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"there is no string in the buffer (no null terminator)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_append_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"\x00"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_buf_get_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\x33\x22"</literal></expr></argument>, <argument><expr><literal type="string">"now there is a string because of the null terminator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_buf_slice_too_big</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_buf_new_with_bytes</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"AAAA"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><call><name>r_buf_new_slice</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"the size cannot be more than the original buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_resize</name> <argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"it should be shrinked to 1 byte"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>r_buf_resize</name> <argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"the resize should be successful"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"but it should just use the biggest value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_buf_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_buf_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_buf_mmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_buf_with_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_buf_slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_buf_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_buf_sparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_buf_sparse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_buf_bytes_steal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_buf_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_buf_get_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_buf_get_string_nothing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_buf_slice_too_big</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>all_tests</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
