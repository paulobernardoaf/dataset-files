<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\test\unit\test_parse_ctype.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_parse.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>test_r_parse_ctype</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RParseCType</name> <modifier>*</modifier></type><name>ctype</name> <init>= <expr><call><name>r_parse_ctype_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"r_parse_ctype_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RParseCTypeType</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>r_parse_ctype_parse</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"const char * [0x42] const * [23]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"r_parse_ctype_parse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RParseCTypeType</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>type</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name>R_PARSE_CTYPE_TYPE_KIND_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>array</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="string">"array count (dec)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>array</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name>R_PARSE_CTYPE_TYPE_KIND_POINTER</name></expr></argument>, <argument><expr><literal type="string">"pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>pointer</name><operator>.</operator><name>is_const</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"pointer const"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>pointer</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name>R_PARSE_CTYPE_TYPE_KIND_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>array</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">0x42</literal></expr></argument>, <argument><expr><literal type="string">"array count (hex)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>array</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name>R_PARSE_CTYPE_TYPE_KIND_POINTER</name></expr></argument>, <argument><expr><literal type="string">"pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>pointer</name><operator>.</operator><name>is_const</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"pointer non-const"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>pointer</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name>R_PARSE_CTYPE_TYPE_KIND_IDENTIFIER</name></expr></argument>, <argument><expr><literal type="string">"identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>kind</name></name></expr></argument>, <argument><expr><name>R_PARSE_CTYPE_IDENTIFIER_KIND_UNSPECIFIED</name></expr></argument>, <argument><expr><literal type="string">"identifier kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>is_const</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"identifier const"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"char"</literal></expr></argument>, <argument><expr><literal type="string">"identifier name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_parse_ctype_type_free</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_parse_ctype_free</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_parse_ctype_identifier_kind</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RParseCType</name> <modifier>*</modifier></type><name>ctype</name> <init>= <expr><call><name>r_parse_ctype_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"r_parse_ctype_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RParseCTypeType</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>r_parse_ctype_parse</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"struct ulu"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"r_parse_ctype_parse(\"struct ulu\")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name>R_PARSE_CTYPE_TYPE_KIND_IDENTIFIER</name></expr></argument>, <argument><expr><literal type="string">"identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>kind</name></name></expr></argument>, <argument><expr><name>R_PARSE_CTYPE_IDENTIFIER_KIND_STRUCT</name></expr></argument>, <argument><expr><literal type="string">"identifier kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>is_const</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"identifier const"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"ulu"</literal></expr></argument>, <argument><expr><literal type="string">"identifier name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_parse_ctype_type_free</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>r_parse_ctype_parse</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"union mulu"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"r_parse_ctype_parse(\"union mulu\")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name>R_PARSE_CTYPE_TYPE_KIND_IDENTIFIER</name></expr></argument>, <argument><expr><literal type="string">"identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>kind</name></name></expr></argument>, <argument><expr><name>R_PARSE_CTYPE_IDENTIFIER_KIND_UNION</name></expr></argument>, <argument><expr><literal type="string">"identifier kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>is_const</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"identifier const"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"mulu"</literal></expr></argument>, <argument><expr><literal type="string">"identifier name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_parse_ctype_type_free</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>r_parse_ctype_parse</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"enum urshak"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"r_parse_ctype_parse(\"enum urshak\")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name>R_PARSE_CTYPE_TYPE_KIND_IDENTIFIER</name></expr></argument>, <argument><expr><literal type="string">"identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>kind</name></name></expr></argument>, <argument><expr><name>R_PARSE_CTYPE_IDENTIFIER_KIND_ENUM</name></expr></argument>, <argument><expr><literal type="string">"identifier kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>is_const</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"identifier const"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"urshak"</literal></expr></argument>, <argument><expr><literal type="string">"identifier name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_parse_ctype_type_free</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_parse_ctype_free</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_parse_ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_parse_ctype_identifier_kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>all_tests</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
