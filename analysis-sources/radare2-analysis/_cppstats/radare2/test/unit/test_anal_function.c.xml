<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\test\unit\test_anal_function.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_anal_block_invars.inl"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>ht_up_count</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>count</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ht_pp_count</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>count</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>function_check_invariants</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>block_check_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>anal-&gt;fcns</argument>, <argument>it</argument>, <argument>fcn</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ht_addr_fun</name></name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><literal type="string">"function in addr ht"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><call><name>ht_pp_find</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ht_name_fun</name></name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><literal type="string">"function in name ht"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>size_t</name></type> <name>addr_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ht_up_foreach</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ht_addr_fun</name></name></expr></argument>, <argument><expr><name>ht_up_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>addr_count</name></expr></argument>, <argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"function addr ht count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>name_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ht_pp_foreach</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ht_name_fun</name></name></expr></argument>, <argument><expr><name>ht_pp_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>name_count</name></expr></argument>, <argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"function name ht count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_invariants</name></cpp:macro> <cpp:value>function_check_invariants</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_leaks</name></cpp:macro> <cpp:value>block_check_leaks</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert_invariants</name><parameter_list>(<parameter><type><name>anal</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!check_invariants (anal)) { return false; } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert_leaks</name><parameter_list>(<parameter><type><name>anal</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!check_leaks (anal)) { return false; } } while (0)</cpp:value></cpp:define>

<function><type><name>bool</name></type> <name>test_r_anal_function_relocate</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>r_anal_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fa</name> <init>= <expr><call><name>r_anal_create_function</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="string">"do_something"</literal></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fb</name> <init>= <expr><call><name>r_anal_create_function</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="string">"do_something_else"</literal></expr></argument>, <argument><expr><literal type="number">0xdeadbeef</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_create_function</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="string">"do_something_different"</literal></expr></argument>, <argument><expr><literal type="number">0xc0ffee</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>r_anal_function_relocate</name> <argument_list>(<argument><expr><name>fa</name></expr></argument>, <argument><expr><name><name>fb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"failed relocate"</literal></expr></argument>, <argument><expr><operator>!</operator><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>fa</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="string">"failed relocate addr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>r_anal_function_relocate</name> <argument_list>(<argument><expr><name>fa</name></expr></argument>, <argument><expr><literal type="number">0x1234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"successful relocate"</literal></expr></argument>, <argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>fa</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0x1234</literal></expr></argument>, <argument><expr><literal type="string">"successful relocate addr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_leaks</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_free</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_anal_function_relocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>all_tests</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
