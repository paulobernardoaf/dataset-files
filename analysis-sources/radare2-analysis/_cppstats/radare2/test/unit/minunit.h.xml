<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\test\unit\minunit.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRED</name></cpp:macro> <cpp:value>"\x1b[31m"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TGREEN</name></cpp:macro> <cpp:value>"\x1b[32m"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYELLOW</name></cpp:macro> <cpp:value>"\x1b[33m"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TBLUE</name></cpp:macro> <cpp:value>"\x1b[34m"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMAGENTA</name></cpp:macro> <cpp:value>"\x1b[35m"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCYAN</name></cpp:macro> <cpp:value>"\x1b[36m"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TBOLD</name></cpp:macro> <cpp:value>"\x1b[1m"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRESET</name></cpp:macro> <cpp:value>"\x1b[0m"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MU_PASSED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MU_ERR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MU_TEST_UNBROKEN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MU_TEST_BROKEN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>sprint_mem</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>out</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_assert</name><parameter_list>(<parameter><type><name>message</name></type></parameter>, <parameter><type><name>test</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(test)) { mu_fail(message); mu_test_status = MU_TEST_UNBROKEN; } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_perror</name><parameter_list>(<parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (mu_test_status != MU_TEST_BROKEN) { printf(TBOLD TRED "ERR\n[XX] Fail at line %d: " TRESET "%s\n\n", __LINE__, message); } else { printf(TBOLD TYELLOW "Broken at line %d: " TRESET "%s\n\n", __LINE__, message); } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_psyserror</name><parameter_list>(<parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { perror(message); mu_perror(message); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_fail</name><parameter_list>(<parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { mu_perror(message); if (mu_test_status != MU_TEST_BROKEN) return MU_ERR; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_ignore</name></cpp:macro> <cpp:value>do { printf(TYELLOW "IGN\n" TRESET); return MU_PASSED; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_end</name></cpp:macro> <cpp:value>do { printf(TGREEN "OK\n" TRESET); return MU_PASSED; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_cleanup_end</name></cpp:macro> <cpp:value>do { if(retval == MU_PASSED) { mu_end; } else { return retval; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_sysfail</name><parameter_list>(<parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { perror(message); mu_fail(message); } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_assert_eq</name><parameter_list>(<parameter><type><name>actual</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { __typeof__(actual) act__ = (actual); __typeof__(expected) exp__ = (expected); if ((exp__) != (act__)) { char _meqstr[2048]; sprintf(_meqstr, "%s: expected %" PFMT64d ", got %" PFMT64d ".", (message), (ut64)(exp__), (ut64)(act__)); mu_assert(_meqstr, false); } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_assert_neq</name><parameter_list>(<parameter><type><name>actual</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { char _meqstr[2048]; __typeof__(actual) act__ = (actual); __typeof__(expected) exp__ = (expected); sprintf(_meqstr, "%s: expected not %" PFMT64d ", got %" PFMT64d ".", (message), (exp__), (act__)); mu_assert(_meqstr, (exp__) != (act__)); } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_assert_ptreq</name><parameter_list>(<parameter><type><name>actual</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { char _meqstr[2048]; const void *act__ = (actual); const void *exp__ = (expected); sprintf (_meqstr, "%s: expected %p, got %p.", (message), (exp__), (act__)); mu_assert (_meqstr, (exp__) == (act__)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_assert_ptrneq</name><parameter_list>(<parameter><type><name>actual</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { char _meqstr[2048]; const void *act__ = (actual); const void *exp__ = (expected); sprintf (_meqstr, "%s: expected not %p, got %p.", (message), (exp__), (act__)); mu_assert (_meqstr, (exp__) != (act__)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_assert_null</name><parameter_list>(<parameter><type><name>actual</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { char _meqstr[2048]; const void *act__ = (actual); sprintf(_meqstr, "%s: expected to be NULL but it wasn't.", (message)); mu_assert(_meqstr, (act__) == NULL); } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_assert_notnull</name><parameter_list>(<parameter><type><name>actual</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { char _meqstr[2048]; const void *act__ = (actual); sprintf(_meqstr, "%s: expected to not be NULL but it was.", (message)); mu_assert(_meqstr, (act__) != NULL); } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_assert_eq_fmt</name><parameter_list>(<parameter><type><name>actual</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>, <parameter><type><name>message</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { __typeof__(actual) act__ = (actual); __typeof__(expected) exp__ = (expected); if ((exp__) != (act__)) { char _meqstr[2048]; sprintf(_meqstr, "%s: expected "fmt", got "fmt".", (message), (exp__), (act__)); mu_assert(_meqstr, false); } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_assert_streq</name><parameter_list>(<parameter><type><name>actual</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { char _meqstr[2048]; const char *act__ = (actual); const char *exp__ = (expected); sprintf(_meqstr, "%s: expected %s, got %s.", (message), (exp__), (act__)); mu_assert(_meqstr, strcmp((exp__), (act__)) == 0); } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_assert_nullable_streq</name><parameter_list>(<parameter><type><name>actual</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { char _meqstr[2048]; const char *act__ = (actual); const char *exp__ = (expected); sprintf(_meqstr, "%s: expected %s, got %s.", (message), (exp__ ? exp__ : "NULL"), (act__ ? act__ : "NULL")); mu_assert(_meqstr, ((act__) == NULL &amp;&amp; (exp__) == NULL) || ((act__) != NULL &amp;&amp; (exp__) != NULL &amp;&amp; strcmp((exp__), (act__)) == 0)); } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_assert_memeq</name><parameter_list>(<parameter><type><name>actual</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>, <parameter><type><name>len</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { char _meqstr[2048]; const ut8 *act__ = (actual); const ut8 *exp__ = (expected); sprintf(_meqstr, "%s: expected ", message); sprint_mem(_meqstr + strlen(_meqstr), (exp__), (len)); sprintf(_meqstr + strlen(_meqstr), ", got "); sprint_mem(_meqstr + strlen(_meqstr), (act__), (len)); mu_assert(_meqstr, memcmp((exp__), (act__), (len)) == 0); } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_run_test</name><parameter_list>(<parameter><type><name>test</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int result; printf(TBOLD #test TRESET " "); result = test(); tests_run++; tests_passed += result; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_cleanup_fail</name><parameter_list>(<parameter><type><name>label</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { mu_perror(message); retval = MU_ERR; goto label; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu_cleanup_sysfail</name><parameter_list>(<parameter><type><name>label</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { mu_psyserror(message); retval = MU_ERR; goto label; } while(0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>tests_run</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tests_passed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mu_test_status</name> <init>= <expr><name>MU_TEST_UNBROKEN</name></expr></init></decl>;</decl_stmt>

</unit>
