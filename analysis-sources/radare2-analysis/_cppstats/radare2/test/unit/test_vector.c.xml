<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\test\unit\test_vector.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_vector.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_init_test_vector</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>padding</name></decl></parameter>, <parameter><decl><type><name>RVectorFree</name></type> <name>free</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>free_user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_vector_init</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>free</name></expr></argument>, <argument><expr><name>free_user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_reserve</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_vector_push</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>capacity</name></name> <operator>==</operator> <name>len</name> <operator>+</operator> <name>padding</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_test_vector</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>len</name></type></parameter>, <parameter><type><name>padding</name></type></parameter>, <parameter><type><name>free</name></type></parameter>, <parameter><type><name>free_user</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ bool _r = _init_test_vector((v), (len), (padding), (free), (free_user)); mu_assert ("init_test_vector", _r); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_init_test_pvector</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>padding</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_reserve</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>capacity</name></name> <operator>==</operator> <name>len</name> <operator>+</operator> <name>padding</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_test_pvector</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>len</name></type></parameter>, <parameter><type><name>padding</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ bool _r = _init_test_pvector((v), (len), (padding)); mu_assert ("init_test_pvector", _r); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_init_test_pvector2</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>padding</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_reserve</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>capacity</name></name> <operator>==</operator> <name>len</name> <operator>+</operator> <name>padding</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_test_pvector2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>len</name></type></parameter>, <parameter><type><name>padding</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ bool _r = _init_test_pvector2((v), (len), (padding)); mu_assert ("init_test_pvector2", _r); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_vector_init</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_vector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>elem_size</name></name></expr></argument>, <argument><expr><literal type="number">42UL</literal></expr></argument>, <argument><expr><literal type="string">"init elem_size"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><literal type="string">"init len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>a</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"init a"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>capacity</name></name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><literal type="string">"init capacity"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>free</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"init free"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>free_user</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="string">"init free_user"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_vector_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>r_vector_new</name> <argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"new"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>elem_size</name></name></expr></argument>, <argument><expr><literal type="number">42UL</literal></expr></argument>, <argument><expr><literal type="string">"new elem_size"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><literal type="string">"new len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"new a"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><literal type="string">"new capacity"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>free</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"init free"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>free_user</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="string">"init free_user"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_TEST_COUNT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>elem_free_test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>e_val</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><name>e</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>acc</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e_val</name> <operator>&gt;</operator> <name>FREE_TEST_COUNT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>e_val</name> <operator>=</operator> <name>FREE_TEST_COUNT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>acc</name><index>[<expr><name>e_val</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_vector_clear</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>acc</name><index>[<expr><name>FREE_TEST_COUNT</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>FREE_TEST_COUNT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>elem_free_test</name></expr></argument>, <argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FREE_TEST_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"free individual elements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc</name><index>[<expr><name>FREE_TEST_COUNT</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"invalid free calls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_vector_free</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>r_vector_new</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>acc</name><index>[<expr><name>FREE_TEST_COUNT</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>FREE_TEST_COUNT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>elem_free_test</name></expr></argument>, <argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>FREE_TEST_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"free individual elements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc</name><index>[<expr><name>FREE_TEST_COUNT</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"invalid free calls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_vector_clone</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>v1</name> <init>= <expr><call><name>r_vector_clone</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"r_vector_clone"</literal></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v1</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_clone =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v1</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_clone =&gt; capacity"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"r_vector_clone =&gt; content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>r_vector_clone</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"r_vector_clone (+capacity)"</literal></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v1</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_clone (+capacity) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v1</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>, <argument><expr><literal type="number">10UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_clone (+capacity) =&gt; capacity"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"r_vector_clone =&gt; content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <literal type="number">1337</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_vector_empty</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_vector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>empty</name> <init>= <expr><call><name>r_vector_empty</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>empty</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"r_vector_init =&gt; r_vector_empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_vector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>empty</name> <operator>=</operator> <call><name>r_vector_empty</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>empty</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"r_vector_push =&gt; !r_vector_empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_pop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>empty</name> <operator>=</operator> <call><name>r_vector_empty</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>empty</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"r_vector_pop =&gt; r_vector_empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vp</name> <init>= <expr><call><name>r_vector_new</name> <argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>empty</name> <operator>=</operator> <call><name>r_vector_empty</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>empty</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"r_vector_new =&gt; r_vector_empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_vector_remove_at</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_vector_remove_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_remove_at =&gt; into"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">4UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_remove_at =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_remove_at =&gt; remaining elements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_remove_at =&gt; remaining elements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_remove_at =&gt; remaining elements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_remove_at =&gt; remaining elements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_remove_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_remove_at (end) =&gt; into"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">3UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_remove_at (end) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_remove_at (end) =&gt; remaining elements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_remove_at (end) =&gt; remaining elements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_remove_at (end) =&gt; remaining elements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_vector_insert</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>e</name> <init>= <expr><literal type="number">1337</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert =&gt; content at returned ptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert =&gt; content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_vector_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">1337</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (null) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (null) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (null) =&gt; content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (null) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (null) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (null) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">1337</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"r_vector_insert (resize) =&gt; capacity"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>capacity</name></name> <operator>&gt;=</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert =&gt; content at returned ptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (resize) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (resize) =&gt; content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (resize) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (resize) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (resize) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">1337</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end) =&gt; content at returned ptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end) =&gt; content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">1337</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"r_vector_insert (resize) =&gt; capacity"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>capacity</name></name> <operator>&gt;=</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end) =&gt; content at returned ptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end, resize) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end, resize) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end, resize) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end, resize) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end, resize) =&gt; content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_vector_insert_range</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name><name>range</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xEE</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_vector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_insert_range</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (empty) returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">3UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (empty) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xC0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (empty) =&gt; new content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (empty) =&gt; new content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xEE</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (empty) =&gt; new content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_insert_range</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">6UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xC0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range =&gt; new content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range =&gt; new content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xEE</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range =&gt; new content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_insert_range</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (null) returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">6UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (null) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xC0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xEE</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (null) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (null) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xC0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (null) =&gt; new content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (null) =&gt; new content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xEE</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (null) =&gt; new content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (null) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_insert_range</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (end) returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">6UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (end) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (end) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (end) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (end) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xC0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (end) =&gt; new content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (end) =&gt; new content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xEE</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (end) =&gt; new content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_insert_range</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (resize) returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">6UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (resize) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (resize) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (resize) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xC0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (resize) =&gt; new content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (resize) =&gt; new content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0xEE</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (resize) =&gt; new content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert_range (resize) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_vector_pop</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_vector_pop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop into"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">2UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop =&gt; remaining content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop =&gt; remaining content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_pop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop into"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop =&gt; remaining content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_pop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop (last) into"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop (last) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_vector_pop_front</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_vector_pop_front</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop_front into"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">2UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop_front =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop_front =&gt; remaining content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop_front =&gt; remaining content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_pop_front</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop_front into"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop_front =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop_front =&gt; remaining content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_pop_front</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop_front (last) into"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop_front (last) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_vector_push</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_vector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_vector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">1337</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push (null, empty, assign) =&gt; len == 1"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>e</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push (null, empty, assign) =&gt; content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">1337</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push (empty) =&gt; len == 1"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push (empty) =&gt; content at returned ptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push (empty) =&gt; content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0xDEAD</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">2UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push =&gt; len == 2"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0xDEAD</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push (empty) =&gt; content at returned ptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0xDEAD</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push =&gt; content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0xBEEF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">3UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push =&gt; len == 3"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0xBEEF</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push (empty) =&gt; content at returned ptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0xDEAD</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0xBEEF</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push =&gt; content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">1337</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"r_vector_push (resize) =&gt; capacity"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>capacity</name></name> <operator>&gt;=</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">6UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push (resize) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push (empty) =&gt; content at returned ptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>v</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"r_vector_push (resize) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push (resize) =&gt; content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_vector_push_front</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_vector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_vector_push_front</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">1337</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push_front (null, empty, assign) =&gt; len == 1"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>e</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push_front (null, empty, assign) =&gt; content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">1337</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_push_front</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push_front (empty) =&gt; len == 1"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push_front (empty) =&gt; content at returned ptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push (empty) =&gt; content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0xDEAD</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_push_front</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">2UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push_front =&gt; len == 2"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0xDEAD</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push_front (empty) =&gt; content at returned ptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0xDEAD</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push_front =&gt; content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push_front =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0xBEEF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_push_front</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">3UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push_front =&gt; len == 3"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0xBEEF</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push_front (empty) =&gt; content at returned ptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0xBEEF</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push_front =&gt; content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0xDEAD</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push_front =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push_front =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">1337</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_push_front</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"r_vector_push_front (resize) =&gt; capacity"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>capacity</name></name> <operator>&gt;=</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">6UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push_front (resize) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push_front (empty) =&gt; content at returned ptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>v</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push (resize) =&gt; old content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push (resize) =&gt; content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_vector_reserve</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_vector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_reserve</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>capacity</name></name></expr></argument>, <argument><expr><literal type="number">42UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_reserve (empty) =&gt; capacity"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"r_vector_reserve (empty) =&gt; a"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>v</name><operator>.</operator><name>capacity</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <literal type="number">1337</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_reserve</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>capacity</name></name></expr></argument>, <argument><expr><literal type="number">100UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_reserve =&gt; capacity"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"r_vector_reserve =&gt; a"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>v</name><operator>.</operator><name>capacity</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <literal type="number">1337</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_vector_shrink</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>r_vector_shrink</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>a</name></name></expr></argument>, <argument><expr><literal type="string">"r_vector_shrink ret"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_shrink =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>capacity</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_shrink =&gt; capacity"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>r_vector_shrink</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>a</name></name></expr></argument>, <argument><expr><literal type="string">"r_vector_shrink (already minimal) ret"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_shrink (already minimal) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>capacity</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_shrink (already minimal) =&gt; capacity"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_vector_foreach</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>acc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<macro><name>r_vector_foreach</name> <argument_list>(<argument>&amp;v</argument>, <argument>it</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc</name><index>[<expr><operator>*</operator><name>it</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"unset acc element"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>acc</name><index>[<expr><operator>*</operator><name>it</name></expr>]</index></name> <operator>=</operator> <name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"acc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_pvector_init</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>elem_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"elem_size"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><literal type="string">"len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>capacity</name></name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><literal type="string">"capacity"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>free_user</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"free"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_pvector_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>r_pvector_new</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>elem_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"elem_size"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><literal type="string">"len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>a</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>capacity</name></name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><literal type="string">"capacity"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>free_user</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"free"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_pvector_clear</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_pvector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"initial len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"initial a"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>capacity</name></name></expr></argument>, <argument><expr><literal type="number">10UL</literal></expr></argument>, <argument><expr><literal type="string">"initial capacity"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><literal type="string">"len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>capacity</name></name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><literal type="string">"capacity"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_pvector_free</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RPVector</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_pvector</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"initial len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"initial a"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>capacity</name></name></expr></argument>, <argument><expr><literal type="number">10UL</literal></expr></argument>, <argument><expr><literal type="string">"initial capacity"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_free</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_pvector_at</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_pvector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>e</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><call><name>r_pvector_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"at"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_pvector_set</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_pvector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"set"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"set"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_pvector_contains</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_pvector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_pvector_contains</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"contains"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_pvector_contains</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"!contains"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_pvector_remove_at</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_pvector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>r_pvector_remove_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"remove_at ret"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">4UL</literal></expr></argument>, <argument><expr><literal type="string">"remove_at =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"remove_at =&gt; remaining content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"remove_at =&gt; remaining content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"remove_at =&gt; remaining content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"remove_at =&gt; remaining content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_pvector_insert</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_pvector2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><call><name>r_pvector_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"insert =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"insert =&gt; content at returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"insert =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"insert =&gt; content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"insert =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"insert =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"insert =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_pvector2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><call><name>r_pvector_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"insert (resize) =&gt; capacity"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>capacity</name></name> <operator>&gt;=</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"insert (resize) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"insert (resize) =&gt; content at returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"insert (resize) =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"insert =&gt; content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"insert =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"insert =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"insert =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_pvector2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><call><name>r_pvector_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"insert (end) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"insert (end) =&gt; content at returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"insert (end) =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"insert (end) =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"insert (end) =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"insert (end) =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"insert (end) =&gt; content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_pvector2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><call><name>r_pvector_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"r_vector_insert (resize, resize) =&gt; capacity"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>capacity</name></name> <operator>&gt;=</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end, resize) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end, resize) =&gt; content at returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end, resize) =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end, resize) =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end, resize) =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end, resize) =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_insert (end, resize) =&gt; content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_pvector_insert_range</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>range</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xC0</literal></expr>, <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xFF</literal></expr>, <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xEE</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_pvector_insert_range</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"insert_range (empty) returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">3UL</literal></expr></argument>, <argument><expr><literal type="string">"insert_range (empty) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xC0</literal></expr></argument>, <argument><expr><literal type="string">"insert_range (empty) =&gt; new content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="string">"insert_range (empty) =&gt; new content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xEE</literal></expr></argument>, <argument><expr><literal type="string">"insert_range (empty) =&gt; new content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_pvector2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_pvector_insert_range</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"insert_range returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">6UL</literal></expr></argument>, <argument><expr><literal type="string">"insert_range =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"insert_range =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"insert_range =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xC0</literal></expr></argument>, <argument><expr><literal type="string">"insert_range =&gt; new content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="string">"insert_range =&gt; new content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xEE</literal></expr></argument>, <argument><expr><literal type="string">"insert_range =&gt; new content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"insert_range =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_pvector2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_pvector_insert_range</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"insert_range (end) returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">6UL</literal></expr></argument>, <argument><expr><literal type="string">"insert_range (end) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"insert_range (end) =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"insert_range (end) =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"insert_range (end) =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xC0</literal></expr></argument>, <argument><expr><literal type="string">"insert_range (end) =&gt; new content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="string">"insert_range (end) =&gt; new content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xEE</literal></expr></argument>, <argument><expr><literal type="string">"insert_range (end) =&gt; new content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_pvector2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_pvector_insert_range</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"insert_range (resize) returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">6UL</literal></expr></argument>, <argument><expr><literal type="string">"insert_range (resize) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"insert_range (resize) =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"insert_range (resize) =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xC0</literal></expr></argument>, <argument><expr><literal type="string">"insert_range (resize) =&gt; new content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="string">"insert_range (resize) =&gt; new content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xEE</literal></expr></argument>, <argument><expr><literal type="string">"insert_range (resize) =&gt; new content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"insert_range (resize) =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_pvector_pop</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_pvector2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>r_pvector_pop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"pop ret"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">2UL</literal></expr></argument>, <argument><expr><literal type="string">"pop =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"pop =&gt; remaining content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"pop =&gt; remaining content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>r_pvector_pop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"pop ret"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><literal type="string">"pop =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"pop =&gt; remaining content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>r_pvector_pop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"pop (last) into"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><literal type="string">"pop (last) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_pvector_pop_front</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_pvector2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>r_pvector_pop_front</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"pop_front into"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">2UL</literal></expr></argument>, <argument><expr><literal type="string">"pop_front =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"pop_front =&gt; remaining content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"pop_front =&gt; remaining content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>r_pvector_pop_front</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop_front into"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_pop_front =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"pop_front =&gt; remaining content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>r_pvector_pop_front</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"pop_front (last) into"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><literal type="string">"pop_front (last) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_pvector_push</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><literal type="string">"push (empty) =&gt; len == 1"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"push (empty) =&gt; content at returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push (empty) =&gt; content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xDEAD</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">2UL</literal></expr></argument>, <argument><expr><literal type="string">"push =&gt; len == 2"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xDEAD</literal></expr></argument>, <argument><expr><literal type="string">"push =&gt; content at returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"push =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xDEAD</literal></expr></argument>, <argument><expr><literal type="string">"push =&gt; content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xBEEF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">3UL</literal></expr></argument>, <argument><expr><literal type="string">"push =&gt; len == 3"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xBEEF</literal></expr></argument>, <argument><expr><literal type="string">"push =&gt; content at returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xDEAD</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xBEEF</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push =&gt; content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_pvector2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"push (resize) =&gt; capacity"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>capacity</name></name> <operator>&gt;=</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">6UL</literal></expr></argument>, <argument><expr><literal type="string">"push (resize) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"push (empty) =&gt; content at returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"push (resize) =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"r_vector_push (resize) =&gt; content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_pvector_push_front</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><call><name>r_pvector_push_front</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><literal type="string">"push_front (empty) =&gt; len == 1"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"push_front (empty) =&gt; content at returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"push_front (empty) =&gt; content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xDEAD</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><call><name>r_pvector_push_front</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">2UL</literal></expr></argument>, <argument><expr><literal type="string">"push_front =&gt; len == 2"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xDEAD</literal></expr></argument>, <argument><expr><literal type="string">"push_front (empty) =&gt; content at returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xDEAD</literal></expr></argument>, <argument><expr><literal type="string">"push_front =&gt; content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"push_front =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xBEEF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><call><name>r_pvector_push_front</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">3UL</literal></expr></argument>, <argument><expr><literal type="string">"push_front =&gt; len == 3"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xBEEF</literal></expr></argument>, <argument><expr><literal type="string">"push_front (empty) =&gt; content at returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xBEEF</literal></expr></argument>, <argument><expr><literal type="string">"push_front =&gt; content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xDEAD</literal></expr></argument>, <argument><expr><literal type="string">"push_front =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"push_front =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_test_pvector2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><call><name>r_pvector_push_front</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"push_front (resize) =&gt; capacity"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>capacity</name></name> <operator>&gt;=</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">6UL</literal></expr></argument>, <argument><expr><literal type="string">"push_front (resize) =&gt; len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"push_front (empty) =&gt; content at returned ptr"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"push_front (resize) =&gt; old content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1337</literal></expr></argument>, <argument><expr><literal type="string">"push_front (resize) =&gt; content"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_pvector_sort</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Charmander"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Squirtle"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Bulbasaur"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Meowth"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Caterpie"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_sort</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>RPVectorComparator</name><operator>)</operator> <name>strcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">5UL</literal></expr></argument>, <argument><expr><literal type="string">"sort len"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><literal type="string">"Bulbasaur"</literal></expr></argument>, <argument><expr><literal type="string">"sorted strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><literal type="string">"Caterpie"</literal></expr></argument>, <argument><expr><literal type="string">"sorted strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><literal type="string">"Charmander"</literal></expr></argument>, <argument><expr><literal type="string">"sorted strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><literal type="string">"Meowth"</literal></expr></argument>, <argument><expr><literal type="string">"sorted strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>, <argument><expr><literal type="string">"Squirtle"</literal></expr></argument>, <argument><expr><literal type="string">"sorted strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_pvector_foreach</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_test_pvector2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>acc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<macro><name>r_pvector_foreach</name> <argument_list>(<argument>&amp;v</argument>, <argument>it</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ev</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>e</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc</name><index>[<expr><name>ev</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"unset acc element"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>acc</name><index>[<expr><name>ev</name></expr>]</index></name> <operator>=</operator> <name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"acc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_pvector_upper_lower_bound</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>a</name><index>[]</index></name> <init>= <expr><block>{<expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">2</literal></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">4</literal></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">6</literal></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">8</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPVector</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>v</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x - y</cpp:value></cpp:define>

<expr_stmt><expr><call><name>r_pvector_lower_bound</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>CMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><call><name>r_pvector_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"lower_bound"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_lower_bound</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>CMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><call><name>r_pvector_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"lower_bound 2"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_lower_bound</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">6</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>CMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><call><name>r_pvector_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"lower_bound 3"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_lower_bound</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">9</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>CMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>v</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="string">"lower_bound 3"</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_upper_bound</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>CMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><call><name>r_pvector_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"upper_bound"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_upper_bound</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>CMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><call><name>r_pvector_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"upper_bound 2"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_upper_bound</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">6</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>CMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><call><name>r_pvector_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"upper_bound 3"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CMP</name></cpp:undef>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_vector_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_vector_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_vector_clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_vector_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_vector_clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_vector_empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_vector_remove_at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_vector_insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_vector_insert_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_vector_pop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_vector_pop_front</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_vector_push</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_vector_push_front</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_vector_reserve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_vector_shrink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_vector_foreach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_pvector_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_pvector_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_pvector_clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_pvector_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_pvector_at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_pvector_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_pvector_contains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_pvector_remove_at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_pvector_insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_pvector_insert_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_pvector_pop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_pvector_pop_front</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_pvector_push</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_pvector_push_front</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_pvector_sort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_pvector_foreach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_pvector_upper_lower_bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>all_tests</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
