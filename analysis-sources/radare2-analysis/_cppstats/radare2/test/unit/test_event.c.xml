<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\test\unit\test_event.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>last_data</name></decl>;</decl_stmt>

}</block></struct></type> <name>EventTestAcc</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callback_test</name><parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>EventTestAcc</name> <modifier>*</modifier></type><name>acc</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>last_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>last_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_event</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><call><name>r_event_new</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0x1337</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><literal type="string">"r_event_new ()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="string">"ev-&gt;user"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>EventTestAcc</name></type> <name>acc_all</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EventTestAcc</name></type> <name>acc_specific</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>REventCallbackHandle</name></type> <name>handle_all</name> <init>= <expr><call><name>r_event_hook</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>R_EVENT_ALL</name></expr></argument>, <argument><expr><name>callback_test</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acc_all</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>REventCallbackHandle</name></type> <name>handle_specific</name> <init>= <expr><call><name>r_event_hook</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>R_EVENT_META_SET</name></expr></argument>, <argument><expr><name>callback_test</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acc_specific</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_event_send</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>R_EVENT_META_DEL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0x4242</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc_all</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"all count after event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc_all</name><operator>.</operator><name>last_type</name></name></expr></argument>, <argument><expr><name>R_EVENT_META_DEL</name></expr></argument>, <argument><expr><literal type="string">"all type after event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>acc_all</name><operator>.</operator><name>last_data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0x4242</literal></expr></argument>, <argument><expr><literal type="string">"all type after event"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc_specific</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"specific count after other event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_event_send</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>R_EVENT_META_SET</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xdeadbeef</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc_all</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"all count after event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc_all</name><operator>.</operator><name>last_type</name></name></expr></argument>, <argument><expr><name>R_EVENT_META_SET</name></expr></argument>, <argument><expr><literal type="string">"all type after event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>acc_all</name><operator>.</operator><name>last_data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xdeadbeef</literal></expr></argument>, <argument><expr><literal type="string">"all type after event"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc_specific</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"specific count after event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc_specific</name><operator>.</operator><name>last_type</name></name></expr></argument>, <argument><expr><name>R_EVENT_META_SET</name></expr></argument>, <argument><expr><literal type="string">"specific type after event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>acc_specific</name><operator>.</operator><name>last_data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xdeadbeef</literal></expr></argument>, <argument><expr><literal type="string">"specific type after event"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_event_unhook</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>handle_all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_event_send</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>R_EVENT_META_SET</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xc0ffee</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc_all</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"all count after event after being removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc_all</name><operator>.</operator><name>last_type</name></name></expr></argument>, <argument><expr><name>R_EVENT_META_SET</name></expr></argument>, <argument><expr><literal type="string">"all type after event after being removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>acc_all</name><operator>.</operator><name>last_data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xdeadbeef</literal></expr></argument>, <argument><expr><literal type="string">"all type after event after being removed"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc_specific</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"specific count after event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc_specific</name><operator>.</operator><name>last_type</name></name></expr></argument>, <argument><expr><name>R_EVENT_META_SET</name></expr></argument>, <argument><expr><literal type="string">"specific type after event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>acc_specific</name><operator>.</operator><name>last_data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xc0ffee</literal></expr></argument>, <argument><expr><literal type="string">"specific type after event"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_event_unhook</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>handle_specific</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_event_send</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>R_EVENT_META_SET</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xc0ffee</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc_specific</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"specific count after event after being removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>acc_specific</name><operator>.</operator><name>last_type</name></name></expr></argument>, <argument><expr><name>R_EVENT_META_SET</name></expr></argument>, <argument><expr><literal type="string">"specific type after event after being removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>acc_specific</name><operator>.</operator><name>last_data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xc0ffee</literal></expr></argument>, <argument><expr><literal type="string">"specific type after event after being removed"</literal></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_event_free</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>all_tests</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
