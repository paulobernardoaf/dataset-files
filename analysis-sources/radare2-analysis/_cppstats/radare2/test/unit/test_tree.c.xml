<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\test\unit\test_tree.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>sum_node</name><parameter_list>(<parameter><decl><type><name>RTreeNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>RTreeVisitor</name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>vis</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vis</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><operator>(</operator><name>cur</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>n</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>add_to_list</name><parameter_list>(<parameter><decl><type><name>RTreeNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>RTreeVisitor</name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>RList</name> <operator>*</operator><operator>)</operator><name><name>vis</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_list</name><parameter_list>(<parameter><type><name>act</name></type></parameter>, <parameter><type><name>exp</name></type></parameter>, <parameter><type><name>descr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { RListIter *ita = r_list_iterator(act); RListIter *ite = r_list_iterator(exp); while (r_list_iter_next(ita) &amp;&amp; r_list_iter_next(ite)) { int a = (int)(intptr_t)r_list_iter_get(ita); int e = (int)(intptr_t)r_list_iter_get(ite); mu_assert_eq (a, e, descr); } mu_assert ("lists must have same elements", (!ita &amp;&amp; !ite)); } while (0)</cpp:value></cpp:define>

<function><type><name>bool</name></type> <name>test_r_tree</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RTreeVisitor</name></type> <name>calc</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTreeVisitor</name></type> <name>lister</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTree</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>r_tree_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>calc</name><operator>.</operator><name>pre_visit</name></name> <operator>=</operator> <operator>(</operator><name>RTreeNodeVisitCb</name><operator>)</operator><name>sum_node</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>calc</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_tree_add_node</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_tree_bfs</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>calc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>calc</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"calc.data.root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_tree_add_node</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RTreeNode</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_tree_add_node</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTreeNode</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>r_tree_add_node</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>calc</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_tree_bfs</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>calc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>calc</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"calc.data.childs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_tree_add_node</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_tree_add_node</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_tree_add_node</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lister</name><operator>.</operator><name>pre_visit</name></name> <operator>=</operator> <operator>(</operator><name>RTreeNodeVisitCb</name><operator>)</operator><name>add_to_list</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>exp1</name> <init>= <expr><call><name>r_list_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp1</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp1</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp1</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp1</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp1</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp1</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp1</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lister</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>r_list_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_tree_bfs</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lister</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_list</name><argument_list>(<argument><expr><operator>(</operator><name>RList</name> <operator>*</operator><operator>)</operator><name><name>lister</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>exp1</name></expr></argument>, <argument><expr><literal type="string">"lister.bfs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name><argument_list>(<argument><expr><name>exp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name><argument_list>(<argument><expr><operator>(</operator><name>RList</name> <operator>*</operator><operator>)</operator><name><name>lister</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>exp2</name> <init>= <expr><call><name>r_list_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp2</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp2</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp2</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp2</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp2</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp2</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp2</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lister</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>r_list_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_tree_dfs</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lister</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_list</name><argument_list>(<argument><expr><operator>(</operator><name>RList</name> <operator>*</operator><operator>)</operator><name><name>lister</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>exp2</name></expr></argument>, <argument><expr><literal type="string">"lister.preorder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name><argument_list>(<argument><expr><name>exp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name><argument_list>(<argument><expr><operator>(</operator><name>RList</name> <operator>*</operator><operator>)</operator><name><name>lister</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_tree_reset</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RTreeNode</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>r_tree_add_node</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTreeNode</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><call><name>r_tree_add_node</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"first"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_tree_add_node</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"second"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_tree_add_node</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"third"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_tree_add_node</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><literal type="string">"f_first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_tree_add_node</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><literal type="string">"f_second"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>exp3</name> <init>= <expr><call><name>r_list_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp3</name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp3</name></expr></argument>, <argument><expr><literal type="string">"first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp3</name></expr></argument>, <argument><expr><literal type="string">"f_first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp3</name></expr></argument>, <argument><expr><literal type="string">"f_second"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp3</name></expr></argument>, <argument><expr><literal type="string">"second"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp3</name></expr></argument>, <argument><expr><literal type="string">"third"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lister</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>r_list_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_tree_dfs</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lister</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_list</name><argument_list>(<argument><expr><operator>(</operator><name>RList</name> <operator>*</operator><operator>)</operator><name><name>lister</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>exp3</name></expr></argument>, <argument><expr><literal type="string">"lister.reset.preorder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name><argument_list>(<argument><expr><name>exp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name><argument_list>(<argument><expr><operator>(</operator><name>RList</name> <operator>*</operator><operator>)</operator><name><name>lister</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_tree_free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mu_run_test</name><argument_list>(<argument><expr><name>test_r_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>all_tests</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
