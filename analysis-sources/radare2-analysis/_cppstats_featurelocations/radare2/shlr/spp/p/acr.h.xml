<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\spp\p\acr.h">

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>pkgname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>version</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>slurp_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>slurp_args</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>slurp_ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>slurp_ptr</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slurp_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>acr_default</argument>)</argument_list></macro> <block>{

<if_stmt><if>if <condition>(<expr><call><name>slurp_args</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"PKGNAME"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slurp_ptr</name> <operator>=</operator> <operator>&amp;</operator><name>pkgname</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"VERSION"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slurp_ptr</name> <operator>=</operator> <operator>&amp;</operator><name>version</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
}

static <macro><name>TAG_CALLBACK</name><argument_list>(<argument>acr_eof</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Report:\n pkgname: %s\n version: %s\n"</literal></expr></argument>, <argument><expr><name>pkgname</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<decl_stmt><decl><type><name>DLL_LOCAL</name> <name><name>struct</name> <name>Tag</name></name></type> <name><name>acr_tags</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>acr_default</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DLL_LOCAL</name> <name><name>struct</name> <name>Arg</name></name></type> <name><name>acr_args</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DLL_LOCAL</name> <name><name>struct</name> <name>Proc</name></name></type> <name>acr_proc</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"acr"</literal></expr>,
<expr><operator>.</operator><name>tags</name> <operator>=</operator> <operator>(</operator>struct <name>Tag</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>acr_tags</name></expr>,
<expr><operator>.</operator><name>args</name> <operator>=</operator> <operator>(</operator>struct <name>Arg</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>acr_args</name></expr>,
<expr><operator>.</operator><name>token</name> <operator>=</operator> <literal type="string">" "</literal></expr>,
<expr><operator>.</operator><name>eof</name> <operator>=</operator> <operator>&amp;</operator><name>acr_eof</name></expr>,
<expr><operator>.</operator><name>tag_pre</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>tag_post</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>multiline</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>default_echo</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>chop</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>tag_begin</name> <operator>=</operator> <literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
