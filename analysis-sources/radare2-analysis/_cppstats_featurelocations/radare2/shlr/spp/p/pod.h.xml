<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\spp\p\pod.h">

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>pod_default</argument>)</argument_list></macro> <block>{
<expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"DEFAULT: (%s)\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>pod_cut</argument>)</argument_list></macro> <block>{
<expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>pod_head1</argument>)</argument_list></macro> <block>{
<expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;
<expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block>
<call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
}

static <decl_stmt><decl><type><name><name>struct</name> <name>Tag</name></name></type> <name><name>pod_tags</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"head1"</literal></expr>, <expr><name>pod_head1</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cut"</literal></expr>, <expr><name>pod_cut</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>pod_default</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>Arg</name></name></type> <name><name>pod_args</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DLL_LOCAL</name> <name><name>struct</name> <name>Proc</name></name></type> <name>pod_proc</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"pod"</literal></expr>,
<expr><operator>.</operator><name>tags</name> <operator>=</operator> <operator>(</operator>struct <name>Tag</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pod_tags</name></expr>,
<expr><operator>.</operator><name>args</name> <operator>=</operator> <operator>(</operator>struct <name>Arg</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pod_args</name></expr>,
<expr><operator>.</operator><name>token</name> <operator>=</operator> <literal type="string">" "</literal></expr>,
<expr><operator>.</operator><name>eof</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>tag_pre</name> <operator>=</operator> <literal type="string">"="</literal></expr>,
<expr><operator>.</operator><name>tag_post</name> <operator>=</operator> <literal type="string">"\n"</literal></expr>,
<expr><operator>.</operator><name>multiline</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>default_echo</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>chop</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>tag_begin</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
