<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\spp\p\cpp.h">

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>cpp_default</argument>)</argument_list></macro> <block>{
<expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"DEFAULT: (%s)\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>cpp_error</argument>)</argument_list></macro> <block>{
<expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s (line=%d)\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
}

static <macro><name>TAG_CALLBACK</name><argument_list>(<argument>cpp_warning</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"WARNING: line %d: %s\n"</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>cpp_if</argument>)</argument_list></macro> <block>{
<expr><name>char</name> <operator>*</operator><name>var</name> <operator>=</operator> <call><name>getenv</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="char">'!'</literal><operator>)</operator> <operator>?</operator> <literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>var</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>var</name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
}

static <macro><name>TAG_CALLBACK</name><argument_list>(<argument>cpp_ifdef</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>getenv</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>var</name></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>cpp_else</argument>)</argument_list></macro> <block>{
<expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name><operator>?</operator> <literal type="number">0</literal><operator>:</operator> <literal type="number">1</literal></expr>;
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>cpp_ifndef</argument>)</argument_list></macro> <block>{
<expr><call><name>cpp_ifdef</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>cpp_else</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></expr></expr_stmt>

<struct><specifier>static</specifier> struct <name>cpp_macro_t</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>body</name></decl>;</decl_stmt>
}</block> <decl><name><name>cpp_macros</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_macros_n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cpp_macro_add</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>body</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cpp_macros</name><index>[<expr><name>cpp_macros_n</name></expr>]</index></name><operator>.</operator><name>args</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpp_macros</name><index>[<expr><name>cpp_macros_n</name></expr>]</index></name><operator>.</operator><name>body</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cpp_macros</name><index>[<expr><name>cpp_macros_n</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cpp_macros_n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <macro><name>PUT_CALLBACK</name><argument_list>(<argument>cpp_fputs</argument>)</argument_list></macro> <block>{
<expr><name>int</name> <name>i</name></expr>;
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cpp_macros_n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>cpp_macros</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"MACRO (%s) HIT\n"</literal></expr></argument>,
<argument><expr><name><name>cpp_macros</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt></block_content></block></for>}</block></expr></expr_stmt>
}
out_printf <expr_stmt><expr><operator>(</operator><name>out</name><operator>,</operator> <literal type="string">"%s"</literal><operator>,</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
}

static <macro><name>TAG_CALLBACK</name><argument_list>(<argument>cpp_define</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eq</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>eq</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>eq</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>macro</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>eq</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>macro</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>macro</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid syntax\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"REGISTER MACRO:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" name: %s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" args: %s\n"</literal></expr></argument>, <argument><expr><name>macro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" body: %s\n"</literal></expr></argument>, <argument><expr><name>ptr</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cpp_macro_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>macro</name></expr></argument>,<argument><expr><name>ptr</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_sys_setenv</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>r_sys_setenv</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>cpp_endif</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>cpp_include</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>spp_file</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
}

DLL_LOCAL <decl_stmt><decl><type><name><name>struct</name> <name>Tag</name></name></type> <name><name>cpp_tags</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"ifdef"</literal></expr>, <expr><name>cpp_ifdef</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ifndef"</literal></expr>, <expr><name>cpp_ifndef</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"endif"</literal></expr>, <expr><name>cpp_endif</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"if"</literal></expr>, <expr><name>cpp_if</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"else"</literal></expr>, <expr><name>cpp_else</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"include"</literal></expr>, <expr><name>cpp_include</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"define"</literal></expr>, <expr><name>cpp_define</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"error"</literal></expr>, <expr><name>cpp_error</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"warning"</literal></expr>, <expr><name>cpp_warning</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>cpp_default</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><specifier>static</specifier> <macro><name>ARG_CALLBACK</name><argument_list>(<argument>cpp_arg_i</argument>)</argument_list></macro> <block>{
<expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"INCLUDEDIR(%s)\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>ARG_CALLBACK</name><argument_list>(<argument>cpp_arg_d</argument>)</argument_list></macro> <block>{

<expr><name>char</name> <operator>*</operator><name>eq</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>eq</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>eq</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_sys_setenv</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>eq</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_setenv</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
}

static <decl_stmt><decl><type><name><name>struct</name> <name>Arg</name></name></type> <name><name>cpp_args</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"-I"</literal></expr>, <expr><literal type="string">"add include directory"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>cpp_arg_i</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-D"</literal></expr>, <expr><literal type="string">"define value of variable"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>cpp_arg_d</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DLL_LOCAL</name> <name><name>struct</name> <name>Proc</name></name></type> <name>cpp_proc</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"cpp"</literal></expr>,
<expr><operator>.</operator><name>tags</name> <operator>=</operator> <operator>(</operator>struct <name>Tag</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>cpp_tags</name></expr>,
<expr><operator>.</operator><name>args</name> <operator>=</operator> <operator>(</operator>struct <name>Arg</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>cpp_args</name></expr>,
<expr><operator>.</operator><name>token</name> <operator>=</operator> <literal type="string">" "</literal></expr>,
<expr><operator>.</operator><name>eof</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>tag_pre</name> <operator>=</operator> <literal type="string">"#"</literal></expr>,
<expr><operator>.</operator><name>tag_post</name> <operator>=</operator> <literal type="string">"\n"</literal></expr>,
<expr><operator>.</operator><name>multiline</name> <operator>=</operator> <literal type="string">"\\\n"</literal></expr>,
<expr><operator>.</operator><name>default_echo</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>fputs</name> <operator>=</operator> <name>cpp_fputs</name></expr>,
<expr><operator>.</operator><name>chop</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>tag_begin</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
