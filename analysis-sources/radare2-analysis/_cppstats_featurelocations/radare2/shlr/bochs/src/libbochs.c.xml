<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\bochs\src\libbochs.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libbochs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>lpTmpBuffer</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_BUF</name></cpp:macro> <cpp:value>0x5800 * 2</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>lib</name><name>,</name> <cpp:literal>"user32.lib"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type> <name>RunRemoteThread_</name><parameter_list>(<parameter><decl><type><name>libbochs_t</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>lpBuffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>dwSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>lpExitCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LPVOID</name></type> <name>pProcessMemory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hInjectThread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIZE_T</name></type> <name>NumberOfBytesWritten</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pProcessMemory</name> <operator>=</operator> <call><name>VirtualAllocEx</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>processInfo</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dwSize</name></expr></argument>, <argument><expr><literal type="number">0x1000u</literal></expr></argument>, <argument><expr><literal type="number">0x40u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pProcessMemory</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>WriteProcessMemory</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>processInfo</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name>pProcessMemory</name></expr></argument>, <argument><expr><name>lpBuffer</name></expr></argument>, <argument><expr><name>dwSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>NumberOfBytesWritten</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hInjectThread</name> <operator>=</operator> <call><name>CreateRemoteThread</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>processInfo</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pProcessMemory</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hInjectThread</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WaitForSingleObject</name> <argument_list>(<argument><expr><name>hInjectThread</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>a4</name> <operator>||</operator> <call><name>ReadProcessMemory</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>processInfo</name><operator>.</operator><name>hProcess</name></name></expr></argument>,
<argument><expr><name>pProcessMemory</name></expr></argument>, <argument><expr><operator>(</operator><name>PVOID</name><operator>)</operator><name>lpBuffer</name></expr></argument>, <argument><expr><name>dwSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>NumberOfBytesWritten</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lpExitCode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GetExitCodeThread</name> <argument_list>(<argument><expr><name>hInjectThread</name></expr></argument>, <argument><expr><operator>(</operator><name>PDWORD</name><operator>)</operator><name>lpExitCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>VirtualFreeEx</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>processInfo</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name>pProcessMemory</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x8000u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hInjectThread</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>hInjectThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>bochs_reset_buffer</name><parameter_list>(<parameter><decl><type><name>libbochs_t</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIZE_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>punteroBuffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>bochs_cmd_stop</name><parameter_list>(<parameter><decl><type><name>libbochs_t</name> <modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>hKernel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ExitCode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>apiOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, 
<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x30</literal></expr>, 
<expr><literal type="number">0xC3</literal></expr>, 
<expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xfe</literal></expr> 
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hKernel</name> <operator>=</operator> <call><name>GetModuleHandle</name> <argument_list>(<argument><expr><call><name>TEXT</name> <argument_list>(<argument><expr><literal type="string">"kernel32"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>apiOffset</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>hKernel</name></expr></argument>, <argument><expr><literal type="string">"GenerateConsoleCtrlEvent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>DWORD</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">20</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <name>apiOffset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ExitCode</name> <operator>=</operator> <call><name>RunRemoteThread_</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0x1Eu</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ExitCode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ExitCode</name></expr>;</expr_stmt>
<return>return <expr><name>ExitCode</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>bochs_wait</name><parameter_list>(<parameter><decl><type><name>libbochs_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>times</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwRead</name></decl>, <decl><type ref="prev"/><name>aval</name></decl>, <decl><type ref="prev"/><name>leftm</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bochs_reset_buffer</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<do>do <block>{<block_content>
<while>while <condition>(<expr><call><name>PeekNamedPipe</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>hReadPipeIn</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>leftm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>aval</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadFile</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>hReadPipeIn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>punteroBuffer</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>SIZE_BUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwRead</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lprintf</name><argument_list>(<argument><expr><literal type="string">"bochs_wait: ERROR reading from pipe.\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dwRead</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>punteroBuffer</name></name> <operator>+=</operator><name>dwRead</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;bochs:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Sleep</name> <argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>times</name></expr>)</condition>;</do>
<return>return <expr><name>true</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bochs_reset_buffer</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>fcntl</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>hReadPipeIn</name></name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fcntl</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>hReadPipeIn</name></name></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>|</operator> <name>O_NONBLOCK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>hReadPipeIn</name></name></expr></argument>, <argument><expr><name>lpTmpBuffer</name></expr></argument>, <argument><expr><name>SIZE_BUF</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lpTmpBuffer</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>punteroBuffer</name></name> <operator>+</operator> <name>n</name> <operator>&gt;=</operator> <name>SIZE_BUF</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bochs_reset_buffer</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>punteroBuffer</name></name></expr></argument>, <argument><expr><name>lpTmpBuffer</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>punteroBuffer</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"&lt;bochs:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fcntl</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>hReadPipeIn</name></name></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>|</operator> <operator>~</operator><name>O_NONBLOCK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bochs_send_cmd</name><parameter_list>(<parameter><decl><type><name>libbochs_t</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>bWait</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdbuff</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bochs_reset_buffer</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cmdlen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>cmdbuff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwWritten</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WriteFile</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>hWritePipeOut</name></name></expr></argument>, <argument><expr><name>cmdbuff</name></expr></argument>, <argument><expr><name>cmdlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwWritten</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>write</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>hWritePipeOut</name></name></expr></argument>, <argument><expr><name>cmdbuff</name></expr></argument>, <argument><expr><name>cmdlen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>cmdlen</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"boch_send_cmd failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bWait</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bochs_wait</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>beach</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmdbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<function><type><name>int</name></type> <name>bochs_read</name><parameter_list>(<parameter><decl><type><name>libbochs_t</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lenRec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ini</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pbuf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>totalread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>totalread</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>count</name> <operator>&gt;</operator><name>SIZE_BUF</name> <operator>/</operator> <literal type="number">3</literal><operator>)</operator></expr>?</condition><then> <expr><name>SIZE_BUF</name> <operator>/</operator> <literal type="number">3</literal></expr></then><else>: <expr><name>count</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"xp /%imb 0x%016"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><name>totalread</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bochs_send_cmd</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"[bochs]:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"bochs_read: Can't find bochs prompt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lenRec</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"[bochs]:"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt> 
<do>do <block>{<block_content>
<while>while <condition>(<expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>lenRec</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>ini</name> <operator>=</operator> <operator>++</operator><name>i</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator><literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="number">0xd</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>lenRec</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>fin</name> <operator>=</operator> <name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>fin</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pbuf</name> <operator>+=</operator> <call><name>r_hex_str2bin</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>ini</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>pbuf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> 
</block_content>}</block> while <condition>(<expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>lenRec</name></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bochs_close</name><parameter_list>(<parameter><decl><type><name>libbochs_t</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>isRunning</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>hReadPipeIn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>hReadPipeOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>hWritePipeIn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>hWritePipeOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>ghWriteEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TerminateProcess</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>processInfo</name><operator>.</operator><name>hProcess</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lpTmpBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>hReadPipeIn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>hWritePipeOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kill</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>lpTmpBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>bochs_open</name><parameter_list>(<parameter><decl><type><name>libbochs_t</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>pathBochs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>pathConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>SIZE_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lpTmpBuffer</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>SIZE_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lpTmpBuffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>_SECURITY_ATTRIBUTES</name></name></type> <name>PipeAttributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>commandline</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>PipeAttributes</name><operator>.</operator><name>nLength</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PipeAttributes</name><operator>.</operator><name>bInheritHandle</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PipeAttributes</name><operator>.</operator><name>lpSecurityDescriptor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CreatePipe</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>hReadPipeIn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>hReadPipeOut</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PipeAttributes</name></expr></argument>, <argument><expr><name>SIZE_BUF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>CreatePipe</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>hWritePipeIn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>hWritePipeOut</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PipeAttributes</name></expr></argument>, <argument><expr><name>SIZE_BUF</name></expr></argument>)</argument_list></call></expr>
)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>LPTSTR</name></type> <name>commandline_</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>STARTUPINFOA</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>processInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>PROCESS_INFORMATION</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>STARTUPINFOA</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hStdError</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>hReadPipeOut</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hStdOutput</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>hReadPipeOut</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hStdInput</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>hWritePipeIn</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>dwFlags</name></name> <operator>|=</operator> <name>STARTF_USESTDHANDLES</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>commandline</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>commandline</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\"%s\" -f \"%s\" -q "</literal></expr></argument>, <argument><expr><name>pathBochs</name></expr></argument>, <argument><expr><name>pathConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lprintf</name> <argument_list>(<argument><expr><literal type="string">"*** Creating process: %s\n"</literal></expr></argument>, <argument><expr><name>commandline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>commandline_</name> <operator>=</operator> <call><name>r_sys_conv_utf8_to_win</name> <argument_list>(<argument><expr><name>commandline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CreateProcess</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>commandline_</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>CREATE_NEW_CONSOLE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>processInfo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lprintf</name> <argument_list>(<argument><expr><literal type="string">"Process created\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WaitForInputIdle</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>processInfo</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lprintf</name> <argument_list>(<argument><expr><literal type="string">"Initialized input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>isRunning</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bochs_reset_buffer</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Waiting for bochs...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bochs_wait</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Ready.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bochs_close</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>commandline_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIPE_READ</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIPE_WRITE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name><name>aStdinPipe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>aStdoutPipe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nChild</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pipe</name> <argument_list>(<argument><expr><name>aStdinPipe</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: allocating pipe for child input redirect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>aStdoutPipe</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>aStdinPipe</name><index>[<expr><name>PIPE_READ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>aStdinPipe</name><index>[<expr><name>PIPE_WRITE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: allocating pipe for child output redirect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nChild</name> <operator>=</operator> <call><name>fork</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>nChild</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>dup2</name> <argument_list>(<argument><expr><name><name>aStdinPipe</name><index>[<expr><name>PIPE_READ</name></expr>]</index></name></expr></argument>, <argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: redirecting stdin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>dup2</name> <argument_list>(<argument><expr><name><name>aStdoutPipe</name><index>[<expr><name>PIPE_WRITE</name></expr>]</index></name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: redirecting stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>dup2</name> <argument_list>(<argument><expr><name><name>aStdoutPipe</name><index>[<expr><name>PIPE_WRITE</name></expr>]</index></name></expr></argument>, <argument><expr><name>STDERR_FILENO</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: redirecting stderr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>aStdinPipe</name><index>[<expr><name>PIPE_READ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>aStdinPipe</name><index>[<expr><name>PIPE_WRITE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>aStdoutPipe</name><index>[<expr><name>PIPE_READ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>aStdoutPipe</name><index>[<expr><name>PIPE_WRITE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>execl</name> <argument_list>(<argument><expr><name>pathBochs</name></expr></argument>, <argument><expr><name>pathBochs</name></expr></argument>, <argument><expr><literal type="string">"-q"</literal></expr></argument>, <argument><expr><literal type="string">"-f"</literal></expr></argument>, <argument><expr><name>pathConfig</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"execl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nChild</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>aStdinPipe</name><index>[<expr><name>PIPE_READ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>aStdoutPipe</name><index>[<expr><name>PIPE_WRITE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read</name> <argument_list>(<argument><expr><name><name>aStdoutPipe</name><index>[<expr><name>PIPE_READ</name></expr>]</index></name></expr></argument>, <argument><expr><name>lpTmpBuffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"boch_open failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bochs_close</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>hReadPipeIn</name></name> <operator>=</operator> <name><name>aStdoutPipe</name><index>[<expr><name>PIPE_READ</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>hWritePipeOut</name></name> <operator>=</operator> <name><name>aStdinPipe</name><index>[<expr><name>PIPE_WRITE</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>isRunning</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bochs_reset_buffer</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Waiting for bochs...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bochs_wait</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Ready.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>nChild</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bochs_close</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>aStdinPipe</name><index>[<expr><name>PIPE_READ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>aStdinPipe</name><index>[<expr><name>PIPE_WRITE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>aStdoutPipe</name><index>[<expr><name>PIPE_READ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>aStdoutPipe</name><index>[<expr><name>PIPE_WRITE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function></block_content></block></function>
</unit>
