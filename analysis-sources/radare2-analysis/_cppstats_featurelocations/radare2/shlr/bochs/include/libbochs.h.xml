<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\bochs\include\libbochs.h">
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBBOCHS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBBOCHS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>libbochs_t</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>punteroBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sizeSend</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hReadPipeIn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hReadPipeOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hWritePipeIn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hWritePipeOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>ghWriteEvent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>processInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STARTUPINFO</name></type> <name>info</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>hReadPipeIn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hReadPipeOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hWritePipeIn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hWritePipeOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>bool</name></type> <name>isRunning</name></decl>;</decl_stmt>
}</block></struct></type> <name>libbochs_t</name>;</typedef>




<function_decl><type><name>bool</name></type> <name>bochs_wait</name><parameter_list>(<parameter><decl><type><name>libbochs_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bochs_reset_buffer</name><parameter_list>(<parameter><decl><type><name>libbochs_t</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>bochs_cmd_stop</name><parameter_list>(<parameter><decl><type><name>libbochs_t</name> <modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bochs_send_cmd</name><parameter_list>(<parameter><decl><type><name>libbochs_t</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>comando</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>bWait</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>bochs_read</name><parameter_list>(<parameter><decl><type><name>libbochs_t</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bochs_close</name><parameter_list>(<parameter><decl><type><name>libbochs_t</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>bochs_open</name><parameter_list>(<parameter><decl><type><name>libbochs_t</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rutaBochs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rutaConfig</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_DEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ENABLE_DEBUG</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lprintf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ FILE *fd;fd=fopen("bochs.io.log", "a"); if (fd) {fprintf(fd,x,##y);fflush(fd);fclose(fd); }}</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lprintf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{}</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lprintf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
