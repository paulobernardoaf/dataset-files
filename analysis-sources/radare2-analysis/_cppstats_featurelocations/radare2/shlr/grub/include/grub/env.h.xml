<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\include\grub\env.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_ENV_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_ENV_HEADER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/symbol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/menu.h&gt;</cpp:file></cpp:include>

<struct_decl>struct <name>grub_env_var</name>;</struct_decl>

<typedef>typedef <function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>grub_env_read_hook_t</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_env_var</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>grub_env_write_hook_t</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_env_var</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>grub_env_var</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_env_read_hook_t</name></type> <name>read_hook</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_env_write_hook_t</name></type> <name>write_hook</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_env_var</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_env_var</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>prevp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>global</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>grub_err_t</name></type> <name>grub_env_set</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>grub_env_get</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grub_env_unset</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grub_env_iterate</name> <parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_env_var</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>grub_env_var</name></name> <modifier>*</modifier></type><name>grub_env_find</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>grub_err_t</name></type> <name>grub_register_variable_hook</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>grub_env_read_hook_t</name></type> <name>read_hook</name></decl></parameter>,
<parameter><decl><type><name>grub_env_write_hook_t</name></type> <name>write_hook</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>grub_err_t</name></type> <name>grub_env_context_open</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>export</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>grub_err_t</name></type> <name>grub_env_context_close</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>grub_err_t</name></type> <name>grub_env_export</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>menu_pointer</name>
<block>{
<decl_stmt><decl><type><name>grub_menu_t</name></type> <name>menu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>menu_pointer</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>menu_pointer</name></name> <modifier>*</modifier></type><name>grub_current_menu</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>grub_env_unset_menu</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>grub_current_menu</name><operator>-&gt;</operator><name>menu</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>grub_menu_t</name></type>
<name>grub_env_get_menu</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>grub_current_menu</name><operator>-&gt;</operator><name>menu</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>grub_env_set_menu</name> <parameter_list>(<parameter><decl><type><name>grub_menu_t</name></type> <name>nmenu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>grub_current_menu</name><operator>-&gt;</operator><name>menu</name></name> <operator>=</operator> <name>nmenu</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
