<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\include\grub\lvm.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_LVM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_LVM_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_LVM_ID_STRLEN</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>

<struct>struct <name>grub_lvm_vg</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>id</name><index>[<expr><name>GRUB_LVM_ID_STRLEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extent_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_lvm_pv</name></name> <modifier>*</modifier></type><name>pvs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_lvm_lv</name></name> <modifier>*</modifier></type><name>lvs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_lvm_vg</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>grub_lvm_pv</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>id</name><index>[<expr><name>GRUB_LVM_ID_STRLEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>grub_lvm_pv</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>grub_lvm_lv</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>segment_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_lvm_segment</name></name> <modifier>*</modifier></type><name>segments</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>grub_lvm_vg</name></name> <modifier>*</modifier></type><name>vg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_lvm_lv</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>grub_lvm_segment</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>start_extent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>extent_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>stripe_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>stripe_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_lvm_stripe</name></name> <modifier>*</modifier></type><name>stripes</name></decl>;</decl_stmt> 
}</block>;</struct>

<struct>struct <name>grub_lvm_stripe</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_lvm_pv</name></name> <modifier>*</modifier></type><name>pv</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_LVM_LABEL_SIZE</name></cpp:macro> <cpp:value>GRUB_DISK_SECTOR_SIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_LVM_LABEL_SCAN_SECTORS</name></cpp:macro> <cpp:value>4L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_LVM_LABEL_ID</name></cpp:macro> <cpp:value>"LABELONE"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_LVM_LVM2_LABEL</name></cpp:macro> <cpp:value>"LVM2 001"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_LVM_ID_LEN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>


<struct>struct <name>grub_lvm_label_header</name> <block>{
<decl_stmt><decl><type><name>grub_int8_t</name></type> <name><name>id</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>sector_xl</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>crc_xl</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>offset_xl</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>grub_int8_t</name></type> <name><name>type</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>


<struct>struct <name>grub_lvm_disk_locn</name> <block>{
<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>size</name></decl>;</decl_stmt> 
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>



<struct>struct <name>grub_lvm_pv_header</name> <block>{
<decl_stmt><decl><type><name>grub_int8_t</name></type> <name><name>pv_uuid</name><index>[<expr><name>GRUB_LVM_ID_LEN</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>device_size_xl</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name><name>struct</name> <name>grub_lvm_disk_locn</name></name></type> <name><name>disk_areas_xl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_LVM_FMTT_MAGIC</name></cpp:macro> <cpp:value>"\040\114\126\115\062\040\170\133\065\101\045\162\060\116\052\076"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_LVM_FMTT_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_LVM_MDA_HEADER_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>


<struct>struct <name>grub_lvm_raw_locn</name> <block>{
<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>checksum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>filler</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>



<struct>struct <name>grub_lvm_mda_header</name> <block>{
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>checksum_xl</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>grub_int8_t</name></type> <name><name>magic</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>grub_lvm_raw_locn</name></name></type> <name><name>raw_locns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
