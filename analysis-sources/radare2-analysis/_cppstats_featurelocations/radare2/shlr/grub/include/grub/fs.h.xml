<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\include\grub\fs.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_FS_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_FS_HEADER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/device.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/symbol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/list.h&gt;</cpp:file></cpp:include>


<struct_decl>struct <name>grub_file</name>;</struct_decl>

<struct>struct <name>grub_dirhook_info</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dir</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mtimeset</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>case_insensitive</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_int32_t</name></type> <name>mtime</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>grub_fs</name>
<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fs</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>


<function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>dir</name>) <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_dirhook_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>open</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>grub_ssize_t</name></type> (<modifier>*</modifier><name>read</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>grub_size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>close</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>label</name>) <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>uuid</name>) <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>uuid</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>mtime</name>) <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>grub_int32_t</name> <modifier>*</modifier></type><name>timebuf</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_UTIL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>reserved_first_sector</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>grub_fs</name></name> <modifier>*</modifier></type><name>grub_fs_t</name>;</typedef>


<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>grub_fs</name></name></type> <name>grub_fs_blocklist</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>grub_fs_autoload_hook_t</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>extern</specifier> <name>grub_fs_autoload_hook_t</name></type> <name>grub_fs_autoload_hook</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>grub_fs_t</name></type> <name>grub_fs_list</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>grub_fs_iterate</name> <parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>grub_fs_t</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_list_iterate</name> <argument_list>(<argument><expr><call><name>GRUB_AS_LIST</name> <argument_list>(<argument><expr><name>grub_fs_list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>grub_list_hook_t</name><operator>)</operator> <name>hook</name></expr></argument>,
<argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>grub_fs_t</name></type> <name>grub_fs_probe</name> <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
