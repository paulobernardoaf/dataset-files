<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\include\grub\raid.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_RAID_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_RAID_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_RAID_MAX_DEVICES</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_RAID_LAYOUT_LEFT_ASYMMETRIC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_RAID_LAYOUT_RIGHT_ASYMMETRIC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_RAID_LAYOUT_LEFT_SYMMETRIC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_RAID_LAYOUT_RIGHT_SYMMETRIC</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_RAID_LAYOUT_RIGHT_MASK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_RAID_LAYOUT_SYMMETRIC_MASK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<struct>struct <name>grub_raid_array</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>number</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>layout</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>total_devs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>grub_size_t</name></type> <name>chunk_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>disk_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>disk_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>uuid_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uuid</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nr_devs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>grub_disk_t</name></type> <name><name>device</name><index>[<expr><name>GRUB_RAID_MAX_DEVICES</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name><name>offset</name><index>[<expr><name>GRUB_RAID_MAX_DEVICES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_raid_array</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>grub_raid</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>detect</name>) <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>grub_raid_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_raid</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>grub_raid</name></name> <modifier>*</modifier></type><name>grub_raid_t</name>;</typedef>

<function_decl><type><name>void</name></type> <name>grub_raid_register</name> <parameter_list>(<parameter><decl><type><name>grub_raid_t</name></type> <name>raid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grub_raid_unregister</name> <parameter_list>(<parameter><decl><type><name>grub_raid_t</name></type> <name>raid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>grub_raid_block_xor</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>grub_raid5_recover_func_t</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_raid_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>disknr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>sector</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>grub_raid6_recover_func_t</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_raid_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>disknr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>sector</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>grub_raid5_recover_func_t</name></type> <name>grub_raid5_recover_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>grub_raid6_recover_func_t</name></type> <name>grub_raid6_recover_func</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
