<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\include\grub\list.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_LIST_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_LIST_HEADER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/symbol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/misc.h&gt;</cpp:file></cpp:include>

<struct>struct <name>grub_list</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>grub_list</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>grub_list</name></name> <modifier>*</modifier></type><name>grub_list_t</name>;</typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>grub_list_hook_t</name>) <parameter_list>(<parameter><decl><type><name>grub_list_t</name></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>grub_list_test_t</name>) <parameter_list>(<parameter><decl><type><name>grub_list_t</name></type> <name>new_item</name></decl></parameter>, <parameter><decl><type><name>grub_list_t</name></type> <name>item</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>void</name></type> <name>grub_list_push</name> <parameter_list>(<parameter><decl><type><name>grub_list_t</name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>grub_list_t</name></type> <name>item</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type> <name>grub_list_pop</name> <parameter_list>(<parameter><decl><type><name>grub_list_t</name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grub_list_remove</name> <parameter_list>(<parameter><decl><type><name>grub_list_t</name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>grub_list_t</name></type> <name>item</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>grub_list_iterate</name> <parameter_list>(<parameter><decl><type><name>grub_list_t</name></type> <name>head</name></decl></parameter>, <parameter><decl><type><name>grub_list_hook_t</name></type> <name>hook</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grub_list_insert</name> <parameter_list>(<parameter><decl><type><name>grub_list_t</name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>grub_list_t</name></type> <name>item</name></decl></parameter>,
<parameter><decl><type><name>grub_list_test_t</name></type> <name>test</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>
<name>grub_bad_type_cast_real</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
ATTRIBUTE_ERROR <parameter_list>(</parameter_list>"bad type cast between incompatible grub types"</function_decl>)<empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>
<name>grub_bad_type_cast_real</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_fatal</name> <argument_list>(<argument><expr><literal type="string">"error:%s:%u: bad type cast between incompatible grub types"</literal></expr></argument>,
<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_FILE</name></cpp:macro> <cpp:value>"/tmp"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_bad_type_cast</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>grub_bad_type_cast_real(__LINE__, GRUB_FILE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_FIELD_MATCH</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char *) &amp;(ptr)-&gt;field == (char *) &amp;((type) (ptr))-&gt;field)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AS_LIST</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GRUB_FIELD_MATCH (ptr, grub_list_t, next) ? (grub_list_t) ptr : grub_bad_type_cast ())</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AS_LIST_P</name><parameter_list>(<parameter><type><name>pptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GRUB_FIELD_MATCH (*pptr, grub_list_t, next) ? (grub_list_t *) (void *) pptr : grub_bad_type_cast ())</cpp:value></cpp:define>



<struct>struct <name>grub_named_list</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>grub_named_list</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>grub_named_list</name></name> <modifier>*</modifier></type><name>grub_named_list_t</name>;</typedef>

<function_decl><type><name>void</name> <modifier>*</modifier></type> <name>grub_named_list_find</name> <parameter_list>(<parameter><decl><type><name>grub_named_list_t</name></type> <name>head</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AS_NAMED_LIST</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((GRUB_FIELD_MATCH (ptr, grub_named_list_t, next) &amp;&amp; GRUB_FIELD_MATCH (ptr, grub_named_list_t, name))? (grub_named_list_t) ptr : grub_bad_type_cast ())</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AS_NAMED_LIST_P</name><parameter_list>(<parameter><type><name>pptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((GRUB_FIELD_MATCH (*pptr, grub_named_list_t, next) &amp;&amp; GRUB_FIELD_MATCH (*pptr, grub_named_list_t, name))? (grub_named_list_t *) (void *) pptr : grub_bad_type_cast ())</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PRIO_LIST_PRIO_MASK</name></cpp:macro> <cpp:value>0xff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PRIO_LIST_FLAG_ACTIVE</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>

<struct>struct <name>grub_prio_list</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>grub_prio_list</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prio</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>grub_prio_list</name></name> <modifier>*</modifier></type><name>grub_prio_list_t</name>;</typedef>

<function_decl><type><name>void</name></type> <name>grub_prio_list_insert</name> <parameter_list>(<parameter><decl><type><name>grub_prio_list_t</name> <modifier>*</modifier></type><name>head</name></decl></parameter>,
<parameter><decl><type><name>grub_prio_list_t</name></type> <name>item</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>grub_prio_list_remove</name> <parameter_list>(<parameter><decl><type><name>grub_prio_list_t</name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>grub_prio_list_t</name></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>prio</name></name> <operator>&amp;</operator> <name>GRUB_PRIO_LIST_FLAG_ACTIVE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prio</name></name> <operator>|=</operator> <name>GRUB_PRIO_LIST_FLAG_ACTIVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>grub_list_remove</name> <argument_list>(<argument><expr><call><name>GRUB_AS_LIST_P</name> <argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GRUB_AS_LIST</name> <argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AS_PRIO_LIST</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((GRUB_FIELD_MATCH (ptr, grub_prio_list_t, next) &amp;&amp; GRUB_FIELD_MATCH (ptr, grub_prio_list_t, name) &amp;&amp; GRUB_FIELD_MATCH (ptr, grub_prio_list_t, prio))? (grub_prio_list_t) ptr : grub_bad_type_cast ())</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AS_PRIO_LIST_P</name><parameter_list>(<parameter><type><name>pptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((GRUB_FIELD_MATCH (*pptr, grub_prio_list_t, next) &amp;&amp; GRUB_FIELD_MATCH (*pptr, grub_prio_list_t, name) &amp;&amp; GRUB_FIELD_MATCH (*pptr, grub_prio_list_t, prio))? (grub_prio_list_t *) (void *) pptr : grub_bad_type_cast ())</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
