<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\include\grub\gpt_partition.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_GPT_PARTITION_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_GPT_PARTITION_HEADER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>

<macro><name>R_PACKED</name><argument_list>(
<argument>struct grub_gpt_part_type
{
grub_uint32_t data1;
grub_uint16_t data2;
grub_uint16_t data3;
grub_uint8_t data4[<literal type="number">8</literal>];
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<typedef>typedef <type><name><name>struct</name> <name>grub_gpt_part_type</name></name></type> <name>grub_gpt_part_type_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_GPT_PARTITION_TYPE_EMPTY</name></cpp:macro> <cpp:value>{ 0x0, 0x0, 0x0, { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } }</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_CPU_WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_GPT_PARTITION_TYPE_BIOS_BOOT</name></cpp:macro> <cpp:value>{ 0x48616821, 0x4964, 0x6f6e, { 0x74, 0x4e, 0x65, 0x65, 0x64, 0x45, 0x46, 0x49 } }</cpp:value></cpp:define>



<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_GPT_PARTITION_TYPE_BIOS_BOOT</name></cpp:macro> <cpp:value>{ 0x21686148, 0x6449, 0x6e6f, { 0x74, 0x4e, 0x65, 0x65, 0x64, 0x45, 0x46, 0x49 } }</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>R_PACKED</name> <argument_list>(
<argument>struct grub_gpt_header
{
grub_uint8_t magic[<literal type="number">8</literal>];
grub_uint32_t version;
grub_uint32_t headersize;
grub_uint32_t crc32;
grub_uint32_t unused1;
grub_uint64_t primary;
grub_uint64_t backup;
grub_uint64_t start;
grub_uint64_t end;
grub_uint8_t guid[<literal type="number">16</literal>];
grub_uint64_t partitions;
grub_uint32_t maxpart;
grub_uint32_t partentry_size;
grub_uint32_t partentry_crc32;
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(
<argument>struct grub_gpt_partentry
{
grub_gpt_part_type_t type;
grub_uint8_t guid[<literal type="number">16</literal>];
grub_uint64_t start;
grub_uint64_t end;
grub_uint64_t attrib;
char name[<literal type="number">72</literal>];
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
