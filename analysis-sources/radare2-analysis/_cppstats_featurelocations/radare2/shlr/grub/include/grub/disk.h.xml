<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\include\grub\disk.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_DISK_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_DISK_HEADER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/symbol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/device.h&gt;</cpp:file></cpp:include>



<enum>enum <name>grub_disk_dev_id</name>
<block>{
<decl><name>GRUB_DISK_DEVICE_BIOSDISK_ID</name></decl>,
<decl><name>GRUB_DISK_DEVICE_OFDISK_ID</name></decl>,
<decl><name>GRUB_DISK_DEVICE_LOOPBACK_ID</name></decl>,
<decl><name>GRUB_DISK_DEVICE_EFIDISK_ID</name></decl>,
<decl><name>GRUB_DISK_DEVICE_RAID_ID</name></decl>,
<decl><name>GRUB_DISK_DEVICE_LVM_ID</name></decl>,
<decl><name>GRUB_DISK_DEVICE_HOST_ID</name></decl>,
<decl><name>GRUB_DISK_DEVICE_ATA_ID</name></decl>,
<decl><name>GRUB_DISK_DEVICE_MEMDISK_ID</name></decl>,
<decl><name>GRUB_DISK_DEVICE_NAND_ID</name></decl>,
<decl><name>GRUB_DISK_DEVICE_UUID_ID</name></decl>,
<decl><name>GRUB_DISK_DEVICE_PXE_ID</name></decl>,
<decl><name>GRUB_DISK_DEVICE_SCSI_ID</name></decl>,
<decl><name>GRUB_DISK_DEVICE_FILE_ID</name></decl>,
<decl><name>GRUB_DISK_DEVICE_LUKS_ID</name></decl>,
<decl><name>GRUB_DISK_DEVICE_USB_ID</name></decl>,
<decl><name>GRUB_DISK_DEVICE_MAP_ID</name></decl>,
}</block>;</enum>

<struct_decl>struct <name>grub_disk</name>;</struct_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_UTIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct_decl>struct <name>grub_disk_memberlist</name>;</struct_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<struct>struct <name>grub_disk_dev</name>
<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>grub_disk_dev_id</name></name></type> <name>id</name></decl>;</decl_stmt>


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>iterate</name>) <parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>open</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>grub_disk</name></name> <modifier>*</modifier></type><name>disk</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>close</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_disk</name></name> <modifier>*</modifier></type><name>disk</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>read</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_disk</name></name> <modifier>*</modifier></type><name>disk</name></decl></parameter>, <parameter><decl><type><name>grub_disk_addr_t</name></type> <name>sector</name></decl></parameter>,
<parameter><decl><type><name>grub_size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>write</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_disk</name></name> <modifier>*</modifier></type><name>disk</name></decl></parameter>, <parameter><decl><type><name>grub_disk_addr_t</name></type> <name>sector</name></decl></parameter>,
<parameter><decl><type><name>grub_size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_UTIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name><name>struct</name> <name>grub_disk_memberlist</name></name> <modifier>*</modifier></type>(<modifier>*</modifier><name>memberlist</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_disk</name></name> <modifier>*</modifier></type><name>disk</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name><name>struct</name> <name>grub_disk_dev</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>grub_disk_dev</name></name> <modifier>*</modifier></type><name>grub_disk_dev_t</name>;</typedef>

<struct_decl>struct <name>grub_partition</name>;</struct_decl>


<struct>struct <name>grub_disk</name>
<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>grub_disk_dev_t</name></type> <name>dev</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>total_sectors</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>has_partitions</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>id</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>grub_partition</name></name> <modifier>*</modifier></type><name>partition</name></decl>;</decl_stmt>



<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>read_hook</name>) <parameter_list>(<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>sector</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>closure</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>closure</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>grub_disk</name></name> <modifier>*</modifier></type><name>grub_disk_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_UTIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>grub_disk_memberlist</name>
<block>{
<decl_stmt><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_disk_memberlist</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>grub_disk_memberlist</name></name> <modifier>*</modifier></type><name>grub_disk_memberlist_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_DISK_SECTOR_SIZE</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_DISK_SECTOR_BITS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_DISK_CACHE_NUM</name></cpp:macro> <cpp:value>1021</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_DISK_CACHE_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_DISK_CACHE_BITS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<function_decl><type><name>void</name></type> <name>grub_disk_cache_invalidate_all</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>grub_disk_dev_register</name> <parameter_list>(<parameter><decl><type><name>grub_disk_dev_t</name></type> <name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grub_disk_dev_unregister</name> <parameter_list>(<parameter><decl><type><name>grub_disk_dev_t</name></type> <name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>grub_disk_dev_iterate</name> <parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>grub_disk_t</name></type> <name>grub_disk_open</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grub_disk_close</name> <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>grub_err_t</name></type> <name>grub_disk_read</name> <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>,
<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>sector</name></decl></parameter>,
<parameter><decl><type><name>grub_off_t</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>grub_size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>grub_err_t</name></type> <name>grub_disk_read_ex</name> <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>,
<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>sector</name></decl></parameter>,
<parameter><decl><type><name>grub_off_t</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>grub_size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>grub_err_t</name></type> <name>grub_disk_write</name> <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>,
<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>sector</name></decl></parameter>,
<parameter><decl><type><name>grub_off_t</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>grub_size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>grub_uint64_t</name></type> <name>grub_disk_get_size</name> <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> (<modifier>*</modifier> <name>grub_disk_firmware_fini</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>grub_disk_firmware_is_tainted</name></decl>;</decl_stmt>


<struct>struct <name>grub_disk_ata_pass_through_parms</name>
<block>{
<decl_stmt><decl><type><name>grub_uint8_t</name></type> <name><name>taskfile</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>extern</specifier> <name>grub_err_t</name></type> (<modifier>*</modifier> <name>grub_disk_ata_pass_through</name>) <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>grub_disk_ata_pass_through_parms</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
