<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\include\grub\types.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_TYPES_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TYPES_HEADER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/cpu/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_UTIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_CPU_SIZEOF_VOID_P</name></cpp:macro> <cpp:value>SIZEOF_VOID_P</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_CPU_SIZEOF_LONG</name></cpp:macro> <cpp:value>SIZEOF_LONG</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_CPU_WORDS_BIGENDIAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GRUB_CPU_WORDS_BIGENDIAN</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_CPU_SIZEOF_VOID_P</name></cpp:macro> <cpp:value>GRUB_TARGET_SIZEOF_VOID_P</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_CPU_SIZEOF_LONG</name></cpp:macro> <cpp:value>GRUB_TARGET_SIZEOF_LONG</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_TARGET_WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_CPU_WORDS_BIGENDIAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GRUB_CPU_WORDS_BIGENDIAN</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GRUB_CPU_SIZEOF_VOID_P</name> <operator>!=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>GRUB_CPU_SIZEOF_VOID_P</name> <operator>!=</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This architecture is not supported because sizeof(void *) != 4 and sizeof(void *) != 8"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_TARGET_WORDSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GRUB_TARGET_SIZEOF_VOID_P</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TARGET_WORDSIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GRUB_TARGET_SIZEOF_VOID_P</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TARGET_WORDSIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>grub_int8_t</name>;</typedef>
<typedef>typedef <type><name>short</name></type> <name>grub_int16_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>grub_int32_t</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GRUB_CPU_SIZEOF_LONG</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>
<typedef>typedef <type><name>long</name></type> <name>grub_int64_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>grub_int64_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>grub_uint8_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>grub_uint16_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name></type> <name>grub_uint32_t</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GRUB_CPU_SIZEOF_LONG</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>grub_uint64_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>grub_uint64_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GRUB_TARGET_SIZEOF_VOID_P</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>
<typedef>typedef <type><name>grub_uint64_t</name></type> <name>grub_target_addr_t</name>;</typedef>
<typedef>typedef <type><name>grub_uint64_t</name></type> <name>grub_target_off_t</name>;</typedef>
<typedef>typedef <type><name>grub_uint64_t</name></type> <name>grub_target_size_t</name>;</typedef>
<typedef>typedef <type><name>grub_int64_t</name></type> <name>grub_target_ssize_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>grub_uint32_t</name></type> <name>grub_target_addr_t</name>;</typedef>
<typedef>typedef <type><name>grub_uint32_t</name></type> <name>grub_target_off_t</name>;</typedef>
<typedef>typedef <type><name>grub_uint32_t</name></type> <name>grub_target_size_t</name>;</typedef>
<typedef>typedef <type><name>grub_int32_t</name></type> <name>grub_target_ssize_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GRUB_CPU_SIZEOF_VOID_P</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>
<typedef>typedef <type><name>grub_uint64_t</name></type> <name>grub_addr_t</name>;</typedef>
<typedef>typedef <type><name>grub_uint64_t</name></type> <name>grub_size_t</name>;</typedef>
<typedef>typedef <type><name>grub_int64_t</name></type> <name>grub_ssize_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>grub_uint32_t</name></type> <name>grub_addr_t</name>;</typedef>
<typedef>typedef <type><name>grub_uint32_t</name></type> <name>grub_size_t</name>;</typedef>
<typedef>typedef <type><name>grub_int32_t</name></type> <name>grub_ssize_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GRUB_CPU_SIZEOF_VOID_P</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_ULONG_MAX</name></cpp:macro> <cpp:value>18446744073709551615UL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_LONG_MAX</name></cpp:macro> <cpp:value>9223372036854775807L</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_LONG_MIN</name></cpp:macro> <cpp:value>(-9223372036854775807L - 1)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_ULONG_MAX</name></cpp:macro> <cpp:value>4294967295UL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_LONG_MAX</name></cpp:macro> <cpp:value>2147483647L</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_LONG_MIN</name></cpp:macro> <cpp:value>(-2147483647L - 1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GRUB_CPU_SIZEOF_VOID_P</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_TO_PTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void*)(grub_uint32_t)(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR_TO_UINT64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint64_t)(grub_uint32_t)(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR_TO_UINT32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint32_t)(x))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_TO_PTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void*)(grub_uint64_t)(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR_TO_UINT64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint64_t)(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR_TO_UINT32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint32_t)(grub_uint64_t)(x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><name>grub_uint64_t</name></type> <name>grub_off_t</name>;</typedef>


<typedef>typedef <type><name>grub_uint64_t</name></type> <name>grub_disk_addr_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>grub_uint64_t</name> <name>grub_unaligned_uint64_t</name></type> <name>__attribute__</name>((<name>aligned</name>(1)));</typedef>
<typedef>typedef <type><name>grub_uint32_t</name> <name>grub_unaligned_uint32_t</name></type> <name>__attribute__</name>((<name>aligned</name>(1)));</typedef>
<typedef>typedef <type><name>grub_uint16_t</name> <name>grub_unaligned_uint16_t</name></type> <name>__attribute__</name>((<name>aligned</name>(1)));</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>grub_uint64_t</name></type> <name>grub_unaligned_uint64_t</name>;</typedef>
<typedef>typedef <type><name>grub_uint32_t</name></type> <name>grub_unaligned_uint32_t</name>;</typedef>
<typedef>typedef <type><name>grub_uint16_t</name></type> <name>grub_unaligned_uint16_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>__inline</name> <name>grub_uint16_t</name></type> <name>grub_swap_bytes16</name> <parameter_list>(<parameter><decl><type><name>grub_uint16_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>_x</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>_x</name> <operator>=</operator> <operator>(</operator><name>grub_uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>_x</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>_x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>_x</name></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_swap_bytes16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ grub_uint16_t _x = (x); (grub_uint16_t) ((_x &lt;&lt; 8) | (_x &gt;&gt; 8)); })</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__GNUC__</name> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>__GNUC__</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>||</operator> <name>__GNUC_MINOR__</name> <operator>&gt;=</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRUB_TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>grub_uint32_t</name></type> <name>grub_swap_bytes32</name><parameter_list>(<parameter><decl><type><name>grub_uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_bswap32</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>grub_uint64_t</name></type> <name>grub_swap_bytes64</name><parameter_list>(<parameter><decl><type><name>grub_uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_bswap64</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_MSC_VER</name></expr></cpp:elif>
<function><type><name>__inline</name> <name>grub_uint32_t</name></type> <name>grub_swap_bytes32</name><parameter_list>(<parameter><decl><type><name>grub_uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>_x</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name>_x</name> <operator>=</operator> <operator>(</operator><name>grub_uint32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>_x</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> 
<operator>|</operator> <operator>(</operator><operator>(</operator><name>_x</name> <operator>&amp;</operator> <operator>(</operator><name>grub_uint32_t</name><operator>)</operator> <literal type="number">0xFF00UL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> 
<operator>|</operator> <operator>(</operator><operator>(</operator><name>_x</name> <operator>&amp;</operator> <operator>(</operator><name>grub_uint32_t</name><operator>)</operator> <literal type="number">0xFF0000UL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> 
<operator>|</operator> <operator>(</operator><name>_x</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> 
<return>return <expr><name>_x</name></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name>__inline</name> <name>grub_uint64_t</name></type> <name>grub_swap_bytes64</name><parameter_list>(<parameter><decl><type><name>grub_uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list> 
<block>{<block_content> 
<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>_x</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name>_x</name> <operator>=</operator> <operator>(</operator><name>grub_uint64_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>_x</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator> 
<operator>|</operator> <operator>(</operator><operator>(</operator><name>_x</name> <operator>&amp;</operator> <operator>(</operator><name>grub_uint64_t</name><operator>)</operator> <literal type="number">0xFF00ULL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator> 
<operator>|</operator> <operator>(</operator><operator>(</operator><name>_x</name> <operator>&amp;</operator> <operator>(</operator><name>grub_uint64_t</name><operator>)</operator> <literal type="number">0xFF0000ULL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> 
<operator>|</operator> <operator>(</operator><operator>(</operator><name>_x</name> <operator>&amp;</operator> <operator>(</operator><name>grub_uint64_t</name><operator>)</operator> <literal type="number">0xFF000000ULL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> 
<operator>|</operator> <operator>(</operator><operator>(</operator><name>_x</name> <operator>&amp;</operator> <operator>(</operator><name>grub_uint64_t</name><operator>)</operator> <literal type="number">0xFF00000000ULL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> 
<operator>|</operator> <operator>(</operator><operator>(</operator><name>_x</name> <operator>&amp;</operator> <operator>(</operator><name>grub_uint64_t</name><operator>)</operator> <literal type="number">0xFF0000000000ULL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> 
<operator>|</operator> <operator>(</operator><operator>(</operator><name>_x</name> <operator>&amp;</operator> <operator>(</operator><name>grub_uint64_t</name><operator>)</operator> <literal type="number">0xFF000000000000ULL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator> 
<operator>|</operator> <operator>(</operator><name>_x</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> 
<return>return <expr><name>_x</name></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_swap_bytes32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ grub_uint32_t _x = (x); (grub_uint32_t) ((_x &lt;&lt; 24) | ((_x &amp; (grub_uint32_t) 0xFF00UL) &lt;&lt; 8) | ((_x &amp; (grub_uint32_t) 0xFF0000UL) &gt;&gt; 8) | (_x &gt;&gt; 24)); })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_swap_bytes64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ grub_uint64_t _x = (x); (grub_uint64_t) ((_x &lt;&lt; 56) | ((_x &amp; (grub_uint64_t) 0xFF00ULL) &lt;&lt; 40) | ((_x &amp; (grub_uint64_t) 0xFF0000ULL) &lt;&lt; 24) | ((_x &amp; (grub_uint64_t) 0xFF000000ULL) &lt;&lt; 8) | ((_x &amp; (grub_uint64_t) 0xFF00000000ULL) &gt;&gt; 8) | ((_x &amp; (grub_uint64_t) 0xFF0000000000ULL) &gt;&gt; 24) | ((_x &amp; (grub_uint64_t) 0xFF000000000000ULL) &gt;&gt; 40) | (_x &gt;&gt; 56)); })</cpp:value></cpp:define>











<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_CPU_WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_cpu_to_le16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes16(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_cpu_to_le32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes32(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_cpu_to_le64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes64(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_le_to_cpu16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes16(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_le_to_cpu32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes32(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_le_to_cpu64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes64(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_cpu_to_be16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint16_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_cpu_to_be32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint32_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_cpu_to_be64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint64_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_be_to_cpu16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint16_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_be_to_cpu32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint32_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_be_to_cpu64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint64_t) (x))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_TARGET_WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_target_to_host16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint16_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_target_to_host32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint32_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_target_to_host64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint64_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_host_to_target16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint16_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_host_to_target32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint32_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_host_to_target64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint64_t) (x))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_target_to_host16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes16(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_target_to_host32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes32(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_target_to_host64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes64(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_host_to_target16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes16(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_host_to_target32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes32(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_host_to_target64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes64(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_cpu_to_le16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint16_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_cpu_to_le32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint32_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_cpu_to_le64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint64_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_le_to_cpu16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint16_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_le_to_cpu32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint32_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_le_to_cpu64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint64_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_cpu_to_be16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes16(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_cpu_to_be32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes32(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_cpu_to_be64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes64(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_be_to_cpu16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes16(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_be_to_cpu32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes32(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_be_to_cpu64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes64(x)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_TARGET_WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_target_to_host16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes16(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_target_to_host32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes32(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_target_to_host64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes64(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_host_to_target16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes16(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_host_to_target32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes32(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_host_to_target64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_swap_bytes64(x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_target_to_host16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint16_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_target_to_host32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint32_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_target_to_host64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint64_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_host_to_target16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint16_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_host_to_target32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint32_t) (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_host_to_target64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint64_t) (x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GRUB_TARGET_SIZEOF_VOID_P</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_host_to_target_addr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_host_to_target64(x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_host_to_target_addr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_host_to_target32(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
