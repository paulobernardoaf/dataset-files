<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\include\grub\pci.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_PCI_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/symbol.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_ADDR_SPACE_MASK</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_ADDR_SPACE_MEMORY</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_ADDR_SPACE_IO</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_ADDR_MEM_TYPE_MASK</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_ADDR_MEM_TYPE_32</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_ADDR_MEM_TYPE_1M</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_ADDR_MEM_TYPE_64</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_ADDR_MEM_PREFETCH</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_ADDR_MEM_MASK</name></cpp:macro> <cpp:value>~0xf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_ADDR_IO_MASK</name></cpp:macro> <cpp:value>~0x03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_PCI_ID</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_VENDOR</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_DEVICE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_COMMAND</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_STATUS</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_REVISION</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_CLASS</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_CACHELINE</name></cpp:macro> <cpp:value>0x0c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_LAT_TIMER</name></cpp:macro> <cpp:value>0x0d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_HEADER_TYPE</name></cpp:macro> <cpp:value>0x0e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_BIST</name></cpp:macro> <cpp:value>0x0f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_ADDRESSES</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_ADDRESS_REG0</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_ADDRESS_REG1</name></cpp:macro> <cpp:value>0x14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_ADDRESS_REG2</name></cpp:macro> <cpp:value>0x18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_ADDRESS_REG3</name></cpp:macro> <cpp:value>0x1c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_ADDRESS_REG4</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_ADDRESS_REG5</name></cpp:macro> <cpp:value>0x24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_CIS_POINTER</name></cpp:macro> <cpp:value>0x28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_SUBVENDOR</name></cpp:macro> <cpp:value>0x2c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_SUBSYSTEM</name></cpp:macro> <cpp:value>0x2e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_ROM_ADDRESS</name></cpp:macro> <cpp:value>0x30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_CAP_POINTER</name></cpp:macro> <cpp:value>0x34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_IRQ_LINE</name></cpp:macro> <cpp:value>0x3c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_IRQ_PIN</name></cpp:macro> <cpp:value>0x3d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_MIN_GNT</name></cpp:macro> <cpp:value>0x3e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PCI_REG_MAX_LAT</name></cpp:macro> <cpp:value>0x3f</cpp:value></cpp:define>

<typedef>typedef <type><name>grub_uint32_t</name></type> <name>grub_pci_id_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_MACHINE_EMU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/pciutils.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>grub_uint32_t</name></type> <name>grub_pci_address_t</name>;</typedef>
<struct>struct <name>grub_pci_device</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>bus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>function</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>grub_pci_device</name></name></type> <name>grub_pci_device_t</name>;</typedef>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>grub_pci_get_bus</name> <parameter_list>(<parameter><decl><type><name>grub_pci_device_t</name></type> <name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>dev</name><operator>.</operator><name>bus</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>grub_pci_get_device</name> <parameter_list>(<parameter><decl><type><name>grub_pci_device_t</name></type> <name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>dev</name><operator>.</operator><name>device</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>grub_pci_get_function</name> <parameter_list>(<parameter><decl><type><name>grub_pci_device_t</name></type> <name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>dev</name><operator>.</operator><name>function</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/cpu/pci.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>grub_pci_iteratefunc_t</name>)
<parameter_list>(<parameter><decl><type><name>grub_pci_device_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>grub_pci_id_t</name></type> <name>pciid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>grub_pci_address_t</name></type> <name>grub_pci_make_address</name> <parameter_list>(<parameter><decl><type><name>grub_pci_device_t</name></type> <name>dev</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>grub_pci_iterate</name> <parameter_list>(<parameter><decl><type><name>grub_pci_iteratefunc_t</name></type> <name>hook</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
