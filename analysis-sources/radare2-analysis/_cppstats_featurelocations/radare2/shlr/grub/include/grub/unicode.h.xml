<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\include\grub\unicode.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_BIDI_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_BIDI_HEADER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/mm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/misc.h&gt;</cpp:file></cpp:include>

<struct>struct <name>grub_unicode_bidi_pair</name>
<block>{
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>replace</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>grub_unicode_compact_range</name>
<block>{
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>start</name><range>:<expr><literal type="number">21</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>end</name><range>:<expr><literal type="number">21</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint8_t</name></type> <name>bidi_type</name><range>:<expr><literal type="number">5</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint8_t</name></type> <name>comb_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint8_t</name></type> <name>bidi_mirror</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint8_t</name></type> <name>join_type</name><range>:<expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>



<struct>struct <name>grub_unicode_arabic_shape</name>
<block>{
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>isolated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>right_linked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>both_linked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>left_linked</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>grub_unicode_arabic_shape</name></name></type> <name><name>grub_unicode_arabic_shapes</name><index>[]</index></name></decl>;</decl_stmt>

<enum>enum <name>grub_bidi_type</name>
<block>{
<decl><name>GRUB_BIDI_TYPE_L</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>GRUB_BIDI_TYPE_LRE</name></decl>,
<decl><name>GRUB_BIDI_TYPE_LRO</name></decl>,
<decl><name>GRUB_BIDI_TYPE_R</name></decl>,
<decl><name>GRUB_BIDI_TYPE_AL</name></decl>,
<decl><name>GRUB_BIDI_TYPE_RLE</name></decl>,
<decl><name>GRUB_BIDI_TYPE_RLO</name></decl>,
<decl><name>GRUB_BIDI_TYPE_PDF</name></decl>,
<decl><name>GRUB_BIDI_TYPE_EN</name></decl>,
<decl><name>GRUB_BIDI_TYPE_ES</name></decl>,
<decl><name>GRUB_BIDI_TYPE_ET</name></decl>,
<decl><name>GRUB_BIDI_TYPE_AN</name></decl>,
<decl><name>GRUB_BIDI_TYPE_CS</name></decl>,
<decl><name>GRUB_BIDI_TYPE_NSM</name></decl>,
<decl><name>GRUB_BIDI_TYPE_BN</name></decl>,
<decl><name>GRUB_BIDI_TYPE_B</name></decl>,
<decl><name>GRUB_BIDI_TYPE_S</name></decl>,
<decl><name>GRUB_BIDI_TYPE_WS</name></decl>,
<decl><name>GRUB_BIDI_TYPE_ON</name></decl>
}</block>;</enum>

<enum>enum <name>grub_join_type</name>
<block>{
<decl><name>GRUB_JOIN_TYPE_NONJOINING</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>GRUB_JOIN_TYPE_LEFT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>GRUB_JOIN_TYPE_RIGHT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>GRUB_JOIN_TYPE_DUAL</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>GRUB_JOIN_TYPE_CAUSING</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>GRUB_JOIN_TYPE_TRANSPARENT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>grub_comb_type</name>
<block>{
<decl><name>GRUB_UNICODE_COMB_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_OVERLAY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_HEBREW_SHEVA</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_HEBREW_HATAF_SEGOL</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_HEBREW_HATAF_PATAH</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_HEBREW_HATAF_QAMATS</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_HEBREW_HIRIQ</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_HEBREW_TSERE</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_HEBREW_SEGOL</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_HEBREW_PATAH</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_HEBREW_QAMATS</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_HEBREW_HOLAM</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_HEBREW_QUBUTS</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_HEBREW_DAGESH</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_HEBREW_METEG</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_HEBREW_RAFE</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_HEBREW_SHIN_DOT</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_HEBREW_SIN_DOT</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_HEBREW_VARIKA</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_ARABIC_FATHATAN</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_ARABIC_DAMMATAN</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_ARABIC_KASRATAN</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_ARABIC_FATHAH</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_ARABIC_DAMMAH</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_ARABIC_KASRA</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_ARABIC_SHADDA</name> <init>= <expr><literal type="number">33</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_ARABIC_SUKUN</name> <init>= <expr><literal type="number">34</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_ARABIC_SUPERSCRIPT_ALIF</name> <init>= <expr><literal type="number">35</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_SYRIAC_SUPERSCRIPT_ALAPH</name> <init>= <expr><literal type="number">36</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_STACK_ATTACHED_BELOW</name> <init>= <expr><literal type="number">202</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_STACK_ATTACHED_ABOVE</name> <init>= <expr><literal type="number">214</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_ATTACHED_ABOVE_RIGHT</name> <init>= <expr><literal type="number">216</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_STACK_BELOW</name> <init>= <expr><literal type="number">220</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_BELOW_RIGHT</name> <init>= <expr><literal type="number">222</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_ABOVE_LEFT</name> <init>= <expr><literal type="number">228</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_STACK_ABOVE</name> <init>= <expr><literal type="number">230</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_ABOVE_RIGHT</name> <init>= <expr><literal type="number">232</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_YPOGEGRAMMENI</name> <init>= <expr><literal type="number">240</literal></expr></init></decl>,


<decl><name>GRUB_UNICODE_COMB_ME</name> <init>= <expr><literal type="number">253</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_MC</name> <init>= <expr><literal type="number">254</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_COMB_MN</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>,
}</block>;</enum>


<struct>struct <name>grub_unicode_glyph</name>
<block>{
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>variant</name><range>:<expr><literal type="number">9</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint8_t</name></type> <name>attributes</name><range>:<expr><literal type="number">5</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_size_t</name></type> <name>ncomb</name></decl>;</decl_stmt>
<struct>struct <name>grub_unicode_combining</name> <block>{
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>grub_comb_type</name></name></type> <name>type</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>combining</name></decl>;</struct>


<decl_stmt><decl><type><name>int</name></type> <name>estimated_width</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_UNICODE_GLYPH_ATTRIBUTE_MIRROR</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_UNICODE_GLYPH_ATTRIBUTES_JOIN_LEFT_TO_RIGHT_SHIFT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_UNICODE_GLYPH_ATTRIBUTE_LEFT_JOINED</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_UNICODE_GLYPH_ATTRIBUTE_RIGHT_JOINED</name></cpp:macro> <cpp:value>(GRUB_UNICODE_GLYPH_ATTRIBUTE_LEFT_JOINED &lt;&lt; GRUB_UNICODE_GLYPH_ATTRIBUTES_JOIN_LEFT_TO_RIGHT_SHIFT)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_UNICODE_GLYPH_ATTRIBUTE_LEFT_JOINED_EXPLICIT</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_UNICODE_GLYPH_ATTRIBUTE_RIGHT_JOINED_EXPLICIT</name></cpp:macro> <cpp:value>(GRUB_UNICODE_GLYPH_ATTRIBUTE_LEFT_JOINED_EXPLICIT &lt;&lt; GRUB_UNICODE_GLYPH_ATTRIBUTES_JOIN_LEFT_TO_RIGHT_SHIFT)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_UNICODE_GLYPH_ATTRIBUTES_JOIN</name></cpp:macro> <cpp:value>(GRUB_UNICODE_GLYPH_ATTRIBUTE_LEFT_JOINED | GRUB_UNICODE_GLYPH_ATTRIBUTE_RIGHT_JOINED | GRUB_UNICODE_GLYPH_ATTRIBUTE_LEFT_JOINED_EXPLICIT | GRUB_UNICODE_GLYPH_ATTRIBUTE_RIGHT_JOINED_EXPLICIT)</cpp:value></cpp:define>





<enum>enum
<block>{
<decl><name>GRUB_UNICODE_COMBINING_GRAPHEME_JOINER</name> <init>= <expr><literal type="number">0x034f</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_HEBREW_WAW</name> <init>= <expr><literal type="number">0x05d5</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_ARABIC_START</name> <init>= <expr><literal type="number">0x0600</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_ARABIC_END</name> <init>= <expr><literal type="number">0x0700</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_THAANA_ABAFILI</name> <init>= <expr><literal type="number">0x07a6</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_THAANA_AABAAFILI</name> <init>= <expr><literal type="number">0x07a7</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_THAANA_IBIFILI</name> <init>= <expr><literal type="number">0x07a8</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_THAANA_EEBEEFILI</name> <init>= <expr><literal type="number">0x07a9</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_THAANA_UBUFILI</name> <init>= <expr><literal type="number">0x07aa</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_THAANA_OOBOOFILI</name> <init>= <expr><literal type="number">0x07ab</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_THAANA_EBEFILI</name> <init>= <expr><literal type="number">0x07ac</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_THAANA_EYBEYFILI</name> <init>= <expr><literal type="number">0x07ad</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_THAANA_OBOFILI</name> <init>= <expr><literal type="number">0x07ae</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_THAANA_OABOAFILI</name> <init>= <expr><literal type="number">0x07af</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_THAANA_SUKUN</name> <init>= <expr><literal type="number">0x07b0</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_ZWNJ</name> <init>= <expr><literal type="number">0x200c</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_ZWJ</name> <init>= <expr><literal type="number">0x200d</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_LEFTARROW</name> <init>= <expr><literal type="number">0x2190</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_UPARROW</name> <init>= <expr><literal type="number">0x2191</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_RIGHTARROW</name> <init>= <expr><literal type="number">0x2192</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_DOWNARROW</name> <init>= <expr><literal type="number">0x2193</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_LIGHT_HLINE</name> <init>= <expr><literal type="number">0x2500</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_HLINE</name> <init>= <expr><literal type="number">0x2501</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_LIGHT_VLINE</name> <init>= <expr><literal type="number">0x2502</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_VLINE</name> <init>= <expr><literal type="number">0x2503</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_LIGHT_CORNER_UL</name> <init>= <expr><literal type="number">0x250c</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_CORNER_UL</name> <init>= <expr><literal type="number">0x250f</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_LIGHT_CORNER_UR</name> <init>= <expr><literal type="number">0x2510</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_CORNER_UR</name> <init>= <expr><literal type="number">0x2513</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_LIGHT_CORNER_LL</name> <init>= <expr><literal type="number">0x2514</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_CORNER_LL</name> <init>= <expr><literal type="number">0x2517</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_LIGHT_CORNER_LR</name> <init>= <expr><literal type="number">0x2518</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_CORNER_LR</name> <init>= <expr><literal type="number">0x251b</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_BLACK_UP_TRIANGLE</name> <init>= <expr><literal type="number">0x25b2</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_BLACK_RIGHT_TRIANGLE</name> <init>= <expr><literal type="number">0x25ba</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_BLACK_DOWN_TRIANGLE</name> <init>= <expr><literal type="number">0x25bc</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_BLACK_LEFT_TRIANGLE</name> <init>= <expr><literal type="number">0x25c4</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_VARIATION_SELECTOR_1</name> <init>= <expr><literal type="number">0xfe00</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_VARIATION_SELECTOR_16</name> <init>= <expr><literal type="number">0xfe0f</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_VARIATION_SELECTOR_17</name> <init>= <expr><literal type="number">0xe0100</literal></expr></init></decl>,
<decl><name>GRUB_UNICODE_VARIATION_SELECTOR_256</name> <init>= <expr><literal type="number">0xe01ef</literal></expr></init></decl>
}</block>;</enum>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>grub_unicode_compact_range</name></name></type> <name><name>grub_unicode_compact</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>grub_unicode_bidi_pair</name></name></type> <name><name>grub_unicode_bidi_pairs</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_UNICODE_MAX_CACHED_CHAR</name></cpp:macro> <cpp:value>0x20000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_BIDI_MAX_EXPLICIT_LEVEL</name></cpp:macro> <cpp:value>61</cpp:value></cpp:define>

<function_decl><type><name>grub_ssize_t</name></type>
<name>grub_bidi_logical_to_visual</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>grub_uint32_t</name> <modifier>*</modifier></type><name>logical</name></decl></parameter>,
<parameter><decl><type><name>grub_size_t</name></type> <name>logical_len</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>grub_unicode_glyph</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>visual_out</name></decl></parameter>,
<parameter><function_decl><type><name>grub_ssize_t</name></type> (<modifier>*</modifier><name>getcharwidth</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_unicode_glyph</name></name> <modifier>*</modifier></type><name>visual</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>grub_size_t</name></type> <name>max_width</name></decl></parameter>,
<parameter><decl><type><name>grub_size_t</name></type> <name>start_width</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>enum</name> <name>grub_comb_type</name></name></type>
<name>grub_unicode_get_comb_type</name> <parameter_list>(<parameter><decl><type><name>grub_uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>grub_size_t</name></type>
<name>grub_unicode_aglomerate_comb</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>grub_uint32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>grub_size_t</name></type> <name>inlen</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>grub_unicode_glyph</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>grub_unicode_glyph</name></name> <modifier>*</modifier></type>
<name>grub_unicode_glyph_dup</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_unicode_glyph</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_unicode_glyph</name></name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>grub_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>combining</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>combining</name></name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>ncomb</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>out</name><operator>-&gt;</operator><name>combining</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>combining</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>combining</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ncomb</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>grub_unicode_glyph</name></name> <modifier>*</modifier></type>
<name>grub_unicode_glyph_from_code</name> <parameter_list>(<parameter><decl><type><name>grub_uint32_t</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_unicode_glyph</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>grub_zalloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>grub_uint32_t</name></type>
<name>grub_unicode_mirror_code</name> <parameter_list>(<parameter><decl><type><name>grub_uint32_t</name></type> <name>in</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>grub_uint32_t</name></type>
<name>grub_unicode_shape_code</name> <parameter_list>(<parameter><decl><type><name>grub_uint32_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>grub_uint8_t</name></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
