<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\include\grub\mm_private.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_MM_PRIVATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_MM_PRIVATE_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/mm.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_MM_FREE_MAGIC</name></cpp:macro> <cpp:value>0x2d3c2808</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_MM_ALLOC_MAGIC</name></cpp:macro> <cpp:value>0x6db08fa4</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>grub_mm_header</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>grub_mm_header</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_size_t</name></type> <name>magic</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GRUB_CPU_SIZEOF_VOID_P</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>padding</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GRUB_CPU_SIZEOF_VOID_P</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>
<decl_stmt><decl><type><name>char</name></type> <name><name>padding</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"unknown word size"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type>
*<name>grub_mm_header_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GRUB_CPU_SIZEOF_VOID_P</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_MM_ALIGN_LOG2</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GRUB_CPU_SIZEOF_VOID_P</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_MM_ALIGN_LOG2</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_MM_ALIGN</name></cpp:macro> <cpp:value>(1 &lt;&lt; GRUB_MM_ALIGN_LOG2)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>grub_mm_region</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>grub_mm_header</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_mm_region</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_size_t</name></type> <name>pre_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type>
*<name>grub_mm_region_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_MACHINE_EMU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>grub_mm_region_t</name></type> <name>EXPORT_VAR</name> <parameter_list>(<parameter><decl><type><name>grub_mm_base</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
