<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\include\grub\parser.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_PARSER_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PARSER_HEADER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/handler.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/reader.h&gt;</cpp:file></cpp:include>


<typedef>typedef <type><enum>enum
<block>{
<decl><name>GRUB_PARSER_STATE_TEXT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>GRUB_PARSER_STATE_ESC</name></decl>,
<decl><name>GRUB_PARSER_STATE_QUOTE</name></decl>,
<decl><name>GRUB_PARSER_STATE_DQUOTE</name></decl>,
<decl><name>GRUB_PARSER_STATE_VAR</name></decl>,
<decl><name>GRUB_PARSER_STATE_VARNAME</name></decl>,
<decl><name>GRUB_PARSER_STATE_VARNAME2</name></decl>,
<decl><name>GRUB_PARSER_STATE_QVAR</name></decl>,
<decl><name>GRUB_PARSER_STATE_QVARNAME</name></decl>,
<decl><name>GRUB_PARSER_STATE_QVARNAME2</name></decl>
}</block></enum></type> <name>grub_parser_state_t</name>;</typedef>


<struct>struct <name>grub_parser_state_transition</name>
<block>{

<decl_stmt><decl><type><name>grub_parser_state_t</name></type> <name>from_state</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>grub_parser_state_t</name></type> <name>to_state</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name></type> <name>input</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>keep_value</name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><name>grub_parser_state_t</name></type> <name>grub_parser_cmdline_state</name> <parameter_list>(<parameter><decl><type><name>grub_parser_state_t</name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>grub_err_t</name></type> <name>grub_parser_split_cmdline</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdline</name></decl></parameter>,
<parameter><decl><type><name>grub_reader_getline_t</name></type> <name>getline</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>grub_parser</name>
<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>grub_parser</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>


<function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>init</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>fini</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>parse_line</name>) <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>grub_reader_getline_t</name></type> <name>getline</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>grub_parser</name></name> <modifier>*</modifier></type><name>grub_parser_t</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>grub_handler_class</name></name></type> <name>grub_parser_class</name></decl>;</decl_stmt>
<function_decl><type><name>grub_err_t</name></type> <name>grub_parser_execute</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_parser_register</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>parser</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_parser_register_internal (parser); GRUB_MODATTR ("handler", "parser." name);</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>grub_parser_register_internal</name> <parameter_list>(<parameter><decl><type><name>grub_parser_t</name></type> <name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_handler_register</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>grub_parser_class</name></expr></argument>, <argument><expr><call><name>GRUB_AS_HANDLER</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>grub_parser_unregister</name> <parameter_list>(<parameter><decl><type><name>grub_parser_t</name></type> <name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_handler_unregister</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>grub_parser_class</name></expr></argument>, <argument><expr><call><name>GRUB_AS_HANDLER</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>grub_parser_t</name></type>
<name>grub_parser_get_current</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>grub_parser_t</name><operator>)</operator> <name><name>grub_parser_class</name><operator>.</operator><name>cur_handler</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>grub_err_t</name></type>
<name>grub_parser_set_current</name> <parameter_list>(<parameter><decl><type><name>grub_parser_t</name></type> <name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>grub_handler_set_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>grub_parser_class</name></expr></argument>,
<argument><expr><call><name>GRUB_AS_HANDLER</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>grub_register_rescue_parser</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
