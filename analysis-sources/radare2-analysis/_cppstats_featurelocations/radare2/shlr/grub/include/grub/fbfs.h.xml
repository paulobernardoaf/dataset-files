<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\include\grub\fbfs.h">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_FBFS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_FBFS_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FB_MAGIC</name></cpp:macro> <cpp:value>"FBBF"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FB_MAGIC_LONG</name></cpp:macro> <cpp:value>0x46424246</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FB_AR_MAGIC</name></cpp:macro> <cpp:value>"FBAR"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FB_AR_MAGIC_LONG</name></cpp:macro> <cpp:value>0x52414246</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FB_VER_MAJOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FB_VER_MINOR</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<macro><name>R_PACKED</name><argument_list>(
<argument>struct fb_mbr
{
grub_uint8_t jmp_code;
grub_uint8_t jmp_ofs;
grub_uint8_t boot_code[<literal type="number">0x1ab</literal>];
grub_uint8_t max_sec; 
grub_uint16_t lba; 
grub_uint8_t spt; 
grub_uint8_t heads; 
grub_uint16_t boot_base; 
grub_uint32_t fb_magic; 
grub_uint8_t mbr_table[<literal type="number">0x46</literal>]; 
grub_uint16_t end_magic; 
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(
<argument>struct fb_data
{
grub_uint16_t boot_size; 
grub_uint16_t flags; 
grub_uint8_t ver_major; 
grub_uint8_t ver_minor; 
grub_uint16_t list_used; 
grub_uint16_t list_size; 
grub_uint16_t pri_size; 
grub_uint32_t ext_size; 
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(
<argument>struct fb_ar_data
{
grub_uint32_t ar_magic; 
grub_uint8_t ver_major; 
grub_uint8_t ver_minor; 
grub_uint16_t list_used; 
grub_uint16_t list_size; 
grub_uint16_t pri_size; 
grub_uint32_t ext_size; 
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(
<argument>struct fbm_file
{
grub_uint8_t size;
grub_uint8_t flag;
grub_uint32_t data_start;
grub_uint32_t data_size;
grub_uint32_t data_time;
char name[<literal type="number">0</literal>];
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
