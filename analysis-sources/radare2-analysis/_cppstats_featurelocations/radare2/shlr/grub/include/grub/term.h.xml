<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\include\grub\term.h">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/list.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_TERM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_HEADER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_LEFT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_RIGHT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_UP</name></cpp:macro> <cpp:value>0xfa</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DOWN</name></cpp:macro> <cpp:value>0xfb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_HOME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_END</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DC</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_IC</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_PPAGE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_NPAGE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_ESC</name></cpp:macro> <cpp:value>'\e'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_TAB</name></cpp:macro> <cpp:value>'\t'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_BACKSPACE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_F1</name></cpp:macro> <cpp:value>0xf0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_F2</name></cpp:macro> <cpp:value>0xf1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_F3</name></cpp:macro> <cpp:value>0xf2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_F4</name></cpp:macro> <cpp:value>0xf3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_F5</name></cpp:macro> <cpp:value>0xf4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_F6</name></cpp:macro> <cpp:value>0xf5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_F7</name></cpp:macro> <cpp:value>0xf6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_F8</name></cpp:macro> <cpp:value>0xf7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_F9</name></cpp:macro> <cpp:value>0xf8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_F10</name></cpp:macro> <cpp:value>0xf9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_A</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_B</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_C</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_D</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_E</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_F</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_G</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_H</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_I</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_J</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_K</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_L</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_M</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_N</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_O</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_P</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_Q</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_R</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_S</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_T</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_U</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_V</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_W</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_X</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_Y</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_CTRL_Z</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASM_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/symbol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>



<typedef>typedef <type><enum>enum
<block>{


<decl><name>GRUB_TERM_COLOR_STANDARD</name></decl>,

<decl><name>GRUB_TERM_COLOR_NORMAL</name></decl>,

<decl><name>GRUB_TERM_COLOR_HIGHLIGHT</name></decl>
}</block></enum></type>
<name>grub_term_color_state</name>;</typedef>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_NO_ECHO</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_NO_EDIT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DUMB</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_STATUS_SHIFT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_STATUS_CTRL</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_STATUS_ALT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DISP_LEFT</name></cpp:macro> <cpp:value>0x2190</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DISP_UP</name></cpp:macro> <cpp:value>0x2191</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DISP_RIGHT</name></cpp:macro> <cpp:value>0x2192</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DISP_DOWN</name></cpp:macro> <cpp:value>0x2193</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DISP_HLINE</name></cpp:macro> <cpp:value>0x2501</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DISP_VLINE</name></cpp:macro> <cpp:value>0x2503</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DISP_UL</name></cpp:macro> <cpp:value>0x250F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DISP_UR</name></cpp:macro> <cpp:value>0x2513</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DISP_LL</name></cpp:macro> <cpp:value>0x2517</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DISP_LR</name></cpp:macro> <cpp:value>0x251B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DISP_DHLINE</name></cpp:macro> <cpp:value>0x2550</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DISP_DVLINE</name></cpp:macro> <cpp:value>0x2551</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DISP_DUL</name></cpp:macro> <cpp:value>0x2554</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DISP_DUR</name></cpp:macro> <cpp:value>0x2557</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DISP_DLL</name></cpp:macro> <cpp:value>0x255A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_DISP_DLR</name></cpp:macro> <cpp:value>0x255D</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_INFO_HEIGHT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_MARGIN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_SCROLL_WIDTH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_TOP_BORDER_Y</name></cpp:macro> <cpp:value>(GRUB_TERM_MARGIN + GRUB_TERM_INFO_HEIGHT + GRUB_TERM_MARGIN)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_LEFT_BORDER_X</name></cpp:macro> <cpp:value>GRUB_TERM_MARGIN</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_MESSAGE_HEIGHT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_FIRST_ENTRY_Y</name></cpp:macro> <cpp:value>(GRUB_TERM_TOP_BORDER_Y + 1)</cpp:value></cpp:define>

<struct>struct <name>grub_term_input</name>
<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>grub_term_input</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>


<function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>init</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>fini</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>checkkey</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>getkey</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>getkeystatus</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>grub_term_input</name></name> <modifier>*</modifier></type><name>grub_term_input_t</name>;</typedef>

<struct>struct <name>grub_term_output</name>
<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>


<function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>init</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>fini</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>putchar</name>) <parameter_list>(<parameter><decl><type><name>grub_uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>grub_ssize_t</name></type> (<modifier>*</modifier><name>getcharwidth</name>) <parameter_list>(<parameter><decl><type><name>grub_uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>grub_uint16_t</name></type> (<modifier>*</modifier><name>getwh</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>grub_uint16_t</name></type> (<modifier>*</modifier><name>getxy</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>gotoxy</name>) <parameter_list>(<parameter><decl><type><name>grub_uint8_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>grub_uint8_t</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cls</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>setcolorstate</name>) <parameter_list>(<parameter><decl><type><name>grub_term_color_state</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>setcolor</name>) <parameter_list>(<parameter><decl><type><name>grub_uint8_t</name></type> <name>normal_color</name></decl></parameter>, <parameter><decl><type><name>grub_uint8_t</name></type> <name>highlight_color</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>getcolor</name>) <parameter_list>(<parameter><decl><type><name>grub_uint8_t</name> <modifier>*</modifier></type><name>normal_color</name></decl></parameter>, <parameter><decl><type><name>grub_uint8_t</name> <modifier>*</modifier></type><name>highlight_color</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>setcursor</name>) <parameter_list>(<parameter><decl><type><name>int</name></type> <name>on</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>refresh</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>grub_term_output_t</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>grub_term_outputs_disabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>grub_term_input</name></name> <modifier>*</modifier></type><name>grub_term_inputs_disabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>grub_term_outputs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>grub_term_input</name></name> <modifier>*</modifier></type><name>grub_term_inputs</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_term_register_input</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>term</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_term_register_input_internal (term); GRUB_MODATTR ("terminal", "i" name);</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_term_register_output</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>term</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_term_register_output_internal (term); GRUB_MODATTR ("terminal", "o" name);</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>grub_term_register_input_internal</name> <parameter_list>(<parameter><decl><type><name>grub_term_input_t</name></type> <name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>grub_term_inputs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>grub_list_push</name> <argument_list>(<argument><expr><call><name>GRUB_AS_LIST_P</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>grub_term_inputs_disabled</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GRUB_AS_LIST</name> <argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>term</name><operator>-&gt;</operator><name>init</name></name> <operator>||</operator> <call><name><name>term</name><operator>-&gt;</operator><name>init</name></name> <argument_list>()</argument_list></call> <operator>==</operator> <name>GRUB_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>grub_list_push</name> <argument_list>(<argument><expr><call><name>GRUB_AS_LIST_P</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>grub_term_inputs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GRUB_AS_LIST</name> <argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>grub_term_register_output_internal</name> <parameter_list>(<parameter><decl><type><name>grub_term_output_t</name></type> <name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>grub_term_outputs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>grub_list_push</name> <argument_list>(<argument><expr><call><name>GRUB_AS_LIST_P</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>grub_term_outputs_disabled</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GRUB_AS_LIST</name> <argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>term</name><operator>-&gt;</operator><name>init</name></name> <operator>||</operator> <call><name><name>term</name><operator>-&gt;</operator><name>init</name></name> <argument_list>()</argument_list></call> <operator>==</operator> <name>GRUB_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>grub_list_push</name> <argument_list>(<argument><expr><call><name>GRUB_AS_LIST_P</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>grub_term_outputs</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GRUB_AS_LIST</name> <argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>grub_term_unregister_input</name> <parameter_list>(<parameter><decl><type><name>grub_term_input_t</name></type> <name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_list_remove</name> <argument_list>(<argument><expr><call><name>GRUB_AS_LIST_P</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>grub_term_inputs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GRUB_AS_LIST</name> <argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_list_remove</name> <argument_list>(<argument><expr><call><name>GRUB_AS_LIST_P</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>grub_term_inputs_disabled</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GRUB_AS_LIST</name> <argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>grub_term_unregister_output</name> <parameter_list>(<parameter><decl><type><name>grub_term_output_t</name></type> <name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_list_remove</name> <argument_list>(<argument><expr><call><name>GRUB_AS_LIST_P</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>grub_term_outputs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GRUB_AS_LIST</name> <argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_list_remove</name> <argument_list>(<argument><expr><call><name>GRUB_AS_LIST_P</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name>grub_term_outputs_disabled</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GRUB_AS_LIST</name> <argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ACTIVE_TERM_INPUTS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (var = grub_term_inputs; var; var = var-&gt;next)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_DISABLED_TERM_INPUTS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (var = grub_term_inputs_disabled; var; var = var-&gt;next)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ACTIVE_TERM_OUTPUTS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (var = grub_term_outputs; var; var = var-&gt;next)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_DISABLED_TERM_OUTPUTS</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (var = grub_term_outputs_disabled; var; var = var-&gt;next)</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>grub_putchar</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grub_putcode</name> <parameter_list>(<parameter><decl><type><name>grub_uint32_t</name></type> <name>code</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>grub_getkey</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>grub_checkkey</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>grub_getkeystatus</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grub_cls</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grub_setcolorstate</name> <parameter_list>(<parameter><decl><type><name>grub_term_color_state</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grub_refresh</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grub_puts_terminal</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>grub_uint16_t</name> <modifier>*</modifier></type><name>grub_term_save_pos</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grub_term_restore_pos</name> <parameter_list>(<parameter><decl><type><name>grub_uint16_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>grub_term_width</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><call><name><name>term</name><operator>-&gt;</operator><name>getwh</name></name><argument_list>()</argument_list></call><operator>&amp;</operator><literal type="number">0xFF00</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>grub_term_height</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name><name>term</name><operator>-&gt;</operator><name>getwh</name></name><argument_list>()</argument_list></call><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type>
<name>grub_term_border_width</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>grub_term_width</name> <argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>GRUB_TERM_MARGIN</name> <operator>*</operator> <literal type="number">3</literal> <operator>-</operator> <name>GRUB_TERM_SCROLL_WIDTH</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>grub_term_entry_width</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>grub_term_border_width</name> <argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name>GRUB_TERM_MARGIN</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type>
<name>grub_term_border_height</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>grub_term_height</name> <argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>GRUB_TERM_TOP_BORDER_Y</name>
<operator>-</operator> <name>GRUB_TERM_MESSAGE_HEIGHT</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>grub_term_num_entries</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>grub_term_border_height</name> <argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>grub_term_cursor_x</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>GRUB_TERM_LEFT_BORDER_X</name> <operator>+</operator> <call><name>grub_term_border_width</name> <argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>
<operator>-</operator> <name>GRUB_TERM_MARGIN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>grub_uint16_t</name></type>
<name>grub_term_getxy</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>term</name><operator>-&gt;</operator><name>getxy</name></name> <argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>grub_term_refresh</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>refresh</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>term</name><operator>-&gt;</operator><name>refresh</name></name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>grub_term_gotoxy</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>grub_uint8_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>grub_uint8_t</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>term</name><operator>-&gt;</operator><name>gotoxy</name></name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>grub_term_setcolorstate</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>,
<parameter><decl><type><name>grub_term_color_state</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>setcolorstate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>term</name><operator>-&gt;</operator><name>setcolorstate</name></name> <argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>grub_term_setcolor</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>,
<parameter><decl><type><name>grub_uint8_t</name></type> <name>normal_color</name></decl></parameter>, <parameter><decl><type><name>grub_uint8_t</name></type> <name>highlight_color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>setcolor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>term</name><operator>-&gt;</operator><name>setcolor</name></name> <argument_list>(<argument><expr><name>normal_color</name></expr></argument>, <argument><expr><name>highlight_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>grub_term_setcursor</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>on</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>setcursor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>term</name><operator>-&gt;</operator><name>setcursor</name></name> <argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>grub_term_cls</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>cls</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name><name>term</name><operator>-&gt;</operator><name>cls</name></name><operator>)</operator> <operator>(</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>grub_putcode</name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_term_refresh</name> <argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>grub_ssize_t</name></type>
<name>grub_term_getcharwidth</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>grub_uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>getcharwidth</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>term</name><operator>-&gt;</operator><name>getcharwidth</name></name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>grub_term_getcolor</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>,
<parameter><decl><type><name>grub_uint8_t</name> <modifier>*</modifier></type><name>normal_color</name></decl></parameter>, <parameter><decl><type><name>grub_uint8_t</name> <modifier>*</modifier></type><name>highlight_color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>getcolor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>term</name><operator>-&gt;</operator><name>getcolor</name></name> <argument_list>(<argument><expr><name>normal_color</name></expr></argument>, <argument><expr><name>highlight_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>normal_color</name> <operator>=</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>highlight_color</name> <operator>=</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> (<modifier>*</modifier><name>grub_newline_hook</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>grub_term_autoload</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>grub_term_autoload</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>modname</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>grub_term_autoload</name></name> <modifier>*</modifier></type><name>grub_term_input_autoload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>grub_term_autoload</name></name> <modifier>*</modifier></type><name>grub_term_output_autoload</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>grub_print_spaces</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>number_spaces</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>--</operator><name>number_spaces</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>grub_putcode</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_TERM_ASCII_CHAR</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) &amp; 0xff)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
