<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\fs\fat.c">


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/fshelp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/disk.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/misc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/mm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/dl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/charset.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_FAT_DIR_ENTRY_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_FAT_ATTR_READ_ONLY</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_FAT_ATTR_HIDDEN</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_FAT_ATTR_SYSTEM</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_FAT_ATTR_VOLUME_ID</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_FAT_ATTR_DIRECTORY</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_FAT_ATTR_ARCHIVE</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_FAT_MAXFILE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_FAT_ATTR_LONG_NAME</name></cpp:macro> <cpp:value>(GRUB_FAT_ATTR_READ_ONLY | GRUB_FAT_ATTR_HIDDEN | GRUB_FAT_ATTR_SYSTEM | GRUB_FAT_ATTR_VOLUME_ID)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_FAT_ATTR_VALID</name></cpp:macro> <cpp:value>(GRUB_FAT_ATTR_READ_ONLY | GRUB_FAT_ATTR_HIDDEN | GRUB_FAT_ATTR_SYSTEM | GRUB_FAT_ATTR_DIRECTORY | GRUB_FAT_ATTR_ARCHIVE | GRUB_FAT_ATTR_VOLUME_ID)</cpp:value></cpp:define>





<macro><name>R_PACKED</name><argument_list>(
<argument>struct grub_fat_bpb
{
grub_uint8_t jmp_boot[<literal type="number">3</literal>];
grub_uint8_t oem_name[<literal type="number">8</literal>];
grub_uint16_t bytes_per_sector;
grub_uint8_t sectors_per_cluster;
grub_uint16_t num_reserved_sectors;
grub_uint8_t num_fats;
grub_uint16_t num_root_entries;
grub_uint16_t num_total_sectors_16;
grub_uint8_t media;
grub_uint16_t sectors_per_fat_16;
grub_uint16_t sectors_per_track;
grub_uint16_t num_heads;
grub_uint32_t num_hidden_sectors;
grub_uint32_t num_total_sectors_32;
R_PACKED(
union
{
R_PACKED(
struct
{
grub_uint8_t num_ph_drive;
grub_uint8_t reserved;
grub_uint8_t boot_sig;
grub_uint32_t num_serial;
grub_uint8_t label[<literal type="number">11</literal>];
grub_uint8_t fstype[<literal type="number">8</literal>];
}) fat12_or_fat16;
R_PACKED(
struct
{
grub_uint32_t sectors_per_fat_32;
grub_uint16_t extended_flags;
grub_uint16_t fs_version;
grub_uint32_t root_cluster;
grub_uint16_t fs_info;
grub_uint16_t backup_boot_sector;
grub_uint8_t reserved[<literal type="number">12</literal>];
grub_uint8_t num_ph_drive;
grub_uint8_t reserved1;
grub_uint8_t boot_sig;
grub_uint32_t num_serial;
grub_uint8_t label[<literal type="number">11</literal>];
grub_uint8_t fstype[<literal type="number">8</literal>];
}) fat32;
}) version_specific;
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>R_PACKED</name><argument_list>(
<argument>struct grub_fat_dir_entry
{
grub_uint8_t name[<literal type="number">11</literal>];
grub_uint8_t attr;
grub_uint8_t nt_reserved;
grub_uint8_t c_time_tenth;
grub_uint16_t c_time;
grub_uint16_t c_date;
grub_uint16_t a_date;
grub_uint16_t first_cluster_high;
grub_uint16_t w_time;
grub_uint16_t w_date;
grub_uint16_t first_cluster_low;
grub_uint32_t file_size;
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>struct grub_fat_long_name_entry
{
grub_uint8_t id;
grub_uint16_t name1[<literal type="number">5</literal>];
grub_uint8_t attr;
grub_uint8_t reserved;
grub_uint8_t checksum;
grub_uint16_t name2[<literal type="number">6</literal>];
grub_uint16_t first_cluster;
grub_uint16_t name3[<literal type="number">2</literal>];
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<struct>struct <name>grub_fat_data</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>logical_sector_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>num_sectors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>fat_sector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>sectors_per_fat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fat_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>root_cluster</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>root_sector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>num_root_sectors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cluster_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>cluster_eof_mark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>cluster_sector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>num_clusters</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint8_t</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_ssize_t</name></type> <name>file_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>file_cluster</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>cur_cluster_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>cur_cluster</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>uuid</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>grub_dl_t</name></type> <name>my_mod</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fat_log2</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>grub_fat_data</name></name> <modifier>*</modifier></type>
<name>grub_fat_mount</name> <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_fat_bpb</name></name></type> <name>bpb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_fat_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>first_fat</name></decl>, <decl><type ref="prev"/><name>magic</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>disk</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator>struct <name>grub_fat_data</name> <operator>*</operator><operator>)</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bpb</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>bpb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_strncmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>bpb</name><operator>.</operator><name>version_specific</name><operator>.</operator><name>fat12_or_fat16</name><operator>.</operator><name>fstype</name></name></expr></argument>, <argument><expr><literal type="string">"FAT12"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>grub_strncmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>bpb</name><operator>.</operator><name>version_specific</name><operator>.</operator><name>fat12_or_fat16</name><operator>.</operator><name>fstype</name></name></expr></argument>, <argument><expr><literal type="string">"FAT16"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>grub_strncmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>bpb</name><operator>.</operator><name>version_specific</name><operator>.</operator><name>fat32</name><operator>.</operator><name>fstype</name></name></expr></argument>, <argument><expr><literal type="string">"FAT32"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>logical_sector_bits</name></name> <operator>=</operator>
<call><name>fat_log2</name> <argument_list>(<argument><expr><call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>bpb</name><operator>.</operator><name>bytes_per_sector</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>logical_sector_bits</name></name> <operator>&lt;</operator> <name>GRUB_DISK_SECTOR_BITS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>logical_sector_bits</name></name> <operator>-=</operator> <name>GRUB_DISK_SECTOR_BITS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cluster_bits</name></name> <operator>=</operator> <call><name>fat_log2</name> <argument_list>(<argument><expr><name><name>bpb</name><operator>.</operator><name>sectors_per_cluster</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>cluster_bits</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cluster_bits</name></name> <operator>+=</operator> <name><name>data</name><operator>-&gt;</operator><name>logical_sector_bits</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fat_sector</name></name> <operator>=</operator> <operator>(</operator><call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>bpb</name><operator>.</operator><name>num_reserved_sectors</name></name></expr></argument>)</argument_list></call>
<operator>&lt;&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>logical_sector_bits</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>fat_sector</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sectors_per_fat</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><name><name>bpb</name><operator>.</operator><name>sectors_per_fat_16</name></name></expr>
?</condition><then> <expr><call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>bpb</name><operator>.</operator><name>sectors_per_fat_16</name></name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>bpb</name><operator>.</operator><name>version_specific</name><operator>.</operator><name>fat32</name><operator>.</operator><name>sectors_per_fat_32</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator>
<operator>&lt;&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>logical_sector_bits</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>sectors_per_fat</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>num_sectors</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><name><name>bpb</name><operator>.</operator><name>num_total_sectors_16</name></name></expr>
?</condition><then> <expr><call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>bpb</name><operator>.</operator><name>num_total_sectors_16</name></name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>bpb</name><operator>.</operator><name>num_total_sectors_32</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator>
<operator>&lt;&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>logical_sector_bits</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>num_sectors</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bpb</name><operator>.</operator><name>num_fats</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>root_sector</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>fat_sector</name></name> <operator>+</operator> <name><name>bpb</name><operator>.</operator><name>num_fats</name></name> <operator>*</operator> <name><name>data</name><operator>-&gt;</operator><name>sectors_per_fat</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>num_root_sectors</name></name>
<operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>grub_uint32_t</name><operator>)</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>bpb</name><operator>.</operator><name>num_root_entries</name></name></expr></argument>)</argument_list></call>
<operator>*</operator> <name>GRUB_FAT_DIR_ENTRY_SIZE</name>
<operator>+</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>bpb</name><operator>.</operator><name>bytes_per_sector</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&gt;&gt;</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>logical_sector_bits</name></name> <operator>+</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator><operator>)</operator>
<operator>&lt;&lt;</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>logical_sector_bits</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cluster_sector</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>root_sector</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>num_root_sectors</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>num_clusters</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>num_sectors</name></name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>cluster_sector</name></name><operator>)</operator>
<operator>&gt;&gt;</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>cluster_bits</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>logical_sector_bits</name></name><operator>)</operator><operator>)</operator>
<operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>num_clusters</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>bpb</name><operator>.</operator><name>sectors_per_fat_16</name></name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>flags</name> <init>= <expr><call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>bpb</name><operator>.</operator><name>version_specific</name><operator>.</operator><name>fat32</name><operator>.</operator><name>extended_flags</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>root_cluster</name></name> <operator>=</operator> <call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>bpb</name><operator>.</operator><name>version_specific</name><operator>.</operator><name>fat32</name><operator>.</operator><name>root_cluster</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fat_size</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cluster_eof_mark</name></name> <operator>=</operator> <literal type="number">0x0ffffff8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>active_fat</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>active_fat</name> <operator>&gt;</operator> <name><name>bpb</name><operator>.</operator><name>num_fats</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fat_sector</name></name> <operator>+=</operator> <name>active_fat</name> <operator>*</operator> <name><name>data</name><operator>-&gt;</operator><name>sectors_per_fat</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bpb</name><operator>.</operator><name>num_root_entries</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>bpb</name><operator>.</operator><name>version_specific</name><operator>.</operator><name>fat32</name><operator>.</operator><name>fs_version</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>root_cluster</name></name> <operator>=</operator> <operator>~</operator><literal type="number">0U</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>num_clusters</name></name> <operator>&lt;=</operator> <literal type="number">4085</literal> <operator>+</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fat_size</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cluster_eof_mark</name></name> <operator>=</operator> <literal type="number">0x0ff8</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fat_size</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cluster_eof_mark</name></name> <operator>=</operator> <literal type="number">0xfff8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>num_sectors</name></name> <operator>&lt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>fat_sector</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fat_sector</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>first_fat</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>first_fat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first_fat</name> <operator>=</operator> <call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name>first_fat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>fat_size</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>first_fat</name> <operator>&amp;=</operator> <literal type="number">0x0fffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>magic</name> <operator>=</operator> <literal type="number">0x0fffff00</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>fat_size</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>first_fat</name> <operator>&amp;=</operator> <literal type="number">0x0000ffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>magic</name> <operator>=</operator> <literal type="number">0xff00</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>first_fat</name> <operator>&amp;=</operator> <literal type="number">0x00000fff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>magic</name> <operator>=</operator> <literal type="number">0x0f00</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bpb</name><operator>.</operator><name>sectors_per_fat_16</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>uuid</name></name> <operator>=</operator> <call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>bpb</name><operator>.</operator><name>version_specific</name><operator>.</operator><name>fat12_or_fat16</name><operator>.</operator><name>num_serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>uuid</name></name> <operator>=</operator> <call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>bpb</name><operator>.</operator><name>version_specific</name><operator>.</operator><name>fat32</name><operator>.</operator><name>num_serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>first_fat</name> <operator>|</operator> <literal type="number">0x8</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>magic</name> <operator>|</operator> <name><name>bpb</name><operator>.</operator><name>media</name></name> <operator>|</operator> <literal type="number">0x8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>file_cluster</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>root_cluster</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cur_cluster_num</name></name> <operator>=</operator> <operator>~</operator><literal type="number">0U</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name>GRUB_FAT_ATTR_DIRECTORY</name></expr>;</expr_stmt>
<return>return <expr><name>data</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"not a FAT filesystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_ssize_t</name></type>
<name>grub_fat_read_data</name> <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>grub_fat_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>read_hook</name>) <parameter_list>(<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>sector</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>length</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>grub_off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>grub_size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>grub_size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>logical_cluster</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>logical_cluster_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_ssize_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sector</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>file_cluster</name></name> <operator>==</operator> <operator>~</operator><literal type="number">0U</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>num_root_sectors</name></name> <operator>&lt;&lt;</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>root_sector</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>logical_cluster_bits</name> <operator>=</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>cluster_bits</name></name>
<operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>logical_sector_bits</name></name>
<operator>+</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>logical_cluster</name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <name>logical_cluster_bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>logical_cluster_bits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>logical_cluster</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>cur_cluster_num</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cur_cluster_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cur_cluster</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>file_cluster</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>len</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>logical_cluster</name> <operator>&gt;</operator> <name><name>data</name><operator>-&gt;</operator><name>cur_cluster_num</name></name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>next_cluster</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>fat_offset</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>fat_size</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">32</literal></expr>:</case>
<expr_stmt><expr><name>fat_offset</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>cur_cluster</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><name>fat_offset</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>cur_cluster</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><name>fat_offset</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>cur_cluster</name></name> <operator>+</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>cur_cluster</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fat_sector</name></name></expr></argument>, <argument><expr><name>fat_offset</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>fat_size</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>next_cluster</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next_cluster</name> <operator>=</operator> <call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name>next_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>fat_size</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><name>next_cluster</name> <operator>&amp;=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>cur_cluster</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>next_cluster</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next_cluster</name> <operator>&amp;=</operator> <literal type="number">0x0FFF</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>grub_dprintf</name> <argument_list>(<argument><expr><literal type="string">"fat"</literal></expr></argument>, <argument><expr><literal type="string">"fat_size=%d, next_cluster=%u\n"</literal></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fat_size</name></name></expr></argument>, <argument><expr><name>next_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>next_cluster</name> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>cluster_eof_mark</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next_cluster</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>next_cluster</name> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>num_clusters</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"invalid cluster %u"</literal></expr></argument>,
<argument><expr><name>next_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cur_cluster</name></name> <operator>=</operator> <name>next_cluster</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cur_cluster_num</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>sector</name> <operator>=</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>cluster_sector</name></name>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>cur_cluster</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator>
<operator>&lt;&lt;</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>cluster_bits</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>logical_sector_bits</name></name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>logical_cluster_bits</name><operator>)</operator> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>disk</name><operator>-&gt;</operator><name>read_hook</name></name> <operator>=</operator> <name>read_hook</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disk</name><operator>-&gt;</operator><name>closure</name></name> <operator>=</operator> <name>closure</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_disk_read_ex</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disk</name><operator>-&gt;</operator><name>read_hook</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>logical_cluster</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>
<name>grub_fat_iterate_dir</name> <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>grub_fat_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>grub_fat_dir_entry</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_fat_dir_entry</name></name></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>filep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint16_t</name> <modifier>*</modifier></type><name>unibuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slot</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>slots</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>checksum</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_ssize_t</name></type> <name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>attr</name></name> <operator>&amp;</operator> <name>GRUB_FAT_ATTR_DIRECTORY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FILE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"not a directory"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><literal type="number">0x40</literal> <operator>*</operator> <literal type="number">13</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>unibuf</name> <operator>=</operator> <operator>(</operator><name>grub_uint16_t</name> <operator>*</operator><operator>)</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><literal type="number">0x40</literal> <operator>*</operator> <literal type="number">13</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>filename</name> <operator>||</operator> <operator>!</operator> <name>unibuf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>unibuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>grub_fat_read_data</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>dir</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <name><name>dir</name><operator>.</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>.</operator><name>attr</name></name> <operator>==</operator> <name>GRUB_FAT_ATTR_LONG_NAME</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_fat_long_name_entry</name></name> <modifier>*</modifier></type><name>long_name</name>
<init>= <expr><operator>(</operator>struct <name>grub_fat_long_name_entry</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>dir</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint8_t</name></type> <name>id</name> <init>= <expr><name><name>long_name</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>&amp;=</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>slots</name> <operator>=</operator> <name>slot</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name>checksum</name> <operator>=</operator> <name><name>long_name</name><operator>-&gt;</operator><name>checksum</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name>slot</name> <operator>||</operator> <name>slot</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>checksum</name> <operator>!=</operator> <name><name>long_name</name><operator>-&gt;</operator><name>checksum</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>checksum</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>slot</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name>unibuf</name> <operator>+</operator> <name>slot</name> <operator>*</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><name><name>long_name</name><operator>-&gt;</operator><name>name1</name></name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name>unibuf</name> <operator>+</operator> <name>slot</name> <operator>*</operator> <literal type="number">13</literal> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name><name>long_name</name><operator>-&gt;</operator><name>name2</name></name></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name>unibuf</name> <operator>+</operator> <name>slot</name> <operator>*</operator> <literal type="number">13</literal> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><name><name>long_name</name><operator>-&gt;</operator><name>name3</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>grub_fshelp_view</name> <operator>&amp;</operator> <name>R_FS_VIEW_DELETED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>.</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe5</literal> <operator>||</operator> <operator>(</operator><name><name>dir</name><operator>.</operator><name>attr</name></name> <operator>&amp;</operator> <operator>~</operator><name>GRUB_FAT_ATTR_VALID</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>.</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x05</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dir</name><operator>.</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xe5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>checksum</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>slot</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>grub_uint8_t</name></type> <name>sum</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>dir</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>sum</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>dir</name><operator>.</operator><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>sum</name> <operator>==</operator> <name>checksum</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>slots</name> <operator>*</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>unibuf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>unibuf</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><call><name>grub_utf16_to_utf8</name> <argument_list>(<argument><expr><operator>(</operator><name>grub_uint8_t</name> <operator>*</operator><operator>)</operator> <name>filename</name></expr></argument>, <argument><expr><name>unibuf</name></expr></argument>,
<argument><expr><name>slots</name> <operator>*</operator> <literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hook</name> <operator>&amp;&amp;</operator> <call><name>hook</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>checksum</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>checksum</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>filep</name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>.</operator><name>attr</name></name> <operator>&amp;</operator> <name>GRUB_FAT_ATTR_VOLUME_ID</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>dir</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name><name>dir</name><operator>.</operator><name>name</name><index>[<expr><name>i</name></expr>]</index></name>
<operator>&amp;&amp;</operator> <operator>!</operator> <call><name>grub_isspace</name> <argument_list>(<argument><expr><name><name>dir</name><operator>.</operator><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>filep</name><operator>++</operator> <operator>=</operator> <name><name>dir</name><operator>.</operator><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>dir</name><operator>.</operator><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>grub_isspace</name> <argument_list>(<argument><expr><name><name>dir</name><operator>.</operator><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>filep</name><operator>++</operator> <operator>=</operator> <call><name>grub_tolower</name> <argument_list>(<argument><expr><name><name>dir</name><operator>.</operator><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>filep</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">11</literal> <operator>&amp;&amp;</operator> <name><name>dir</name><operator>.</operator><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>grub_isspace</name> <argument_list>(<argument><expr><name><name>dir</name><operator>.</operator><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name>filep</name> <operator>=</operator> <call><name>grub_tolower</name> <argument_list>(<argument><expr><name><name>dir</name><operator>.</operator><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>filep</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filep</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>filep</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hook</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>unibuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>grub_fat_find_dir_closure</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>grub_fat_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_dirhook_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dirname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>call_hook</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>grub_fat_find_dir_hook</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>grub_fat_dir_entry</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_fat_find_dir_closure</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>closure</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_dirhook_info</name></name></type> <name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>grub_memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator> <operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>attr</name></name> <operator>&amp;</operator> <name>GRUB_FAT_ATTR_DIRECTORY</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>case_insensitive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>attr</name></name> <operator>&amp;</operator> <name>GRUB_FAT_ATTR_VOLUME_ID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>dirname</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>call_hook</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>c</name><operator>-&gt;</operator><name>hook</name></name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>closure</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_strcasecmp</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dirname</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_fat_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>found</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>attr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>file_size</name></name> <operator>=</operator> <call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>file_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>file_cluster</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>first_cluster_high</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
<operator>|</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>first_cluster_low</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cur_cluster_num</name></name> <operator>=</operator> <operator>~</operator><literal type="number">0U</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>call_hook</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>hook</name></name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>closure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>grub_fat_find_dir</name> <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>grub_fat_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_dirhook_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dirname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dirp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_fat_find_dir_closure</name></name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>attr</name></name> <operator>&amp;</operator> <name>GRUB_FAT_ATTR_DIRECTORY</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FILE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"not a directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>dirp</name> <operator>=</operator> <call><name>grub_strchr</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dirp</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name> <init>= <expr><name>dirp</name> <operator>-</operator> <name>path</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>dirname</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dirname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>grub_strdup</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>.</operator><name>hook</name></name> <operator>=</operator> <name>hook</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>.</operator><name>closure</name></name> <operator>=</operator> <name>closure</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>.</operator><name>dirname</name></name> <operator>=</operator><name>dirname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>.</operator><name>found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>.</operator><name>call_hook</name></name> <operator>=</operator> <operator>(</operator><operator>!</operator> <name>dirp</name> <operator>&amp;&amp;</operator> <name>hook</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_fat_iterate_dir</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>grub_fat_find_dir_hook</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>grub_errno</name> <operator>==</operator> <name>GRUB_ERR_NONE</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name><name>c</name><operator>.</operator><name>found</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>.</operator><name>call_hook</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_FILE_NOT_FOUND</name></expr></argument>, <argument><expr><literal type="string">"file not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>c</name><operator>.</operator><name>found</name></name></expr> ?</condition><then> <expr><name>dirp</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>
<name>grub_fat_dir</name> <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_dirhook_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_fat_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_disk_t</name></type> <name>disk</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dirname</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_dl_ref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_fat_mount</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>grub_strlen</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>dirname</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>dirname</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>dirname</name></expr>;</expr_stmt>

<do>do
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>grub_fat_find_dir</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>hook</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name>grub_errno</name> <operator>==</operator> <name>GRUB_ERR_NONE</name></expr>)</condition>;</do>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>
<name>grub_fat_open</name> <parameter_list>(<parameter><decl><type><name>grub_file_t</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_fat_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>name</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_dl_ref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_fat_mount</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<do>do
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>grub_fat_find_dir</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>grub_errno</name> <operator>!=</operator> <name>GRUB_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block>
while <condition>(<expr><name>p</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>attr</name></name> <operator>&amp;</operator> <name>GRUB_FAT_ATTR_DIRECTORY</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FILE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"not a file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>file_size</name></name></expr>;</expr_stmt>

<return>return <expr><name>GRUB_ERR_NONE</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_ssize_t</name></type>
<name>grub_fat_read</name> <parameter_list>(<parameter><decl><type><name>grub_file_t</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>grub_size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>grub_fat_read_data</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>read_hook</name></name></expr></argument>,
<argument><expr><name><name>file</name><operator>-&gt;</operator><name>closure</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>,
<argument><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>
<name>grub_fat_close</name> <parameter_list>(<parameter><decl><type><name>grub_file_t</name></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>grub_fat_label_hook</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>grub_fat_dir_entry</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>label</name> <init>= <expr><name>closure</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>attr</name></name> <operator>==</operator> <name>GRUB_FAT_ATTR_VOLUME_ID</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>label</name> <operator>=</operator> <call><name>grub_strdup</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>
<name>grub_fat_label</name> <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_fat_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_disk_t</name></type> <name>disk</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_dl_ref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_fat_mount</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>attr</name></name> <operator>&amp;</operator> <name>GRUB_FAT_ATTR_DIRECTORY</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FILE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"not a directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>label</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_fat_iterate_dir</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>grub_fat_label_hook</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>
<name>grub_fat_uuid</name> <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>uuid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_fat_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_disk_t</name></type> <name>disk</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_dl_ref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_fat_mount</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>uuid</name> <operator>=</operator> <call><name>grub_xasprintf</name> <argument_list>(<argument><expr><literal type="string">"%04x-%04x"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>grub_uint16_t</name><operator>)</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>uuid</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>grub_uint16_t</name><operator>)</operator> <name><name>data</name><operator>-&gt;</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>uuid</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fs</name></name></type> <name>grub_fat_fs</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"fat"</literal></expr>,
<expr><operator>.</operator><name>dir</name> <operator>=</operator> <name>grub_fat_dir</name></expr>,
<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>grub_fat_open</name></expr>,
<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>grub_fat_read</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>grub_fat_close</name></expr>,
<expr><operator>.</operator><name>label</name> <operator>=</operator> <name>grub_fat_label</name></expr>,
<expr><operator>.</operator><name>uuid</name> <operator>=</operator> <name>grub_fat_uuid</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_UTIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>.</operator><name>reserved_first_sector</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>.</operator><name>next</name> <operator>=</operator> <literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
