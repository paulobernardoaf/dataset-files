<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\fs\fb.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/dl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/mm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/disk.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/misc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/fbfs.h&gt;</cpp:file></cpp:include>

<struct>struct <name>grub_fb_data</name>
<block>{
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>ofs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>pri_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fbm_file</name></name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>fb_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>grub_fb_data</name></name> <modifier>*</modifier></type>
<name>grub_fbfs_mount</name> <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fb_mbr</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fb_data</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_fb_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>boot_base</name></decl>, <decl><type ref="prev"/><name>boot_size</name></decl>, <decl><type ref="prev"/><name>list_used</name></decl>, <decl><type ref="prev"/><name>pri_size</name></decl>, <decl><type ref="prev"/><name>ofs</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fb_list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name> <modifier>*</modifier></type><name>grub32</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator>struct <name>fb_mbr</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator>struct <name>fb_data</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>grub32</name> <operator>=</operator> <operator>(</operator><name>grub_uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>grub32</name> <operator>==</operator> <name>FB_AR_MAGIC_LONG</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ofs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>boot_base</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>boot_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pri_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>fb_magic</name></name> <operator>!=</operator> <name>FB_MAGIC_LONG</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>end_magic</name></name> <operator>!=</operator> <literal type="number">0xaa55</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ofs</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>lba</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>boot_base</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>boot_base</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name>boot_base</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>ofs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>boot_size</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>boot_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pri_size</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>pri_size</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>ver_major</name></name> <operator>!=</operator> <name>FB_VER_MAJOR</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>ver_minor</name></name> <operator>!=</operator> <name>FB_VER_MINOR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>list_used</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>list_used</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>list_used</name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fb_list</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>fb_list</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name>boot_base</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>boot_size</name> <operator>-</operator> <name>ofs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>list_used</name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr></argument>, <argument><expr><name>fb_list</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p2</name> <operator>=</operator> <name>fb_list</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>list_used</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p1</name> <operator>+=</operator> <literal type="number">510</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>+=</operator> <literal type="number">512</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><literal type="number">510</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ofs</name></name> <operator>=</operator> <name>ofs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pri_size</name></name> <operator>=</operator> <name>pri_size</name></expr>;</expr_stmt>
<return>return <expr><name>data</name></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"not a fb filesystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>
<name>grub_fbfs_dir</name> <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_dirhook_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_dirhook_info</name></name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fbm_file</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>ofs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_fb_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_fbfs_mount</name> <argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>hook</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GRUB_ERR_NONE</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>grub_strlen</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fn</name> <operator>=</operator> <call><name>grub_strrchr</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ofs</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>fn</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>fn</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>path</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>mtimeset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>fbm_file</name> <operator>*</operator><operator>)</operator> <name><name>data</name><operator>-&gt;</operator><name>fb_list</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>mtime</name></name> <operator>=</operator> <call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator> <call><name>grub_memcmp</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>hook</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <name>ofs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>fbm_file</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>p</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GRUB_ERR_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>
<name>grub_fbfs_open</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fbm_file</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_fb_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_fbfs_mount</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>fbm_file</name> <operator>*</operator><operator>)</operator> <name><name>data</name><operator>-&gt;</operator><name>fb_list</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>grub_strcasecmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>
<return>return <expr><name>GRUB_ERR_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>fbm_file</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>p</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_FILE_NOT_FOUND</name></expr></argument>, <argument><expr><literal type="string">"file not found"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_ssize_t</name></type>
<name>grub_fbfs_read</name> <parameter_list>(<parameter><decl><type><name>grub_file_t</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>grub_size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fbm_file</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>sector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_size_t</name></type> <name>saved_len</name></decl>, <decl><type ref="prev"/><name>ofs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_fb_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>disk</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disk</name><operator>-&gt;</operator><name>read_hook</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>read_hook</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disk</name><operator>-&gt;</operator><name>closure</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>closure</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>data_start</name></name> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>pri_size</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>grub_err_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>grub_disk_read_ex</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data_start</name></name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>ofs</name></name></expr></argument>,
<argument><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disk</name><operator>-&gt;</operator><name>read_hook</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>err</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>grub_ssize_t</name><operator>)</operator> <name>len</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sector</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data_start</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>grub_uint32_t</name><operator>)</operator> <name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>/</operator> <literal type="number">510</literal><operator>)</operator> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>ofs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ofs</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>grub_uint32_t</name><operator>)</operator> <name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>%</operator> <literal type="number">510</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ofs</name> <operator>+</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">510</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">510</literal> <operator>-</operator> <name>ofs</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><name>ofs</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>saved_len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sector</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ofs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>disk</name><operator>-&gt;</operator><name>read_hook</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>saved_len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>
<name>grub_fbfs_close</name> <parameter_list>(<parameter><decl><type><name>grub_file_t</name></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GRUB_ERR_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>
<name>grub_fbfs_label</name> <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter> ,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>label</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>GRUB_ERR_NONE</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fs</name></name></type> <name>grub_fb_fs</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"fbfs"</literal></expr>,
<expr><operator>.</operator><name>dir</name> <operator>=</operator> <name>grub_fbfs_dir</name></expr>,
<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>grub_fbfs_open</name></expr>,
<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>grub_fbfs_read</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>grub_fbfs_close</name></expr>,
<expr><operator>.</operator><name>label</name> <operator>=</operator> <name>grub_fbfs_label</name></expr>,
<expr><operator>.</operator><name>next</name> <operator>=</operator> <literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

</unit>
