<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\kern\partition.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/misc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/mm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/partition.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/disk.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_partition_map_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_partition_get_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_partition_iterate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_partition_probe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>grub_partition_map_t</name></type> <name>grub_partition_map_list</name></decl>;</decl_stmt>

<struct>struct <name>find_func_closure</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>partnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_partition_t</name></type> <name>p</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>find_func</name> <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>d</name></decl></parameter> ,
<parameter><decl><type><specifier>const</specifier> <name>grub_partition_t</name></type> <name>partition</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>find_func_closure</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>closure</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>partnum</name></name> <operator>==</operator> <name><name>partition</name><operator>-&gt;</operator><name>number</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>grub_partition_t</name><operator>)</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>c</name><operator>-&gt;</operator><name>p</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>partition</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_partition_t</name></type>
<name>grub_partition_map_probe</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>grub_partition_map_t</name></type> <name>partmap</name></decl></parameter>,
<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>partnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>find_func_closure</name></name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>partnum</name></name> <operator>=</operator> <name>partnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>.</operator><name>p</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>partmap</name><operator>-&gt;</operator><name>iterate</name></name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name>find_func</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name><name>c</name><operator>.</operator><name>p</name></name></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>grub_partition_t</name></type>
<name>grub_partition_probe</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_disk</name></name> <modifier>*</modifier></type><name>disk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>grub_partition_t</name></type> <name>part</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_partition_t</name></type> <name>curpart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_partition_t</name></type> <name>tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>part</name> <operator>=</operator> <name>tail</name> <operator>=</operator> <name><name>disk</name><operator>-&gt;</operator><name>partition</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>grub_partition_map_t</name></type> <name>partmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>partname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>partname_end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>partname</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>grub_isalpha</name> <argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>partname_end</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>grub_strtoul</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curpart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>FOR_PARTITION_MAPS</name><argument_list>(<argument>partmap</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>partname_end</name> <operator>!=</operator> <name>partname</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>grub_strncmp</name> <argument_list>(<argument><expr><name><name>partmap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>partname</name></expr></argument>, <argument><expr><name>partname_end</name> <operator>-</operator> <name>partname</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>partmap</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>partname_end</name> <operator>-</operator> <name>partname</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>disk</name><operator>-&gt;</operator><name>partition</name></name> <operator>=</operator> <name>part</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curpart</name> <operator>=</operator> <call><name>grub_partition_map_probe</name> <argument_list>(<argument><expr><name>partmap</name></expr></argument>, <argument><expr><name>disk</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disk</name><operator>-&gt;</operator><name>partition</name></name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curpart</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name> <operator>==</operator> <name>GRUB_ERR_BAD_PART_TABLE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>grub_errno</name> <operator>=</operator> <name>GRUB_ERR_NONE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>curpart</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>part</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>curpart</name> <operator>=</operator> <name><name>part</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>part</name> <operator>=</operator> <name>curpart</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>curpart</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>part</name></expr>;</expr_stmt>
<expr_stmt><expr><name>part</name> <operator>=</operator> <name>curpart</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>ptr</name> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>part</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>part_iterate_closure</name>
<block>{
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>grub_partition_t</name></type> <name>partition</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>part_iterate</name> <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>dsk</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>grub_partition_t</name></type> <name>partition</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>part_iterate_closure</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>closure</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_partition</name></name></type> <name>p</name> <init>= <expr><operator>*</operator><name>partition</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name><name>dsk</name><operator>-&gt;</operator><name>partition</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsk</name><operator>-&gt;</operator><name>partition</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>-&gt;</operator><name>hook</name></name> <argument_list>(<argument><expr><name>dsk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>closure</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>start</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_partition_map</name></name> <modifier>*</modifier></type><name>partmap</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dsk</name><operator>-&gt;</operator><name>partition</name></name> <operator>=</operator> <operator>&amp;</operator><name>p</name></expr>;</expr_stmt>
<macro><name>FOR_PARTITION_MAPS</name><argument_list>(<argument>partmap</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>grub_err_t</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>partmap</name><operator>-&gt;</operator><name>iterate</name></name> <argument_list>(<argument><expr><name>dsk</name></expr></argument>, <argument><expr><name>part_iterate</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>grub_errno</name> <operator>=</operator> <name>GRUB_ERR_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ret</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dsk</name><operator>-&gt;</operator><name>partition</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>parent</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>ret</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>grub_partition_iterate</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_disk</name></name> <modifier>*</modifier></type><name>disk</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>grub_partition_t</name></type> <name>partition</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>part_iterate_closure</name></name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_partition_map</name></name> <modifier>*</modifier></type><name>partmap</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>hook</name></name> <operator>=</operator> <name>hook</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>.</operator><name>closure</name></name> <operator>=</operator> <name>closure</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>.</operator><name>ret</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>FOR_PARTITION_MAPS</name><argument_list>(<argument>partmap</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>grub_err_t</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>partmap</name><operator>-&gt;</operator><name>iterate</name></name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name>part_iterate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>grub_errno</name> <operator>=</operator> <name>GRUB_ERR_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>ret</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><name><name>c</name><operator>.</operator><name>ret</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>grub_partition_get_name</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>grub_partition_t</name></type> <name>partition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_partition_t</name></type> <name>part</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>part</name> <operator>=</operator> <name>partition</name></expr>;</init> <condition><expr><name>part</name></expr>;</condition> <incr><expr><name>part</name> <operator>=</operator> <name><name>part</name><operator>-&gt;</operator><name>parent</name></name></expr></incr>)</control>
<block>{<block_content>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><call><name>grub_strlen</name> <argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>partmap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>grub_malloc</name><argument_list>(<argument><expr><call><name>grub_strlen</name> <argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>partmap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">25</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>strl</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>grub_snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%d"</literal></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>partmap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>part</name><operator>-&gt;</operator><name>number</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strl</name> <operator>=</operator> <call><name>grub_strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curlen</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>grub_realloc</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>curlen</name> <operator>+</operator> <name>strl</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>strl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>curlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>curlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>strl</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>strl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>strl</name></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curlen</name> <operator>=</operator> <name>curlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>strl</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>grub_free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>curlen</name> <operator>=</operator> <name>strl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>grub_strdup</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>
</unit>
