<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\kern\term.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/term.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/mm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/misc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/env.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/time.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_term_inputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_term_outputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_term_inputs_disabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_term_outputs_disabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_putchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_putcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_putcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_getkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_getkeystatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_checkkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_cls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_setcolorstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_refresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_newline_hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>grub_term_outputs_disabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_term_input</name></name> <modifier>*</modifier></type><name>grub_term_inputs_disabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>grub_term_outputs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_term_input</name></name> <modifier>*</modifier></type><name>grub_term_inputs</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>grub_newline_hook</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>


<function><type><name>void</name></type>
<name>grub_putcode</name> <parameter_list>(<parameter><decl><type><name>grub_uint32_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>getxy</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><call><name><name>term</name><operator>-&gt;</operator><name>getxy</name></name> <argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>n</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>grub_putcode</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name><name>term</name><operator>-&gt;</operator><name>putchar</name></name><operator>)</operator> <operator>(</operator><name>code</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name><name>term</name><operator>-&gt;</operator><name>putchar</name></name><operator>)</operator> <operator>(</operator><literal type="char">'\r'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type>
<name>grub_putchar</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>grub_size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>grub_uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint8_t</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>grub_utf8_to_ucs4</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>grub_uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>rest</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>rest</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_memmove</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>FOR_ACTIVE_TERM_OUTPUTS</name><argument_list>(<argument>term</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>grub_putcode</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>grub_newline_hook</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>grub_newline_hook</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>grub_getkey</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>grub_term_input_t</name></type> <name>term</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_refresh</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<macro><name>FOR_ACTIVE_TERM_INPUTS</name><argument_list>(<argument>term</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name><name>term</name><operator>-&gt;</operator><name>checkkey</name></name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>term</name><operator>-&gt;</operator><name>getkey</name></name> <argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>grub_cpu_idle</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>grub_checkkey</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>grub_term_input_t</name></type> <name>term</name></decl>;</decl_stmt>

<macro><name>FOR_ACTIVE_TERM_INPUTS</name><argument_list>(<argument>term</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name><name>term</name><operator>-&gt;</operator><name>checkkey</name></name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>key</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>grub_getkeystatus</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_term_input_t</name></type> <name>term</name></decl>;</decl_stmt>

<macro><name>FOR_ACTIVE_TERM_INPUTS</name><argument_list>(<argument>term</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>getkeystatus</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>|=</operator> <call><name><name>term</name><operator>-&gt;</operator><name>getkeystatus</name></name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>grub_cls</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>

<macro><name>FOR_ACTIVE_TERM_OUTPUTS</name><argument_list>(<argument>term</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>term</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>GRUB_TERM_DUMB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>grub_env_get</name> <argument_list>(<argument><expr><literal type="string">"debug"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_putcode</name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_term_refresh</name> <argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name><name>term</name><operator>-&gt;</operator><name>cls</name></name><operator>)</operator> <operator>(</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>grub_setcolorstate</name> <parameter_list>(<parameter><decl><type><name>grub_term_color_state</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>

<macro><name>FOR_ACTIVE_TERM_OUTPUTS</name><argument_list>(<argument>term</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>grub_term_setcolorstate</name> <argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>grub_refresh</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_term_output</name></name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>

<macro><name>FOR_ACTIVE_TERM_OUTPUTS</name><argument_list>(<argument>term</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>grub_term_refresh</name> <argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
