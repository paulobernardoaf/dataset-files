<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\kern\err.c">


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/misc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/i18n.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_error_push</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_error_pop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_print_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_err_printf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_MAX_ERRMSG</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_ERROR_STACK_SIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<decl_stmt><decl><type><name>grub_err_t</name></type> <name>grub_errno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>grub_errmsg</name><index>[<expr><name>GRUB_MAX_ERRMSG</name></expr>]</index></name></decl>;</decl_stmt>

<struct><specifier>static</specifier> struct
<block>{
<decl_stmt><decl><type><name>grub_err_t</name></type> <name>no</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errmsg</name><index>[<expr><name>GRUB_MAX_ERRMSG</name></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>grub_error_stack_items</name><index>[<expr><name>GRUB_ERROR_STACK_SIZE</name></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>grub_error_stack_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>grub_error_stack_assert</name></decl>;</decl_stmt>

<function><type><name>grub_err_t</name></type>
<name>grub_error</name> <parameter_list>(<parameter><decl><type><name>grub_err_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>grub_errno</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_vsnprintf</name> <argument_list>(<argument><expr><name>grub_errmsg</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>grub_errmsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>grub_fatal</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_vprintf</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>grub_error_push</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>grub_error_stack_pos</name> <operator>&lt;</operator> <name>GRUB_ERROR_STACK_SIZE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>grub_error_stack_items</name><index>[<expr><name>grub_error_stack_pos</name></expr>]</index></name><operator>.</operator><name>no</name> <operator>=</operator> <name>grub_errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name><name>grub_error_stack_items</name><index>[<expr><name>grub_error_stack_pos</name></expr>]</index></name><operator>.</operator><name>errmsg</name></expr></argument>,
<argument><expr><name>grub_errmsg</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>grub_errmsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>grub_error_stack_pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name>grub_error_stack_assert</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name>grub_errno</name> <operator>=</operator> <name>GRUB_ERR_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>grub_error_pop</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>grub_error_stack_pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>grub_error_stack_pos</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>grub_errno</name> <operator>=</operator> <name><name>grub_error_stack_items</name><index>[<expr><name>grub_error_stack_pos</name></expr>]</index></name><operator>.</operator><name>no</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name>grub_errmsg</name></expr></argument>,
<argument><expr><name><name>grub_error_stack_items</name><index>[<expr><name>grub_error_stack_pos</name></expr>]</index></name><operator>.</operator><name>errmsg</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>grub_errmsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>grub_errno</name> <operator>=</operator> <name>GRUB_ERR_NONE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>grub_print_error</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>grub_errno</name> <operator>!=</operator> <name>GRUB_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>grub_err_printf</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error: %s.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>grub_errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
while <condition>(<expr><call><name>grub_error_pop</name> <argument_list>()</argument_list></call></expr>)</condition>;</do>


<if_stmt><if>if <condition>(<expr><name>grub_error_stack_assert</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_err_printf</name> <argument_list>(<argument><expr><literal type="string">"assert: error stack overflow detected!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>grub_error_stack_assert</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
