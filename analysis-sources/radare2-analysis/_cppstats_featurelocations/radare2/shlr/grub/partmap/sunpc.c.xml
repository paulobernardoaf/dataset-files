<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\grub\partmap\sunpc.c">


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/partition.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/disk.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/mm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/misc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/dl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/symbol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PARTMAP_SUN_PC_MAGIC</name></cpp:macro> <cpp:value>0xDABE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PARTMAP_SUN_PC_MAX_PARTS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_PARTMAP_SUN_PC_WHOLE_DISK_ID</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>

<macro><name>R_PACKED</name> <argument_list>(
<argument>struct grub_sun_pc_partition_descriptor
{
grub_uint16_t id;
grub_uint16_t unused;
grub_uint32_t start_sector;
grub_uint32_t num_sectors;
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(
<argument>struct grub_sun_pc_block
{
grub_uint8_t unused[<literal type="number">72</literal>];
struct grub_sun_pc_partition_descriptor partitions[GRUB_PARTMAP_SUN_PC_MAX_PARTS];
grub_uint8_t unused2[<literal type="number">244</literal>];
grub_uint16_t magic; 
grub_uint16_t csum; 
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_partition_map</name></name></type> <name>grub_sun_pc_partition_map</name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>grub_sun_is_valid</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_sun_pc_block</name></name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>grub_unaligned_uint16_t</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>grub_uint16_t</name> <operator>*</operator><operator>)</operator> <name>label</name></expr>;</init>
<condition><expr><name>pos</name> <operator>&lt;</operator> <operator>(</operator><name>grub_uint16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>label</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition>
<incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>^=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><operator>!</operator> <name>sum</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>
<name>sun_pc_partition_map_iterate</name> <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>grub_partition_t</name></type> <name>partition</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>grub_partition_t</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_sun_pc_block</name></name></type> <name>block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>partnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grub_err_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>grub_partition_t</name><operator>)</operator> <call><name>grub_zalloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>grub_partition</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>partmap</name></name> <operator>=</operator> <operator>&amp;</operator><name>grub_sun_pc_partition_map</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>grub_disk_read</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>grub_sun_pc_block</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>GRUB_PARTMAP_SUN_PC_MAGIC</name> <operator>!=</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>magic</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_PART_TABLE</name></expr></argument>,
<argument><expr><literal type="string">"not a sun_pc partition table"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>grub_sun_is_valid</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>block</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_PART_TABLE</name></expr></argument>, <argument><expr><literal type="string">"invalid checksum"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>partnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>partnum</name> <operator>&lt;</operator> <name>GRUB_PARTMAP_SUN_PC_MAX_PARTS</name></expr>;</condition> <incr><expr><name>partnum</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_sun_pc_partition_descriptor</name></name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>.</operator><name>partitions</name><index>[<expr><name>partnum</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>block</name><operator>.</operator><name>partitions</name><index>[<expr><name>partnum</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>GRUB_PARTMAP_SUN_PC_WHOLE_DISK_ID</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <operator>&amp;</operator><name><name>block</name><operator>.</operator><name>partitions</name><index>[<expr><name>partnum</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>start_sector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>num_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name>partnum</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>hook</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>partnum</name> <operator>=</operator> <name>GRUB_PARTMAP_SUN_PC_MAX_PARTS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name><name>struct</name> <name>grub_partition_map</name></name></type> <name>grub_sun_pc_partition_map</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sunpc"</literal></expr>,
<expr><operator>.</operator><name>iterate</name> <operator>=</operator> <name>sun_pc_partition_map_iterate</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

</unit>
