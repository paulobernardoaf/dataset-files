<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\java\class.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"class.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dsojson.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>PrintfCallback</name></type> <name>Eprintf</name> <init>=<expr><operator>(</operator><name>PrintfCallback</name><operator>)</operator> <name>printf</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFDBG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IFDBG</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_THE_DBG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFDBG</name></cpp:macro> <cpp:value>if (DO_THE_DBG)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFINT</name></cpp:macro> <cpp:value>if (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CPITEMS</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>

<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier><name>U</name></type>(<name>r_bin_java_unmangle_method</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bin_java_is_fm_type_private</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bin_java_is_fm_type_protected</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut32</name> <name>U</name></type>(<name>r_bin_java_swap_uint</name>)<parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>add_cp_objs_to_sdb</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>add_field_infos_to_sdb</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>add_method_infos_to_sdb</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>retrieve_all_access_string_and_value</name><parameter_list>(<parameter><decl><type><name>RBinJavaAccessFlags</name> <modifier>*</modifier></type><name>access_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>retrieve_access_string</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>RBinJavaAccessFlags</name> <modifier>*</modifier></type><name>access_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut16</name></type> <name>calculate_access_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>access_flags_str</name></decl></parameter>, <parameter><decl><type><name>RBinJavaAccessFlags</name> <modifier>*</modifier></type><name>access_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bin_java_new_bin</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>loadaddr</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>extract_type_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg_str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_bin_java_check_reset_cp_obj</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_get_4bytes</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_get_8bytes</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_get_utf8</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_get_item_from_bin_cp_list</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_get_item_from_cp_item_list</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>cp_list</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_class_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_fieldref_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_methodref_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_interfacemethodref_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_name_and_type_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_string_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_integer_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_float_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_long_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_double_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_utf8_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_do_nothing_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_clone_cp_item</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_clone_cp_idx</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_methodhandle_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_methodtype_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_invokedynamic_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_default_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_obj_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_utf8_info_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_do_nothing_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_fmtype_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_read_next_attr</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_read_next_constant_pool_item</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrMetas</name> <modifier>*</modifier></type><name>r_bin_java_get_attr_type_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_get_java_null_cp</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_read_class_file2</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_get_attr_from_field</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>R_BIN_JAVA_ATTR_TYPE</name></type> <name>attr_type</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaField</name> <modifier>*</modifier></type><name>r_bin_java_read_next_field</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaField</name> <modifier>*</modifier></type><name>r_bin_java_read_next_method</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_utf8_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_name_and_type_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_double_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_long_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_float_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_integer_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_string_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_classref_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_fieldref_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_methodref_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_interfacemethodref_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_unknown_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_null_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_unknown_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_methodhandle_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_methodtype_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_invokedynamic_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_unknown_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaInterfaceInfo</name> <modifier>*</modifier></type><name>r_bin_java_interface_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaInterfaceInfo</name> <modifier>*</modifier></type><name>r_bin_java_read_next_interface_item</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_interface_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_stack_frame_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_stack_map_table_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_verification_info_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_stack_map_table_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_stack_map_frame_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_verification_info_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaVerificationObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>r_bin_java_build_stack_frame_from_local_variable_table</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>r_bin_java_print_stack_map_append_frame_summary</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>r_bin_java_stack_frame_default_free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stack_frame</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>r_bin_java_stack_frame_do_nothing_free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stack_frame</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>r_bin_java_stack_frame_do_nothing_new</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type> <name>stack_frame</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>r_bin_java_stack_map_frame_new</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>p_frame</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RBinJavaElementValue</name> <modifier>*</modifier></type><name>r_bin_java_element_value_new</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RBinJavaAnnotation</name> <modifier>*</modifier></type><name>r_bin_java_annotation_new</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaElementValuePair</name> <modifier>*</modifier></type><name>r_bin_java_element_pair_new</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaElementValue</name> <modifier>*</modifier></type><name>r_bin_java_element_value_new</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RBinJavaBootStrapMethod</name> <modifier>*</modifier></type><name>r_bin_java_bootstrap_method_new</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAnnotationsArray</name> <modifier>*</modifier></type><name>r_bin_java_annotation_array_new</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaElementValueMetas</name> <modifier>*</modifier></type><name>r_bin_java_get_ev_meta_from_tag</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaCPTypeMetas</name> <modifier>*</modifier><name>U</name></type>(<name>r_bin_java_get_cp_meta_from_tag</name>)<parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_inner_classes_attr_entry_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_annotation_default_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_enclosing_methods_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_local_variable_type_table_attr_entry_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lvattr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_local_variable_type_table_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_signature_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_source_debug_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_element_value_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>element_value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_element_pair_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>evp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_annotation_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>annotation</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_rtv_annotations_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_rti_annotations_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_annotation_array_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>annotation_array</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_bootstrap_methods_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_bootstrap_method_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>bsm</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_bootstrap_method_argument_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>bsm_arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_rtvp_annotations_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_rtip_annotations_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_unknown_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_code_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_constant_value_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_deprecated_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_exceptions_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_inner_classes_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_line_number_table_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_local_variable_table_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_source_code_file_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_synthetic_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_annotation_default_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_enclosing_methods_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_local_variable_type_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaLocalVariableTypeAttribute</name> <modifier>*</modifier></type><name>lvattr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_local_variable_type_table_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_signature_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_source_debug_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_element_value_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaElementValue</name> <modifier>*</modifier></type><name>element_value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_annotation_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAnnotation</name> <modifier>*</modifier></type><name>annotation</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_element_pair_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaElementValuePair</name> <modifier>*</modifier></type><name>evp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_bootstrap_methods_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_rtv_annotations_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_rti_annotations_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_annotation_array_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAnnotationsArray</name> <modifier>*</modifier></type><name>annotation_array</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_rtvp_annotations_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_rtip_annotations_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_attribute_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_constant_pool</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_field_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>field</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_method_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>field</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_code_exceptions_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaExceptionEntry</name> <modifier>*</modifier></type><name>exc_entry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_code_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_constant_value_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_deprecated_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_exceptions_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_classes_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaClassesAttribute</name> <modifier>*</modifier></type><name>icattr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_inner_classes_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_line_number_table_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_local_variable_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaLocalVariableAttribute</name> <modifier>*</modifier></type><name>lvattr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_local_variable_table_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_source_code_file_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_synthetic_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_read_next_attr_from_buffer</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_unknown_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_annotation_default_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_enclosing_methods_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_local_variable_type_table_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_signature_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_source_debug_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_bootstrap_methods_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_rtv_annotations_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_rti_annotations_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_rtvp_annotations_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_rtip_annotations_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_code_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_constant_value_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_deprecated_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_exceptions_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_inner_classes_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_line_number_table_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_local_variable_table_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_source_code_file_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_stack_map_table_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_synthetic_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_unknown_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_annotation_default_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_enclosing_methods_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_local_variable_type_table_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_signature_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_source_debug_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_bootstrap_methods_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_rtv_annotations_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_rti_annotations_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_rtvp_annotations_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_rtip_annotations_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_code_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_constant_value_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_deprecated_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_exceptions_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_inner_classes_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_line_number_table_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_local_variable_table_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_source_code_file_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_stack_map_table_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_synthetic_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_bootstrap_method_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaBootStrapMethod</name> <modifier>*</modifier></type><name>bsm</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_element_pair_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaElementValuePair</name> <modifier>*</modifier></type><name>evp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_element_value_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaElementValue</name> <modifier>*</modifier></type><name>element_value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_unknown_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_class_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_fieldref_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_methodref_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_interfacemethodref_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_name_and_type_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_string_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_integer_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_float_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_long_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_double_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_utf8_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_do_nothing_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_methodhandle_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_methodtype_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_invokedynamic_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>r_bin_java_default_stack_frame</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_find_cp_const_by_val_float</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_find_cp_const_by_val_double</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_find_cp_const_by_val_int</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_find_cp_const_by_val_long</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_find_cp_const_by_val_utf8</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_append_classref_and_name</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>classname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>classname_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier><name>U</name></type>(<name>r_bin_java_cp_append_ref_cname_fname_ftype</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type> <name>out_sz</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>c_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>f_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>t_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_get_classref</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>classname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>classname_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>name_idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier><name>U</name></type>(<name>r_bin_java_cp_get_method_ref</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type> <name>out_sz</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>class_idx</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>name_and_type_idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier><name>U</name></type>(<name>r_bin_java_cp_get_field_ref</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type> <name>out_sz</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>class_idx</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>name_and_type_idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_get_fm_ref</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>class_idx</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>name_and_type_idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_get_2_ut16</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>ut16_one</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>ut16_two</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_get_name_type</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>name_idx</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>type_idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>convert_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>str_sz</name> <init>= <expr><literal type="number">32</literal> <operator>*</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cpy_buffer</name> <init>= <expr><ternary><condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>str_sz</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cpy_buffer</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>cpy_buffer</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>cpy_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>str_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dso_json_char_needs_hexing</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cpy_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>cpy_buffer</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">"\\x%02x"</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>cpy_buffer</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>bytes</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>cpy_buffer</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>R_API</name> <name>ut32</name> <name>U</name></type>(<name>r_bin_java_swap_uint</name>)<parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>Byte0</name> <init>= <expr><name>x</name> <operator>&amp;</operator> <literal type="number">0x000000FF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>Byte1</name> <init>= <expr><name>x</name> <operator>&amp;</operator> <literal type="number">0x0000FF00</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>Byte2</name> <init>= <expr><name>x</name> <operator>&amp;</operator> <literal type="number">0x00FF0000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>Byte3</name> <init>= <expr><name>x</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>Byte0</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>Byte1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>Byte2</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>Byte3</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>R_BIN_JAVA_NULL_TYPE_INITTED</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>RBinJavaObj</name> <modifier>*</modifier></type><name>R_BIN_JAVA_GLOBAL_BIN</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RBinJavaAccessFlags</name></type> <name><name>FIELD_ACCESS_FLAGS</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"public"</literal></expr>, <expr><name>R_BIN_JAVA_FIELD_ACC_PUBLIC</name></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"private"</literal></expr>, <expr><name>R_BIN_JAVA_FIELD_ACC_PRIVATE</name></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"protected"</literal></expr>, <expr><name>R_BIN_JAVA_FIELD_ACC_PROTECTED</name></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"static"</literal></expr>, <expr><name>R_BIN_JAVA_FIELD_ACC_STATIC</name></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"final"</literal></expr>, <expr><name>R_BIN_JAVA_FIELD_ACC_FINAL</name></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"undefined.0x0020"</literal></expr>, <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"volatile"</literal></expr>, <expr><name>R_BIN_JAVA_FIELD_ACC_VOLATILE</name></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"transient"</literal></expr>, <expr><name>R_BIN_JAVA_FIELD_ACC_TRANSIENT</name></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"undefined.0x0100"</literal></expr>, <expr><literal type="number">0x0100</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"undefined.0x0200"</literal></expr>, <expr><literal type="number">0x0200</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"undefined.0x0400"</literal></expr>, <expr><literal type="number">0x0400</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"undefined.0x0800"</literal></expr>, <expr><literal type="number">0x0800</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"synthetic"</literal></expr>, <expr><name>R_BIN_JAVA_FIELD_ACC_SYNTHETIC</name></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"undefined.0x2000"</literal></expr>, <expr><literal type="number">0x2000</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"enum"</literal></expr>, <expr><name>R_BIN_JAVA_FIELD_ACC_ENUM</name></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"undefined.0x8000"</literal></expr>, <expr><literal type="number">0x8000</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RBinJavaAccessFlags</name></type> <name><name>METHOD_ACCESS_FLAGS</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"public"</literal></expr>, <expr><name>R_BIN_JAVA_METHOD_ACC_PUBLIC</name></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"private"</literal></expr>, <expr><name>R_BIN_JAVA_METHOD_ACC_PRIVATE</name></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"protected"</literal></expr>, <expr><name>R_BIN_JAVA_METHOD_ACC_PROTECTED</name></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"static"</literal></expr>, <expr><name>R_BIN_JAVA_METHOD_ACC_STATIC</name></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"final"</literal></expr>, <expr><name>R_BIN_JAVA_METHOD_ACC_FINAL</name></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"synchronized"</literal></expr>, <expr><name>R_BIN_JAVA_METHOD_ACC_SYNCHRONIZED</name></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bridge"</literal></expr>, <expr><name>R_BIN_JAVA_METHOD_ACC_BRIDGE</name></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"varargs"</literal></expr>, <expr><name>R_BIN_JAVA_METHOD_ACC_VARARGS</name></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"native"</literal></expr>, <expr><name>R_BIN_JAVA_METHOD_ACC_NATIVE</name></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"interface"</literal></expr>, <expr><name>R_BIN_JAVA_METHOD_ACC_INTERFACE</name></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"abstract"</literal></expr>, <expr><name>R_BIN_JAVA_METHOD_ACC_ABSTRACT</name></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"strict"</literal></expr>, <expr><name>R_BIN_JAVA_METHOD_ACC_STRICT</name></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"synthetic"</literal></expr>, <expr><name>R_BIN_JAVA_METHOD_ACC_SYNTHETIC</name></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"annotation"</literal></expr>, <expr><name>R_BIN_JAVA_METHOD_ACC_ANNOTATION</name></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"enum"</literal></expr>, <expr><name>R_BIN_JAVA_METHOD_ACC_ENUM</name></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"undefined.0x8000"</literal></expr>, <expr><literal type="number">0x8000</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RBinJavaAccessFlags</name></type> <name><name>CLASS_ACCESS_FLAGS</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"public"</literal></expr>, <expr><name>R_BIN_JAVA_CLASS_ACC_PUBLIC</name></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"undefined.0x0002"</literal></expr>, <expr><literal type="number">0x0002</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"undefined.0x0004"</literal></expr>, <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"undefined.0x0008"</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"final"</literal></expr>, <expr><name>R_BIN_JAVA_CLASS_ACC_FINAL</name></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"super"</literal></expr>, <expr><name>R_BIN_JAVA_CLASS_ACC_SUPER</name></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"undefined.0x0040"</literal></expr>, <expr><literal type="number">0x0040</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"undefined.0x0080"</literal></expr>, <expr><literal type="number">0x0080</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"undefined.0x0100"</literal></expr>, <expr><literal type="number">0x0100</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"interface"</literal></expr>, <expr><name>R_BIN_JAVA_CLASS_ACC_INTERFACE</name></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"abstract"</literal></expr>, <expr><name>R_BIN_JAVA_CLASS_ACC_ABSTRACT</name></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"undefined.0x0800"</literal></expr>, <expr><literal type="number">0x0800</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"synthetic"</literal></expr>, <expr><name>R_BIN_JAVA_CLASS_ACC_SYNTHETIC</name></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"annotation"</literal></expr>, <expr><name>R_BIN_JAVA_CLASS_ACC_ANNOTATION</name></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"enum"</literal></expr>, <expr><name>R_BIN_JAVA_CLASS_ACC_ENUM</name></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"undefined.0x8000"</literal></expr>, <expr><literal type="number">0x8000</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RBinJavaRefMetas</name></type> <name><name>R_BIN_JAVA_REF_METAS</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"Unknown"</literal></expr>, <expr><name>R_BIN_JAVA_REF_UNKNOWN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GetField"</literal></expr>, <expr><name>R_BIN_JAVA_REF_GETFIELD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GetStatic"</literal></expr>, <expr><name>R_BIN_JAVA_REF_GETSTATIC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PutField"</literal></expr>, <expr><name>R_BIN_JAVA_REF_PUTFIELD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PutStatic"</literal></expr>, <expr><name>R_BIN_JAVA_REF_PUTSTATIC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"InvokeVirtual"</literal></expr>, <expr><name>R_BIN_JAVA_REF_INVOKEVIRTUAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"InvokeStatic"</literal></expr>, <expr><name>R_BIN_JAVA_REF_INVOKESTATIC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"InvokeSpecial"</literal></expr>, <expr><name>R_BIN_JAVA_REF_INVOKESPECIAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"NewInvokeSpecial"</literal></expr>, <expr><name>R_BIN_JAVA_REF_NEWINVOKESPECIAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"InvokeInterface"</literal></expr>, <expr><name>R_BIN_JAVA_REF_INVOKEINTERFACE</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ut16</name></type> <name>R_BIN_JAVA_ELEMENT_VALUE_METAS_SZ</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RBinJavaElementValueMetas</name></type> <name><name>R_BIN_JAVA_ELEMENT_VALUE_METAS</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"Byte"</literal></expr>, <expr><name>R_BIN_JAVA_EV_TAG_BYTE</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Char"</literal></expr>, <expr><name>R_BIN_JAVA_EV_TAG_CHAR</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Double"</literal></expr>, <expr><name>R_BIN_JAVA_EV_TAG_DOUBLE</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Float"</literal></expr>, <expr><name>R_BIN_JAVA_EV_TAG_FLOAT</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Integer"</literal></expr>, <expr><name>R_BIN_JAVA_EV_TAG_INT</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Long"</literal></expr>, <expr><name>R_BIN_JAVA_EV_TAG_LONG</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Short"</literal></expr>, <expr><name>R_BIN_JAVA_EV_TAG_SHORT</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Boolean"</literal></expr>, <expr><name>R_BIN_JAVA_EV_TAG_BOOLEAN</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Array of "</literal></expr>, <expr><name>R_BIN_JAVA_EV_TAG_ARRAY</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"String"</literal></expr>, <expr><name>R_BIN_JAVA_EV_TAG_STRING</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Enum"</literal></expr>, <expr><name>R_BIN_JAVA_EV_TAG_ENUM</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Class"</literal></expr>, <expr><name>R_BIN_JAVA_EV_TAG_CLASS</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Annotation"</literal></expr>, <expr><name>R_BIN_JAVA_EV_TAG_ANNOTATION</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Unknown"</literal></expr>, <expr><name>R_BIN_JAVA_EV_TAG_UNKNOWN</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RBinJavaVerificationMetas</name></type> <name><name>R_BIN_JAVA_VERIFICATION_METAS</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"Top"</literal></expr>, <expr><name>R_BIN_JAVA_STACKMAP_TOP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Integer"</literal></expr>, <expr><name>R_BIN_JAVA_STACKMAP_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Float"</literal></expr>, <expr><name>R_BIN_JAVA_STACKMAP_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Double"</literal></expr>, <expr><name>R_BIN_JAVA_STACKMAP_DOUBLE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Long"</literal></expr>, <expr><name>R_BIN_JAVA_STACKMAP_LONG</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"NULL"</literal></expr>, <expr><name>R_BIN_JAVA_STACKMAP_NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"This"</literal></expr>, <expr><name>R_BIN_JAVA_STACKMAP_THIS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Object"</literal></expr>, <expr><name>R_BIN_JAVA_STACKMAP_OBJECT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Uninitialized"</literal></expr>, <expr><name>R_BIN_JAVA_STACKMAP_UNINIT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Unknown"</literal></expr>, <expr><name>R_BIN_JAVA_STACKMAP_UNKNOWN</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RBinJavaStackMapFrameMetas</name></type> <name><name>R_BIN_JAVA_STACK_MAP_FRAME_METAS</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"ImplicitStackFrame"</literal></expr>, <expr><name>R_BIN_JAVA_STACK_FRAME_IMPLICIT</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Same"</literal></expr>, <expr><name>R_BIN_JAVA_STACK_FRAME_SAME</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SameLocals1StackItem"</literal></expr>, <expr><name>R_BIN_JAVA_STACK_FRAME_SAME_LOCALS_1</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Chop"</literal></expr>, <expr><name>R_BIN_JAVA_STACK_FRAME_CHOP</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SameFrameExtended"</literal></expr>, <expr><name>R_BIN_JAVA_STACK_FRAME_SAME_FRAME_EXTENDED</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Append"</literal></expr>, <expr><name>R_BIN_JAVA_STACK_FRAME_APPEND</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"FullFrame"</literal></expr>, <expr><name>R_BIN_JAVA_STACK_FRAME_FULL_FRAME</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Reserved"</literal></expr>, <expr><name>R_BIN_JAVA_STACK_FRAME_RESERVED</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RBinJavaCPTypeObjectAllocs</name></type> <name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>r_bin_java_do_nothing_new</name></expr>, <expr><name>r_bin_java_do_nothing_free</name></expr>, <expr><name>r_bin_java_print_null_cp_summary</name></expr>, <expr><name>r_bin_java_do_nothing_calc_size</name></expr>, <expr><name>r_bin_java_print_null_cp_stringify</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_utf8_cp_new</name></expr>, <expr><name>r_bin_java_utf8_info_free</name></expr>, <expr><name>r_bin_java_print_utf8_cp_summary</name></expr>, <expr><name>r_bin_java_utf8_cp_calc_size</name></expr>, <expr><name>r_bin_java_print_utf8_cp_stringify</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_unknown_cp_new</name></expr>, <expr><name>r_bin_java_default_free</name></expr>, <expr><name>r_bin_java_print_unknown_cp_summary</name></expr>, <expr><name>r_bin_java_unknown_cp_calc_size</name></expr>, <expr><name>r_bin_java_print_unknown_cp_stringify</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_integer_cp_new</name></expr>, <expr><name>r_bin_java_default_free</name></expr>, <expr><name>r_bin_java_print_integer_cp_summary</name></expr>, <expr><name>r_bin_java_integer_cp_calc_size</name></expr>, <expr><name>r_bin_java_print_integer_cp_stringify</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_float_cp_new</name></expr>, <expr><name>r_bin_java_default_free</name></expr>, <expr><name>r_bin_java_print_float_cp_summary</name></expr>, <expr><name>r_bin_java_float_cp_calc_size</name></expr>, <expr><name>r_bin_java_print_float_cp_stringify</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_long_cp_new</name></expr>, <expr><name>r_bin_java_default_free</name></expr>, <expr><name>r_bin_java_print_long_cp_summary</name></expr>, <expr><name>r_bin_java_long_cp_calc_size</name></expr>, <expr><name>r_bin_java_print_long_cp_stringify</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_double_cp_new</name></expr>, <expr><name>r_bin_java_default_free</name></expr>, <expr><name>r_bin_java_print_double_cp_summary</name></expr>, <expr><name>r_bin_java_double_cp_calc_size</name></expr>, <expr><name>r_bin_java_print_double_cp_stringify</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_class_cp_new</name></expr>, <expr><name>r_bin_java_default_free</name></expr>, <expr><name>r_bin_java_print_classref_cp_summary</name></expr>, <expr><name>r_bin_java_class_cp_calc_size</name></expr>, <expr><name>r_bin_java_print_classref_cp_stringify</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_string_cp_new</name></expr>, <expr><name>r_bin_java_default_free</name></expr>, <expr><name>r_bin_java_print_string_cp_summary</name></expr>, <expr><name>r_bin_java_string_cp_calc_size</name></expr>, <expr><name>r_bin_java_print_string_cp_stringify</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_fieldref_cp_new</name></expr>, <expr><name>r_bin_java_default_free</name></expr>, <expr><name>r_bin_java_print_fieldref_cp_summary</name></expr>, <expr><name>r_bin_java_fieldref_cp_calc_size</name></expr>, <expr><name>r_bin_java_print_fieldref_cp_stringify</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_methodref_cp_new</name></expr>, <expr><name>r_bin_java_default_free</name></expr>, <expr><name>r_bin_java_print_methodref_cp_summary</name></expr>, <expr><name>r_bin_java_methodref_cp_calc_size</name></expr>, <expr><name>r_bin_java_print_methodref_cp_stringify</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_interfacemethodref_cp_new</name></expr>, <expr><name>r_bin_java_default_free</name></expr>, <expr><name>r_bin_java_print_interfacemethodref_cp_summary</name></expr>, <expr><name>r_bin_java_interfacemethodref_cp_calc_size</name></expr>, <expr><name>r_bin_java_print_interfacemethodref_cp_stringify</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_name_and_type_cp_new</name></expr>, <expr><name>r_bin_java_default_free</name></expr>, <expr><name>r_bin_java_print_name_and_type_cp_summary</name></expr>, <expr><name>r_bin_java_name_and_type_cp_calc_size</name></expr>, <expr><name>r_bin_java_print_name_and_type_cp_stringify</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_methodhandle_cp_new</name></expr>, <expr><name>r_bin_java_default_free</name></expr>, <expr><name>r_bin_java_print_methodhandle_cp_summary</name></expr>, <expr><name>r_bin_java_methodhandle_cp_calc_size</name></expr>, <expr><name>r_bin_java_print_methodhandle_cp_stringify</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_methodtype_cp_new</name></expr>, <expr><name>r_bin_java_default_free</name></expr>, <expr><name>r_bin_java_print_methodtype_cp_summary</name></expr>, <expr><name>r_bin_java_methodtype_cp_calc_size</name></expr>, <expr><name>r_bin_java_print_methodtype_cp_stringify</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_invokedynamic_cp_new</name></expr>, <expr><name>r_bin_java_default_free</name></expr>, <expr><name>r_bin_java_print_invokedynamic_cp_summary</name></expr>, <expr><name>r_bin_java_invokedynamic_cp_calc_size</name></expr>, <expr><name>r_bin_java_print_invokedynamic_cp_stringify</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RBinJavaCPTypeObj</name></type> <name>R_BIN_JAVA_NULL_TYPE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name></type> <name>R_BIN_JAVA_CP_METAS_SZ</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RBinJavaCPTypeMetas</name></type> <name><name>R_BIN_JAVA_CP_METAS</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"NULL"</literal></expr>, <expr><name>R_BIN_JAVA_CP_NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Utf8"</literal></expr>, <expr><name>R_BIN_JAVA_CP_UTF8</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"Unknown"</literal></expr>, <expr><name>R_BIN_JAVA_CP_UNKNOWN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Integer"</literal></expr>, <expr><name>R_BIN_JAVA_CP_INTEGER</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"Float"</literal></expr>, <expr><name>R_BIN_JAVA_CP_FLOAT</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"Long"</literal></expr>, <expr><name>R_BIN_JAVA_CP_LONG</name></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"Double"</literal></expr>, <expr><name>R_BIN_JAVA_CP_DOUBLE</name></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"Class"</literal></expr>, <expr><name>R_BIN_JAVA_CP_CLASS</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"String"</literal></expr>, <expr><name>R_BIN_JAVA_CP_STRING</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"FieldRef"</literal></expr>, <expr><name>R_BIN_JAVA_CP_FIELDREF</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"MethodRef"</literal></expr>, <expr><name>R_BIN_JAVA_CP_METHODREF</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"InterfaceMethodRef"</literal></expr>, <expr><name>R_BIN_JAVA_CP_INTERFACEMETHOD_REF</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"NameAndType"</literal></expr>, <expr><name>R_BIN_JAVA_CP_NAMEANDTYPE</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"Unknown"</literal></expr>, <expr><name>R_BIN_JAVA_CP_UNKNOWN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Unknown"</literal></expr>, <expr><name>R_BIN_JAVA_CP_UNKNOWN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MethodHandle"</literal></expr>, <expr><name>R_BIN_JAVA_CP_METHODHANDLE</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"MethodType"</literal></expr>, <expr><name>R_BIN_JAVA_CP_METHODTYPE</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"Unknown"</literal></expr>, <expr><name>R_BIN_JAVA_CP_UNKNOWN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"InvokeDynamic"</literal></expr>, <expr><name>R_BIN_JAVA_CP_INVOKEDYNAMIC</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><operator>&amp;</operator><name><name>R_BIN_ALLOCS_CONSTANTS</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr> }</block></expr>, 
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RBinJavaAttrInfoObjectAllocs</name></type> <name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>r_bin_java_annotation_default_attr_new</name></expr>, <expr><name>r_bin_java_annotation_default_attr_free</name></expr>, <expr><name>r_bin_java_print_annotation_default_attr_summary</name></expr>, <expr><name>r_bin_java_annotation_default_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_bootstrap_methods_attr_new</name></expr>, <expr><name>r_bin_java_bootstrap_methods_attr_free</name></expr>, <expr><name>r_bin_java_print_bootstrap_methods_attr_summary</name></expr>, <expr><name>r_bin_java_bootstrap_methods_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_code_attr_new</name></expr>, <expr><name>r_bin_java_code_attr_free</name></expr>, <expr><name>r_bin_java_print_code_attr_summary</name></expr>, <expr><name>r_bin_java_code_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_constant_value_attr_new</name></expr>, <expr><name>r_bin_java_constant_value_attr_free</name></expr>, <expr><name>r_bin_java_print_constant_value_attr_summary</name></expr>, <expr><name>r_bin_java_constant_value_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_deprecated_attr_new</name></expr>, <expr><name>r_bin_java_deprecated_attr_free</name></expr>, <expr><name>r_bin_java_print_deprecated_attr_summary</name></expr>, <expr><name>r_bin_java_deprecated_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_enclosing_methods_attr_new</name></expr>, <expr><name>r_bin_java_enclosing_methods_attr_free</name></expr>, <expr><name>r_bin_java_print_enclosing_methods_attr_summary</name></expr>, <expr><name>r_bin_java_enclosing_methods_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_exceptions_attr_new</name></expr>, <expr><name>r_bin_java_exceptions_attr_free</name></expr>, <expr><name>r_bin_java_print_exceptions_attr_summary</name></expr>, <expr><name>r_bin_java_exceptions_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_inner_classes_attr_new</name></expr>, <expr><name>r_bin_java_inner_classes_attr_free</name></expr>, <expr><name>r_bin_java_print_inner_classes_attr_summary</name></expr>, <expr><name>r_bin_java_inner_classes_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_line_number_table_attr_new</name></expr>, <expr><name>r_bin_java_line_number_table_attr_free</name></expr>, <expr><name>r_bin_java_print_line_number_table_attr_summary</name></expr>, <expr><name>r_bin_java_line_number_table_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_local_variable_table_attr_new</name></expr>, <expr><name>r_bin_java_local_variable_table_attr_free</name></expr>, <expr><name>r_bin_java_print_local_variable_table_attr_summary</name></expr>, <expr><name>r_bin_java_local_variable_table_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_local_variable_type_table_attr_new</name></expr>, <expr><name>r_bin_java_local_variable_type_table_attr_free</name></expr>, <expr><name>r_bin_java_print_local_variable_type_table_attr_summary</name></expr>, <expr><name>r_bin_java_local_variable_type_table_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_rti_annotations_attr_new</name></expr>, <expr><name>r_bin_java_rti_annotations_attr_free</name></expr>, <expr><name>r_bin_java_print_rti_annotations_attr_summary</name></expr>, <expr><name>r_bin_java_rti_annotations_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_rtip_annotations_attr_new</name></expr>, <expr><name>r_bin_java_rtip_annotations_attr_free</name></expr>, <expr><name>r_bin_java_print_rtip_annotations_attr_summary</name></expr>, <expr><name>r_bin_java_rtip_annotations_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_rtv_annotations_attr_new</name></expr>, <expr><name>r_bin_java_rtv_annotations_attr_free</name></expr>, <expr><name>r_bin_java_print_rtv_annotations_attr_summary</name></expr>, <expr><name>r_bin_java_rtv_annotations_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_rtvp_annotations_attr_new</name></expr>, <expr><name>r_bin_java_rtvp_annotations_attr_free</name></expr>, <expr><name>r_bin_java_print_rtvp_annotations_attr_summary</name></expr>, <expr><name>r_bin_java_rtvp_annotations_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_signature_attr_new</name></expr>, <expr><name>r_bin_java_signature_attr_free</name></expr>, <expr><name>r_bin_java_print_signature_attr_summary</name></expr>, <expr><name>r_bin_java_signature_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_source_debug_attr_new</name></expr>, <expr><name>r_bin_java_source_debug_attr_free</name></expr>, <expr><name>r_bin_java_print_source_debug_attr_summary</name></expr>, <expr><name>r_bin_java_source_debug_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_source_code_file_attr_new</name></expr>, <expr><name>r_bin_java_source_code_file_attr_free</name></expr>, <expr><name>r_bin_java_print_source_code_file_attr_summary</name></expr>, <expr><name>r_bin_java_source_code_file_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_stack_map_table_attr_new</name></expr>, <expr><name>r_bin_java_stack_map_table_attr_free</name></expr>, <expr><name>r_bin_java_print_stack_map_table_attr_summary</name></expr>, <expr><name>r_bin_java_stack_map_table_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_synthetic_attr_new</name></expr>, <expr><name>r_bin_java_synthetic_attr_free</name></expr>, <expr><name>r_bin_java_print_synthetic_attr_summary</name></expr>, <expr><name>r_bin_java_synthetic_attr_calc_size</name></expr> }</block></expr>,
<expr><block>{ <expr><name>r_bin_java_unknown_attr_new</name></expr>, <expr><name>r_bin_java_unknown_attr_free</name></expr>, <expr><name>r_bin_java_print_unknown_attr_summary</name></expr>, <expr><name>r_bin_java_unknown_attr_calc_size</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut32</name></type> <name>RBIN_JAVA_ATTRS_METAS_SZ</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RBinJavaAttrMetas</name></type> <name><name>RBIN_JAVA_ATTRS_METAS</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"AnnotationDefault"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_ANNOTATION_DEFAULT_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"BootstrapMethods"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_BOOTSTRAP_METHODS_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Code"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_CODE_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ConstantValue"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_CONST_VALUE_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Deperecated"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_DEPRECATED_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"EnclosingMethod"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_ENCLOSING_METHOD_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Exceptions"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_EXCEPTIONS_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"InnerClasses"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_INNER_CLASSES_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LineNumberTable"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_LINE_NUMBER_TABLE_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LocalVariableTable"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_LOCAL_VARIABLE_TABLE_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LocalVariableTypeTable"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_LOCAL_VARIABLE_TYPE_TABLE_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"RuntimeInvisibleAnnotations"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_RUNTIME_INVISIBLE_ANNOTATION_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"RuntimeInvisibleParameterAnnotations"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_RUNTIME_INVISIBLE_PARAMETER_ANNOTATION_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"RuntimeVisibleAnnotations"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_RUNTIME_VISIBLE_ANNOTATION_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"RuntimeVisibleParameterAnnotations"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_RUNTIME_VISIBLE_PARAMETER_ANNOTATION_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Signature"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_SIGNATURE_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SourceDebugExtension"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_SOURCE_DEBUG_EXTENTSION_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SourceFile"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_SOURCE_FILE_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"StackMapTable"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_STACK_MAP_TABLE_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Synthetic"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_SYNTHETIC_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Unknown"</literal></expr>, <expr><name>R_BIN_JAVA_ATTR_TYPE_UNKNOWN_ATTR</name></expr>, <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_ALLOCS</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_bin_java_is_old_format</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>major</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">45</literal> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>minor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_reset_bin_info</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>flags_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>imports_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>fields_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>attrs_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>interfaces_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_constpool_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>constpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_constpool_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>constpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>flags_str</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class_name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>imports_list</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_fmtype_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>fields_list</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_fmtype_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>attrs_list</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_attribute_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_list</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_constant_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>interfaces_list</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_interface_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_unmangle_method</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>the_list</name> <init>= <expr><ternary><condition><expr><name>params</name></expr> ?</condition><then> <expr><call><name>r_bin_java_extract_type_values</name> <argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><ternary><condition><expr><name>flags</name></expr> ?</condition><then> <expr><literal type="string">"%s %s %s (%s)"</literal></expr> </then><else>: <expr><literal type="string">"%s%s %s (%s)"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f_val_str</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r_val_str</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prototype</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_val_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>params_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>params_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>prototype_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extract_type_value</name> <argument_list>(<argument><expr><name>r_value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_val_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r_val_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r_val_str</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"UNKNOWN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>f_val_str</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><name>flags</name></expr> ?</condition><then> <expr><name>flags</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>the_list</argument>, <argument>iter</argument>, <argument>str</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>params_len</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>params_idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>params_len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>params_idx</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>params_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>params_len</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_val_str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>params_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>the_list</argument>, <argument>iter</argument>, <argument>str</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>p_val_str</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>params_len</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">", %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>p_val_str</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>params_len</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>p_val_str</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>prototype_len</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name>flags</name></expr> ?</condition><then> <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>prototype_len</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>prototype_len</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>r_val_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>prototype_len</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>p_val_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>prototype_len</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>prototype</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>prototype_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>prototype</name></expr></argument>, <argument><expr><name>prototype_len</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>f_val_str</name></expr></argument>, <argument><expr><name>r_val_str</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>p_val_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>f_val_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>r_val_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p_val_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>prototype</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_unmangle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>descriptor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>l_paren_pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r_paren_pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>desc_len</name> <init>= <expr><ternary><condition><expr><name>descriptor</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>descriptor</name></expr> ?</condition><then> <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>,
<decl><type ref="prev"/><name>name_len</name> <init>= <expr><ternary><condition><expr><name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name></expr> ?</condition><then> <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>,
<decl><type ref="prev"/><name>flags_len</name> <init>= <expr><ternary><condition><expr><name>flags</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>flags</name></expr> ?</condition><then> <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>,
<decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>name</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>desc_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>descriptor</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l_paren_pos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>l_paren_pos</name> <operator>!=</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>descriptor</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r_paren_pos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>l_paren_pos</name> <operator>==</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>r_paren_pos</name> <operator>==</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>unmangle_field_desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>len</name> <init>= <expr><call><name>extract_type_value</name> <argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unmangle_field_desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: attempting to unmangle invalid type descriptor.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>unmangle_field_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>flags_len</name> <operator>+</operator> <name>name_len</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>unmangle_field_desc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>name_len</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name>unmangle_field_desc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>unmangle_field_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>l_paren_pos</name> <operator>!=</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name>r_paren_pos</name> <operator>!=</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name>l_paren_pos</name> <operator>&lt;</operator> <name>r_paren_pos</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>params_len</name> <init>= <expr><ternary><condition><expr><name>r_paren_pos</name> <operator>-</operator> <operator>(</operator><name>l_paren_pos</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>r_paren_pos</name> <operator>-</operator> <operator>(</operator><name>l_paren_pos</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><ternary><condition><expr><name>params_len</name></expr> ?</condition><then> <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>params_len</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rvalue</name> <init>= <expr><name>descriptor</name> <operator>+</operator> <name>r_paren_pos</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>params</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>params_len</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>descriptor</name> <operator>+</operator> <name>l_paren_pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>r_bin_java_unmangle_method</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>rvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>DsoJsonObj</name> <modifier>*</modifier></type><name>r_bin_java_get_bin_obj_json</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>imports_list</name> <init>= <expr><call><name>r_bin_java_get_import_json_definitions</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>fields_list</name> <init>= <expr><call><name>r_bin_java_get_field_json_definitions</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>methods_list</name> <init>= <expr><call><name>r_bin_java_get_method_json_definitions</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>class_dict</name> <init>= <expr><call><name>r_bin_java_get_class_info_json</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>dso_json_obj_to_str</name> <argument_list>(<argument><expr><name>methods_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_obj</name> <argument_list>(<argument><expr><name>class_dict</name></expr></argument>, <argument><expr><literal type="string">"methods"</literal></expr></argument>, <argument><expr><name>methods_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name>methods_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dso_json_obj_to_str</name> <argument_list>(<argument><expr><name>fields_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_obj</name> <argument_list>(<argument><expr><name>class_dict</name></expr></argument>, <argument><expr><literal type="string">"fields"</literal></expr></argument>, <argument><expr><name>fields_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name>fields_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dso_json_obj_to_str</name> <argument_list>(<argument><expr><name>imports_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_obj</name> <argument_list>(<argument><expr><name>class_dict</name></expr></argument>, <argument><expr><literal type="string">"imports"</literal></expr></argument>, <argument><expr><name>imports_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name>imports_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dso_json_obj_to_str</name> <argument_list>(<argument><expr><name>class_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>class_dict</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>DsoJsonObj</name> <modifier>*</modifier></type><name>r_bin_java_get_import_json_definitions</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>the_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>json_list</name> <init>= <expr><call><name>dso_json_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>the_list</name> <operator>=</operator> <call><name>r_bin_java_get_lib_names</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>json_list</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>the_list</argument>, <argument>iter</argument>, <argument>new_str</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>new_str</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tmp</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>dso_json_list_append_str</name> <argument_list>(<argument><expr><name>json_list</name></expr></argument>, <argument><expr><name>new_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>json_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>DsoJsonObj</name> <modifier>*</modifier></type><name>r_bin_java_get_class_info_json</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>classes</name> <init>= <expr><call><name>r_bin_java_get_classes</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>interfaces_list</name> <init>= <expr><call><name>dso_json_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>class_info_dict</name> <init>= <expr><call><name>dso_json_dict_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>class_</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>classes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>class_</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dummy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>class_v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_public</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>class_</name><operator>-&gt;</operator><name>visibility</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_CLASS_ACC_PUBLIC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_final</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>class_</name><operator>-&gt;</operator><name>visibility</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_CLASS_ACC_FINAL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_super</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>class_</name><operator>-&gt;</operator><name>visibility</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_CLASS_ACC_SUPER</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_interface</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>class_</name><operator>-&gt;</operator><name>visibility</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_CLASS_ACC_INTERFACE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_abstract</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>class_</name><operator>-&gt;</operator><name>visibility</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_CLASS_ACC_ABSTRACT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_synthetic</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>class_</name><operator>-&gt;</operator><name>visibility</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_CLASS_ACC_SYNTHETIC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_annotation</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>class_</name><operator>-&gt;</operator><name>visibility</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_CLASS_ACC_ANNOTATION</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_enum</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>class_</name><operator>-&gt;</operator><name>visibility</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_CLASS_ACC_ENUM</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>class_info_dict</name></expr></argument>, <argument><expr><literal type="string">"access_flags"</literal></expr></argument>, <argument><expr><name><name>class_</name><operator>-&gt;</operator><name>visibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>class_info_dict</name></expr></argument>, <argument><expr><literal type="string">"is_public"</literal></expr></argument>, <argument><expr><name>is_public</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>class_info_dict</name></expr></argument>, <argument><expr><literal type="string">"is_final"</literal></expr></argument>, <argument><expr><name>is_final</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>class_info_dict</name></expr></argument>, <argument><expr><literal type="string">"is_super"</literal></expr></argument>, <argument><expr><name>is_super</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>class_info_dict</name></expr></argument>, <argument><expr><literal type="string">"is_interface"</literal></expr></argument>, <argument><expr><name>is_interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>class_info_dict</name></expr></argument>, <argument><expr><literal type="string">"is_abstract"</literal></expr></argument>, <argument><expr><name>is_abstract</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>class_info_dict</name></expr></argument>, <argument><expr><literal type="string">"is_synthetic"</literal></expr></argument>, <argument><expr><name>is_synthetic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>class_info_dict</name></expr></argument>, <argument><expr><literal type="string">"is_annotation"</literal></expr></argument>, <argument><expr><name>is_annotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>class_info_dict</name></expr></argument>, <argument><expr><literal type="string">"is_enum"</literal></expr></argument>, <argument><expr><name>is_enum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_str</name> <argument_list>(<argument><expr><name>class_info_dict</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name><name>class_</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>class_</name><operator>-&gt;</operator><name>super</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>dso_json_str_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_obj</name> <argument_list>(<argument><expr><name>class_info_dict</name></expr></argument>, <argument><expr><literal type="string">"super"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_str_free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_str</name> <argument_list>(<argument><expr><name>class_info_dict</name></expr></argument>, <argument><expr><literal type="string">"super"</literal></expr></argument>, <argument><expr><name><name>class_</name><operator>-&gt;</operator><name>super</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>classes</argument>, <argument>iter</argument>, <argument>class_v</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dummy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dummy</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>class_v</name><operator>-&gt;</operator><name>visibility</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_CLASS_ACC_INTERFACE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dso_json_list_append_str</name> <argument_list>(<argument><expr><name>interfaces_list</name></expr></argument>, <argument><expr><name><name>class_v</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_obj</name> <argument_list>(<argument><expr><name>class_info_dict</name></expr></argument>, <argument><expr><literal type="string">"interfaces"</literal></expr></argument>, <argument><expr><name>interfaces_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>classes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name>interfaces_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>class_info_dict</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>DsoJsonObj</name> <modifier>*</modifier></type><name>r_bin_java_get_interface_json_definitions</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>the_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>json_list</name> <init>= <expr><call><name>dso_json_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>the_list</name> <operator>=</operator> <call><name>r_bin_java_get_interface_names</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>json_list</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>the_list</argument>, <argument>iter</argument>, <argument>new_str</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>new_str</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tmp</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>dso_json_list_append_str</name> <argument_list>(<argument><expr><name>json_list</name></expr></argument>, <argument><expr><name>new_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>json_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>DsoJsonObj</name> <modifier>*</modifier></type><name>r_bin_java_get_method_json_definitions</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>json_list</name> <init>= <expr><call><name>dso_json_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>json_list</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;methods_list</argument>, <argument>iter</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>method_proto</name> <init>= <expr><call><name>r_bin_java_get_method_json_definition</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dso_json_list_append</name> <argument_list>(<argument><expr><name>json_list</name></expr></argument>, <argument><expr><name>method_proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>json_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>DsoJsonObj</name> <modifier>*</modifier></type><name>r_bin_java_get_field_json_definitions</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>json_list</name> <init>= <expr><call><name>dso_json_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>json_list</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;fields_list</argument>, <argument>iter</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>field_proto</name> <init>= <expr><call><name>r_bin_java_get_field_json_definition</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dso_json_list_append</name> <argument_list>(<argument><expr><name>json_list</name></expr></argument>, <argument><expr><name>field_proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>json_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_create_method_fq_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>klass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signature</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>klass</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>klass</name> <operator>=</operator> <literal type="string">"null_class"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"null_name"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>signature</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>signature</name> <operator>=</operator> <literal type="string">"null_signature"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s.%s"</literal></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_create_field_fq_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>klass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signature</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>klass</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>klass</name> <operator>=</operator> <literal type="string">"null_class"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"null_name"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>signature</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>signature</name> <operator>=</operator> <literal type="string">"null_signature"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s %s.%s"</literal></expr></argument>, <argument><expr><name>signature</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>DsoJsonObj</name> <modifier>*</modifier></type><name>r_bin_java_get_fm_type_definition_json</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_method</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prototype</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fq_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_native</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>fm_type</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_METHOD_ACC_NATIVE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_static</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>fm_type</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_METHOD_ACC_STATIC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_synthetic</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>fm_type</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_METHOD_ACC_SYNTHETIC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_private</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>fm_type</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_METHOD_ACC_PRIVATE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_public</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>fm_type</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_METHOD_ACC_PUBLIC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_protected</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>fm_type</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_METHOD_ACC_PROTECTED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_super</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>fm_type</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_CLASS_ACC_SUPER</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>fm_type_dict</name> <init>= <expr><call><name>dso_json_dict_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>fm_type_dict</name></expr></argument>, <argument><expr><literal type="string">"access_flags"</literal></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>fm_type_dict</name></expr></argument>, <argument><expr><literal type="string">"is_method"</literal></expr></argument>, <argument><expr><name>is_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>fm_type_dict</name></expr></argument>, <argument><expr><literal type="string">"is_native"</literal></expr></argument>, <argument><expr><name>is_native</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>fm_type_dict</name></expr></argument>, <argument><expr><literal type="string">"is_synthetic"</literal></expr></argument>, <argument><expr><name>is_synthetic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>fm_type_dict</name></expr></argument>, <argument><expr><literal type="string">"is_private"</literal></expr></argument>, <argument><expr><name>is_private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>fm_type_dict</name></expr></argument>, <argument><expr><literal type="string">"is_public"</literal></expr></argument>, <argument><expr><name>is_public</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>fm_type_dict</name></expr></argument>, <argument><expr><literal type="string">"is_static"</literal></expr></argument>, <argument><expr><name>is_static</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>fm_type_dict</name></expr></argument>, <argument><expr><literal type="string">"is_protected"</literal></expr></argument>, <argument><expr><name>is_protected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>fm_type_dict</name></expr></argument>, <argument><expr><literal type="string">"is_super"</literal></expr></argument>, <argument><expr><name>is_super</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>r_bin_java_get_method_code_offset</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>file_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>fm_type_dict</name></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_num</name> <argument_list>(<argument><expr><name>fm_type_dict</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_str</name> <argument_list>(<argument><expr><name>fm_type_dict</name></expr></argument>, <argument><expr><literal type="string">"class_name"</literal></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_str</name> <argument_list>(<argument><expr><name>fm_type_dict</name></expr></argument>, <argument><expr><literal type="string">"signature"</literal></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_str</name> <argument_list>(<argument><expr><name>fm_type_dict</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_method</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fq_name</name> <operator>=</operator> <call><name>r_bin_java_create_method_fq_str</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fq_name</name> <operator>=</operator> <call><name>r_bin_java_create_field_fq_str</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_str</name> <argument_list>(<argument><expr><name>fm_type_dict</name></expr></argument>, <argument><expr><literal type="string">"fq_name"</literal></expr></argument>, <argument><expr><name>fq_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prototype</name> <operator>=</operator> <call><name>r_bin_java_unmangle</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>flags_str</name></name></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_insert_str_key_str</name> <argument_list>(<argument><expr><name>fm_type_dict</name></expr></argument>, <argument><expr><literal type="string">"prototype"</literal></expr></argument>, <argument><expr><name>prototype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>prototype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fq_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>fm_type_dict</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_get_method_definition</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_unmangle</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>flags_str</name></name></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_get_field_definition</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_unmangle</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>flags_str</name></name></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>DsoJsonObj</name> <modifier>*</modifier></type><name>r_bin_java_get_method_json_definition</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_get_fm_type_definition_json</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>fm_type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>DsoJsonObj</name> <modifier>*</modifier></type><name>r_bin_java_get_field_json_definition</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_get_fm_type_definition_json</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>fm_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bin_java_extract_reference_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref_str</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>array_cnt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>str_len</name> <init>= <expr><ternary><condition><expr><name>array_cnt</name></expr> ?</condition><then> <expr><operator>(</operator><name>array_cnt</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str_pos</name> <init>= <expr><name>input_str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str_pos</name> <operator>||</operator> <operator>*</operator><name>str_pos</name> <operator>!=</operator> <literal type="char">'L'</literal> <operator>||</operator> <operator>!</operator><operator>*</operator><name>str_pos</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>consumed</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>str_pos</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>str_pos</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str_pos</name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str_pos</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>str_pos</name> <operator>=</operator> <name>input_str</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>*</operator><name>ref_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str_len</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ref_str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>str_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_str</name> <operator>=</operator> <operator>*</operator><name>ref_str</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>new_str</name></expr></argument>, <argument><expr><name>str_pos</name></expr></argument>, <argument><expr><name>str_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_str</name><index>[<expr><name>str_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>new_str</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>new_str</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>new_str</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>new_str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>len</name> <operator>+</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <name>UNUSED_FUNCTION</name></type>(<name>r_bin_java_print_prototypes</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>the_list</name> <init>= <expr><call><name>r_bin_java_get_method_definitions</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>the_list</argument>, <argument>iter</argument>, <argument>str</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s;\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>get_type_value_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg_str</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>array_cnt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>str_len</name> <init>= <expr><ternary><condition><expr><name>array_cnt</name></expr> ?</condition><then> <expr><operator>(</operator><name>array_cnt</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>arg_str</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>arg_str</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>str_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>bytes_written</name> <init>= <expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>str_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>arg_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>array_cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>bytes_written</name></expr></argument>, <argument><expr><name>str_len</name> <operator>-</operator> <name>bytes_written</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>array_cnt</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>extract_type_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg_str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>found_one</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>array_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg_str</name> <operator>||</operator> <operator>!</operator><name>output</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>output</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>output</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>output</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><operator>*</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>arg_str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg_str</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found_one</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>arg_str</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>get_type_value_str</name> <argument_list>(<argument><expr><literal type="string">"void"</literal></expr></argument>, <argument><expr><name>array_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'J'</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>get_type_value_str</name> <argument_list>(<argument><expr><literal type="string">"long"</literal></expr></argument>, <argument><expr><name>array_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>array_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>get_type_value_str</name> <argument_list>(<argument><expr><literal type="string">"int"</literal></expr></argument>, <argument><expr><name>array_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>array_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>get_type_value_str</name> <argument_list>(<argument><expr><literal type="string">"double"</literal></expr></argument>, <argument><expr><name>array_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>array_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>get_type_value_str</name> <argument_list>(<argument><expr><literal type="string">"float"</literal></expr></argument>, <argument><expr><name>array_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>array_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>get_type_value_str</name> <argument_list>(<argument><expr><literal type="string">"byte"</literal></expr></argument>, <argument><expr><name>array_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>array_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>get_type_value_str</name> <argument_list>(<argument><expr><literal type="string">"char"</literal></expr></argument>, <argument><expr><name>array_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>array_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>get_type_value_str</name> <argument_list>(<argument><expr><literal type="string">"boolean"</literal></expr></argument>, <argument><expr><name>array_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>array_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>get_type_value_str</name> <argument_list>(<argument><expr><literal type="string">"short"</literal></expr></argument>, <argument><expr><name>array_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>array_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'['</literal></expr>:</case>
<expr_stmt><expr><name>array_cnt</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_bin_java_extract_reference_name</name> <argument_list>(<argument><expr><name>arg_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>array_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>array_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'('</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">')'</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg_str</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>consumed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_extract_type_values</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg_str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list_args</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list_args</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str_cur_pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg_str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>list_args</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str_cur_pos</name> <operator>=</operator> <name>arg_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list_args</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>str_cur_pos</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str_cur_pos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>extract_type_value</name> <argument_list>(<argument><expr><name>str_cur_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str_cur_pos</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list_args</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>list_args</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bin_java_is_fm_type_private</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fm_type</name> <operator>&amp;&amp;</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_FIELD_TYPE_METHOD</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>fm_type</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_METHOD_ACC_PRIVATE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fm_type</name> <operator>&amp;&amp;</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_FIELD_TYPE_FIELD</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>fm_type</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_FIELD_ACC_PRIVATE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bin_java_is_fm_type_protected</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fm_type</name> <operator>&amp;&amp;</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_FIELD_TYPE_METHOD</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>fm_type</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_METHOD_ACC_PROTECTED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fm_type</name> <operator>&amp;&amp;</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_FIELD_TYPE_FIELD</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>fm_type</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_FIELD_ACC_PROTECTED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_args</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>the_list</name> <init>= <expr><call><name>r_bin_java_extract_type_values</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>arg_list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>in_args</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>desc_iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>the_list</argument>, <argument>desc_iter</argument>, <argument>str</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>in_args</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>in_args</name> <operator>&amp;&amp;</operator> <name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>arg_list</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>arg_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_ret</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>the_list</name> <init>= <expr><call><name>r_bin_java_extract_type_values</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret_list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>in_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>desc_iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>the_list</argument>, <argument>desc_iter</argument>, <argument>str</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>in_ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>in_ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret_list</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_get_this_class_name</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class_name</name></name></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class_name</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut16</name></type> <name>calculate_access_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>access_flags_str</name></decl></parameter>, <parameter><decl><type><name>RBinJavaAccessFlags</name> <modifier>*</modifier></type><name>access_flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>size</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>access_flags_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_flags</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>my_flags</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAccessFlags</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>||</operator> <operator>!</operator><name>my_flags</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>my_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>my_flags</name></expr></argument>, <argument><expr><name>access_flags_str</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_flags</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><name>my_flags</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p_flags</name> <operator>&amp;&amp;</operator> <name>access_flags</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <operator>&amp;</operator><name><name>access_flags</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iter</name> <operator>||</operator> <operator>!</operator><name><name>iter</name><operator>-&gt;</operator><name>str</name></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>iter</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>p_flags</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <name><name>iter</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>access_flags</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
<expr_stmt><expr><name>p_flags</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>my_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>retrieve_all_access_string_and_value</name><parameter_list>(<parameter><decl><type><name>RBinJavaAccessFlags</name> <modifier>*</modifier></type><name>access_flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><literal type="string">"%s = 0x%04x"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>access_flags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">49</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>access_flags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name><name>access_flags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>retrieve_access_string</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>RBinJavaAccessFlags</name> <modifier>*</modifier></type><name>access_flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outbuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur_pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>max_str_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>access_flags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name><name>access_flags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max_str_len</name> <operator>+=</operator> <operator>(</operator><call><name>strlen</name> <argument_list>(<argument><expr><name><name>access_flags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>max_str_len</name> <operator>&lt;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>access_flags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>max_str_len</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>outbuffer</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>max_str_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>outbuffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>outbuffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_str_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_pos</name> <operator>=</operator> <name>outbuffer</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>access_flags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name><name>access_flags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>access_flags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>the_string</name> <init>= <expr><name><name>access_flags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><name>the_string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cur_pos</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_pos</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>cur_pos</name> <operator>!=</operator> <name>outbuffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>cur_pos</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>outbuffer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>retrieve_method_access_string</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>retrieve_access_string</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>METHOD_ACCESS_FLAGS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>retrieve_field_access_string</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>retrieve_access_string</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>FIELD_ACCESS_FLAGS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>retrieve_class_method_access_string</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>retrieve_access_string</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>CLASS_ACCESS_FLAGS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_build_obj_key</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>jvcname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cname</name> <init>= <expr><call><name>r_bin_java_get_this_class_name</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>class_name_len</name> <init>= <expr><ternary><condition><expr><name>cname</name></expr> ?</condition><then> <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"_unknown_"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>jvcname</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>class_name_len</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>jvcname</name></expr></argument>, <argument><expr><name>class_name_len</name> <operator>+</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><literal type="string">"%d.%s.class"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>jvcname</name></expr></argument>, <argument><expr><name>class_name_len</name> <operator>+</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><literal type="string">"%d._unknown_.class"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>jvcname</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>sdb_iterate_build_list</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>bin_objs_list</name> <init>= <expr><operator>(</operator><name>RList</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>sdb_atoi</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Found %s == %"</literal><name>PFMT64x</name> <literal type="string">" bin_objs db\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bin_obj</name> <operator>=</operator> <operator>(</operator><name>RBinJavaObj</name> <operator>*</operator><operator>)</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>bin_objs_list</name></expr></argument>, <argument><expr><name>bin_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_get_java_null_cp</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>R_BIN_JAVA_NULL_TYPE_INITTED</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>R_BIN_JAVA_NULL_TYPE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>R_BIN_JAVA_NULL_TYPE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>R_BIN_JAVA_NULL_TYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R_BIN_JAVA_NULL_TYPE</name><operator>.</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>R_BIN_JAVA_NULL_TYPE</name><operator>.</operator><name>metas</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>R_BIN_JAVA_NULL_TYPE</name><operator>.</operator><name>metas</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R_BIN_JAVA_NULL_TYPE</name><operator>.</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R_BIN_JAVA_NULL_TYPE</name><operator>.</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R_BIN_JAVA_NULL_TYPE</name><operator>.</operator><name>file_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>R_BIN_JAVA_NULL_TYPE_INITTED</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name>R_BIN_JAVA_NULL_TYPE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaElementValueMetas</name> <modifier>*</modifier></type><name>r_bin_java_get_ev_meta_from_tag</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaElementValueMetas</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>&amp;</operator><name><name>R_BIN_JAVA_ELEMENT_VALUE_METAS</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_BIN_JAVA_ELEMENT_VALUE_METAS_SZ</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name><name>R_BIN_JAVA_ELEMENT_VALUE_METAS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_ELEMENT_VALUE_METAS</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name></type> <name>r_bin_java_quick_check</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>expected_tag</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>actual_tag</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>actual_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>expected_tag</name> <operator>&gt;</operator> <name>R_BIN_JAVA_CP_METAS_SZ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid tag '%d' expected 0x%02x for %s.\n"</literal></expr></argument>, <argument><expr><name>actual_tag</name></expr></argument>, <argument><expr><name>expected_tag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>expected_tag</name> <operator>!=</operator> <name>actual_tag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid tag '%d' expected 0x%02x for %s.\n"</literal></expr></argument>, <argument><expr><name>actual_tag</name></expr></argument>, <argument><expr><name>expected_tag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>actual_len</name> <operator>&lt;</operator> <name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>expected_tag</name></expr>]</index></name><operator>.</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unable to parse '%d' expected sz=0x%02x got 0x%02x for %s.\n"</literal></expr></argument>,
<argument><expr><name>actual_tag</name></expr></argument>, <argument><expr><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>expected_tag</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>, <argument><expr><name>actual_len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_raw_to_long</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>raw</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>R_BIN_JAVA_LONG</name> <argument_list>(<argument><expr><name>raw</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>R_API</name> <name>double</name></type> <name>my_pow</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exp</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>exp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>*=</operator> <name>base</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>exp</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>*=</operator> <name>base</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Result: %"</literal><name>PFMT64d</name> <literal type="string">", base: %"</literal><name>PFMT64d</name> <literal type="string">", exp: %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1.0</literal> <operator>*</operator> <name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>double</name></type> <name>r_bin_java_raw_to_double</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>raw</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>bits</name> <init>= <expr><call><name>R_BIN_JAVA_LONG</name> <argument_list>(<argument><expr><name>raw</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7ffL</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>m</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>e</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
<expr><operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0xfffffffffffffLL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr> </then><else>:
<expr><operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0xfffffffffffffLL</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x10000000000000LL</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>res</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Convert Long to Double: %08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">0x7ff0000000000000LL</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>INFINITY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">0xfff0000000000000LL</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>INFINITY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0x7ff0000000000001LL</literal> <operator>&lt;=</operator> <name>bits</name> <operator>&amp;&amp;</operator> <name>bits</name> <operator>&lt;=</operator> <literal type="number">0x7fffffffffffffffLL</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NAN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0xfff0000000000001LL</literal> <operator>&lt;=</operator> <name>bits</name> <operator>&amp;&amp;</operator> <name>bits</name> <operator>&lt;=</operator> <literal type="number">0xffffffffffffffffLL</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NAN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>s</name> <operator>*</operator> <name>m</name> <operator>*</operator> <call><name>my_pow</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <literal type="number">1075</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">" High-bytes = %02x %02x %02x %02x\n"</literal></expr></argument>, <argument><expr><name><name>raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>raw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>raw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>raw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">" Low-bytes = %02x %02x %02x %02x\n"</literal></expr></argument>, <argument><expr><name><name>raw</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>raw</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>raw</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>raw</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Convert Long to Double s: %d, m: 0x%08lx, e: 0x%08x, res: %f\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaField</name> <modifier>*</modifier></type><name>r_bin_java_read_next_method</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>f_buf</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>adv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <name>offset</name> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>method</name> <init>= <expr><operator>(</operator><name>RBinJavaField</name> <operator>*</operator><operator>)</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaField</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>method</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unable to allocate memory for method information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <operator>(</operator><name>RBinJavaMetaInfo</name> <operator>*</operator><operator>)</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>method</name><operator>-&gt;</operator><name>metas</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unable to allocate memory for meta information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>f_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>flags_str</name></name> <operator>=</operator> <call><name>retrieve_method_access_string</name> <argument_list>(<argument><expr><name><name>method</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>name_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>f_buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>descriptor_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>f_buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>attr_count</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>f_buf</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>attributes</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_attribute_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_FIELD_TYPE_METHOD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>method_idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>method</name><operator>-&gt;</operator><name>name_idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_bin_java_get_utf8_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator> <operator>(</operator><name><name>method</name><operator>-&gt;</operator><name>name_idx</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Method name_idx: %d, which is: ord: %d, name: %s, value: %s\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>method</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>method</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"sym.method_%08x"</literal></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_read_next_method: Unable to find the name for 0x%02x index.\n"</literal></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>method</name><operator>-&gt;</operator><name>descriptor_idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>descriptor</name></name> <operator>=</operator> <call><name>r_bin_java_get_utf8_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator> <name><name>method</name><operator>-&gt;</operator><name>descriptor_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Method descriptor_idx: %d, which is: ord: %d, name: %s, value: %s\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>method</name><operator>-&gt;</operator><name>descriptor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>descriptor</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_read_next_method: Unable to find the descriptor for 0x%02x index.\n"</literal></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>descriptor_idx</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Looking for a NameAndType CP with name_idx: %d descriptor_idx: %d\n"</literal></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>descriptor_idx</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>field_ref_cp_obj</name></name> <operator>=</operator> <call><name>r_bin_java_find_cp_ref_info_from_name_and_type</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>descriptor_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>method</name><operator>-&gt;</operator><name>field_ref_cp_obj</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Found the obj.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>field_ref_cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>class_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Method class reference value: %d, which is: ord: %d, name: %s\n"</literal></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>field_ref_cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>class_idx</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>class_name</name></name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Method requesting ref_cp_obj the following which is: ord: %d, name: %s\n"</literal></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>field_ref_cp_obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator><name><name>method</name><operator>-&gt;</operator><name>field_ref_cp_obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"MethodRef class name resolves to: %s\n"</literal></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>method</name><operator>-&gt;</operator><name>class_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>class_name</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>field_ref_cp_obj</name></name> <operator>=</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>class_name</name></name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>field_ref_cp_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Parsing %s(%s)\n"</literal></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>method</name><operator>-&gt;</operator><name>attr_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>attr_offset</name></name> <operator>=</operator> <name>adv</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>method</name><operator>-&gt;</operator><name>attr_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>r_bin_java_read_next_attr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>adv</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_bin_java: Error unable to parse remainder of classfile after Method Attribute: %d.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_bin_java_get_attr_type_by_name</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>R_BIN_JAVA_ATTR_TYPE_CODE_ATTR</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cur_method_code_length</name></name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>offset_sz</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>ustack_sz</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>ulocalvar_sz</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Parsing @ 0x%"</literal><name>PFMT64x</name> <literal type="string">" (%s) = 0x%"</literal><name>PFMT64x</name> <literal type="string">" bytes\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>method</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <name><name>attr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>adv</name> <operator>+</operator> <name>offset</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_bin_java: Error unable to parse remainder of classfile after Method Attribute: %d.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>adv</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Parsing @ 0x%"</literal><name>PFMT64x</name> <literal type="string">" %s(%s) = 0x%"</literal><name>PFMT64x</name> <literal type="string">" bytes\n"</literal></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><name>method</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaField</name> <modifier>*</modifier></type><name>r_bin_java_read_next_field</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>f_buf</name> <init>= <expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>adv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <name>offset</name> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><operator>(</operator><name>RBinJavaField</name> <operator>*</operator><operator>)</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaField</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>field</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unable to allocate memory for field information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <operator>(</operator><name>RBinJavaMetaInfo</name> <operator>*</operator><operator>)</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>field</name><operator>-&gt;</operator><name>metas</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unable to allocate memory for meta information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>f_buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>flags_str</name></name> <operator>=</operator> <call><name>retrieve_field_access_string</name> <argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>descriptor_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>attr_count</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>attributes</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_attribute_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_FIELD_TYPE_FIELD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>field_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>name_idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_bin_java_get_utf8_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator> <operator>(</operator><name><name>field</name><operator>-&gt;</operator><name>name_idx</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Field name_idx: %d, which is: ord: %d, name: %s, value: %s\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"sym.field_%08x"</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_read_next_field: Unable to find the name for 0x%02x index.\n"</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>descriptor_idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>descriptor</name></name> <operator>=</operator> <call><name>r_bin_java_get_utf8_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator> <name><name>field</name><operator>-&gt;</operator><name>descriptor_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Field descriptor_idx: %d, which is: ord: %d, name: %s, value: %s\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>field</name><operator>-&gt;</operator><name>descriptor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>descriptor</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_read_next_field: Unable to find the descriptor for 0x%02x index.\n"</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>descriptor_idx</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Looking for a NameAndType CP with name_idx: %d descriptor_idx: %d\n"</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>descriptor_idx</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>field_ref_cp_obj</name></name> <operator>=</operator> <call><name>r_bin_java_find_cp_ref_info_from_name_and_type</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>descriptor_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>field_ref_cp_obj</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Found the obj.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>field_ref_cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_field</name><operator>.</operator><name>class_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Field class reference value: %d, which is: ord: %d, name: %s\n"</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>field_ref_cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_field</name><operator>.</operator><name>class_idx</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>class_name</name></name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Field requesting ref_cp_obj the following which is: ord: %d, name: %s\n"</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>field_ref_cp_obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator><name><name>field</name><operator>-&gt;</operator><name>field_ref_cp_obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"FieldRef class name resolves to: %s\n"</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>field</name><operator>-&gt;</operator><name>class_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>class_name</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>field_ref_cp_obj</name></name> <operator>=</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>class_name</name></name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>field_ref_cp_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Parsing %s(%s)"</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>attr_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>attr_offset</name></name> <operator>=</operator> <name>adv</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>field</name><operator>-&gt;</operator><name>attr_count</name></name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>+</operator> <name>adv</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>r_bin_java_read_next_attr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>adv</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_bin_java: Error unable to parse remainder of classfile after Field Attribute: %d.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_bin_java_get_attr_type_by_name</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>R_BIN_JAVA_ATTR_TYPE_CODE_ATTR</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cur_method_code_length</name></name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>offset_sz</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>ustack_sz</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>ulocalvar_sz</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <name><name>attr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>adv</name> <operator>+</operator> <name>offset</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_bin_java: Error unable to parse remainder of classfile after Field Attribute: %d.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_java_fmtype_free</name> <argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>adv</name></expr>;</expr_stmt>
<return>return <expr><name>field</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_clone_cp_idx</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_bin_java_clone_cp_item</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_clone_cp_item</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>clone_obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>clone_obj</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>clone_obj</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>clone_obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>clone_obj</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clone_obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <operator>(</operator><name>RBinJavaMetaInfo</name> <operator>*</operator><operator>)</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clone_obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name><name>clone_obj</name><operator>-&gt;</operator><name>tag</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clone_obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr>?</condition><then> <expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></then><else>: <expr><literal type="string">"unk"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_UTF8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>clone_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>clone_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>clone_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>clone_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>clone_obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_read_next_constant_pool_item</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeMetas</name> <modifier>*</modifier></type><name>java_constant_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>tag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>buf_sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>cp_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>str_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>java_obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>&gt;</operator> <name>R_BIN_JAVA_CP_METAS_SZ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid tag '%d' at offset 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
java_obj = r_bin_java_unknown_cp_new (bin, &amp;tag, 1);
if (java_obj != NULL &amp;&amp; java_obj-&gt;metas != NULL) {
java_obj-&gt;file_offset = offset;
java_obj-&gt;loadaddr = bin-&gt;loadaddr;
}
return NULL; 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>java_constant_info</name> <operator>=</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>java_constant_info</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>java_constant_info</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>java_obj</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf_sz</name> <operator>+=</operator> <name><name>java_constant_info</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>java_constant_info</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">32</literal> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str_len</name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_sz</name> <operator>+=</operator> <name>str_len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cp_buf</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>buf_sz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp_buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>java_obj</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <name>buf_sz</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cp_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Parsed the tag '%d':%s and create object from offset 0x%08"</literal><name>PFMT64x</name> <literal type="string">".\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>java_obj</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>java_constant_info</name><operator>-&gt;</operator><name>allocs</name><operator>-&gt;</operator><name>new_obj</name></name>)<argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>cp_buf</name></expr></argument>, <argument><expr><name>buf_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>java_obj</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>java_obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>java_obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>java_obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unable to parse the tag '%d' and create valid object.\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>java_obj</name><operator>-&gt;</operator><name>metas</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unable to parse the tag '%d' and create valid object.\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to set the java_obj-&gt;metas-file_offset for '%d' offset is(0x%08"</literal><name>PFMT64x</name> <literal type="string">").\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>java_obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaInterfaceInfo</name> <modifier>*</modifier></type><name>r_bin_java_read_next_interface_item</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>idx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaInterfaceInfo</name> <modifier>*</modifier></type><name>ifobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>if_buf</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>, <argument><expr><name>if_buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ifobj</name> <operator>=</operator> <call><name>r_bin_java_interface_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>if_buf</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ifobj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifobj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ifobj</name></expr>;</return>
</block_content>}</block></function>












<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_get_utf8_from_bin_cp_list</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_bin_java_get_utf8_from_cp_item_list</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_list</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut32</name></type> <name>r_bin_java_get_utf8_len_from_bin_cp_list</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_bin_java_get_utf8_len_from_cp_item_list</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_list</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_get_name_from_bin_cp_list</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_bin_java_get_name_from_cp_item_list</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_list</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_get_desc_from_bin_cp_list</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_bin_java_get_desc_from_cp_item_list</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_list</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_get_item_from_bin_cp_list</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>cp_count</name></name> <operator>||</operator> <name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_get_java_null_cp</name> <argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_bin_java_get_item_from_cp_item_list</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_list</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_get_item_name_from_bin_cp_list</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>&amp;&amp;</operator> <name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_cp_item_list</name> <argument_list>(
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_list</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>MAX_CPITEMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_get_item_desc_from_bin_cp_list</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>







<return>return <expr><ternary><condition><expr><name>bin</name></expr>?</condition><then> <expr><call><name>r_bin_java_get_item_desc_from_cp_item_list</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_list</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>MAX_CPITEMS</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_get_utf8_from_cp_item_list</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>cp_list</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>






<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp_list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>cp_list</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_UTF8</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name> <operator>==</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>convert_string</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>cp_list</argument>, <argument>iter</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_UTF8</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name> <operator>==</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>convert_string</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut32</name></type> <name>r_bin_java_get_utf8_len_from_cp_item_list</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>cp_list</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>






<decl_stmt><decl><type><name>ut32</name></type> <name>value</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp_list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>cp_list</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_UTF8</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name> <operator>==</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>cp_list</argument>, <argument>iter</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_UTF8</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name> <operator>==</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_get_item_from_cp_item_list</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>cp_list</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>




<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cp_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>cp_list</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_get_item_name_from_cp_item_list</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>cp_list</name></decl></parameter>, <parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>







<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cp_list</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>depth</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_JAVA_CP_NAMEANDTYPE</name></expr>:</case>
<return>return <expr><call><name>r_bin_java_get_utf8_from_cp_item_list</name> <argument_list>(
<argument><expr><name>cp_list</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_name_and_type</name><operator>.</operator><name>name_idx</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>R_BIN_JAVA_CP_CLASS</name></expr>:</case>
<return>return <expr><call><name>r_bin_java_get_utf8_from_cp_item_list</name> <argument_list>(
<argument><expr><name>cp_list</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_class</name><operator>.</operator><name>name_idx</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>R_BIN_JAVA_CP_FIELDREF</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_CP_INTERFACEMETHOD_REF</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_CP_METHODREF</name></expr>:</case>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>r_bin_java_get_item_from_cp_item_list</name> <argument_list>(
<argument><expr><name>cp_list</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>name_and_type_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>r_bin_java_get_item_name_from_cp_item_list</name> <argument_list>(
<argument><expr><name>cp_list</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Invalid 0 tag in the constant pool\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_get_name_from_cp_item_list</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>cp_list</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>







<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>r_bin_java_get_item_from_cp_item_list</name> <argument_list>(
<argument><expr><name>cp_list</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name>cp_list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_get_item_name_from_cp_item_list</name> <argument_list>(
<argument><expr><name>cp_list</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>MAX_CPITEMS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_get_item_desc_from_cp_item_list</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>cp_list</name></decl></parameter>, <parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name> <operator>||</operator> <operator>!</operator><name>cp_list</name> <operator>||</operator> <name>depth</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_JAVA_CP_NAMEANDTYPE</name></expr>:</case>
<return>return <expr><call><name>r_bin_java_get_utf8_from_cp_item_list</name> <argument_list>(<argument><expr><name>cp_list</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_name_and_type</name><operator>.</operator><name>descriptor_idx</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>R_BIN_JAVA_CP_FIELDREF</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_CP_INTERFACEMETHOD_REF</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_CP_METHODREF</name></expr>:</case>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>r_bin_java_get_item_from_cp_item_list</name> <argument_list>(<argument><expr><name>cp_list</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>name_and_type_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>r_bin_java_get_item_desc_from_cp_item_list</name> <argument_list>(
<argument><expr><name>cp_list</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_get_desc_from_cp_item_list</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>cp_list</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>





<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>r_bin_java_get_item_from_cp_item_list</name> <argument_list>(<argument><expr><name>cp_list</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cp_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_bin_java_get_item_desc_from_cp_item_list</name> <argument_list>(<argument><expr><name>cp_list</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>MAX_CPITEMS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_get_method_code_attribute</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RBinJavaField</name> <modifier>*</modifier></type><name>method</name></decl></parameter>)</parameter_list> <block>{<block_content>




<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>method</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>method-&gt;attributes</argument>, <argument>iter</argument>, <argument>attr</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_ATTR_TYPE_CODE_ATTR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_get_attr_from_field</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>R_BIN_JAVA_ATTR_TYPE</name></type> <name>attr_type</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>




<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>field-&gt;attributes</argument>, <argument>iter</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name><operator>++</operator><operator>)</operator> <operator>&gt;=</operator> <name>pos</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>attr_type</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_get_attr_buf</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>attr_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pending</name> <init>= <expr><name>len</name> <operator>-</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>a_buf</name> <init>= <expr><name>offset</name> <operator>+</operator> <name>buf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>attr_buf</name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>pending</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr_buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unable to allocate enough bytes (0x%04"</literal><name>PFMT64x</name>
<literal type="string">") to read in the attribute.\n"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>attr_buf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>attr_buf</name></expr></argument>, <argument><expr><name>a_buf</name></expr></argument>, <argument><expr><name>pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><name>attr_buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_default_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>





<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaAttrInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrMetas</name> <modifier>*</modifier></type><name>type_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>is_attr_in_old_format</name></name> <operator>=</operator> <call><name>r_bin_java_is_old_format</name><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>buf_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_UINT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_UINT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_bin_java_get_utf8_from_bin_cp_list</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_default_attr_new: Unable to find the name for %d index.\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>type_info</name> <operator>=</operator> <call><name>r_bin_java_get_attr_type_by_name</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name> <operator>=</operator> <operator>(</operator><name><name>R_BIN_JAVA_GLOBAL_BIN</name><operator>-&gt;</operator><name>attr_idx</name></name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>type_info</name></expr>;</expr_stmt>

<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrMetas</name> <modifier>*</modifier></type><name>r_bin_java_get_attr_type_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RBIN_JAVA_ATTRS_METAS_SZ</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>name</name></expr></argument>, <argument><expr><name><name>RBIN_JAVA_ATTRS_METAS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_METAS</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>&amp;</operator><name><name>RBIN_JAVA_ATTRS_METAS</name><index>[<expr><name>R_BIN_JAVA_ATTR_TYPE_UNKNOWN_ATTR</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_read_next_attr</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>a_buf</name> <init>= <expr><name>offset</name> <operator>+</operator> <name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>attr_idx_len</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">6</literal> <operator>&gt;</operator> <name>buf_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_bin_java: Error unable to parse remainder of classfile in Attribute offset "</literal>
<literal type="string">"(0x%"</literal><name>PFMT64x</name> <literal type="string">") &gt; len of remaining bytes (0x%"</literal><name>PFMT64x</name> <literal type="string">").\n"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>R_BIN_JAVA_UINT</name> <argument_list>(<argument><expr><name>a_buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>attr_idx_len</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>+</operator> <name>offset</name> <operator>&gt;</operator> <name>buf_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_bin_java: Error unable to parse remainder of classfile in Attribute len "</literal>
<literal type="string">"(0x%x) + offset (0x%"</literal><name>PFMT64x</name> <literal type="string">") exceeds length of buffer (0x%"</literal><name>PFMT64x</name> <literal type="string">").\n"</literal></expr></argument>,
<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>r_bin_java_get_attr_buf</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>buf_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>r_bin_java_read_next_attr_from_buffer</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf_len</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"IS OOB\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_read_next_attr_from_buffer</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>name_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>nsz</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>sz</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <name>buf_offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_Java_read_next_attr_from_buffer: invalid buffer size %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name_idx</name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nsz</name> <operator>=</operator> <call><name>R_BIN_JAVA_UINT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>r_bin_java_get_utf8_from_bin_cp_list</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name>name_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_read_next_attr: name_idx = %d is %s\n"</literal></expr></argument>, <argument><expr><name>name_idx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrMetas</name> <modifier>*</modifier></type><name>type_info</name> <init>= <expr><call><name>r_bin_java_get_attr_type_by_name</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>type_info</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Typeinfo: %s, was %s\n"</literal></expr></argument>, <argument><expr><name><name>type_info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nsz</name> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>attr</name> <operator>=</operator> <call><name><name>type_info</name><operator>-&gt;</operator><name>allocs</name><operator>-&gt;</operator><name>new_obj</name></name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nsz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name> <operator>=</operator> <operator>(</operator><name><name>R_BIN_JAVA_GLOBAL_BIN</name><operator>-&gt;</operator><name>attr_idx</name></name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_read_next_attr_from_buffer: Cannot find type_info for %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_read_class_file2</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>cf2_buf</name> <init>= <expr><name>obuf</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>this_class_cp_obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"\n0x%"</literal><name>PFMT64x</name> <literal type="string">" Offset before reading the cf2 structure\n"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><name>cf2_buf</name> <operator>+</operator> <literal type="number">6</literal> <operator>&gt;</operator> <name>obuf</name> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>cf2_size</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>access_flags</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>cf2_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>cf2_buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>super_class</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>cf2_buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>flags_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>flags_str</name></name> <operator>=</operator> <call><name>retrieve_class_method_access_string</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>access_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>this_class_cp_obj</name> <operator>=</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class_name</name></name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>this_class_cp_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"This class flags are: %s\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>flags_str</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>cf2_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_parse_cp_pool</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ord</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>adv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>cp_buf</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_list</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_constant_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>cp_count</name></name></expr></argument>, <argument><expr><name>cp_buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_count</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>cp_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"ConstantPoolCount %d\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_count</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_list</name></name></expr></argument>, <argument><expr><call><name>r_bin_java_get_java_null_cp</name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ord</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name><name>bin</name><operator>-&gt;</operator><name>cp_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_idx</name></name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>cp_count</name></name> <operator>&amp;&amp;</operator> <name>adv</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>ord</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>bin</name><operator>-&gt;</operator><name>cp_idx</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>r_bin_java_read_next_constant_pool_item</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>adv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name> <operator>=</operator> <name>ord</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>ord</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_list</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_LONG</name> <operator>||</operator> <name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_DOUBLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ord</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_idx</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R_BIN_JAVA_NULL_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>IFDBG</name> <argument_list>(<argument><expr><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name><name>allocs</name><operator>-&gt;</operator><name>print_summary</name></name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><call><name><name>allocs</name><operator>-&gt;</operator><name>calc_size</name></name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <name>adv</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_bin_java: Error unable to parse remainder of classfile after Constant Pool Object: %d.\n"</literal></expr></argument>, <argument><expr><name>ord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Failed to read ConstantPoolItem %d\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_idx</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>r_bin_java_set_imports</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_size</name></name> <operator>=</operator> <name>adv</name></expr>;</expr_stmt>
<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>cp_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_parse_interfaces</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>adv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaInterfaceInfo</name> <modifier>*</modifier></type><name>interfaces_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>if_buf</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>interfaces_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>interfaces_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>interfaces_list</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_interface_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>interfaces_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>interfaces_count</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>if_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Interfaces count: %d\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>interfaces_count</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>interfaces_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>interfaces_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>interfaces_obj</name> <operator>=</operator> <call><name>r_bin_java_read_next_interface_item</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>adv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>interfaces_obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>interfaces_list</name></name></expr></argument>, <argument><expr><name>interfaces_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <name><name>interfaces_obj</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <name>adv</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_bin_java: Error unable to parse remainder of classfile after Interface: %d.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>interfaces_size</name></name> <operator>=</operator> <name>adv</name></expr>;</expr_stmt>
<return>return <expr><name>adv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_parse_fields</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>adv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>fm_buf</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>fields_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>fields_list</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_fmtype_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>fields_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>UT64_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>fields_count</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>fm_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Fields count: %d 0x%"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>fields_count</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>fields_offset</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>fields_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>fields_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>bin</name><operator>-&gt;</operator><name>field_idx</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>r_bin_java_read_next_field</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>adv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <name><name>field</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>fields_list</name></name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_bin_java_print_field_summary</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>adv</name> <operator>+</operator> <name>offset</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_bin_java: Error unable to parse remainder of classfile after Field: %d.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Failed to read Field %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>fields_size</name></name> <operator>=</operator> <name>adv</name></expr>;</expr_stmt>
<return>return <expr><name>adv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_parse_attrs</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>adv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>a_buf</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UT64_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>attrs_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>attrs_list</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_attribute_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>attrs_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>attrs_count</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>a_buf</name></expr></argument>, <argument><expr><name>adv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>attrs_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>attrs_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>bin</name><operator>-&gt;</operator><name>attr_idx</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><call><name>r_bin_java_read_next_attr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>adv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>attrs_list</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <name><name>attr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>adv</name> <operator>+</operator> <name>offset</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>attrs_size</name></name> <operator>=</operator> <name>adv</name></expr>;</expr_stmt>
<return>return <expr><name>adv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_parse_methods</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>adv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>fm_buf</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_fmtype_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0LL</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>methods_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>methods_count</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>fm_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Methods count: %d 0x%"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>methods_count</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>methods_offset</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name/></name>main <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>entrypoint</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>main_code_attr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>entrypoint_code_attr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>methods_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>bin</name><operator>-&gt;</operator><name>method_idx</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>method</name> <operator>=</operator> <call><name>r_bin_java_read_next_method</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>adv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>method</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <name><name>method</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>method</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>method</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name/></name>main <operator>=</operator> <name>method</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>main_code_attr</name></name> <operator>=</operator> <call><name>r_bin_java_get_attr_from_field</name> <argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>R_BIN_JAVA_ATTR_TYPE_CODE_ATTR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>method</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>method</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;init&gt;"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>method</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"init"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Found an init function.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>entrypoint</name></name> <operator>=</operator> <name>method</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>entrypoint_code_attr</name></name> <operator>=</operator> <call><name>r_bin_java_get_attr_from_field</name> <argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>R_BIN_JAVA_ATTR_TYPE_CODE_ATTR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>method</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>method</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;cinit&gt;"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>method</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"cinit"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class_entrypoint</name></name> <operator>=</operator> <name>method</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class_entrypoint_code_attr</name></name> <operator>=</operator> <call><name>r_bin_java_get_attr_from_field</name> <argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>R_BIN_JAVA_ATTR_TYPE_CODE_ATTR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>adv</name> <operator>+</operator> <name>offset</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_bin_java: Error unable to parse remainder of classfile after Method: %d.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_bin_java_print_field_summary</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>methods_size</name></name> <operator>=</operator> <name>adv</name></expr>;</expr_stmt>
<return>return <expr><name>adv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bin_java_new_bin</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>loadaddr</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>R_BIN_JAVA_GLOBAL_BIN</name> <operator>=</operator> <name>bin</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_constpool_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>constpool</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>lines</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name> <operator>=</operator> <name>loadaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_java_get_java_null_cp</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>r_num_rand</name> <argument_list>(<argument><expr><name>UT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name> <operator>=</operator> <ternary><condition><expr><name>kv</name></expr> ?</condition><then> <expr><name>kv</name></expr> </then><else>: <expr><call><name>sdb_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>AllJavaBinObjs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><call><name>r_bin_java_load_bin</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bin_java_load_bin</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>adv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>R_BIN_JAVA_GLOBAL_BIN</name> <operator>=</operator> <name>bin</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_bin_java_reset_bin_info</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>cf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>cafebabe</name></name></expr></argument>, <argument><expr><literal type="string">"\xCA\xFE\xBA\xBE"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_new_bin: Invalid header (%02x %02x %02x %02x)\n"</literal></expr></argument>,
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>cafebabe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>cafebabe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>cafebabe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>cafebabe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>major</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>major</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>major</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Java CLASS with MACH0 header?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>adv</name> <operator>+=</operator> <call><name>r_bin_java_parse_cp_pool</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>adv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>adv</name> <operator>&gt;</operator> <name>buf_sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_bin_java: Error unable to parse remainder of classfile after Constant Pool.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <call><name>r_bin_java_read_class_file2</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>adv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>adv</name> <operator>&gt;</operator> <name>buf_sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_bin_java: Error unable to parse remainder of classfile after class file info.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"This class: %d %s\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class_name</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name> <literal type="string">" Access flags: 0x%04x\n"</literal></expr></argument>, <argument><expr><name>adv</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>access_flags</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <call><name>r_bin_java_parse_interfaces</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>adv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>adv</name> <operator>&gt;</operator> <name>buf_sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_bin_java: Error unable to parse remainder of classfile after Interfaces.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <call><name>r_bin_java_parse_fields</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>adv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>adv</name> <operator>&gt;</operator> <name>buf_sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_bin_java: Error unable to parse remainder of classfile after Fields.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <call><name>r_bin_java_parse_methods</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>adv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>adv</name> <operator>&gt;</operator> <name>buf_sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_bin_java: Error unable to parse remainder of classfile after Methods.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>adv</name> <operator>+=</operator> <call><name>r_bin_java_parse_attrs</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>adv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>calc_size</name></name> <operator>=</operator> <name>adv</name></expr>;</expr_stmt>








<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_get_version</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"0x%02x%02x 0x%02x%02x"</literal></expr></argument>,
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>major</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>major</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>minor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>minor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_entrypoints</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>bin-&gt;methods_list</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;init&gt;"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;clinit&gt;"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>flags_str</name></name></expr></argument>, <argument><expr><literal type="string">"static"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinAddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> \
<call><name>r_bin_java_get_method_code_offset</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>hpaddr</name></name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>file_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaField</name> <modifier>*</modifier></type><name>r_bin_java_get_method_code_attribute_with_addr</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>R_BIN_JAVA_GLOBAL_BIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bin</name> <operator>=</operator> <name>R_BIN_JAVA_GLOBAL_BIN</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bin</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to analyse function when the R_BIN_JAVA_GLOBAL_BIN has not been set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>bin-&gt;methods_list</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><call><name>r_bin_java_get_method_code_offset</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></init></decl>,
<decl><type ref="prev"/><name>size</name> <init>= <expr><call><name>r_bin_java_get_method_code_size</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name>offset</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;=</operator> <name>size</name> <operator>+</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>fm_type</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinAddr</name> <modifier>*</modifier></type><name>r_bin_java_get_entrypoint</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>sym</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_SYM_ENTRY</name></expr>:</case>
<case>case <expr><name>R_BIN_SYM_INIT</name></expr>:</case>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <call><name>r_bin_java_find_method_offset</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><literal type="string">"&lt;init&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ret</name><operator>-&gt;</operator><name>paddr</name></name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <call><name>r_bin_java_find_method_offset</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><literal type="string">"&lt;cinit&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_SYM_FINI</name></expr>:</case>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_SYM_MAIN</name></expr>:</case>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <call><name>r_bin_java_find_method_offset</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>ret</name><operator>-&gt;</operator><name>paddr</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+=</operator> <name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_get_method_code_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>attr_iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>attr_iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>fm_type-&gt;attributes</argument>, <argument>attr_iter</argument>, <argument>attr_iter_tmp</argument>, <argument>attr</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_ATTR_TYPE_CODE_ATTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code_length</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>sz</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_find_method_offset</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>attr_iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>attr_iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>method</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>bin-&gt;methods_list</argument>, <argument>attr_iter</argument>, <argument>attr_iter_tmp</argument>, <argument>method</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>method</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>method</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>method_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>r_bin_java_get_method_code_offset</name> <argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_get_method_code_offset</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>attr_iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>attr_iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>fm_type-&gt;attributes</argument>, <argument>attr_iter</argument>, <argument>attr_iter_tmp</argument>, <argument>attr</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_ATTR_TYPE_CODE_ATTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code_offset</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinField</name> <modifier>*</modifier></type><name>r_bin_java_allocate_rbinfield</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinField</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>(</operator><name>RBinField</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinField</name> <modifier>*</modifier></type><name>r_bin_java_create_new_rbinfield_from_field</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>baddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>r_bin_java_allocate_rbinfield</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name>baddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>visibility</name></name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>field</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinSymbol</name> <modifier>*</modifier></type><name>r_bin_java_create_new_symbol_from_field</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>baddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fm_type</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>field_ref_cp_obj</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>field_ref_cp_obj</name></name> <operator>==</operator> <operator>&amp;</operator><name>R_BIN_JAVA_NULL_TYPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sym</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fm_type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_FIELD_TYPE_METHOD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_TYPE_FUNC_STR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <call><name>r_bin_java_get_method_code_offset</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <call><name>r_bin_java_get_method_code_offset</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>baddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_bin_java_get_method_code_size</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"FIELD"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>file_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name>baddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_bin_java_is_fm_type_protected</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <name>R_BIN_BIND_LOCAL_STR</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_bin_java_is_fm_type_private</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <name>R_BIN_BIND_LOCAL_STR</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_bin_java_is_fm_type_protected</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <name>R_BIN_BIND_GLOBAL_STR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>forwarder</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fm_type</name><operator>-&gt;</operator><name>class_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>classname</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>classname</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"UNKNOWN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>visibility</name></name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fm_type</name><operator>-&gt;</operator><name>flags_str</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>visibility_str</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>flags_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>sym</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinSymbol</name> <modifier>*</modifier></type><name>r_bin_java_create_new_symbol_from_fm_type_meta</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>baddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name> <operator>||</operator> <operator>!</operator><name>fm_type</name> <operator>||</operator> <operator>!</operator><name><name>fm_type</name><operator>-&gt;</operator><name>field_ref_cp_obj</name></name> <operator>||</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>field_ref_cp_obj</name></name> <operator>==</operator> <operator>&amp;</operator><name>R_BIN_JAVA_NULL_TYPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"meta_%s"</literal></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fm_type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_FIELD_TYPE_METHOD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"FUNC_META"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"FIELD_META"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_bin_java_is_fm_type_protected</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <name>R_BIN_BIND_LOCAL_STR</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_bin_java_is_fm_type_private</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <name>R_BIN_BIND_LOCAL_STR</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_bin_java_is_fm_type_protected</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <name>R_BIN_BIND_GLOBAL_STR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>forwarder</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fm_type</name><operator>-&gt;</operator><name>class_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>classname</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>classname</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"UNKNOWN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>file_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name>baddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>visibility</name></name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fm_type</name><operator>-&gt;</operator><name>flags_str</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>visibility_str</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>flags_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>sym</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinSymbol</name> <modifier>*</modifier></type><name>r_bin_java_create_new_symbol_from_ref</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>baddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>type_name</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>R_BIN_JAVA_CP_METHODREF</name> <operator>&amp;&amp;</operator>
<name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>R_BIN_JAVA_CP_INTERFACEMETHOD_REF</name> <operator>&amp;&amp;</operator>
<name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>R_BIN_JAVA_CP_FIELDREF</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>sym</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sym</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>class_name</name> <operator>=</operator> <call><name>r_bin_java_get_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>class_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>r_bin_java_get_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>name_and_type_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type_name</name> <operator>=</operator> <call><name>r_bin_java_get_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>name_and_type_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>r_str_constpool_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>constpool</name></name></expr></argument>, <argument><expr><name>type_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>type_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>class_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>classname</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name>baddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name>baddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>sym</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_sections</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>baddr</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>cp_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>section</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>section</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"constant_pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>cp_offset</name></name> <operator>+</operator> <name>baddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>cp_size</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
section-&gt;vsize = section-&gt;size;
section-&gt;vaddr = 0x10; 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>baddr</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>section</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>fields_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>section</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>section</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>fields_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>fields_offset</name></name> <operator>+</operator> <name>baddr</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
section-&gt;vsize = section-&gt;size;
section-&gt;vaddr = section-&gt;paddr;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>section</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;fields_list</argument>, <argument>iter</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fm_type</name><operator>-&gt;</operator><name>attr_offset</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>section</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>section</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"attrs.%s"</literal></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>(</operator><name><name>fm_type</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>-</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>attr_offset</name></name><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
section-&gt;vsize = section-&gt;size;
section-&gt;vaddr = section-&gt;paddr;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>attr_offset</name></name> <operator>+</operator> <name>baddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>methods_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>section</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>section</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"methods"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>methods_offset</name></name> <operator>+</operator> <name>baddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>methods_size</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_RX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>section</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;methods_list</argument>, <argument>iter</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fm_type</name><operator>-&gt;</operator><name>attr_offset</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>section</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>section</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"attrs.%s"</literal></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>(</operator><name><name>fm_type</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>-</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>attr_offset</name></name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>attr_offset</name></name> <operator>+</operator> <name>baddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_R</name> <operator>|</operator> <name>R_PERM_X</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>interfaces_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>section</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>section</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"interfaces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>interfaces_offset</name></name> <operator>+</operator> <name>baddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>interfaces_size</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>section</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>attrs_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>section</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>section</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"attributes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>attrs_offset</name></name> <operator>+</operator> <name>baddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>attrs_size</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>section</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>sections</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_enum_class_methods</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>class_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>methods</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;methods_list</argument>, <argument>iter</argument>, <argument>field</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>field_ref_cp_obj</name></name> <operator>&amp;&amp;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>field</name> <operator>&amp;&amp;</operator> <name><name>field</name><operator>-&gt;</operator><name>field_ref_cp_obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name> <operator>==</operator> <name>class_idx</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>r_bin_java_create_new_symbol_from_ref</name> <argument_list>(
<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>field_ref_cp_obj</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sym</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <call><name>r_bin_java_get_method_code_offset</name> <argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<return>return <expr><name>methods</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_enum_class_fields</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>class_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;fields_list</argument>, <argument>iter</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fm_type</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fm_type</name> <operator>&amp;&amp;</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>field_ref_cp_obj</name></name>
<operator>&amp;&amp;</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>field_ref_cp_obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name> <operator>==</operator> <name>class_idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>r_bin_java_create_new_rbinfield_from_field</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>fields</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>is_class_interface</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaInterfaceInfo</name> <modifier>*</modifier></type><name>ifobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;interfaces_list</argument>, <argument>iter</argument>, <argument>ifobj</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ifobj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>cp_obj</name> <operator>==</operator> <name><name>ifobj</name><operator>-&gt;</operator><name>cp_class</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

















<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_lib_names</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>lib_names</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>lib_names</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;cp_list</argument>, <argument>iter</argument>, <argument>cp_obj</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cp_obj</name> <operator>&amp;&amp;</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_CLASS</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class</name></name> <operator>!=</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_class</name><operator>.</operator><name>name_idx</name></name> <operator>||</operator> <operator>!</operator><call><name>is_class_interface</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>cp_obj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>cp_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>lib_names</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>lib_names</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_classes_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>klass</name> <init>= <expr><name>k</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>klass</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>klass</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>klass</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>klass</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>klass</name><operator>-&gt;</operator><name>super</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>klass</name><operator>-&gt;</operator><name>visibility_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_classes</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>classes</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_classes_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>this_class_cp_obj</name> <init>= <expr><call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>k</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinClass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>k</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>classes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>visibility</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>access_flags</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>flags_str</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>visibility_str</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>flags_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>methods</name></name> <operator>=</operator> <call><name>r_bin_java_enum_class_methods</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>r_bin_java_enum_class_fields</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_bin_java_get_this_class_name</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>super</name></name> <operator>=</operator> <call><name>r_bin_java_get_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>super_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>(</operator><name>idx</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>classes</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;cp_list</argument>, <argument>iter</argument>, <argument>cp_obj</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cp_obj</name> <operator>&amp;&amp;</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_CLASS</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>this_class_cp_obj</name> <operator>!=</operator> <name>cp_obj</name> <operator>&amp;&amp;</operator> <call><name>is_class_interface</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>cp_obj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>k</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>methods</name></name> <operator>=</operator> <call><name>r_bin_java_enum_class_methods</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_class</name><operator>.</operator><name>name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>r_bin_java_enum_class_fields</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_class</name><operator>.</operator><name>name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>cp_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>classes</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>classes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinSymbol</name> <modifier>*</modifier></type><name>r_bin_java_create_new_symbol_from_invoke_dynamic</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>baddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name> <operator>||</operator> <operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>R_BIN_JAVA_CP_INVOKEDYNAMIC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_bin_java_create_new_symbol_from_cp_idx</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_invoke_dynamic</name><operator>.</operator><name>name_and_type_index</name></name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinSymbol</name> <modifier>*</modifier></type><name>r_bin_java_create_new_symbol_from_cp_idx</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>cp_idx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>baddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(
<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name>cp_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_JAVA_CP_METHODREF</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_CP_FIELDREF</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_CP_INTERFACEMETHOD_REF</name></expr>:</case>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>r_bin_java_create_new_symbol_from_ref</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_CP_INVOKEDYNAMIC</name></expr>:</case>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>r_bin_java_create_new_symbol_from_invoke_dynamic</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>sym</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier><name>U</name></type>(<name>r_bin_java_get_fields</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinField</name> <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>bin-&gt;fields_list</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>r_bin_java_create_new_rbinfield_from_field</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>fields</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_add_import</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier></type><name>imp</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinImport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name</name> <init>= <expr><call><name>r_bin_java_get_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>class_idx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>r_bin_java_get_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>name_and_type_idx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>descriptor</name> <init>= <expr><call><name>r_bin_java_get_desc_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>name_and_type_idx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>class_name</name> <operator>=</operator> <ternary><condition><expr><name>class_name</name></expr> ?</condition><then> <expr><name>class_name</name></expr> </then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"INVALID CLASS NAME INDEX"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"InvalidNameIndex"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>descriptor</name> <operator>=</operator> <ternary><condition><expr><name>descriptor</name></expr> ?</condition><then> <expr><name>descriptor</name></expr> </then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"INVALID DESCRIPTOR INDEX"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>classname</name></name> <operator>=</operator> <name>class_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>r_str_constpool_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>constpool</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>descriptor</name></name> <operator>=</operator> <name>descriptor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>imports_list</name></name></expr></argument>, <argument><expr><name>imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_set_imports</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>imports_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>imports_list</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;cp_list</argument>, <argument>iter</argument>, <argument>obj</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_JAVA_CP_METHODREF</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"METHOD"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>R_BIN_JAVA_CP_INTERFACEMETHOD_REF</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"FIELD"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>R_BIN_JAVA_CP_FIELDREF</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"INTERFACE_METHOD"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_add_import</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_imports</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier></type><name>import</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;imports_list</argument>, <argument>iter</argument>, <argument>import</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier></type><name>n_import</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinImport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n_import</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>n_import</name></expr></argument>, <argument><expr><name>import</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinImport</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>n_import</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_symbols</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>imports</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>symbols</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier></type><name>imp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl>;</decl_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>bin-&gt;methods_list</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>r_bin_java_create_new_symbol_from_field</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sym</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>symbols</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>r_bin_java_create_new_symbol_from_fm_type_meta</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sym</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>symbols</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>bin-&gt;fields_list</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>r_bin_java_create_new_symbol_from_field</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sym</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>symbols</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>r_bin_java_create_new_symbol_from_fm_type_meta</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sym</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>symbols</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>lang</name></name> <operator>=</operator> <literal type="string">"java"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>major</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">46</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>major</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>lang</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>langid</name></decl>;</decl_stmt>
<case>case <expr><literal type="number">46</literal></expr>:</case>
<case>case <expr><literal type="number">47</literal></expr>:</case>
<case>case <expr><literal type="number">48</literal></expr>:</case>
<expr_stmt><expr><name>langid</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>major</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">46</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"java 1.%d"</literal></expr></argument>, <argument><expr><name>langid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>lang</name></name> <operator>=</operator> <name>lang</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>langid</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>major</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">49</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"java %d"</literal></expr></argument>, <argument><expr><name>langid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>lang</name></name> <operator>=</operator> <name>lang</name></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>imports</name> <operator>=</operator> <call><name>r_bin_java_get_imports</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>imports</argument>, <argument>iter</argument>, <argument>imp</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>imp</name><operator>-&gt;</operator><name>classname</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>imp</name><operator>-&gt;</operator><name>classname</name></name></expr></argument>, <argument><expr><literal type="string">"kotlin/jvm"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>lang</name></name> <operator>=</operator> <literal type="string">"kotlin"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>imp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>is_imported</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"import"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sym</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>imp</name><operator>-&gt;</operator><name>ordinal</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name><name>imp</name><operator>-&gt;</operator><name>ordinal</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>symbols</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>imports</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>symbols</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_strings</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>strings</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinString</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>bin-&gt;cp_list</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>cp_obj</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cp_obj</name> <operator>&amp;&amp;</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_UTF8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>RBinString</name> <operator>*</operator><operator>)</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>str</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <call><name>r_str_ndup</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator>
<name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>,
<argument><expr><name>R_BIN_JAVA_MAXSTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>strings</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>strings</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_bin_java_free</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bin_obj_key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bin_obj_key</name> <operator>=</operator> <call><name>r_bin_java_build_obj_key</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bin_obj_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>imports_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>fields_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>interfaces_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>attrs_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>flags_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>==</operator> <name>R_BIN_JAVA_GLOBAL_BIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>R_BIN_JAVA_GLOBAL_BIN</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_constpool_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>constpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaObj</name> <modifier>*</modifier></type><name>r_bin_java_new_buf</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>loadaddr</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>tmpsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_buf_data</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_java_new_bin</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>loadaddr</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmpsz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>bin</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_attribute_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Deleting attr %s, %p\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>metas</name></name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrMetas</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>allocs</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>allocs</name><operator>-&gt;</operator><name>delete_obj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>allocs</name><operator>-&gt;</operator><name>delete_obj</name></name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_constant_pool</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>o</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>!=</operator> <operator>&amp;</operator><name>R_BIN_JAVA_NULL_TYPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><call><name><name>allocs</name><operator>-&gt;</operator><name>delete_obj</name></name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_fmtype_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name> <init>= <expr><name>f</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fm_type</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>flags_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_unknown_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_local_variable_table_attr_entry_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaLocalVariableAttribute</name> <modifier>*</modifier></type><name>lvattr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lvattr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lvattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_local_variable_table_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>local_variable_table_attr</name><operator>.</operator><name>local_variable_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_local_variable_type_table_attr_entry_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaLocalVariableTypeAttribute</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_local_variable_type_table_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>local_variable_type_table_attr</name><operator>.</operator><name>local_variable_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_deprecated_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_enclosing_methods_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>method_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>method_descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_synthetic_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_constant_value_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_line_number_table_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>line_number_table_attr</name><operator>.</operator><name>line_number_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_code_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>r_bin_java_stack_frame_free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>implicit_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>exception_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_exceptions_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>exceptions_attr</name><operator>.</operator><name>exception_idx_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_inner_classes_attr_entry_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaClassesAttribute</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>flags_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_inner_classes_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>inner_classes_attr</name><operator>.</operator><name>classes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_signature_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>signature_attr</name><operator>.</operator><name>signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_source_debug_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>debug_extensions</name><operator>.</operator><name>debug_extension</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_source_code_file_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_stack_map_table_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>stack_map_table_attr</name><operator>.</operator><name>stack_map_frame_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_stack_frame_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>o</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>local_items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>stack_items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_verification_info_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaVerificationObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>o</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_interface_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaInterfaceInfo</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>o</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>attr</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>RBinJavaAttrMetas</name> <operator>*</operator><operator>)</operator> <name><name>attr</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><call><name><name>allocs</name><operator>-&gt;</operator><name>calc_size</name></name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_unknown_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>attr</name></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_unknown_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_code_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_attr_in_old_format</name> <init>= <expr><name><name>attr</name><operator>-&gt;</operator><name>is_attr_in_old_format</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <ternary><condition><expr><name>is_attr_in_old_format</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <ternary><condition><expr><name>is_attr_in_old_format</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <ternary><condition><expr><name>is_attr_in_old_format</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <ternary><condition><expr><name>is_attr_in_old_format</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code_length</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<macro><name>r_list_foreach_iter</name> <argument_list>(<argument>attr-&gt;info.code_attr.exception_table</argument>, <argument>iter</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>attributes_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach_iter</name> <argument_list>(<argument>attr-&gt;info.code_attr.attributes</argument>, <argument>iter</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>r_bin_java_attr_calc_size</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_code_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>_attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>curpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sz</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">16</literal> <operator>||</operator> <name>sz</name></expr></argument> &gt;</argument_list></name> <name>buf_offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_CODE_ATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>max_stack</name></name> <operator>=</operator> <ternary><condition><expr><name><name>attr</name><operator>-&gt;</operator><name>is_attr_in_old_format</name></name></expr> ?</condition><then> <expr><name><name>buffer</name><index>[<expr><name>offset</name></expr>]</index></name></expr> </then><else>: <expr><call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <ternary><condition><expr><name><name>attr</name><operator>-&gt;</operator><name>is_attr_in_old_format</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>max_locals</name></name> <operator>=</operator> <ternary><condition><expr><name><name>attr</name><operator>-&gt;</operator><name>is_attr_in_old_format</name></name></expr> ?</condition><then> <expr><name><name>buffer</name><index>[<expr><name>offset</name></expr>]</index></name></expr> </then><else>: <expr><call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <ternary><condition><expr><name><name>attr</name><operator>-&gt;</operator><name>is_attr_in_old_format</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code_length</name></name> <operator>=</operator> <ternary><condition><expr><name><name>attr</name><operator>-&gt;</operator><name>is_attr_in_old_format</name></name></expr> ?</condition><then> <expr><call><name>R_BIN_JAVA_USHORT</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>R_BIN_JAVA_UINT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <ternary><condition><expr><name><name>attr</name><operator>-&gt;</operator><name>is_attr_in_old_format</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code_offset</name></name> <operator>=</operator> <name>buf_offset</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Handling Code Attributes: Unable to allocate memory "</literal>
<literal type="string">"(%u bytes) for a code.\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>R_BIN_JAVA_GLOBAL_BIN</name><operator>-&gt;</operator><name>current_code_attr</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code_length</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <name>len</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>exception_table_length</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>exception_table</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>exception_table_length</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>curpos</name> <operator>=</operator> <name>buf_offset</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curpos</name> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaExceptionEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaExceptionEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>curpos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>start_pc</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>end_pc</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>handler_pc</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>catch_type</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>exception_table</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>attributes_count</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>attributes</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_attribute_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>attributes_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>attributes_count</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>offset</name> <operator>&lt;</operator> <name>sz</name><operator>)</operator></expr> ?</condition><then> <expr><name>sz</name> <operator>-</operator> <name>offset</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>sz</name> <operator>||</operator> <name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>_attr</name> <operator>=</operator> <call><name>r_bin_java_read_next_attr_from_buffer</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_bin_java_code_attr_new: Error unable to parse remainder of classfile after Method's Code Attribute: %d.\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Parsing @ 0x%"</literal><name>PFMT64x</name> <literal type="string">" (%s) = 0x%"</literal><name>PFMT64x</name> <literal type="string">" bytes, %p\n"</literal></expr></argument>, <argument><expr><name><name>_attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>, <argument><expr><name><name>_attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>_attr</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>_attr</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>_attr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>attributes</name></name></expr></argument>, <argument><expr><name>_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>_attr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_ATTR_TYPE_LOCAL_VARIABLE_TABLE_ATTR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Parsed the LocalVariableTable, preparing the implicit mthod frame.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>implicit_frame</name></name> <operator>=</operator> <call><name>r_bin_java_build_stack_frame_from_local_variable_table</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name>_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>implicit_frame</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>buf_offset</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_bin_java_print_stack_map_frame_summary</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>implicit_frame</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></if></if_stmt>





</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>implicit_frame</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>implicit_frame</name></name> <operator>=</operator> <call><name>r_bin_java_default_stack_frame</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_constant_value_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_CONST_VALUE_ATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>constant_value_attr</name><operator>.</operator><name>constantvalue_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_constant_value_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>attr</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_deprecated_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_DEPRECATED_ATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_deprecated_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>attr</name></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_signature_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_SIGNATURE_ATTR</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>signature_attr</name><operator>.</operator><name>signature_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>signature_attr</name><operator>.</operator><name>signature</name></name> <operator>=</operator> <call><name>r_bin_java_get_utf8_from_bin_cp_list</name> <argument_list>(
<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>signature_attr</name><operator>.</operator><name>signature_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>signature_attr</name><operator>.</operator><name>signature</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_signature_attr_new: Unable to resolve the "</literal>
<literal type="string">"Signature UTF8 String Index: 0x%02x\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>signature_attr</name><operator>.</operator><name>signature_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_signature_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_enclosing_methods_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name> <operator>||</operator> <name>sz</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_ENCLOSING_METHOD_ATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>class_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>method_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>class_name</name></name> <operator>=</operator> <call><name>r_bin_java_get_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>class_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>class_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Could not resolve enclosing class name for the enclosed method.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>method_name</name></name> <operator>=</operator> <call><name>r_bin_java_get_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>method_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>class_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Could not resolve method descriptor for the enclosed method.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>method_descriptor</name></name> <operator>=</operator> <call><name>r_bin_java_get_desc_from_bin_cp_list</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>method_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>method_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Could not resolve method name for the enclosed method.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_enclosing_methods_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_exceptions_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_LINE_NUMBER_TABLE_ATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>exceptions_attr</name><operator>.</operator><name>number_of_exceptions</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>exceptions_attr</name><operator>.</operator><name>number_of_exceptions</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>exceptions_attr</name><operator>.</operator><name>number_of_exceptions</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>exceptions_attr</name><operator>.</operator><name>exception_idx_table</name></name> <operator>=</operator> <operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>exceptions_attr</name><operator>.</operator><name>exception_idx_table</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>exceptions_attr</name><operator>.</operator><name>number_of_exceptions</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>exceptions_attr</name><operator>.</operator><name>exception_idx_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_exceptions_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>exceptions_attr</name><operator>.</operator><name>number_of_exceptions</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_inner_classes_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaClassesAttribute</name> <modifier>*</modifier></type><name>icattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>curpos</name></decl>;</decl_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_INNER_CLASSES_ATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>inner_classes_attr</name><operator>.</operator><name>number_of_classes</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>inner_classes_attr</name><operator>.</operator><name>classes</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_inner_classes_attr_entry_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>inner_classes_attr</name><operator>.</operator><name>number_of_classes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>curpos</name> <operator>=</operator> <name>buf_offset</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid amount of inner classes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>icattr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaClassesAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>icattr</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>icattr</name><operator>-&gt;</operator><name>inner_class_info_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>icattr</name><operator>-&gt;</operator><name>outer_class_info_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>icattr</name><operator>-&gt;</operator><name>inner_name_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>icattr</name><operator>-&gt;</operator><name>inner_class_access_flags</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>icattr</name><operator>-&gt;</operator><name>flags_str</name></name> <operator>=</operator> <call><name>retrieve_class_method_access_string</name> <argument_list>(<argument><expr><name><name>icattr</name><operator>-&gt;</operator><name>inner_class_access_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>icattr</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>curpos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>icattr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name><name>icattr</name><operator>-&gt;</operator><name>inner_name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"BINCPLIS IS HULL %d\n"</literal></expr></argument>, <argument><expr><name><name>icattr</name><operator>-&gt;</operator><name>inner_name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>icattr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>icattr</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name><name>icattr</name><operator>-&gt;</operator><name>inner_class_info_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"BINCPLIST IS NULL %d\n"</literal></expr></argument>, <argument><expr><name><name>icattr</name><operator>-&gt;</operator><name>inner_class_info_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>icattr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>icattr</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>icattr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_inner_classes_attr: Unable to find the name for %d index.\n"</literal></expr></argument>, <argument><expr><name><name>icattr</name><operator>-&gt;</operator><name>inner_name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>icattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_inner_classes_attr: Inner class name %d is %s.\n"</literal></expr></argument>, <argument><expr><name><name>icattr</name><operator>-&gt;</operator><name>inner_name_idx</name></name></expr></argument>, <argument><expr><name><name>icattr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>inner_classes_attr</name><operator>.</operator><name>classes</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>icattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_inner_class_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaClassesAttribute</name> <modifier>*</modifier></type><name>icattr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>icattr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_inner_classes_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaClassesAttribute</name> <modifier>*</modifier></type><name>icattr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>attr-&gt;info.inner_classes_attr.classes</argument>, <argument>iter</argument>, <argument>icattr</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>r_bin_java_inner_class_attr_calc_size</name> <argument_list>(<argument><expr><name>icattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_line_number_table_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>curpos</name></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaLineNumberAttribute</name> <modifier>*</modifier></type><name>lnattr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_LINE_NUMBER_TABLE_ATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>line_number_table_attr</name><operator>.</operator><name>line_number_table_length</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>line_number_table_attr</name><operator>.</operator><name>line_number_table</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>linenum_len</name> <init>= <expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>line_number_table_attr</name><operator>.</operator><name>line_number_table_length</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>linenum_list</name> <init>= <expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>line_number_table_attr</name><operator>.</operator><name>line_number_table</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>linenum_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>curpos</name> <operator>=</operator> <name>buf_offset</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>


<expr_stmt><expr><name>lnattr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaLineNumberAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lnattr</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>-</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>lnattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>lnattr</name><operator>-&gt;</operator><name>start_pc</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lnattr</name><operator>-&gt;</operator><name>line_number</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lnattr</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>curpos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lnattr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>linenum_list</name></expr></argument>, <argument><expr><name>lnattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_line_number_table_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0LL</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach_iter</name> <argument_list>(<argument>attr-&gt;info.line_number_table_attr.line_number_table</argument>, <argument>iter</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_source_debug_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_SOURCE_DEBUG_EXTENTSION_ATTR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_source_debug_attr_new: Attempting to allocate 0 bytes for debug_extension.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>debug_extensions</name><operator>.</operator><name>debug_extension</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>attr</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_source_debug_attr_new: Expected %d byte(s) got %"</literal>
<name>PFMT64d</name> <literal type="string">" bytes for debug_extension.\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><operator>(</operator><name>offset</name> <operator>+</operator> <name>sz</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>debug_extensions</name><operator>.</operator><name>debug_extension</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>debug_extensions</name><operator>.</operator><name>debug_extension</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>attr</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <operator>(</operator><name>sz</name> <operator>-</operator> <name>offset</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>debug_extensions</name><operator>.</operator><name>debug_extension</name></name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>debug_extensions</name><operator>.</operator><name>debug_extension</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>debug_extensions</name><operator>.</operator><name>debug_extension</name></name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_source_debug_attr_new: Unable to allocate the data for the debug_extension.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_source_debug_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0LL</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>debug_extensions</name><operator>.</operator><name>debug_extension</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_local_variable_table_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0LL</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<macro><name>r_list_foreach_iter</name> <argument_list>(<argument>attr-&gt;info.local_variable_table_attr.local_variable_table</argument>, <argument>iter</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_local_variable_table_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaLocalVariableAttribute</name> <modifier>*</modifier></type><name>lvattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>curpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <name>sz</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_LOCAL_VARIABLE_TABLE_ATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>local_variable_table_attr</name><operator>.</operator><name>table_length</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>local_variable_table_attr</name><operator>.</operator><name>local_variable_table</name></name> <operator>=</operator>\
<call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_local_variable_table_attr_entry_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>local_variable_table_attr</name><operator>.</operator><name>table_length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">10</literal> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>curpos</name> <operator>=</operator> <name>buf_offset</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lvattr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaLocalVariableAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>start_pc</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>name_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>descriptor_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>curpos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_bin_java_get_utf8_from_bin_cp_list</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lvattr</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_local_variable_table_attr_new: Unable to find the name for %d index.\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>descriptor</name></name> <operator>=</operator> <call><name>r_bin_java_get_utf8_from_bin_cp_list</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>descriptor_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lvattr</name><operator>-&gt;</operator><name>descriptor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>descriptor</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_local_variable_table_attr_new: Unable to find the descriptor for %d index.\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>descriptor_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>local_variable_table_attr</name><operator>.</operator><name>local_variable_table</name></name></expr></argument>, <argument><expr><name>lvattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_local_variable_type_table_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>local_variable_type_table_attr</name><operator>.</operator><name>local_variable_table</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<macro><name>r_list_foreach_iter</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_local_variable_type_table_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaLocalVariableTypeAttribute</name> <modifier>*</modifier></type><name>lvattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_LOCAL_VARIABLE_TYPE_TABLE_ATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>local_variable_type_table_attr</name><operator>.</operator><name>table_length</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>local_variable_type_table_attr</name><operator>.</operator><name>local_variable_table</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_local_variable_type_table_attr_entry_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>local_variable_type_table_attr</name><operator>.</operator><name>table_length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>curpos</name> <init>= <expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>lvattr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaLocalVariableTypeAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lvattr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"calloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">10</literal> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"oob"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lvattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>start_pc</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>name_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>signature_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>curpos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_bin_java_get_utf8_from_bin_cp_list</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lvattr</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_local_variable_type_table_attr_new: Unable to find the name for %d index.\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>signature</name></name> <operator>=</operator> <call><name>r_bin_java_get_utf8_from_bin_cp_list</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>signature_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lvattr</name><operator>-&gt;</operator><name>signature</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lvattr</name><operator>-&gt;</operator><name>signature</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_local_variable_type_table_attr_new: Unable to find the descriptor for %d index.\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>signature_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>local_variable_type_table_attr</name><operator>.</operator><name>local_variable_table</name></name></expr></argument>, <argument><expr><name>lvattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_source_code_file_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sz</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_SOURCE_FILE_ATTR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>source_file_attr</name><operator>.</operator><name>sourcefile_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_source_code_file_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>attr</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_synthetic_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_SYNTHETIC_ATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_synthetic_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>attr</name></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaInterfaceInfo</name> <modifier>*</modifier></type><name>r_bin_java_interface_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaInterfaceInfo</name> <modifier>*</modifier></type><name>ifobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ifobj</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaInterfaceInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Parsing RBinJavaInterfaceInfo\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ifobj</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifobj</name><operator>-&gt;</operator><name>class_info_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifobj</name><operator>-&gt;</operator><name>cp_class</name></name> <operator>=</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>ifobj</name><operator>-&gt;</operator><name>class_info_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifobj</name><operator>-&gt;</operator><name>cp_class</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifobj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>ifobj</name><operator>-&gt;</operator><name>cp_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ifobj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ifobj</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ifobj</name><operator>-&gt;</operator><name>class_info_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifobj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ifobj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaVerificationObj</name> <modifier>*</modifier></type><name>r_bin_java_verification_info_from_type</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>R_BIN_JAVA_STACKMAP_TYPE</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaVerificationObj</name> <modifier>*</modifier></type><name>se</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaVerificationObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>se</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>se</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_STACKMAP_OBJECT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>obj_val_cp_idx</name></name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>)</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>se</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_STACKMAP_UNINIT</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>uninit_offset</name></name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>)</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>se</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaVerificationObj</name> <modifier>*</modifier></type><name>r_bin_java_read_from_buffer_verification_info_new</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaVerificationObj</name> <modifier>*</modifier></type><name>se</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaVerificationObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>se</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>buf_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>se</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_STACKMAP_OBJECT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>obj_val_cp_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>se</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_STACKMAP_UNINIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>uninit_offset</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>R_BIN_JAVA_STACKMAP_UNINIT</name> <operator>&lt;</operator> <name><name>se</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_verification_info_free</name> <argument_list>(<argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><name>se</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>rbin_java_verification_info_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaVerificationObj</name> <modifier>*</modifier></type><name>se</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>se</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>se</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_JAVA_STACKMAP_OBJECT</name></expr>:</case>

<expr_stmt><expr><name>sz</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_STACKMAP_UNINIT</name></expr>:</case>

<expr_stmt><expr><name>sz</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>sz</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaStackMapFrameMetas</name> <modifier>*</modifier></type><name>r_bin_java_determine_stack_frame_type</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>type_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type_value</name> <operator>=</operator> <name>R_BIN_JAVA_STACK_FRAME_SAME</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type_value</name> <operator>=</operator> <name>R_BIN_JAVA_STACK_FRAME_SAME_LOCALS_1</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">247</literal> <operator>&lt;</operator> <name>tag</name> <operator>&amp;&amp;</operator> <name>tag</name> <operator>&lt;</operator> <literal type="number">251</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type_value</name> <operator>=</operator> <name>R_BIN_JAVA_STACK_FRAME_CHOP</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">251</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type_value</name> <operator>=</operator> <name>R_BIN_JAVA_STACK_FRAME_SAME_FRAME_EXTENDED</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">251</literal> <operator>&lt;</operator> <name>tag</name> <operator>&amp;&amp;</operator> <name>tag</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type_value</name> <operator>=</operator> <name>R_BIN_JAVA_STACK_FRAME_APPEND</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type_value</name> <operator>=</operator> <name>R_BIN_JAVA_STACK_FRAME_FULL_FRAME</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>type_value</name> <operator>=</operator> <name>R_BIN_JAVA_STACK_FRAME_RESERVED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>&amp;</operator><name><name>R_BIN_JAVA_STACK_MAP_FRAME_METAS</name><index>[<expr><name>type_value</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_stack_map_frame_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>sf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaVerificationObj</name> <modifier>*</modifier></type><name>se</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>sf</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_JAVA_STACK_FRAME_SAME</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_STACK_FRAME_SAME_LOCALS_1</name></expr>:</case>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>sf-&gt;stack_items</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>se</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>rbin_java_verification_info_calc_size</name> <argument_list>(<argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_STACK_FRAME_CHOP</name></expr>:</case>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_STACK_FRAME_SAME_FRAME_EXTENDED</name></expr>:</case>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>sf-&gt;stack_items</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>se</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>rbin_java_verification_info_calc_size</name> <argument_list>(<argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_STACK_FRAME_APPEND</name></expr>:</case>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>sf-&gt;stack_items</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>se</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>rbin_java_verification_info_calc_size</name> <argument_list>(<argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_STACK_FRAME_FULL_FRAME</name></expr>:</case>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>sf-&gt;local_items</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>se</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>rbin_java_verification_info_calc_size</name> <argument_list>(<argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>sf-&gt;stack_items</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>se</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>rbin_java_verification_info_calc_size</name> <argument_list>(<argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unknown type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>r_bin_java_stack_map_frame_new</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>p_frame</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>stack_frame</name> <init>= <expr><call><name>r_bin_java_default_stack_frame</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaVerificationObj</name> <modifier>*</modifier></type><name>se</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stack_frame</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>r_bin_java_determine_stack_frame_type</name> <argument_list>(<argument><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>RBinJavaStackMapFrameMetas</name> <operator>*</operator><operator>)</operator> <name><name>stack_frame</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>buf_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>p_stack_frame</name></name> <operator>=</operator> <name>p_frame</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>stack_frame</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_JAVA_STACK_FRAME_SAME</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><name>p_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>number_of_locals</name></name> <operator>=</operator> <name><name>p_frame</name><operator>-&gt;</operator><name>number_of_locals</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>IFINT</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"&gt;&lt;?&gt;&lt;\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Unable to set previous stackframe with the number of locals (current info.code_attr.implicit_frame was probably not set :/)"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_frame_new: TODO Stack Frame Same Locals Condition is untested, so there may be issues.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_STACK_FRAME_SAME_LOCALS_1</name></expr>:</case>

<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>number_of_stack_items</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_stack_frame_free</name> <argument_list>(<argument><expr><name>stack_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>se</name> <operator>=</operator> <call><name>r_bin_java_read_from_buffer_verification_info_new</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_frame_new: Parsed R_BIN_JAVA_STACK_FRAME_SAME_LOCALS_1.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>se</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>se</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_frame_new: Unable to parse the Stack Items for the stack frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_java_stack_frame_free</name> <argument_list>(<argument><expr><name>stack_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>stack_items</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>p_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>number_of_locals</name></name> <operator>=</operator> <name><name>p_frame</name><operator>-&gt;</operator><name>number_of_locals</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Unable to set previous stackframe with the number of locals (current info.code_attr.implicit_frame was probably not set :/)"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_frame_new: TODO Stack Frame Same Locals 1 Stack Element Condition is untested, so there may be issues.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_STACK_FRAME_CHOP</name></expr>:</case>


<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_frame_new: Parsing R_BIN_JAVA_STACK_FRAME_CHOP.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>





<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>offset_delta</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>p_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>number_of_locals</name></name> <operator>=</operator> <name><name>p_frame</name><operator>-&gt;</operator><name>number_of_locals</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>IFINT</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"&gt;&lt;?&gt;&lt;\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Unable to set previous stackframe with the number of locals (current info.code_attr.implicit_frame was probably not set :/)"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_frame_new: TODO Stack Frame Chop Condition is untested, so there may be issues.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_STACK_FRAME_SAME_FRAME_EXTENDED</name></expr>:</case>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_frame_new: Parsing R_BIN_JAVA_STACK_FRAME_SAME_FRAME_EXTENDED.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>offset_delta</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>number_of_stack_items</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>se</name> <operator>=</operator> <call><name>r_bin_java_read_from_buffer_verification_info_new</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>se</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>se</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_frame_new: Unable to parse the Stack Items for the stack frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_java_stack_frame_free</name> <argument_list>(<argument><expr><name>stack_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>stack_items</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>p_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>number_of_locals</name></name> <operator>=</operator> <name><name>p_frame</name><operator>-&gt;</operator><name>number_of_locals</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>IFINT</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"&gt;&lt;?&gt;&lt;\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Unable to set previous stackframe with the number of locals (current info.code_attr.implicit_frame was probably not set :/)"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_frame_new: TODO Stack Frame Same Locals Frame Stack 1 Extended Condition is untested, so there may be issues.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_STACK_FRAME_APPEND</name></expr>:</case>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_frame_new: Parsing R_BIN_JAVA_STACK_FRAME_APPEND.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ut16</name></type> <name>k</name> <init>= <expr><name><name>stack_frame</name><operator>-&gt;</operator><name>tag</name></name> <operator>-</operator> <literal type="number">251</literal></expr></init></decl>,
<decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>offset_delta</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_frame_new: Parsing verifying the k'th frame: %d of %d.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>se</name> <operator>=</operator> <call><name>r_bin_java_read_from_buffer_verification_info_new</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_frame_new: Completed Parsing\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>se</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>se</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_frame_new: Unable to parse the locals for the stack frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_java_stack_frame_free</name> <argument_list>(<argument><expr><name>stack_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>local_items</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_frame_new: Breaking out of loop"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"p_frame: %p\n"</literal></expr></argument>, <argument><expr><name>p_frame</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>number_of_locals</name></name> <operator>=</operator> <name><name>p_frame</name><operator>-&gt;</operator><name>number_of_locals</name></name> <operator>+</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>IFINT</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"&gt;&lt;?&gt;&lt;\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Unable to set previous stackframe with the number of locals (current info.code_attr.implicit_frame was probably not set :/)"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_frame_new: TODO Stack Frame Same Locals Frame Stack 1 Extended Condition is untested, so there may be issues.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_STACK_FRAME_FULL_FRAME</name></expr>:</case>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_frame_new: Parsing R_BIN_JAVA_STACK_FRAME_FULL_FRAME.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>offset_delta</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>number_of_locals</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_bin_java_print_stack_map_frame_summary</name><argument_list>(<argument><expr><name>stack_frame</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stack_frame</name><operator>-&gt;</operator><name>number_of_locals</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>se</name> <operator>=</operator> <call><name>r_bin_java_read_from_buffer_verification_info_new</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>se</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>se</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_frame_new: Unable to parse the locals for the stack frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_java_stack_frame_free</name> <argument_list>(<argument><expr><name>stack_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>local_items</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>number_of_stack_items</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stack_frame</name><operator>-&gt;</operator><name>number_of_stack_items</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>se</name> <operator>=</operator> <call><name>r_bin_java_read_from_buffer_verification_info_new</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>se</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>se</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_frame_new: Unable to parse the stack items for the stack frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_java_stack_frame_free</name> <argument_list>(<argument><expr><name>stack_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>local_items</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"java: Unknown type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><name>stack_frame</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut16</name></type> <name>r_bin_java_find_cp_class_ref_from_name_idx</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>name_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><operator>(</operator><name>ut16</name><operator>)</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_list</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_CLASS</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_class</name><operator>.</operator><name>name_idx</name></name> <operator>==</operator> <name>name_idx</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>pos</name> <operator>!=</operator> <name>len</name><operator>)</operator></expr> ?</condition><then> <expr><name>pos</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>r_bin_java_default_stack_frame</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>sf</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaStackMapFrame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sf</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sf</name><operator>-&gt;</operator><name>metas</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sf</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_STACK_MAP_FRAME_METAS</name><index>[<expr><name>R_BIN_JAVA_STACK_FRAME_IMPLICIT</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sf</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>RBinJavaStackMapFrameMetas</name> <operator>*</operator><operator>)</operator> <name><name>sf</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sf</name><operator>-&gt;</operator><name>local_items</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_verification_info_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sf</name><operator>-&gt;</operator><name>stack_items</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_verification_info_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sf</name><operator>-&gt;</operator><name>number_of_stack_items</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sf</name><operator>-&gt;</operator><name>number_of_locals</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>sf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>r_bin_java_build_stack_frame_from_local_variable_table</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>sf</name> <init>= <expr><call><name>r_bin_java_default_stack_frame</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaLocalVariableAttribute</name> <modifier>*</modifier></type><name>lvattr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaVerificationObj</name> <modifier>*</modifier></type><name>type_item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>value_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>value</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sf</name> <operator>||</operator> <operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name>attr</name> <operator>||</operator> <name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>R_BIN_JAVA_ATTR_TYPE_LOCAL_VARIABLE_TABLE_ATTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to create a stack_map frame from a bad attribute.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>sf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sf</name><operator>-&gt;</operator><name>number_of_locals</name></name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>local_variable_table_attr</name><operator>.</operator><name>table_length</name></name></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>attr-&gt;info.local_variable_table_attr.local_variable_table</argument>, <argument>iter</argument>, <argument>lvattr</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>lvattr</name><operator>-&gt;</operator><name>descriptor</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>lvattr</name><operator>-&gt;</operator><name>descriptor</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><name>type_item</name> <operator>=</operator> <call><name>r_bin_java_verification_info_from_type</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>R_BIN_JAVA_STACKMAP_INTEGER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<expr_stmt><expr><name>type_item</name> <operator>=</operator> <call><name>r_bin_java_verification_info_from_type</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>R_BIN_JAVA_STACKMAP_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><name>type_item</name> <operator>=</operator> <call><name>r_bin_java_verification_info_from_type</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>R_BIN_JAVA_STACKMAP_DOUBLE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'J'</literal></expr>:</case>
<expr_stmt><expr><name>type_item</name> <operator>=</operator> <call><name>r_bin_java_verification_info_from_type</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>R_BIN_JAVA_STACKMAP_LONG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>


<block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>idx</name> <init>= <expr><call><name>r_bin_java_find_cp_class_ref_from_name_idx</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>type_item</name> <operator>=</operator> <call><name>r_bin_java_verification_info_from_type</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>R_BIN_JAVA_STACKMAP_OBJECT</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_build_stack_frame_from_local_variable_table: "</literal>
<literal type="string">"not sure how to handle: name: %s, type: %s\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type_item</name> <operator>=</operator> <call><name>r_bin_java_verification_info_from_type</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>R_BIN_JAVA_STACKMAP_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>type_item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>sf</name><operator>-&gt;</operator><name>local_items</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>type_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>value_cnt</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>value_cnt</name> <operator>!=</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>local_variable_table_attr</name><operator>.</operator><name>table_length</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_build_stack_frame_from_local_variable_table: "</literal>
<literal type="string">"Number of locals not accurate. Expected %d but got %d"</literal></expr></argument>,
<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>local_variable_table_attr</name><operator>.</operator><name>table_length</name></name></expr></argument>, <argument><expr><name>value_cnt</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>sf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_stack_map_table_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>sf</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>attr-&gt;info.stack_map_table_attr.stack_map_frame_entries</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>sf</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>r_bin_java_stack_map_frame_calc_size</name> <argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_stack_map_table_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>stack_frame</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new_stack_frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_table_attr_new: New stack map allocated.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>stack_map_table_attr</name><operator>.</operator><name>stack_map_frame_entries</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_stack_frame_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>stack_map_table_attr</name><operator>.</operator><name>number_of_entries</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_table_attr_new: Processing stack map, summary is:\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_bin_java_print_stack_map_table_attr_summary</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>stack_map_table_attr</name><operator>.</operator><name>number_of_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Reading StackMap Entry #%d @ 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>stack_frame</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>R_BIN_JAVA_GLOBAL_BIN</name> <operator>&amp;&amp;</operator> <name><name>R_BIN_JAVA_GLOBAL_BIN</name><operator>-&gt;</operator><name>current_code_attr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Setting an implicit frame at #%d @ 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>stack_frame</name> <operator>=</operator> <name><name>R_BIN_JAVA_GLOBAL_BIN</name><operator>-&gt;</operator><name>current_code_attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>implicit_frame</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Reading StackMap Entry #%d @ 0x%08"</literal><name>PFMT64x</name> <literal type="string">", current stack_frame: %p\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>stack_frame</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_stack_map_table_attr_free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>new_stack_frame</name> <operator>=</operator> <call><name>r_bin_java_stack_map_frame_new</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>stack_frame</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_stack_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>new_stack_frame</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>stack_map_table_attr</name><operator>.</operator><name>stack_map_frame_entries</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>new_stack_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stack_frame</name> <operator>=</operator> <name>new_stack_frame</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_java_stack_map_table_attr_new: Unable to parse the stack frame for the stack map table.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_java_stack_map_table_attr_free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_do_nothing_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_do_nothing_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_do_nothing_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_unknown_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>tag</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>R_BIN_JAVA_CP_UNKNOWN</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_unknown_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">1LL</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_class_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>tag</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quick_check</name> <init>= <expr><call><name>r_bin_java_quick_check</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_CP_CLASS</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"Class"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>quick_check</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_class</name><operator>.</operator><name>name_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_class_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_fieldref_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>tag</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quick_check</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>quick_check</name> <operator>=</operator> <call><name>r_bin_java_quick_check</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_CP_FIELDREF</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"FieldRef"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quick_check</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_field</name><operator>.</operator><name>class_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_field</name><operator>.</operator><name>name_and_type_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_fieldref_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_methodref_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>tag</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quick_check</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>quick_check</name> <operator>=</operator> <call><name>r_bin_java_quick_check</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_CP_METHODREF</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"MethodRef"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quick_check</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>class_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>name_and_type_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_methodref_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_interfacemethodref_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>tag</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quick_check</name> <init>= <expr><call><name>r_bin_java_quick_check</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_CP_INTERFACEMETHOD_REF</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"InterfaceMethodRef"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>quick_check</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_interface</name><operator>.</operator><name>class_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_interface</name><operator>.</operator><name>name_and_type_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_interfacemethodref_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_string_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>tag</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quick_check</name> <init>= <expr><call><name>r_bin_java_quick_check</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_CP_STRING</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"String"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>quick_check</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_string</name><operator>.</operator><name>string_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_string_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_integer_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>tag</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quick_check</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>quick_check</name> <operator>=</operator> <call><name>r_bin_java_quick_check</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_CP_INTEGER</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"Integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quick_check</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_integer</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_integer</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_integer</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_integer_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_float_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>tag</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quick_check</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>quick_check</name> <operator>=</operator> <call><name>r_bin_java_quick_check</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_CP_FLOAT</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"Float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quick_check</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_float</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_float</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_float</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_float_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_long_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>tag</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quick_check</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>quick_check</name> <operator>=</operator> <call><name>r_bin_java_quick_check</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_CP_LONG</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"Long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quick_check</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_long</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_long</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_long</name><operator>.</operator><name>bytes</name></name><operator>)</operator></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_long_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_double_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>tag</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quick_check</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>quick_check</name> <operator>=</operator> <call><name>r_bin_java_quick_check</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_CP_DOUBLE</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"Double"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quick_check</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_double</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_double</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_double</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_double_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_utf8_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>tag</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quick_check</name> <init>= <expr><call><name>r_bin_java_quick_check</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_CP_UTF8</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"Utf8"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>quick_check</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>obj</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <operator>(</operator><name>sz</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name>sz</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>sz</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_obj_free</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_utf8_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name>R_BIN_JAVA_CP_UTF8</name> <operator>==</operator> <name><name>obj</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_name_and_type_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>tag</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quick_check</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>quick_check</name> <operator>=</operator> <call><name>r_bin_java_quick_check</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_CP_NAMEANDTYPE</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"RBinJavaCPTypeNameAndType"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quick_check</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_name_and_type</name><operator>.</operator><name>name_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_name_and_type</name><operator>.</operator><name>descriptor_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_name_and_type_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_methodtype_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>tag</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quick_check</name> <init>= <expr><call><name>r_bin_java_quick_check</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_CP_METHODTYPE</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"RBinJavaCPTypeMethodType"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>quick_check</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method_type</name><operator>.</operator><name>descriptor_index</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_methodtype_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_methodhandle_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>tag</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quick_check</name> <init>= <expr><call><name>r_bin_java_quick_check</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_CP_METHODHANDLE</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"RBinJavaCPTypeMethodHandle"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>quick_check</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method_handle</name><operator>.</operator><name>reference_kind</name></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method_handle</name><operator>.</operator><name>reference_index</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_methodhandle_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_invokedynamic_cp_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>tag</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quick_check</name> <init>= <expr><call><name>r_bin_java_quick_check</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_CP_INVOKEDYNAMIC</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"RBinJavaCPTypeMethodHandle"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>quick_check</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>obj</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaCPTypeObj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_invoke_dynamic</name><operator>.</operator><name>bootstrap_method_attr_index</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_invoke_dynamic</name><operator>.</operator><name>name_and_type_index</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bin_java_check_reset_cp_obj</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>&lt;</operator> <name>R_BIN_JAVA_CP_METAS_SZ</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>!=</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_UTF8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid tag '%d'.\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_get_4bytes</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>out_sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>R_BIN_JAVA_UINT</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_get_8bytes</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>r_bin_java_raw_to_long</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_append_classref_and_name</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>classname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>classname_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>use_name_idx</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>cp_idx</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bytes</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name_bytes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>name_bytes</name> <operator>=</operator> <call><name>r_bin_java_cp_get_utf8</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_CP_UTF8</name></expr></argument>, <argument><expr><name>out_sz</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <name>classname</name></expr></argument>, <argument><expr><name>classname_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>out_sz</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>name_bytes</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>idx_addr</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>use_name_idx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>*</operator><name>out_sz</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>name_bytes</name></expr></argument>, <argument><expr><operator>*</operator><name>out_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><operator>*</operator><name>out_sz</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>R_BIN_JAVA_CP_CLASS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><operator>*</operator><name>out_sz</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>idx_addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><operator>*</operator><name>out_sz</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>idx_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bytes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_get_fref_bytes</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>cn_idx</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>fn_idx</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>ft_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bytes</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fnt_bytes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>ref_cp_obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>fnt_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cref_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>fnt_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>ref_cp_obj_idx</name> <init>= <expr><call><name>r_bin_java_find_cp_class_ref_from_name_idx</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>cn_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref_cp_obj_idx</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ref_cp_obj</name> <operator>=</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>ref_cp_obj_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ref_cp_obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cref_idx</name> <operator>=</operator> <name><name>ref_cp_obj</name><operator>-&gt;</operator><name>idx</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ref_cp_obj</name> <operator>=</operator> <call><name>r_bin_java_find_cp_name_and_type_info</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>fn_idx</name></expr></argument>, <argument><expr><name>ft_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ref_cp_obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fnt_idx</name> <operator>=</operator> <name><name>ref_cp_obj</name><operator>-&gt;</operator><name>idx</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fnt_bytes</name> <operator>=</operator> <call><name>r_bin_java_cp_get_name_type</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fnt_len</name></expr></argument>, <argument><expr><name>fn_idx</name></expr></argument>, <argument><expr><name>ft_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fnt_idx</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>cp_idx</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cref_idx</name> <operator>&amp;&amp;</operator> <name>fnt_idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>r_bin_java_cp_get_fm_ref</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>out_sz</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>cref_idx</name></expr></argument>, <argument><expr><name>fnt_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fnt_bytes</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>tbuf</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>fnt_len</name> <operator>+</operator> <operator>*</operator><name>out_sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tbuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fnt_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>fnt_bytes</name></expr></argument>, <argument><expr><name>fnt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>tbuf</name> <operator>+</operator> <name>fnt_len</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><operator>*</operator><name>out_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>+=</operator> <name>fnt_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>tbuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fnt_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bytes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_get_classref</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>classname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>classname_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>name_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>use_name_idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bytes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>name_idx</name> <operator>==</operator> <operator>(</operator><name>ut16</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>classname</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>classname</name> <operator>&amp;&amp;</operator> <name>classname_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>results</name> <init>= <expr><call><name>r_bin_java_find_cp_const_by_val_utf8</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <name>classname</name></expr></argument>, <argument><expr><name>classname_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>use_name_idx</name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>name_idx</name> <operator>!=</operator> <operator>(</operator><name>ut16</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>name_idx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>use_name_idx</name> <operator>=</operator> <name>name_idx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_name_idx</name> <operator>==</operator> <operator>(</operator><name>ut16</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>classname</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>classname</name> <operator>&amp;&amp;</operator> <name>classname_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>r_bin_java_cp_append_classref_and_name</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>out_sz</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>, <argument><expr><name>classname_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>use_name_idx</name> <operator>!=</operator> <operator>(</operator><name>ut16</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>idx_addr</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>use_name_idx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bytes</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>R_BIN_JAVA_CP_CLASS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>idx_addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>idx_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>bytes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_get_fm_ref</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>class_idx</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>name_and_type_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_cp_get_2_ut16</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>out_sz</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>class_idx</name></expr></argument>, <argument><expr><name>name_and_type_idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_get_2_ut16</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>ut16_one</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>ut16_two</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bytes</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bytes</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>idx_addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><operator>*</operator><name>out_sz</name></expr>]</index></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>idx_addr</name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ut16_one</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><operator>*</operator><name>out_sz</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>idx_addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><operator>*</operator><name>out_sz</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>idx_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>idx_addr</name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ut16_two</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><operator>*</operator><name>out_sz</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>idx_addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><operator>*</operator><name>out_sz</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>idx_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><name>bytes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_get_name_type</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>name_idx</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>type_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_cp_get_2_ut16</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>out_sz</name></expr></argument>, <argument><expr><name>R_BIN_JAVA_CP_NAMEANDTYPE</name></expr></argument>, <argument><expr><name>name_idx</name></expr></argument>, <argument><expr><name>type_idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_get_utf8</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>ut16</name><operator>)</operator> <name>len</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <operator>(</operator><name>ut16</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>t</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <name>t</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>*</operator><name>out_sz</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>*</operator><name>out_sz</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>out_sz</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_invokedynamic_cp_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_default_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>o</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_utf8_info_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>o</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_obj_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>o</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><call><name><name>allocs</name><operator>-&gt;</operator><name>delete_obj</name></name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaAttrInfo *.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>RBinJavaAttrMetas</name> <operator>*</operator><operator>)</operator> <name><name>attr</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><call><name><name>allocs</name><operator>-&gt;</operator><name>print_summary</name></name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_source_debug_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaSourceDebugExtensionAttr *.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Source Debug Extension Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Extension Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Source Debug Extension value: \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>debug_extensions</name><operator>.</operator><name>debug_extension</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"\n Source Debug Extension End\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_unknown_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaAttrInfo *Unknown.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unknown Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_code_exceptions_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaExceptionEntry</name> <modifier>*</modifier></type><name>exc_entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>exc_entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaExceptionEntry *.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Exception Table Entry Information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" offset: 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>exc_entry</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" catch_type: %d\n"</literal></expr></argument>, <argument><expr><name><name>exc_entry</name><operator>-&gt;</operator><name>catch_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" start_pc: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>exc_entry</name><operator>-&gt;</operator><name>start_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" end_pc: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>exc_entry</name><operator>-&gt;</operator><name>end_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" handler_pc: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>exc_entry</name><operator>-&gt;</operator><name>handler_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_code_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaExceptionEntry</name> <modifier>*</modifier></type><name>exc_entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>_attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaAttrInfo *Code.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Code Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d, Attribute Count: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>attributes_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Max Stack: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>max_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Max Locals: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>max_locals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Code Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Code At Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Code Attribute Exception Table Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Exception Table Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>exception_table_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>exception_table</name></name></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>attr-&gt;info.code_attr.exception_table</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>exc_entry</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_code_exceptions_attr_summary</name> <argument_list>(<argument><expr><name>exc_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Implicit Method Stack Frame:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_java_print_stack_map_frame_summary</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>implicit_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Code Attribute Attributes Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>attributes</name></name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>attributes_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Code Attribute Attributes Count: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>attributes_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>attr-&gt;info.code_attr.attributes</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>_attr</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_attr_summary</name> <argument_list>(<argument><expr><name>_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_constant_value_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaAttrInfo *ConstantValue.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Constant Value Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" ConstantValue Index: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>constant_value_attr</name><operator>.</operator><name>constantvalue_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_deprecated_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaAttrInfo *Deperecated.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Deperecated Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_enclosing_methods_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaAttrInfo *Deperecated.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Enclosing Method Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Class Info Index : 0x%02x\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>class_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Method Name and Type Index : 0x%02x\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>method_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Class Name : %s\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Method Name and Desc : %s %s\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>method_name</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enclosing_method_attr</name><operator>.</operator><name>method_descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_exceptions_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaAttrInfo *Exceptions.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Exceptions Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>exceptions_attr</name><operator>.</operator><name>number_of_exceptions</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Exceptions Attribute Index[%d]: %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>exceptions_attr</name><operator>.</operator><name>exception_idx_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_classes_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaClassesAttribute</name> <modifier>*</modifier></type><name>icattr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>icattr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaClassesAttribute* (InnerClasses element).\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Inner Classes Class Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>icattr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Inner Classes Class Attribute Class Name (%d): %s\n"</literal></expr></argument>, <argument><expr><name><name>icattr</name><operator>-&gt;</operator><name>inner_name_idx</name></name></expr></argument>, <argument><expr><name><name>icattr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Inner Classes Class Attribute Class inner_class_info_idx: %d\n"</literal></expr></argument>, <argument><expr><name><name>icattr</name><operator>-&gt;</operator><name>inner_class_info_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Inner Classes Class Attribute Class inner_class_access_flags: 0x%02x %s\n"</literal></expr></argument>, <argument><expr><name><name>icattr</name><operator>-&gt;</operator><name>inner_class_access_flags</name></name></expr></argument>, <argument><expr><name><name>icattr</name><operator>-&gt;</operator><name>flags_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Inner Classes Class Attribute Class outer_class_info_idx: %d\n"</literal></expr></argument>, <argument><expr><name><name>icattr</name><operator>-&gt;</operator><name>outer_class_info_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Inner Classes Class Field Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_java_print_field_summary</name> <argument_list>(<argument><expr><name><name>icattr</name><operator>-&gt;</operator><name>clint_field</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Inner Classes Class Field Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_java_print_field_summary</name> <argument_list>(<argument><expr><name><name>icattr</name><operator>-&gt;</operator><name>clint_field</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Inner Classes Class Attr Info Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_java_print_attr_summary</name> <argument_list>(<argument><expr><name><name>icattr</name><operator>-&gt;</operator><name>clint_attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_inner_classes_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaClassesAttribute</name> <modifier>*</modifier></type><name>icattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaAttrInfo *InnerClasses.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Inner Classes Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>attr-&gt;info.inner_classes_attr.classes</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>icattr</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_classes_attr_summary</name> <argument_list>(<argument><expr><name>icattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_line_number_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaLineNumberAttribute</name> <modifier>*</modifier></type><name>lnattr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lnattr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaLineNumberAttribute *.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Line Number Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>lnattr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Line Number Attribute StartPC: %d\n"</literal></expr></argument>, <argument><expr><name><name>lnattr</name><operator>-&gt;</operator><name>start_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Line Number Attribute LineNumber: %d\n"</literal></expr></argument>, <argument><expr><name><name>lnattr</name><operator>-&gt;</operator><name>line_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_line_number_table_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaLineNumberAttribute</name> <modifier>*</modifier></type><name>lnattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaAttrInfo *LineNumberTable.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Line Number Table Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>attr-&gt;info.line_number_table_attr.line_number_table</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>lnattr</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_line_number_attr_summary</name> <argument_list>(<argument><expr><name>lnattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_local_variable_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaLocalVariableAttribute</name> <modifier>*</modifier></type><name>lvattr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lvattr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaLocalVariableAttribute *.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variable Attribute offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variable Attribute start_pc: %d\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>start_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variable Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variable Attribute name_idx: %d\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variable Attribute name: %s\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variable Attribute descriptor_idx: %d\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>descriptor_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variable Attribute descriptor: %s\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variable Attribute index: %d\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_local_variable_table_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaLocalVariableAttribute</name> <modifier>*</modifier></type><name>lvattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaAttrInfo *LocalVariableTable.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Local Variable Table Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>attr-&gt;info.local_variable_table_attr.local_variable_table</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>lvattr</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_local_variable_attr_summary</name> <argument_list>(<argument><expr><name>lvattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_local_variable_type_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaLocalVariableTypeAttribute</name> <modifier>*</modifier></type><name>lvattr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lvattr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaLocalVariableTypeAttribute *.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variable Type Attribute offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variable Type Attribute start_pc: %d\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>start_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variable Type Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variable Type Attribute name_idx: %d\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variable Type Attribute name: %s\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variable Type Attribute signature_idx: %d\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>signature_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variable Type Attribute signature: %s\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variable Type Attribute index: %d\n"</literal></expr></argument>, <argument><expr><name><name>lvattr</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_local_variable_type_table_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaLocalVariableTypeAttribute</name> <modifier>*</modifier></type><name>lvtattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaAttrInfo *LocalVariableTable.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Local Variable Type Table Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>attr-&gt;info.local_variable_type_table_attr.local_variable_table</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>lvtattr</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_local_variable_type_attr_summary</name> <argument_list>(<argument><expr><name>lvtattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_signature_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaAttrInfo *SignatureAttr.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Signature Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Signature UTF8 Index: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>signature_attr</name><operator>.</operator><name>signature_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Signature string: %s\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>signature_attr</name><operator>.</operator><name>signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_source_code_file_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaAttrInfo *SourceFile.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Source File Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Source File Index: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>source_file_attr</name><operator>.</operator><name>sourcefile_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_synthetic_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaAttrInfo *Synthetic.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Synthetic Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Index: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>source_file_attr</name><operator>.</operator><name>sourcefile_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_stack_map_table_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ptrList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaStackMapTableAttr* .\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"StackMapTable Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" StackMapTable Method Code Size: 0x%08x\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>stack_map_table_attr</name><operator>.</operator><name>code_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" StackMapTable Frame Entries: 0x%08x\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>stack_map_table_attr</name><operator>.</operator><name>number_of_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" StackMapTable Frames:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptrList</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>stack_map_table_attr</name><operator>.</operator><name>stack_map_frame_entries</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptrList</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>ptrList</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>frame</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_stack_map_frame_summary</name> <argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_stack_map_frame_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ptrList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaVerificationObj</name> <modifier>*</modifier></type><name>ver_obj</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaStackMapFrame* .\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Stack Map Frame Information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Tag Value = 0x%02x Name: %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaStackMapFrameMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variable Count = 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>number_of_locals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Stack Items Count = 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>number_of_stack_items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variables:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptrList</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>local_items</name></name></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>ptrList</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>ver_obj</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_verification_info_summary</name> <argument_list>(<argument><expr><name>ver_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Stack Items:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptrList</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>stack_items</name></name></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>ptrList</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>ver_obj</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_verification_info_summary</name> <argument_list>(<argument><expr><name>ver_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_verification_info_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaVerificationObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>tag_value</name> <init>= <expr><name>R_BIN_JAVA_STACKMAP_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaVerificationObj* .\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>&lt;</operator> <name>R_BIN_JAVA_STACKMAP_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tag_value</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>tag</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Verification Information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Tag Value = 0x%02x\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Name = %s\n"</literal></expr></argument>, <argument><expr><name><name>R_BIN_JAVA_VERIFICATION_METAS</name><index>[<expr><name>tag_value</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_STACKMAP_OBJECT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Object Constant Pool Index = 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>obj_val_cp_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_STACKMAP_UNINIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Uninitialized Object offset in code = 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>uninit_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_field_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_FIELD_TYPE_METHOD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_method_summary</name> <argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
r_bin_java_print_interface_summary (field);
return;
} * /
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Field Summary Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" File Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Descriptor Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>descriptor_idx</name></name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Access Flags: 0x%02x (%s)\n"</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>flags_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Field Attributes Count: %d\n"</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>attr_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Field Attributes:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>field-&gt;attributes</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>attr</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_attr_summary</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaField* Field.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_method_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaField* Method.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Method Summary Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" File Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Descriptor Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>descriptor_idx</name></name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Access Flags: 0x%02x (%s)\n"</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>flags_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Method Attributes Count: %d\n"</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>attr_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Method Attributes:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>field-&gt;attributes</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>attr</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_attr_summary</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>





















<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_interfacemethodref_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaCPTypeObj* InterfaceMethodRef.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"InterfaceMethodRef ConstantPool Type (%d) "</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Class Index = %d\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_interface</name><operator>.</operator><name>class_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Name and type Index = %d\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_interface</name><operator>.</operator><name>name_and_type_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_print_interfacemethodref_cp_stringify</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%d.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_interface</name><operator>.</operator><name>class_idx</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_interface</name><operator>.</operator><name>name_and_type_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%d.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_interface</name><operator>.</operator><name>class_idx</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_interface</name><operator>.</operator><name>name_and_type_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_methodhandle_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>ref_kind</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaCPTypeObj* RBinJavaCPTypeMethodHandle.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ref_kind</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method_handle</name><operator>.</operator><name>reference_kind</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"MethodHandle ConstantPool Type (%d) "</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Reference Kind = (0x%02x) %s\n"</literal></expr></argument>, <argument><expr><name>ref_kind</name></expr></argument>, <argument><expr><name><name>R_BIN_JAVA_REF_METAS</name><index>[<expr><name>ref_kind</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Reference Index = %d\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method_handle</name><operator>.</operator><name>reference_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_print_methodhandle_cp_stringify</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>ref_kind</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method_handle</name><operator>.</operator><name>reference_kind</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%s.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>R_BIN_JAVA_REF_METAS</name><index>[<expr><name>ref_kind</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method_handle</name><operator>.</operator><name>reference_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%s.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>R_BIN_JAVA_REF_METAS</name><index>[<expr><name>ref_kind</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method_handle</name><operator>.</operator><name>reference_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_methodtype_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaCPTypeObj* RBinJavaCPTypeMethodType.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"MethodType ConstantPool Type (%d) "</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Descriptor Index = 0x%02x\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method_type</name><operator>.</operator><name>descriptor_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_print_methodtype_cp_stringify</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method_type</name><operator>.</operator><name>descriptor_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method_type</name><operator>.</operator><name>descriptor_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_invokedynamic_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaCPTypeObj* RBinJavaCPTypeInvokeDynamic.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"InvokeDynamic ConstantPool Type (%d) "</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Bootstrap Method Attr Index = (0x%02x)\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_invoke_dynamic</name><operator>.</operator><name>bootstrap_method_attr_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Bootstrap Name and Type Index = (0x%02x)\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_invoke_dynamic</name><operator>.</operator><name>name_and_type_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_print_invokedynamic_cp_stringify</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%d.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_invoke_dynamic</name><operator>.</operator><name>bootstrap_method_attr_index</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_invoke_dynamic</name><operator>.</operator><name>name_and_type_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%d.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_invoke_dynamic</name><operator>.</operator><name>bootstrap_method_attr_index</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_invoke_dynamic</name><operator>.</operator><name>name_and_type_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_methodref_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaCPTypeObj* MethodRef.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"MethodRef ConstantPool Type (%d) "</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Class Index = %d\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>class_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Name and type Index = %d\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>name_and_type_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_print_methodref_cp_stringify</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%d.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>class_idx</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>name_and_type_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%d.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>class_idx</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>name_and_type_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_fieldref_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaCPTypeObj* FieldRef.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"FieldRef ConstantPool Type (%d) "</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Class Index = %d\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_field</name><operator>.</operator><name>class_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Name and type Index = %d\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_field</name><operator>.</operator><name>name_and_type_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_print_fieldref_cp_stringify</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%d.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_field</name><operator>.</operator><name>class_idx</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_field</name><operator>.</operator><name>name_and_type_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%d.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_field</name><operator>.</operator><name>class_idx</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_field</name><operator>.</operator><name>name_and_type_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_classref_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaCPTypeObj* ClassRef.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ClassRef ConstantPool Type (%d) "</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Name Index = %d\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_class</name><operator>.</operator><name>name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_print_classref_cp_stringify</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_class</name><operator>.</operator><name>name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_class</name><operator>.</operator><name>name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_string_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaCPTypeObj* String.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"String ConstantPool Type (%d) "</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" String Index = %d\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_string</name><operator>.</operator><name>string_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_print_string_cp_stringify</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_string</name><operator>.</operator><name>string_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_string</name><operator>.</operator><name>string_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_integer_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaCPTypeObj* Integer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_integer</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Integer ConstantPool Type (%d) "</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" bytes = %02x %02x %02x %02x\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" integer = %d\n"</literal></expr></argument>, <argument><expr><call><name>R_BIN_JAVA_UINT</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_integer</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_print_integer_cp_stringify</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.0x%08x"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><call><name>R_BIN_JAVA_UINT</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_integer</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.0x%08x"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><call><name>R_BIN_JAVA_UINT</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_integer</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_float_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaCPTypeObj* Double.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_float</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Float ConstantPool Type (%d) "</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Bytes = %02x %02x %02x %02x\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Float = %f\n"</literal></expr></argument>, <argument><expr><call><name>R_BIN_JAVA_FLOAT</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_float</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_print_float_cp_stringify</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%f"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><call><name>R_BIN_JAVA_FLOAT</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_float</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%f"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><call><name>R_BIN_JAVA_FLOAT</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_float</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_long_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaCPTypeObj* Long.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_long</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Long ConstantPool Type (%d) "</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" High-Bytes = %02x %02x %02x %02x\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Low-Bytes = %02x %02x %02x %02x\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Long = %08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_bin_java_raw_to_long</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_long</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_print_long_cp_stringify</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.0x%08"</literal><name>PFMT64x</name> <literal type="string">""</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><call><name>r_bin_java_raw_to_long</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_long</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.0x%08"</literal><name>PFMT64x</name> <literal type="string">""</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><call><name>r_bin_java_raw_to_long</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_long</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_double_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaCPTypeObj* Double.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_double</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Double ConstantPool Type (%d) "</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" High-Bytes = %02x %02x %02x %02x\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Low-Bytes = %02x %02x %02x %02x\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Double = %f\n"</literal></expr></argument>, <argument><expr><call><name>r_bin_java_raw_to_double</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_double</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_print_double_cp_stringify</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%f"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><call><name>r_bin_java_raw_to_double</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_double</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%f"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><call><name>r_bin_java_raw_to_double</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_double</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_name_and_type_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaCPTypeObj* Name_And_Type.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Name_And_Type ConstantPool Type (%d) "</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" name_idx = (%d)\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_name_and_type</name><operator>.</operator><name>name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" descriptor_idx = (%d)\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_name_and_type</name><operator>.</operator><name>descriptor_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_print_name_and_type_cp_stringify</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%d.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_name_and_type</name><operator>.</operator><name>name_idx</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_name_and_type</name><operator>.</operator><name>descriptor_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%d.%d"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_name_and_type</name><operator>.</operator><name>name_idx</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_name_and_type</name><operator>.</operator><name>descriptor_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_utf8_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaCPTypeObj* Utf8.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>convert_string</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"UTF8 ConstantPool Type (%d) "</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" length = %d\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" utf8 = %s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_print_utf8_cp_stringify</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>utf8_str</name> <init>= <expr><call><name>r_hex_bin2strdup</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>utf8_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%d.%s"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr></argument>,
<argument><expr><name>utf8_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>utf8_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s.%d.%s"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr></argument>,
<argument><expr><name>utf8_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>utf8_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_null_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unknown ConstantPool Type Tag: 0x%04x .\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_print_null_cp_stringify</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_unknown_cp_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"NULL ConstantPool Type.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_print_unknown_cp_stringify</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.0x%04"</literal><name>PFMT64x</name> <literal type="string">".%s"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaElementValuePair</name> <modifier>*</modifier></type><name>r_bin_java_element_pair_new</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <name>sz</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaElementValuePair</name> <modifier>*</modifier></type><name>evp</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaElementValuePair</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>evp</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>evp</name><operator>-&gt;</operator><name>element_name_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>evp</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>buf_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_bin_java_get_utf8_from_bin_cp_list</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name><name>evp</name><operator>-&gt;</operator><name>element_name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>evp</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ElementValue Name is invalid.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"UNKNOWN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>evp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>evp</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>r_bin_java_element_value_new</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>evp</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>evp</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>evp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>evp</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><name>evp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_element_pair_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaElementValuePair</name> <modifier>*</modifier></type><name>evp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>evp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaElementValuePair *pair.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Element Value Pair information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" EV Pair File Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>evp</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" EV Pair Element Name index: 0x%02x\n"</literal></expr></argument>, <argument><expr><name><name>evp</name><operator>-&gt;</operator><name>element_name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" EV Pair Element Name: %s\n"</literal></expr></argument>, <argument><expr><name><name>evp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" EV Pair Element Value:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_java_print_element_value_summary</name> <argument_list>(<argument><expr><name><name>evp</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_element_value_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaElementValue</name> <modifier>*</modifier></type><name>element_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaElementValue</name> <modifier>*</modifier></type><name>ev_element</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>element_value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaElementValuePair *pair.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>RBinJavaElementValueMetas</name> <operator>*</operator><operator>)</operator> <name><name>element_value</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Element Value information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" EV Pair File Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" EV Value Type (%d): %s\n"</literal></expr></argument>, <argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>element_value</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_BYTE</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_CHAR</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_DOUBLE</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_FLOAT</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_INT</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_LONG</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_SHORT</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_BOOLEAN</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_STRING</name></expr>:</case>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" EV Value Constant Value index: 0x%02x\n"</literal></expr></argument>, <argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>const_value</name><operator>.</operator><name>const_value_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" EV Value Constant Value Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>const_value</name><operator>.</operator><name>const_value_cp_obj</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><call><name><name>allocs</name><operator>-&gt;</operator><name>print_summary</name></name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_ENUM</name></expr>:</case>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" EV Value Enum Constant Value Const Name Index: 0x%02x\n"</literal></expr></argument>, <argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>enum_const_value</name><operator>.</operator><name>const_name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" EV Value Enum Constant Value Type Name Index: 0x%02x\n"</literal></expr></argument>, <argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>enum_const_value</name><operator>.</operator><name>type_name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" EV Value Enum Constant Value Const CP Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>enum_const_value</name><operator>.</operator><name>const_name_cp_obj</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><call><name><name>allocs</name><operator>-&gt;</operator><name>print_summary</name></name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" EV Value Enum Constant Value Type CP Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>enum_const_value</name><operator>.</operator><name>type_name_cp_obj</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><call><name><name>allocs</name><operator>-&gt;</operator><name>print_summary</name></name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_CLASS</name></expr>:</case>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" EV Value Class Info Index: 0x%02x\n"</literal></expr></argument>, <argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>class_value</name><operator>.</operator><name>class_info_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" EV Value Class Info CP Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>class_value</name><operator>.</operator><name>class_info_cp_obj</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><call><name><name>allocs</name><operator>-&gt;</operator><name>print_summary</name></name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_ARRAY</name></expr>:</case>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" EV Value Array Value Number of Values: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>array_value</name><operator>.</operator><name>num_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" EV Value Array Values\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>element_value-&gt;value.array_value.values</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>ev_element</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_element_value_summary</name> <argument_list>(<argument><expr><name>ev_element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_ANNOTATION</name></expr>:</case>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" EV Annotation Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_java_print_annotation_summary</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>annotation_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_element_pair_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaElementValuePair</name> <modifier>*</modifier></type><name>evp</name> <init>= <expr><name>e</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>evp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>evp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_java_element_value_free</name> <argument_list>(<argument><expr><name><name>evp</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>evp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>evp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_element_value_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaElementValue</name> <modifier>*</modifier></type><name>element_value</name> <init>= <expr><name>e</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaElementValue</name> <modifier>*</modifier></type><name>ev_element</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>element_value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>element_value</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_BYTE</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_CHAR</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_DOUBLE</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_FLOAT</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_INT</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_LONG</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_SHORT</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_BOOLEAN</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_STRING</name></expr>:</case>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>const_value</name><operator>.</operator><name>const_value_cp_obj</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><call><name><name>allocs</name><operator>-&gt;</operator><name>delete_obj</name></name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_ENUM</name></expr>:</case>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>enum_const_value</name><operator>.</operator><name>const_name_cp_obj</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeMetas</name> <modifier>*</modifier></type><name>ti</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ti</name> <operator>&amp;&amp;</operator> <name><name>ti</name><operator>-&gt;</operator><name>allocs</name></name> <operator>&amp;&amp;</operator> <name><name>ti</name><operator>-&gt;</operator><name>allocs</name><operator>-&gt;</operator><name>delete_obj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>ti</name><operator>-&gt;</operator><name>allocs</name><operator>-&gt;</operator><name>delete_obj</name></name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>enum_const_value</name><operator>.</operator><name>type_name_cp_obj</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeMetas</name> <modifier>*</modifier></type><name>tm</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tm</name> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>allocs</name></name> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>allocs</name><operator>-&gt;</operator><name>delete_obj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>tm</name><operator>-&gt;</operator><name>allocs</name><operator>-&gt;</operator><name>delete_obj</name></name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_CLASS</name></expr>:</case>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>class_value</name><operator>.</operator><name>class_info_cp_obj</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><call><name><name>allocs</name><operator>-&gt;</operator><name>delete_obj</name></name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_ARRAY</name></expr>:</case>

<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>element_value-&gt;value.array_value.values</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>ev_element</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ev_element</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_element_value_free</name> <argument_list>(<argument><expr><name>ev_element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ev_element</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>array_value</name><operator>.</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_ANNOTATION</name></expr>:</case>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>annotation_value</name><operator>.</operator><name>element_value_pairs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>element_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_annotation_default_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>r_bin_java_element_value_calc_size</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_default_attr</name><operator>.</operator><name>default_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_annotation_default_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <name>sz</name> <operator>&gt;=</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_ANNOTATION_DEFAULT_ATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_default_attr</name><operator>.</operator><name>default_value</name></name> <operator>=</operator> <call><name>r_bin_java_element_value_new</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_default_attr</name><operator>.</operator><name>default_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_default_attr</name><operator>.</operator><name>default_value</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_bin_java_print_annotation_default_attr_summary</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>delete_obj</name><parameter_list>(<parameter><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name></name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeMetas</name> <modifier>*</modifier></type><name>ti</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ti</name> <operator>&amp;&amp;</operator> <name><name>ti</name><operator>-&gt;</operator><name>allocs</name></name> <operator>&amp;&amp;</operator> <name><name>ti</name><operator>-&gt;</operator><name>allocs</name><operator>-&gt;</operator><name>delete_obj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>ti</name><operator>-&gt;</operator><name>allocs</name><operator>-&gt;</operator><name>delete_obj</name></name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_annotation_default_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaElementValue</name> <modifier>*</modifier></type><name>ev_element</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name> <operator>||</operator> <name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>R_BIN_JAVA_ATTR_TYPE_ANNOTATION_DEFAULT_ATTR</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaElementValue</name> <modifier>*</modifier></type><name>element_value</name> <init>= <expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_default_attr</name><operator>.</operator><name>default_value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>element_value</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>element_value</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_BYTE</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_CHAR</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_DOUBLE</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_FLOAT</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_INT</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_LONG</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_SHORT</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_BOOLEAN</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_STRING</name></expr>:</case>

<expr_stmt><expr><call><name>delete_obj</name> <argument_list>(<argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>const_value</name><operator>.</operator><name>const_value_cp_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_ENUM</name></expr>:</case>

<expr_stmt><expr><call><name>delete_obj</name> <argument_list>(<argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>enum_const_value</name><operator>.</operator><name>const_name_cp_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_CLASS</name></expr>:</case>

<expr_stmt><expr><call><name>delete_obj</name> <argument_list>(<argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>class_value</name><operator>.</operator><name>class_info_cp_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_ARRAY</name></expr>:</case>

<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>element_value-&gt;value.array_value.values</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>ev_element</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_element_value_free</name> <argument_list>(<argument><expr><name>ev_element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ev_element</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>array_value</name><operator>.</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_ANNOTATION</name></expr>:</case>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>annotation_value</name><operator>.</operator><name>element_value_pairs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAnnotation</name> <modifier>*</modifier></type><name>r_bin_java_annotation_new</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAnnotation</name> <modifier>*</modifier></type><name>annotation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaElementValuePair</name> <modifier>*</modifier></type><name>evps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>annotation</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaAnnotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>annotation</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>annotation</name><operator>-&gt;</operator><name>type_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>annotation</name><operator>-&gt;</operator><name>num_element_value_pairs</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>annotation</name><operator>-&gt;</operator><name>element_value_pairs</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_element_pair_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>annotation</name><operator>-&gt;</operator><name>num_element_value_pairs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>evps</name> <operator>=</operator> <call><name>r_bin_java_element_pair_new</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>evps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>evps</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>annotation</name><operator>-&gt;</operator><name>element_value_pairs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>evps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>annotation</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><name>annotation</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_annotation_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAnnotation</name> <modifier>*</modifier></type><name>annotation</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaElementValuePair</name> <modifier>*</modifier></type><name>evps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>annotation</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>sz</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sz</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>annotation-&gt;element_value_pairs</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>evps</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>evps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sz</name> <operator>+=</operator> <call><name>r_bin_java_element_pair_calc_size</name> <argument_list>(<argument><expr><name>evps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>sz</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_annotation_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAnnotation</name> <modifier>*</modifier></type><name>annotation</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>annotation</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>annotation</name><operator>-&gt;</operator><name>element_value_pairs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>annotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_annotation_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAnnotation</name> <modifier>*</modifier></type><name>annotation</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaElementValuePair</name> <modifier>*</modifier></type><name>evp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>annotation</name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Annotation Type Index: 0x%02x\n"</literal></expr></argument>, <argument><expr><name><name>annotation</name><operator>-&gt;</operator><name>type_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Annotation Number of EV Pairs: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>annotation</name><operator>-&gt;</operator><name>num_element_value_pairs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Annotation EV Pair Values:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>annotation</name><operator>-&gt;</operator><name>element_value_pairs</name></name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>annotation-&gt;element_value_pairs</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>evp</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_element_pair_summary</name> <argument_list>(<argument><expr><name>evp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_element_pair_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaElementValuePair</name> <modifier>*</modifier></type><name>evp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>evp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>sz</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evp</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sz</name> <operator>+=</operator> <call><name>r_bin_java_element_value_calc_size</name> <argument_list>(<argument><expr><name><name>evp</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>sz</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_element_value_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaElementValue</name> <modifier>*</modifier></type><name>element_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaElementValue</name> <modifier>*</modifier></type><name>ev_element</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaElementValuePair</name> <modifier>*</modifier></type><name>evps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>element_value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>sz</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>element_value</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_BYTE</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_CHAR</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_DOUBLE</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_FLOAT</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_INT</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_LONG</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_SHORT</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_BOOLEAN</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_STRING</name></expr>:</case>



<expr_stmt><expr><name>sz</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_ENUM</name></expr>:</case>


<expr_stmt><expr><name>sz</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>sz</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_CLASS</name></expr>:</case>


<expr_stmt><expr><name>sz</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_ARRAY</name></expr>:</case>


<expr_stmt><expr><name>sz</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>element_value-&gt;value.array_value.values</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>ev_element</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ev_element</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sz</name> <operator>+=</operator> <call><name>r_bin_java_element_value_calc_size</name> <argument_list>(<argument><expr><name>ev_element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_ANNOTATION</name></expr>:</case>



<expr_stmt><expr><name>sz</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>sz</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>annotation_value</name><operator>.</operator><name>element_value_pairs</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_element_pair_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>element_value-&gt;value.annotation_value.element_value_pairs</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>evps</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>evps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sz</name> <operator>+=</operator> <call><name>r_bin_java_element_pair_calc_size</name> <argument_list>(<argument><expr><name>evps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>sz</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaElementValue</name> <modifier>*</modifier></type><name>r_bin_java_element_value_new</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaElementValue</name> <modifier>*</modifier></type><name>element_value</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaElementValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>element_value</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaElementValuePair</name> <modifier>*</modifier></type><name>evps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>metas</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaMetaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>element_value</name><operator>-&gt;</operator><name>metas</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>element_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>buf_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>r_bin_java_get_ev_meta_from_tag</name> <argument_list>(<argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>element_value</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_BYTE</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_CHAR</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_DOUBLE</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_FLOAT</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_INT</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_LONG</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_SHORT</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_BOOLEAN</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_STRING</name></expr>:</case>


<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>const_value</name><operator>.</operator><name>const_value_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>const_value</name><operator>.</operator><name>const_value_cp_obj</name></name> <operator>=</operator> <call><name>r_bin_java_clone_cp_idx</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>const_value</name><operator>.</operator><name>const_value_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_ENUM</name></expr>:</case>

<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>enum_const_value</name><operator>.</operator><name>type_name_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>enum_const_value</name><operator>.</operator><name>const_name_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>enum_const_value</name><operator>.</operator><name>const_name_cp_obj</name></name> <operator>=</operator> <call><name>r_bin_java_clone_cp_idx</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>enum_const_value</name><operator>.</operator><name>const_name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>enum_const_value</name><operator>.</operator><name>type_name_cp_obj</name></name> <operator>=</operator> <call><name>r_bin_java_clone_cp_idx</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>enum_const_value</name><operator>.</operator><name>type_name_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_CLASS</name></expr>:</case>

<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>class_value</name><operator>.</operator><name>class_info_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>class_value</name><operator>.</operator><name>class_info_cp_obj</name></name> <operator>=</operator> <call><name>r_bin_java_clone_cp_idx</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>class_value</name><operator>.</operator><name>class_info_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_ARRAY</name></expr>:</case>

<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>array_value</name><operator>.</operator><name>num_values</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>array_value</name><operator>.</operator><name>values</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>array_value</name><operator>.</operator><name>num_values</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaElementValue</name> <modifier>*</modifier></type><name>ev_element</name> <init>= <expr><call><name>r_bin_java_element_value_new</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ev_element</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name><name>ev_element</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>ev_element</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>array_value</name><operator>.</operator><name>values</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>ev_element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>R_BIN_JAVA_EV_TAG_ANNOTATION</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>annotation_value</name><operator>.</operator><name>type_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>annotation_value</name><operator>.</operator><name>num_element_value_pairs</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>annotation_value</name><operator>.</operator><name>element_value_pairs</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_element_pair_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>annotation_value</name><operator>.</operator><name>num_element_value_pairs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>evps</name> <operator>=</operator> <call><name>r_bin_java_element_pair_new</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>evps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>element_value</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name><name>evps</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>evps</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>evps</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>element_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>annotation_value</name><operator>.</operator><name>element_value_pairs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>evps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>element_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_bootstrap_method_argument_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaBootStrapArgument</name> <modifier>*</modifier></type><name>bsm_arg</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bsm_arg</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeMetas</name> <modifier>*</modifier></type><name>tm</name> <init>= <expr><operator>(</operator><name>RBinJavaCPTypeMetas</name><operator>*</operator><operator>)</operator><name><name>bsm_arg</name><operator>-&gt;</operator><name>argument_info_cp_obj</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tm</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tm</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>allocs</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">1024</literal> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>allocs</name><operator>-&gt;</operator><name>delete_obj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>tm</name><operator>-&gt;</operator><name>allocs</name><operator>-&gt;</operator><name>delete_obj</name></name> <argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bsm_arg</name><operator>-&gt;</operator><name>argument_info_cp_obj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bsm_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_bootstrap_method_argument_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaBootStrapArgument</name> <modifier>*</modifier></type><name>bsm_arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bsm_arg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaBootStrapArgument *.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Bootstrap Method Argument Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>bsm_arg</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Name_And_Type Index = (0x%02x)\n"</literal></expr></argument>, <argument><expr><name><name>bsm_arg</name><operator>-&gt;</operator><name>argument_info_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsm_arg</name><operator>-&gt;</operator><name>argument_info_cp_obj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Bootstrap Method Argument Type and Name Info:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>bsm_arg</name><operator>-&gt;</operator><name>argument_info_cp_obj</name></name><operator>)</operator><operator>-&gt;</operator><call><name><name>allocs</name><operator>-&gt;</operator><name>print_summary</name></name> <argument_list>(<argument><expr><name><name>bsm_arg</name><operator>-&gt;</operator><name>argument_info_cp_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Bootstrap Method Argument Type and Name Info: INVALID\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_bootstrap_method_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaBootStrapMethod</name> <modifier>*</modifier></type><name>bsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaBootStrapArgument</name> <modifier>*</modifier></type><name>bsm_arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bsm</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to print an invalid RBinJavaBootStrapArgument *.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Bootstrap Method Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>bsm</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Method Reference Index = (0x%02x)\n"</literal></expr></argument>, <argument><expr><name><name>bsm</name><operator>-&gt;</operator><name>bootstrap_method_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Number of Method Arguments = (0x%02x)\n"</literal></expr></argument>, <argument><expr><name><name>bsm</name><operator>-&gt;</operator><name>num_bootstrap_arguments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsm</name><operator>-&gt;</operator><name>bootstrap_arguments</name></name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>bsm-&gt;bootstrap_arguments</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>bsm_arg</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bsm_arg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_bootstrap_method_argument_summary</name> <argument_list>(<argument><expr><name>bsm_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Bootstrap Method Argument: NONE \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaBootStrapArgument</name> <modifier>*</modifier></type><name>r_bin_java_bootstrap_method_argument_new</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaBootStrapArgument</name> <modifier>*</modifier></type><name>bsm_arg</name> <init>= <expr><operator>(</operator><name>RBinJavaBootStrapArgument</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaBootStrapArgument</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bsm_arg</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>bsm_arg</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>bsm_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaBootStrapArgument</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsm_arg</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>buf_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsm_arg</name><operator>-&gt;</operator><name>argument_info_idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsm_arg</name><operator>-&gt;</operator><name>argument_info_cp_obj</name></name> <operator>=</operator> <call><name>r_bin_java_clone_cp_idx</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></argument>, <argument><expr><name><name>bsm_arg</name><operator>-&gt;</operator><name>argument_info_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsm_arg</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><name>bsm_arg</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_bootstrap_method_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaBootStrapMethod</name> <modifier>*</modifier></type><name>bsm</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaBootStrapArgument</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bsm</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bsm</name><operator>-&gt;</operator><name>bootstrap_arguments</name></name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>bsm-&gt;bootstrap_arguments</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>obj</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_bootstrap_method_argument_free</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bsm</name><operator>-&gt;</operator><name>bootstrap_arguments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsm</name><operator>-&gt;</operator><name>bootstrap_arguments</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaBootStrapMethod</name> <modifier>*</modifier></type><name>r_bin_java_bootstrap_method_new</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaBootStrapArgument</name> <modifier>*</modifier></type><name>bsm_arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaBootStrapMethod</name> <modifier>*</modifier></type><name>bsm</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaBootStrapMethod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bsm</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>bsm</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>bsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaBootStrapMethod</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsm</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>buf_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsm</name><operator>-&gt;</operator><name>bootstrap_method_ref</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsm</name><operator>-&gt;</operator><name>num_bootstrap_arguments</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsm</name><operator>-&gt;</operator><name>bootstrap_arguments</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bsm</name><operator>-&gt;</operator><name>num_bootstrap_arguments</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bsm_arg</name> <operator>=</operator> <call><name>r_bin_java_bootstrap_method_argument_new</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bsm_arg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>bsm_arg</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bsm</name><operator>-&gt;</operator><name>bootstrap_arguments</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>bsm_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>bsm</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><name>bsm</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_bootstrap_methods_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaBootStrapMethod</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name> <operator>||</operator> <name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_ATTR_TYPE_BOOTSTRAP_METHODS_ATTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unable to print attribue summary for RBinJavaAttrInfo *RBinJavaBootstrapMethodsAttr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Bootstrap Methods Attribute Information Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Length: 0x%08x"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Number of Method Arguments = (0x%02x)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bootstrap_methods_attr</name><operator>.</operator><name>num_bootstrap_methods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bootstrap_methods_attr</name><operator>.</operator><name>bootstrap_methods</name></name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>attr-&gt;info.bootstrap_methods_attr.bootstrap_methods</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>obj</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_bootstrap_method_summary</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Bootstrap Methods: NONE \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_bootstrap_methods_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_ATTR_TYPE_BOOTSTRAP_METHODS_ATTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bootstrap_methods_attr</name><operator>.</operator><name>bootstrap_methods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_bootstrap_methods_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaBootStrapMethod</name> <modifier>*</modifier></type><name>bsm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>attr-&gt;info.bootstrap_methods_attr.bootstrap_methods</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>bsm</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bsm</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>r_bin_java_bootstrap_method_calc_size</name> <argument_list>(<argument><expr><name>bsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_bootstrap_arg_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaBootStrapArgument</name> <modifier>*</modifier></type><name>bsm_arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bsm_arg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_bootstrap_method_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaBootStrapMethod</name> <modifier>*</modifier></type><name>bsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaBootStrapArgument</name> <modifier>*</modifier></type><name>bsm_arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bsm</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>bsm-&gt;bootstrap_arguments</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>bsm_arg</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bsm_arg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>r_bin_java_bootstrap_arg_calc_size</name> <argument_list>(<argument><expr><name>bsm_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_bootstrap_methods_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaBootStrapMethod</name> <modifier>*</modifier></type><name>bsm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_BOOTSTRAP_METHODS_ATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bootstrap_methods_attr</name><operator>.</operator><name>num_bootstrap_methods</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bootstrap_methods_attr</name><operator>.</operator><name>bootstrap_methods</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_bootstrap_method_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bootstrap_methods_attr</name><operator>.</operator><name>num_bootstrap_methods</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bsm</name> <operator>=</operator> <call><name>r_bin_java_bootstrap_method_new</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bsm</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>bsm</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bootstrap_methods_attr</name><operator>.</operator><name>bootstrap_methods</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>bsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_annotation_default_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_ATTR_TYPE_ANNOTATION_DEFAULT_ATTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Annotation Default Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_java_print_element_value_summary</name> <argument_list>(<argument><expr><operator>(</operator><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_default_attr</name><operator>.</operator><name>default_value</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_annotation_array_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAnnotationsArray</name> <modifier>*</modifier></type><name>annotation_array</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAnnotation</name> <modifier>*</modifier></type><name>annotation</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>annotation_array</name><operator>-&gt;</operator><name>annotations</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>annotation_array-&gt;annotations</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>annotation</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>annotation</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_annotation_free</name> <argument_list>(<argument><expr><name>annotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>annotation_array</name><operator>-&gt;</operator><name>annotations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>annotation_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_annotation_array_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAnnotationsArray</name> <modifier>*</modifier></type><name>annotation_array</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAnnotation</name> <modifier>*</modifier></type><name>annotation</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>annotation_array</name><operator>-&gt;</operator><name>annotations</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Annotation Array Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Number of Annotation Array Elements: %d\n"</literal></expr></argument>, <argument><expr><name><name>annotation_array</name><operator>-&gt;</operator><name>num_annotations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>annotation_array-&gt;annotations</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>annotation</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_annotation_summary</name> <argument_list>(<argument><expr><name>annotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAnnotationsArray</name> <modifier>*</modifier></type><name>r_bin_java_annotation_array_new</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAnnotation</name> <modifier>*</modifier></type><name>annotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAnnotationsArray</name> <modifier>*</modifier></type><name>annotation_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>annotation_array</name> <operator>=</operator> <operator>(</operator><name>RBinJavaAnnotationsArray</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaAnnotationsArray</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>annotation_array</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>annotation_array</name><operator>-&gt;</operator><name>num_annotations</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>annotation_array</name><operator>-&gt;</operator><name>annotations</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>annotation_array</name><operator>-&gt;</operator><name>num_annotations</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>annotation</name> <operator>=</operator> <call><name>r_bin_java_annotation_new</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>annotation</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>annotation</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>annotation_array</name><operator>-&gt;</operator><name>annotations</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>annotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>annotation_array</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><name>annotation_array</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_rtv_annotations_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_RUNTIME_VISIBLE_ANNOTATION_ATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_array</name><operator>.</operator><name>num_annotations</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_array</name><operator>.</operator><name>annotations</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_annotation_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_array</name><operator>.</operator><name>num_annotations</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaAnnotation</name> <modifier>*</modifier></type><name>annotation</name> <init>= <expr><call><name>r_bin_java_annotation_new</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>annotation</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>annotation</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_array</name><operator>.</operator><name>annotations</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>annotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_annotation_array_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAnnotationsArray</name> <modifier>*</modifier></type><name>annotation_array</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAnnotation</name> <modifier>*</modifier></type><name>annotation</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>annotation_array</name><operator>-&gt;</operator><name>annotations</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>annotation_array-&gt;annotations</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>annotation</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>r_bin_java_annotation_calc_size</name> <argument_list>(<argument><expr><name>annotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_rtv_annotations_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <operator>(</operator><literal type="number">6</literal> <operator>+</operator> <call><name>r_bin_java_annotation_array_calc_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_array</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_rti_annotations_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_RUNTIME_INVISIBLE_ANNOTATION_ATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_array</name><operator>.</operator><name>num_annotations</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_array</name><operator>.</operator><name>annotations</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_annotation_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rtv_annotations_attr</name><operator>.</operator><name>num_annotations</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaAnnotation</name> <modifier>*</modifier></type><name>annotation</name> <init>= <expr><call><name>r_bin_java_annotation_new</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>annotation</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>annotation</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_array</name><operator>.</operator><name>annotations</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>annotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_rti_annotations_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <operator>(</operator><literal type="number">6</literal> <operator>+</operator> <call><name>r_bin_java_annotation_array_calc_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_array</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_rtv_annotations_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_ATTR_TYPE_RUNTIME_VISIBLE_ANNOTATION_ATTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_array</name><operator>.</operator><name>annotations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_rti_annotations_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_ATTR_TYPE_RUNTIME_INVISIBLE_ANNOTATION_ATTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_array</name><operator>.</operator><name>annotations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_rtv_annotations_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_ATTR_TYPE_RUNTIME_VISIBLE_ANNOTATION_ATTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Runtime Visible Annotations Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_java_print_annotation_array_summary</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_rti_annotations_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_ATTR_TYPE_RUNTIME_INVISIBLE_ANNOTATION_ATTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Runtime Invisible Annotations Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_java_print_annotation_array_summary</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>annotation_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_rtip_annotations_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAnnotationsArray</name> <modifier>*</modifier></type><name>annotation_array</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <operator>(</operator><literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>attr-&gt;info.rtip_annotations_attr.parameter_annotations</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>annotation_array</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>annotation_array</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>r_bin_java_annotation_array_calc_size</name> <argument_list>(<argument><expr><name>annotation_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_rtip_annotations_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_RUNTIME_INVISIBLE_PARAMETER_ANNOTATION_ATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rtip_annotations_attr</name><operator>.</operator><name>num_parameters</name></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rtip_annotations_attr</name><operator>.</operator><name>parameter_annotations</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_annotation_array_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rtip_annotations_attr</name><operator>.</operator><name>num_parameters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaAnnotationsArray</name> <modifier>*</modifier></type><name>annotation_array</name> <init>= <expr><call><name>r_bin_java_annotation_array_new</name> <argument_list>(
<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>annotation_array</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>annotation_array</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rtip_annotations_attr</name><operator>.</operator><name>parameter_annotations</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>annotation_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>r_bin_java_rtvp_annotations_attr_new</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>r_bin_java_default_attr_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RBinJavaAnnotationsArray</name> <modifier>*</modifier></type><name>annotation_array</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_JAVA_ATTR_TYPE_RUNTIME_VISIBLE_PARAMETER_ANNOTATION_ATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rtvp_annotations_attr</name><operator>.</operator><name>num_parameters</name></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rtvp_annotations_attr</name><operator>.</operator><name>parameter_annotations</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_java_annotation_array_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rtvp_annotations_attr</name><operator>.</operator><name>num_parameters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>annotation_array</name> <operator>=</operator> <call><name>r_bin_java_annotation_array_new</name> <argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf_offset</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>annotation_array</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>annotation_array</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rtvp_annotations_attr</name><operator>.</operator><name>parameter_annotations</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>annotation_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_rtvp_annotations_attr_calc_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaAnnotationsArray</name> <modifier>*</modifier></type><name>annotation_array</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <operator>(</operator><literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>attr-&gt;info.rtvp_annotations_attr.parameter_annotations</argument>,
<argument>iter</argument>, <argument>iter_tmp</argument>, <argument>annotation_array</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>annotation_array</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>r_bin_java_annotation_array_calc_size</name> <argument_list>(
<argument><expr><name>annotation_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_rtvp_annotations_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_ATTR_TYPE_RUNTIME_VISIBLE_PARAMETER_ANNOTATION_ATTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rtvp_annotations_attr</name><operator>.</operator><name>parameter_annotations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_rtip_annotations_attr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rtip_annotations_attr</name><operator>.</operator><name>parameter_annotations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_rtvp_annotations_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAnnotationsArray</name> <modifier>*</modifier></type><name>annotation_array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_ATTR_TYPE_RUNTIME_VISIBLE_PARAMETER_ANNOTATION_ATTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Runtime Visible Parameter Annotations Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Number of Runtime Invisible Parameters: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rtvp_annotations_attr</name><operator>.</operator><name>num_parameters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>attr-&gt;info.rtvp_annotations_attr.parameter_annotations</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>annotation_array</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_annotation_array_summary</name> <argument_list>(<argument><expr><name>annotation_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_print_rtip_annotations_attr_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAnnotationsArray</name> <modifier>*</modifier></type><name>annotation_array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_JAVA_ATTR_TYPE_RUNTIME_INVISIBLE_PARAMETER_ANNOTATION_ATTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Runtime Invisible Parameter Annotations Attribute Information:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Name Index: %d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Attribute Length: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" Number of Runtime Invisible Parameters: %d\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rtip_annotations_attr</name><operator>.</operator><name>num_parameters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>attr-&gt;info.rtip_annotations_attr.parameter_annotations</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>annotation_array</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_annotation_array_summary</name> <argument_list>(<argument><expr><name>annotation_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_find_cp_name_and_type_info</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>name_idx</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>descriptor_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Looking for name_idx: %d and descriptor_idx: %d\n"</literal></expr></argument>, <argument><expr><name>name_idx</name></expr></argument>, <argument><expr><name>descriptor_idx</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>bin-&gt;cp_list</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>obj</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_NAMEANDTYPE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"RBinJavaCPTypeNameAndType has name_idx: %d and descriptor_idx: %d\n"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_name_and_type</name><operator>.</operator><name>name_idx</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_name_and_type</name><operator>.</operator><name>descriptor_idx</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_name_and_type</name><operator>.</operator><name>name_idx</name></name> <operator>==</operator> <name>name_idx</name> <operator>&amp;&amp;</operator>
<name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_name_and_type</name><operator>.</operator><name>descriptor_idx</name></name> <operator>==</operator> <name>descriptor_idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_resolve_cp_idx_type</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>BIN_OBJ</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>BIN_OBJ</name> <operator>&amp;&amp;</operator> <name><name>BIN_OBJ</name><operator>-&gt;</operator><name>cp_count</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"INVALID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_find_cp_ref_info_from_name_and_type</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>name_idx</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>descriptor_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>r_bin_java_find_cp_name_and_type_info</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>name_idx</name></expr></argument>, <argument><expr><name>descriptor_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_find_cp_ref_info</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_find_cp_ref_info</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>name_and_type_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>bin-&gt;cp_list</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>obj</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_FIELDREF</name> <operator>&amp;&amp;</operator>
<name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_field</name><operator>.</operator><name>name_and_type_idx</name></name> <operator>==</operator> <name>name_and_type_idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_METHODREF</name> <operator>&amp;&amp;</operator>
<name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>name_and_type_idx</name></name> <operator>==</operator> <name>name_and_type_idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_resolve</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>BIN_OBJ</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>space_bn_name_type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>item2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_str</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>name_str</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>desc_str</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>string_str</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>empty</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>cp_name</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>BIN_OBJ</name> <operator>&amp;&amp;</operator> <name><name>BIN_OBJ</name><operator>-&gt;</operator><name>cp_count</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp_name</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"java_resolve Resolved: (%d) %s\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>cp_name</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><literal type="string">"(%d) INVALID CP_OBJ"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"Class"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>item2</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>class_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>class_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>desc_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_desc_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>desc_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>name_str</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>space_bn_name_type</name></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>desc_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>class_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>desc_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"MethodRef"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"FieldRef"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"InterfaceMethodRef"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>class_str</name> <operator>=</operator> <call><name>r_bin_java_get_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>class_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>class_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>desc_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_desc_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>desc_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s/%s%s%s"</literal></expr></argument>, <argument><expr><name>class_str</name></expr></argument>, <argument><expr><name>name_str</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>space_bn_name_type</name></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>desc_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>class_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>desc_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"String"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>string_str</name> <operator>=</operator> <call><name>r_bin_java_get_utf8_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_string</name><operator>.</operator><name>string_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"java_resolve String got: (%d) %s\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_string</name><operator>.</operator><name>string_idx</name></name></expr></argument>, <argument><expr><name>string_str</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>string_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>string_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name>string_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"java_resolve String return: %s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>string_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>string_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"Utf8"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_str</name> <init>= <expr><call><name>convert_string</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>tmp_str_len</name> <init>= <expr><ternary><condition><expr><name>tmp_str</name></expr> ?</condition><then> <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>tmp_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>tmp_str_len</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>tmp_str_len</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name>tmp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"Long"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><call><name>r_bin_java_raw_to_long</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_long</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"Double"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>r_bin_java_raw_to_double</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_double</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"Integer"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"0x%08x"</literal></expr></argument>, <argument><expr><call><name>R_BIN_JAVA_UINT</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_integer</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"Float"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>R_BIN_JAVA_FLOAT</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_float</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"NameAndType"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>desc_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_desc_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>desc_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>name_str</name></expr></argument>, <argument><expr><ternary><condition><expr><name>space_bn_name_type</name></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>desc_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>desc_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"(null)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name></type> <name>r_bin_java_does_cp_idx_ref_method</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>BIN_OBJ</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>BIN_OBJ-&gt;methods_list</argument>, <argument>iter</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fm_type</name><operator>-&gt;</operator><name>field_ref_cp_obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name> <operator>==</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name></type> <name>r_bin_java_does_cp_idx_ref_field</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>BIN_OBJ</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>BIN_OBJ-&gt;fields_list</argument>, <argument>iter</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fm_type</name><operator>-&gt;</operator><name>field_ref_cp_obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name> <operator>==</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_get_method_name</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>bin_obj</name><operator>-&gt;</operator><name>methods_list</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>bin_obj</name><operator>-&gt;</operator><name>methods_list</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_method_num_name</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin_obj-&gt;methods_list</argument>, <argument>iter</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%d %s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>






































<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_find_cp_const_by_val_long</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Looking for 0x%08x\n"</literal></expr></argument>, <argument><expr><call><name>R_BIN_JAVA_UINT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin_obj-&gt;cp_list</argument>, <argument>iter</argument>, <argument>cp_obj</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_LONG</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>r_bin_java_raw_to_long</name> <argument_list>(<argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_long</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>r_bin_java_raw_to_long</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_find_cp_const_by_val_double</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Looking for %f\n"</literal></expr></argument>, <argument><expr><call><name>r_bin_java_raw_to_double</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin_obj-&gt;cp_list</argument>, <argument>iter</argument>, <argument>cp_obj</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_DOUBLE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>r_bin_java_raw_to_double</name> <argument_list>(<argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_long</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>r_bin_java_raw_to_double</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_find_cp_const_by_val_float</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Looking for %f\n"</literal></expr></argument>, <argument><expr><call><name>R_BIN_JAVA_FLOAT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin_obj-&gt;cp_list</argument>, <argument>iter</argument>, <argument>cp_obj</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_FLOAT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>R_BIN_JAVA_FLOAT</name> <argument_list>(<argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_long</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>R_BIN_JAVA_FLOAT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_find_cp_const_by_val</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_JAVA_CP_UTF8</name></expr>:</case> <return>return <expr><call><name>r_bin_java_find_cp_const_by_val_utf8</name> <argument_list>(<argument><expr><name>bin_obj</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>R_BIN_JAVA_CP_INTEGER</name></expr>:</case> <return>return <expr><call><name>r_bin_java_find_cp_const_by_val_int</name> <argument_list>(<argument><expr><name>bin_obj</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>R_BIN_JAVA_CP_FLOAT</name></expr>:</case> <return>return <expr><call><name>r_bin_java_find_cp_const_by_val_float</name> <argument_list>(<argument><expr><name>bin_obj</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>R_BIN_JAVA_CP_LONG</name></expr>:</case> <return>return <expr><call><name>r_bin_java_find_cp_const_by_val_long</name> <argument_list>(<argument><expr><name>bin_obj</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>R_BIN_JAVA_CP_DOUBLE</name></expr>:</case> <return>return <expr><call><name>r_bin_java_find_cp_const_by_val_double</name> <argument_list>(<argument><expr><name>bin_obj</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>R_BIN_JAVA_CP_UNKNOWN</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to perform the search for: %s\n"</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>add_cp_objs_to_sdb</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>














<decl_stmt><decl><type><name>ut32</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>class_name_inheap</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str_cnt</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name</name> <init>= <expr><call><name>r_bin_java_get_this_class_name</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>key_buf_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>class_name</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>class_name_inheap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key_buf_size</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>key_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>class_name_inheap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_buf_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s.cp_count"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><index>[<expr><name>key_buf_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str_cnt</name></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str_cnt</name><index>[<expr><literal type="number">39</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>cp_count</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_buf_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s.cp.%d"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><index>[<expr><name>key_buf_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cp_obj</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Adding %s to the sdb.\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cp_obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator>
<name><name>cp_obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator>
<call><name><name>allocs</name><operator>-&gt;</operator><name>stringify_obj</name></name> <argument_list>(<argument><expr><name>cp_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>class_name_inheap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>add_field_infos_to_sdb</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>











<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>key_size</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>,
<decl><type ref="prev"/><name>value_buffer_size</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>,
<decl><type ref="prev"/><name>class_name_inheap</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>field_key</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>field_key_value</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>value_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name</name> <init>= <expr><call><name>r_bin_java_get_this_class_name</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>class_name</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>class_name_inheap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>key_size</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value_buffer_size</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>field_key</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>key_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value_buffer</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>value_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>field_key_value</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>key_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>field_key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><literal type="string">"%s.methods"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field_key</name><index>[<expr><name>key_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>bin-&gt;fields_list</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>number_buffer</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>file_offset</name> <init>= <expr><name><name>fm_type</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>number_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>number_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%04"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>file_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Inserting: []%s = %s\n"</literal></expr></argument>, <argument><expr><name>field_key</name></expr></argument>, <argument><expr><name>number_buffer</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_array_push</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>field_key</name></expr></argument>, <argument><expr><name>number_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>bin-&gt;fields_list</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>field_offset</name> <init>= <expr><name><name>fm_type</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>field_key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><literal type="string">"%s.0x%04"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>field_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field_key</name><index>[<expr><name>key_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>field_key_value</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><literal type="string">"%s.0x%04"</literal><name>PFMT64x</name> <literal type="string">".field"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>field_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field_key_value</name><index>[<expr><name>key_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>field_key</name></expr></argument>, <argument><expr><name>field_key_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Inserting: %s = %s\n"</literal></expr></argument>, <argument><expr><name>field_key</name></expr></argument>, <argument><expr><name>field_key_value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>field_key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><literal type="string">"%s.info"</literal></expr></argument>, <argument><expr><name>field_key_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field_key</name><index>[<expr><name>key_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><name>value_buffer_size</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>flags_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value_buffer</name><index>[<expr><name>value_buffer_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_array_push</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>field_key</name></expr></argument>, <argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Inserting: []%s = %s\n"</literal></expr></argument>, <argument><expr><name>field_key</name></expr></argument>, <argument><expr><name>value_buffer</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><name>value_buffer_size</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value_buffer</name><index>[<expr><name>value_buffer_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_array_push</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>field_key</name></expr></argument>, <argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Inserting: []%s = %s\n"</literal></expr></argument>, <argument><expr><name>field_key</name></expr></argument>, <argument><expr><name>value_buffer</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><name>value_buffer_size</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value_buffer</name><index>[<expr><name>value_buffer_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_array_push</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>field_key</name></expr></argument>, <argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Inserting: []%s = %s\n"</literal></expr></argument>, <argument><expr><name>field_key</name></expr></argument>, <argument><expr><name>value_buffer</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><name>value_buffer_size</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value_buffer</name><index>[<expr><name>value_buffer_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_array_push</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>field_key</name></expr></argument>, <argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Inserting: []%s = %s\n"</literal></expr></argument>, <argument><expr><name>field_key</name></expr></argument>, <argument><expr><name>value_buffer</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>field_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>field_key_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>class_name_inheap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>add_method_infos_to_sdb</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>


















<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>key_size</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>,
<decl><type ref="prev"/><name>value_buffer_size</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>,
<decl><type ref="prev"/><name>class_name_inheap</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>method_key</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>method_key_value</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>value_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name</name> <init>= <expr><call><name>r_bin_java_get_this_class_name</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>baddr</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>class_name</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>class_name_inheap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>key_size</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value_buffer_size</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>method_key</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>key_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value_buffer</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>value_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>method_key_value</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>key_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>method_key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><literal type="string">"%s.methods"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>method_key</name><index>[<expr><name>key_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>bin-&gt;methods_list</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>number_buffer</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>file_offset</name> <init>= <expr><name><name>fm_type</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name>baddr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>number_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>number_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%04"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>file_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_array_push</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>method_key</name></expr></argument>, <argument><expr><name>number_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>bin-&gt;methods_list</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>code_offset</name> <init>= <expr><call><name>r_bin_java_get_method_code_offset</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>baddr</name></expr></init></decl>,
<decl><type ref="prev"/><name>code_size</name> <init>= <expr><call><name>r_bin_java_get_method_code_size</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><type ref="prev"/><name>method_offset</name> <init>= <expr><name><name>fm_type</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name>baddr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>method_key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><literal type="string">"%s.0x%04"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>code_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>method_key</name><index>[<expr><name>key_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>method_key_value</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><literal type="string">"%s.0x%04"</literal><name>PFMT64x</name> <literal type="string">".method"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>method_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>method_key_value</name><index>[<expr><name>key_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Adding %s to sdb_array: %s\n"</literal></expr></argument>, <argument><expr><name>method_key_value</name></expr></argument>, <argument><expr><name>method_key</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>method_key</name></expr></argument>, <argument><expr><name>method_key_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>method_key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><literal type="string">"%s.code"</literal></expr></argument>, <argument><expr><name>method_key_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>method_key</name><index>[<expr><name>key_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><name>value_buffer_size</name></expr></argument>, <argument><expr><literal type="string">"0x%04"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>code_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value_buffer</name><index>[<expr><name>value_buffer_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_array_push</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>method_key</name></expr></argument>, <argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><name>value_buffer_size</name></expr></argument>, <argument><expr><literal type="string">"0x%04"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>code_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value_buffer</name><index>[<expr><name>value_buffer_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_array_push</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>method_key</name></expr></argument>, <argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>method_key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><literal type="string">"%s.info"</literal></expr></argument>, <argument><expr><name>method_key_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>method_key</name><index>[<expr><name>key_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><name>value_buffer_size</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>flags_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value_buffer</name><index>[<expr><name>value_buffer_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Adding %s to sdb_array: %s\n"</literal></expr></argument>, <argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><name>method_key</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_array_push</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>method_key</name></expr></argument>, <argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><name>value_buffer_size</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value_buffer</name><index>[<expr><name>value_buffer_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Adding %s to sdb_array: %s\n"</literal></expr></argument>, <argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><name>method_key</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_array_push</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>method_key</name></expr></argument>, <argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><name>value_buffer_size</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value_buffer</name><index>[<expr><name>value_buffer_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Adding %s to sdb_array: %s\n"</literal></expr></argument>, <argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><name>method_key</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_array_push</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>method_key</name></expr></argument>, <argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><name>value_buffer_size</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value_buffer</name><index>[<expr><name>value_buffer_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Adding %s to sdb_array: %s\n"</literal></expr></argument>, <argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><name>method_key</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_array_push</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>method_key</name></expr></argument>, <argument><expr><name>value_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>method_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>method_key_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>class_name_inheap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier><name>U</name></type>(<name>r_bin_java_get_args_from_bin</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name> <init>= <expr><call><name>r_bin_java_get_method_code_attribute_with_addr</name> <argument_list>(<argument><expr><name>bin_obj</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>fm_type</name></expr> ?</condition><then> <expr><call><name>r_bin_java_get_args</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier><name>U</name></type>(<name>r_bin_java_get_ret_from_bin</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name> <init>= <expr><call><name>r_bin_java_get_method_code_attribute_with_addr</name> <argument_list>(<argument><expr><name>bin_obj</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>fm_type</name></expr> ?</condition><then> <expr><call><name>r_bin_java_get_ret</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier><name>U</name></type>(<name>r_bin_java_get_fcn_name_from_bin</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name> <init>= <expr><call><name>r_bin_java_get_method_code_attribute_with_addr</name> <argument_list>(<argument><expr><name>bin_obj</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>fm_type</name> <operator>&amp;&amp;</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name> <name>U</name></type>(<name>r_bin_java_is_method_static</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name> <init>= <expr><call><name>r_bin_java_get_method_code_attribute_with_addr</name> <argument_list>(<argument><expr><name>bin_obj</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>fm_type</name> <operator>&amp;&amp;</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_BIN_JAVA_METHOD_ACC_STATIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name> <name>U</name></type>(<name>r_bin_java_is_method_private</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_is_fm_type_private</name> <argument_list>(<argument><expr><call><name>r_bin_java_get_method_code_attribute_with_addr</name> <argument_list>(<argument><expr><name>bin_obj</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name> <name>U</name></type>(<name>r_bin_java_is_method_protected</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_is_fm_type_protected</name> <argument_list>(
<argument><expr><call><name>r_bin_java_get_method_code_attribute_with_addr</name> <argument_list>(<argument><expr><name>bin_obj</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bin_java_print_method_idx_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>bin_obj</name><operator>-&gt;</operator><name>methods_list</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>bin_obj</name><operator>-&gt;</operator><name>methods_list</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_bin_java_print_method_summary</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut32</name></type> <name>r_bin_java_get_method_count</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>bin_obj</name><operator>-&gt;</operator><name>methods_list</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_interface_names</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>interfaces_names</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaInterfaceInfo</name> <modifier>*</modifier></type><name>ifobj</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;interfaces_list</argument>, <argument>iter</argument>, <argument>ifobj</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ifobj</name> <operator>&amp;&amp;</operator> <name><name>ifobj</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>interfaces_names</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>ifobj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>interfaces_names</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_get_main</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>main_code_attr</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>main_code_attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code_offset</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaObj</name> <modifier>*</modifier></type><name>r_bin_java_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>loadaddr</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_java_new_bin</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>loadaddr</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bin</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bin</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_get_class_entrypoint</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class_entrypoint_code_attr</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>cf2</name><operator>.</operator><name>this_class_entrypoint_code_attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>code_offset</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_method_exception_table_with_addr</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>&amp;&amp;</operator> <name>R_BIN_JAVA_GLOBAL_BIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bin</name> <operator>=</operator> <name>R_BIN_JAVA_GLOBAL_BIN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to analyse function when the R_BIN_JAVA_GLOBAL_BIN has not been set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>bin-&gt;methods_list</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><call><name>r_bin_java_get_method_code_offset</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></init></decl>,
<decl><type ref="prev"/><name>size</name> <init>= <expr><call><name>r_bin_java_get_method_code_size</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name>offset</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;=</operator> <name>size</name> <operator>+</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>fm_type</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaAttrInfo</name> <modifier>*</modifier></type><name>code_attr</name> <init>= <expr><call><name>r_bin_java_get_method_code_attribute</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>code_attr</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>code_attr</name><operator>.</operator><name>exception_table</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_methods_list</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>R_BIN_JAVA_GLOBAL_BIN</name><operator>-&gt;</operator><name>methods_list</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_bin_obj_list_thru_obj</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>the_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin_obj</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sdb</name> <operator>=</operator> <name><name>bin_obj</name><operator>-&gt;</operator><name>AllJavaBinObjs</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sdb</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>the_list</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>the_list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>sdb_iterate_build_list</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>the_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>the_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_extract_all_bin_type_values</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>fm_type_iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>all_types</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bin_obj-&gt;fields_list</argument>, <argument>fm_type_iter</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extract_type_value</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Adding field type: %s\n"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>all_types</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bin_obj-&gt;methods_list</argument>, <argument>fm_type_iter</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>the_list</name> <init>= <expr><call><name>r_bin_java_extract_type_values</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>desc_iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>the_list</argument>, <argument>desc_iter</argument>, <argument>str</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>all_types</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Adding method type: %s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>all_types</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_method_definitions</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>the_list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>the_list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>the_list</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;methods_list</argument>, <argument>iter</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>method_proto</name> <init>= <expr><call><name>r_bin_java_get_method_definition</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>, <argument><expr><name>method_proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>the_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_field_definitions</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>the_list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>the_list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>the_list</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;fields_list</argument>, <argument>iter</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>field_def</name> <init>= <expr><call><name>r_bin_java_get_field_definition</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>, <argument><expr><name>field_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>the_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_import_definitions</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>the_list</name> <init>= <expr><call><name>r_bin_java_get_lib_names</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_str</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name>the_list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>the_list</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>the_list</argument>, <argument>iter</argument>, <argument>new_str</argument>)</argument_list></macro> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>new_str</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>new_str</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>new_str</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>new_str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>
<return>return <expr><name>the_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_field_offsets</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>the_list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>the_list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>paddr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>the_list</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>the_list</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;fields_list</argument>, <argument>iter</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>paddr</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>paddr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>paddr</name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>the_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_method_offsets</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>the_list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>paddr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>the_list</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>the_list</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;methods_list</argument>, <argument>iter</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>paddr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>paddr</name> <operator>=</operator> <name><name>fm_type</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>the_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut16</name></type> <name>r_bin_java_calculate_field_access_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>access_flags_str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>calculate_access_value</name> <argument_list>(<argument><expr><name>access_flags_str</name></expr></argument>, <argument><expr><name>FIELD_ACCESS_FLAGS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut16</name></type> <name>r_bin_java_calculate_class_access_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>access_flags_str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>calculate_access_value</name> <argument_list>(<argument><expr><name>access_flags_str</name></expr></argument>, <argument><expr><name>CLASS_ACCESS_FLAGS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut16</name></type> <name>r_bin_java_calculate_method_access_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>access_flags_str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>calculate_access_value</name> <argument_list>(<argument><expr><name>access_flags_str</name></expr></argument>, <argument><expr><name>METHOD_ACCESS_FLAGS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>retrieve_all_method_access_string_and_value</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>retrieve_all_access_string_and_value</name> <argument_list>(<argument><expr><name>METHOD_ACCESS_FLAGS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>retrieve_all_field_access_string_and_value</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>retrieve_all_access_string_and_value</name> <argument_list>(<argument><expr><name>FIELD_ACCESS_FLAGS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>retrieve_all_class_access_string_and_value</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>retrieve_all_access_string_and_value</name> <argument_list>(<argument><expr><name>CLASS_ACCESS_FLAGS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_resolve_with_space</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_resolve</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_resolve_without_space</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_resolve</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_resolve_b64_encode</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>BIN_OBJ</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>item2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_str</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>name_str</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>desc_str</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>string_str</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>empty</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>cp_name</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>memory_alloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>BIN_OBJ</name> <operator>&amp;&amp;</operator> <name><name>BIN_OBJ</name><operator>-&gt;</operator><name>cp_count</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp_name</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"java_resolve Resolved: (%d) %s\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>cp_name</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"Class"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>item2</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>class_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>class_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>desc_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_desc_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>desc_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>memory_alloc</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>class_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>name_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>desc_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>memory_alloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>memory_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>memory_alloc</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>name_str</name></expr></argument>, <argument><expr><name>desc_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_base64_encode_dyn</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>class_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>desc_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"MethodRef"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"FieldRef"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"InterfaceMethodRef"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>class_str</name> <operator>=</operator> <call><name>r_bin_java_get_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>class_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>class_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>desc_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_desc_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>desc_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>memory_alloc</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>class_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>name_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>desc_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>memory_alloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>memory_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>memory_alloc</name></expr></argument>, <argument><expr><literal type="string">"%s/%s%s"</literal></expr></argument>, <argument><expr><name>class_str</name></expr></argument>, <argument><expr><name>name_str</name></expr></argument>, <argument><expr><name>desc_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_base64_encode_dyn</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>class_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>desc_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"String"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>length</name> <init>= <expr><call><name>r_bin_java_get_utf8_len_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_string</name><operator>.</operator><name>string_idx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>string_str</name> <operator>=</operator> <call><name>r_bin_java_get_utf8_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_string</name><operator>.</operator><name>string_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"java_resolve String got: (%d) %s\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_string</name><operator>.</operator><name>string_idx</name></name></expr></argument>, <argument><expr><name>string_str</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>string_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>string_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>memory_alloc</name> <operator>=</operator> <name>length</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>memory_alloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>memory_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>memory_alloc</name></expr></argument>, <argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name>string_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_base64_encode_dyn</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"java_resolve String return: %s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>string_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>string_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"Utf8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr> ?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">10</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_base64_encode</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"Long"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><call><name>r_bin_java_raw_to_long</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_long</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_base64_encode_dyn</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"Double"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>r_bin_java_raw_to_double</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_double</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_base64_encode_dyn</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"Integer"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>, <argument><expr><literal type="string">"0x%08x"</literal></expr></argument>, <argument><expr><call><name>R_BIN_JAVA_UINT</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_integer</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_base64_encode_dyn</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"Float"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>R_BIN_JAVA_FLOAT</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_float</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_base64_encode_dyn</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"NameAndType"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>desc_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_desc_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>desc_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>memory_alloc</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>name_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>desc_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>memory_alloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>memory_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>memory_alloc</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name>name_str</name></expr></argument>, <argument><expr><name>desc_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_base64_encode_dyn</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>desc_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_base64_encode_dyn</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">"(null)"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_resolve_cp_idx_address</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>BIN_OBJ</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>BIN_OBJ</name> <operator>&amp;&amp;</operator> <name><name>BIN_OBJ</name><operator>-&gt;</operator><name>cp_count</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>loadaddr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_resolve_cp_idx_to_string</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>BIN_OBJ</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>BIN_OBJ</name> <operator>&amp;&amp;</operator> <name><name>BIN_OBJ</name><operator>-&gt;</operator><name>cp_count</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator>
<name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator>
<call><name><name>allocs</name><operator>-&gt;</operator><name>stringify_obj</name></name> <argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bin_java_resolve_cp_idx_print_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>BIN_OBJ</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>BIN_OBJ</name> <operator>&amp;&amp;</operator> <name><name>BIN_OBJ</name><operator>-&gt;</operator><name>cp_count</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator>
<name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator>
<call><name><name>allocs</name><operator>-&gt;</operator><name>print_summary</name></name> <argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: Invalid CP Object.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><ternary><condition><expr><name>item</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ConstJavaValue</name> <modifier>*</modifier><name>U</name></type>(<name>r_bin_java_resolve_to_const_value</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>BIN_OBJ</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>item2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConstJavaValue</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>ConstJavaValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_str</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>name_str</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>desc_str</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>string_str</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>empty</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>cp_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>BIN_OBJ</name> <operator>&amp;&amp;</operator> <name><name>BIN_OBJ</name><operator>-&gt;</operator><name>cp_count</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cp_name</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"java_resolve Resolved: (%d) %s\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>cp_name</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"Class"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>item2</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>class_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>class_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>desc_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_desc_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>desc_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_ref</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>_JavaRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"ref"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_ref</name><operator>-&gt;</operator><name>class_name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>class_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_ref</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_ref</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>desc_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>class_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>desc_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"MethodRef"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"FieldRef"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"InterfaceMethodRef"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>class_str</name> <operator>=</operator> <call><name>r_bin_java_get_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_method</name><operator>.</operator><name>class_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>class_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>desc_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_desc_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>desc_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_ref</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>_JavaRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"ref"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_ref</name><operator>-&gt;</operator><name>class_name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>class_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_ref</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_ref</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>desc_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>class_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>desc_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"String"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>length</name> <init>= <expr><call><name>r_bin_java_get_utf8_len_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_string</name><operator>.</operator><name>string_idx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>string_str</name> <operator>=</operator> <call><name>r_bin_java_get_utf8_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_string</name><operator>.</operator><name>string_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"java_resolve String got: (%d) %s\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_string</name><operator>.</operator><name>string_idx</name></name></expr></argument>, <argument><expr><name>string_str</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>string_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>string_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"str"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_str</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>java_const_value_str_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_str</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_str</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>string_str</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_str</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>string_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>string_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"Utf8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"str"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_str</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>java_const_value_str_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_str</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_str</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_str</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"Long"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"long"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_long</name></name> <operator>=</operator> <call><name>r_bin_java_raw_to_long</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_long</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"Double"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"double"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_double</name></name> <operator>=</operator> <call><name>r_bin_java_raw_to_double</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_double</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"Integer"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"int"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_int</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_UINT</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_integer</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"Float"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"float"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_float</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_FLOAT</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_float</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>cp_name</name></expr></argument>, <argument><expr><literal type="string">"NameAndType"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_ref</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>java_const_value_ref_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"ref"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>name_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_name_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>desc_str</name> <operator>=</operator> <call><name>r_bin_java_get_item_desc_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>desc_str</name> <operator>=</operator> <name>empty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_ref</name><operator>-&gt;</operator><name>class_name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_ref</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_ref</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>desc_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_str</name> <operator>!=</operator> <name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>desc_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_ref</name><operator>-&gt;</operator><name>is_method</name></name> <operator>=</operator> <call><name>r_bin_java_does_cp_idx_ref_method</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_ref</name><operator>-&gt;</operator><name>is_field</name></name> <operator>=</operator> <call><name>r_bin_java_does_cp_idx_ref_field</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>r_bin_java_free_const_value</name>)<parameter_list>(<parameter><decl><type><name>ConstJavaValue</name> <modifier>*</modifier></type> <name>cp_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>first_char</name> <init>= <expr><ternary><condition><expr><name>cp_value</name> <operator>&amp;&amp;</operator> <name><name>cp_value</name><operator>-&gt;</operator><name>type</name></name></expr> ?</condition><then> <expr><operator>*</operator><name><name>cp_value</name><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>,
<decl><type ref="prev"/><name>second_char</name> <init>= <expr><ternary><condition><expr><name>cp_value</name> <operator>&amp;&amp;</operator> <name><name>cp_value</name><operator>-&gt;</operator><name>type</name></name></expr> ?</condition><then> <expr><operator>*</operator><operator>(</operator><name><name>cp_value</name><operator>-&gt;</operator><name>type</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>first_char</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>cp_value</name> <operator>&amp;&amp;</operator> <name><name>cp_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_ref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>cp_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_ref</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>cp_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_ref</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>cp_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_ref</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>second_char</name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>cp_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_str</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>cp_value</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>_str</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cp_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_get_field_name</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>bin_obj</name><operator>-&gt;</operator><name>fields_list</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>bin_obj</name><operator>-&gt;</operator><name>fields_list</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bin_java_print_field_idx_summary</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>bin_obj</name><operator>-&gt;</operator><name>fields_list</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>bin_obj</name><operator>-&gt;</operator><name>fields_list</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_bin_java_print_field_summary</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut32</name></type> <name>r_bin_java_get_field_count</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>bin_obj</name><operator>-&gt;</operator><name>fields_list</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_get_field_num_name</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin_obj-&gt;fields_list</argument>, <argument>iter</argument>, <argument>fm_type</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%d %s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>fm_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_find_cp_const_by_val_utf8</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"In UTF-8 Looking for %s\n"</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin_obj-&gt;cp_list</argument>, <argument>iter</argument>, <argument>cp_obj</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_UTF8</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"In UTF-8 Looking @ %s\n"</literal></expr></argument>, <argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"UTF-8 len = %d and memcmp = %d\n"</literal></expr></argument>, <argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Found a match adding idx: %d\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_java_find_cp_const_by_val_int</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Looking for 0x%08x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator> <call><name>R_BIN_JAVA_UINT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin_obj-&gt;cp_list</argument>, <argument>iter</argument>, <argument>cp_obj</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_INTEGER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>R_BIN_JAVA_UINT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>R_BIN_JAVA_UINT</name> <argument_list>(<argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_integer</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name></type> <name>r_bin_java_resolve_cp_idx_tag</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>BIN_OBJ</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>BIN_OBJ</name> <operator>&amp;&amp;</operator> <name><name>BIN_OBJ</name><operator>-&gt;</operator><name>cp_count</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_BIN_JAVA_CP_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>BIN_OBJ</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>tag</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>R_BIN_JAVA_CP_UNKNOWN</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name> <name>U</name></type>(<name>r_bin_java_integer_cp_set</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name> <init>= <expr><call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp_obj</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>bytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>R_BIN_JAVA_CP_INTEGER</name> <operator>&amp;&amp;</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>R_BIN_JAVA_CP_FLOAT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Not supporting the overwrite of CP Objects with one of a different size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_bin_java_check_reset_cp_obj</name> <argument_list>(<argument><expr><name>cp_obj</name></expr></argument>, <argument><expr><name>R_BIN_JAVA_CP_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>R_BIN_JAVA_CP_INTEGER</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>R_BIN_JAVA_UINT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_integer</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name> <name>U</name></type>(<name>r_bin_java_float_cp_set</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name> <init>= <expr><call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp_obj</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>bytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>R_BIN_JAVA_CP_INTEGER</name> <operator>&amp;&amp;</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>R_BIN_JAVA_CP_FLOAT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Not supporting the overwrite of CP Objects with one of a different size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_bin_java_check_reset_cp_obj</name> <argument_list>(<argument><expr><name>cp_obj</name></expr></argument>, <argument><expr><name>R_BIN_JAVA_CP_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>R_BIN_JAVA_CP_FLOAT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>foo</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator> <name>bytes</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><name>foo</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_float</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name> <name>U</name></type>(<name>r_bin_java_long_cp_set</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name> <init>= <expr><call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp_obj</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>bytes</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>R_BIN_JAVA_CP_LONG</name> <operator>&amp;&amp;</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>R_BIN_JAVA_CP_DOUBLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Not supporting the overwrite of CP Objects with one of a different size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_bin_java_check_reset_cp_obj</name> <argument_list>(<argument><expr><name>cp_obj</name></expr></argument>, <argument><expr><name>R_BIN_JAVA_CP_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>R_BIN_JAVA_CP_LONG</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>r_bin_java_raw_to_long</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_long</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name> <name>U</name></type>(<name>r_bin_java_double_cp_set</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name> <init>= <expr><call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp_obj</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>bytes</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>R_BIN_JAVA_CP_LONG</name> <operator>&amp;&amp;</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>R_BIN_JAVA_CP_DOUBLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Not supporting the overwrite of CP Objects with one of a different size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_bin_java_check_reset_cp_obj</name> <argument_list>(<argument><expr><name>cp_obj</name></expr></argument>, <argument><expr><name>R_BIN_JAVA_CP_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>R_BIN_JAVA_CP_DOUBLE</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>val64</name> <init>= <expr><name>val</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>val64</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val64</name> <operator>=</operator> <call><name>r_bin_java_raw_to_long</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_double</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>val64</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name> <name>U</name></type>(<name>r_bin_java_utf8_cp_set</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name> <init>= <expr><call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp_obj</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Writing %d byte(s) (%s)\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>R_BIN_JAVA_CP_UTF8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Not supporting the overwrite of CP Objects with one of a different size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Not supporting the resize, rewriting utf8 string up to %d byte(s).\n"</literal></expr></argument>, <argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Remaining %d byte(s) will be filled with \\x00.\n"</literal></expr></argument>, <argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_get_bytes</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_sz</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>out_sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_JAVA_CP_INTEGER</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_CP_FLOAT</name></expr>:</case>
<return>return <expr><call><name>r_bin_java_cp_get_4bytes</name> <argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>out_sz</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>R_BIN_JAVA_CP_LONG</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_CP_DOUBLE</name></expr>:</case>
<return>return <expr><call><name>r_bin_java_cp_get_8bytes</name> <argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>out_sz</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>R_BIN_JAVA_CP_UTF8</name></expr>:</case>
<return>return <expr><call><name>r_bin_java_cp_get_utf8</name> <argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>out_sz</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut32</name></type> <name>r_bin_java_cp_get_size</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name> <init>= <expr><call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_JAVA_CP_INTEGER</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_CP_FLOAT</name></expr>:</case>
<return>return <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</return>
<case>case <expr><name>R_BIN_JAVA_CP_LONG</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_CP_DOUBLE</name></expr>:</case>
<return>return <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal></expr>;</return>
<case>case <expr><name>R_BIN_JAVA_CP_UTF8</name></expr>:</case>
<return>return <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_get_method_start</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_get_method_code_offset</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_get_method_end</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>fm_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_get_method_code_offset</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>loadaddr</name></name> <operator>+</operator>
<operator>+</operator><call><name>r_bin_java_get_method_code_size</name> <argument_list>(<argument><expr><name>fm_type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier><name>U</name></type>(<name>r_bin_java_cp_append_method_ref</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type> <name>out_sz</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>cn_idx</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>fn_idx</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>ft_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_cp_get_fref_bytes</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>out_sz</name></expr></argument>, <argument><expr><name>R_BIN_JAVA_CP_METHODREF</name></expr></argument>, <argument><expr><name>cn_idx</name></expr></argument>, <argument><expr><name>fn_idx</name></expr></argument>, <argument><expr><name>ft_idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier><name>U</name></type>(<name>r_bin_java_cp_append_field_ref</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type> <name>out_sz</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>cn_idx</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>fn_idx</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>ft_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_cp_get_fref_bytes</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>out_sz</name></expr></argument>, <argument><expr><name>R_BIN_JAVA_CP_FIELDREF</name></expr></argument>, <argument><expr><name>cn_idx</name></expr></argument>, <argument><expr><name>fn_idx</name></expr></argument>, <argument><expr><name>ft_idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_java_unmangle_without_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>descriptor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_unmangle</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>r_bin_java_print_stack_map_append_frame_summary</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ptrList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaVerificationObj</name> <modifier>*</modifier></type><name>ver_obj</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">"Stack Map Frame Information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Tag Value = 0x%02x Name: %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RBinJavaStackMapFrameMetas</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Offset: 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variable Count = 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>number_of_locals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Local Variables:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptrList</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>local_items</name></name></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>ptrList</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>ver_obj</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_verification_info_summary</name> <argument_list>(<argument><expr><name>ver_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Stack Items Count = 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>number_of_stack_items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eprintf</name> <argument_list>(<argument><expr><literal type="string">" Stack Items:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptrList</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>stack_items</name></name></expr>;</expr_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>ptrList</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>ver_obj</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_java_print_verification_info_summary</name> <argument_list>(<argument><expr><name>ver_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>r_bin_java_stack_frame_default_free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type><name>stack_frame</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>stack_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>stack_frame</name><operator>-&gt;</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>stack_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>r_bin_java_stack_frame_do_nothing_free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stack_frame</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>r_bin_java_stack_frame_do_nothing_new</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinJavaStackMapFrame</name> <modifier>*</modifier></type> <name>stack_frame</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>R_API</name> <name>RBinJavaCPTypeMetas</name> <modifier>*</modifier><name>U</name></type>(<name>r_bin_java_get_cp_meta_from_tag</name>)<parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinJavaCPTypeMetas</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_BIN_JAVA_CP_METAS_SZ</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>&amp;</operator><name><name>R_BIN_JAVA_CP_METAS</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier><name>U</name></type>(<name>r_bin_java_cp_append_ref_cname_fname_ftype</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type> <name>out_sz</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>c_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>f_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>t_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>cn_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fn_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ft_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>total_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>cn_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fn_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ft_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bytes</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cn_bytes</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fn_bytes</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ft_bytes</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cref_bytes</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fref_bytes</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fnt_bytes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cn_bytes</name> <operator>=</operator> <call><name>r_bin_java_cp_get_utf8</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_CP_UTF8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cn_len</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <name>cname</name></expr></argument>, <argument><expr><name>c_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cn_idx</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>cp_idx</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cn_bytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fn_bytes</name> <operator>=</operator> <call><name>r_bin_java_cp_get_utf8</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_CP_UTF8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fn_len</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <name>fname</name></expr></argument>, <argument><expr><name>f_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fn_idx</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>cp_idx</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fn_bytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ft_bytes</name> <operator>=</operator> <call><name>r_bin_java_cp_get_utf8</name> <argument_list>(<argument><expr><name>R_BIN_JAVA_CP_UTF8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ft_len</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <name>tname</name></expr></argument>, <argument><expr><name>t_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ft_idx</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>cp_idx</name></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cn_bytes</name> <operator>&amp;&amp;</operator> <name>fn_bytes</name> <operator>&amp;&amp;</operator> <name>ft_bytes</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>cref_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fnt_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fref_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>cref_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fnt_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cref_bytes</name> <operator>=</operator> <call><name>r_bin_java_cp_get_classref</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cref_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cn_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cref_idx</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>cp_idx</name></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fnt_bytes</name> <operator>=</operator> <call><name>r_bin_java_cp_get_name_type</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fnt_len</name></expr></argument>, <argument><expr><name>fn_idx</name></expr></argument>, <argument><expr><name>ft_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fnt_idx</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>cp_idx</name></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fref_bytes</name> <operator>=</operator> <call><name>r_bin_java_cp_get_2_ut16</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fref_len</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>cref_idx</name></expr></argument>, <argument><expr><name>fnt_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cref_bytes</name> <operator>&amp;&amp;</operator> <name>fref_bytes</name> <operator>&amp;&amp;</operator> <name>fnt_bytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>total_len</name> <operator>=</operator> <name>cn_len</name> <operator>+</operator> <name>fn_len</name> <operator>+</operator> <name>ft_len</name> <operator>+</operator> <name>cref_len</name> <operator>+</operator> <name>fnt_len</name> <operator>+</operator> <name>fref_len</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>total_len</name> <operator>&lt;</operator> <name>cn_len</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>total_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>out_sz</name> <operator>+</operator> <name>cn_len</name> <operator>&gt;=</operator> <name>total_len</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cn_bytes</name> <operator>+</operator> <operator>*</operator><name>out_sz</name></expr></argument>, <argument><expr><name>cn_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>+=</operator> <name>cn_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>out_sz</name> <operator>+</operator> <name>fn_len</name> <operator>&gt;=</operator> <name>total_len</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>fn_bytes</name> <operator>+</operator> <operator>*</operator><name>out_sz</name></expr></argument>, <argument><expr><name>fn_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>+=</operator> <name>fn_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>out_sz</name> <operator>+</operator> <name>ft_len</name> <operator>&gt;=</operator> <name>total_len</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>ft_bytes</name> <operator>+</operator> <operator>*</operator><name>out_sz</name></expr></argument>, <argument><expr><name>ft_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>+=</operator> <name>ft_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>out_sz</name> <operator>+</operator> <name>cref_len</name> <operator>&gt;=</operator> <name>total_len</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cref_bytes</name> <operator>+</operator> <operator>*</operator><name>out_sz</name></expr></argument>, <argument><expr><name>cref_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>+=</operator> <name>fn_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>out_sz</name> <operator>+</operator> <name>fnt_len</name> <operator>&gt;=</operator> <name>total_len</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>fnt_bytes</name> <operator>+</operator> <operator>*</operator><name>out_sz</name></expr></argument>, <argument><expr><name>fnt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>+=</operator> <name>fnt_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>out_sz</name> <operator>+</operator> <name>fref_len</name> <operator>&gt;=</operator> <name>total_len</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>fref_bytes</name> <operator>+</operator> <operator>*</operator><name>out_sz</name></expr></argument>, <argument><expr><name>fref_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>+=</operator> <name>fref_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<label><name>beach</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cn_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ft_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fn_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fnt_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fref_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cref_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bytes</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier><name>U</name></type>(<name>r_bin_java_cp_get_method_ref</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type> <name>out_sz</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>class_idx</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>name_and_type_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_cp_get_fm_ref</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>out_sz</name></expr></argument>, <argument><expr><name>R_BIN_JAVA_CP_METHODREF</name></expr></argument>, <argument><expr><name>class_idx</name></expr></argument>, <argument><expr><name>name_and_type_idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier><name>U</name></type>(<name>r_bin_java_cp_get_field_ref</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type> <name>out_sz</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>class_idx</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>name_and_type_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_cp_get_fm_ref</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>out_sz</name></expr></argument>, <argument><expr><name>R_BIN_JAVA_CP_FIELDREF</name></expr></argument>, <argument><expr><name>class_idx</name></expr></argument>, <argument><expr><name>name_and_type_idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>deinit_java_type_null</name>)<parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>R_BIN_JAVA_NULL_TYPE</name><operator>.</operator><name>metas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>r_bin_java_get_item_from_cp</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>i</name></expr></argument> &gt;</argument_list></name> <name><name>bin</name><operator>-&gt;</operator><name>cf</name><operator>.</operator><name>cp_count</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>R_BIN_JAVA_NULL_TYPE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator><name>RBinJavaCPTypeObj</name> <operator>*</operator><operator>)</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cp_list</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>obj</name></expr> ?</condition><then> <expr><name>obj</name></expr> </then><else>: <expr><operator>&amp;</operator><name>R_BIN_JAVA_NULL_TYPE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>copy_type_info_to_stack_frame_list</name>)<parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type> <name>type_list</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type> <name>sf_list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaVerificationObj</name> <modifier>*</modifier></type><name>ver_obj</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new_ver_obj</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>type_list</name> <operator>||</operator> <operator>!</operator><name>sf_list</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>type_list</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>ver_obj</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>new_ver_obj</name> <operator>=</operator> <operator>(</operator><name>RBinJavaVerificationObj</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaVerificationObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_ver_obj</name> <operator>&amp;&amp;</operator> <name>ver_obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>new_ver_obj</name></expr></argument>, <argument><expr><name>ver_obj</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaVerificationObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_append</name> <argument_list>(<argument><expr><name>sf_list</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>new_ver_obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>new_ver_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>new_ver_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>copy_type_info_to_stack_frame_list_up_to_idx</name>)<parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type> <name>type_list</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type> <name>sf_list</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaVerificationObj</name> <modifier>*</modifier></type><name>ver_obj</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new_ver_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>type_list</name> <operator>||</operator> <operator>!</operator><name>sf_list</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>type_list</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>ver_obj</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>new_ver_obj</name> <operator>=</operator> <operator>(</operator><name>RBinJavaVerificationObj</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaVerificationObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_ver_obj</name> <operator>&amp;&amp;</operator> <name>ver_obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>new_ver_obj</name></expr></argument>, <argument><expr><name>ver_obj</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinJavaVerificationObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_append</name> <argument_list>(<argument><expr><name>sf_list</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>new_ver_obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>new_ver_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>new_ver_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_bin_java_cp_get_idx_bytes</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name> <init>= <expr><call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp_obj</name> <operator>||</operator> <operator>!</operator><name>out_sz</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>out_sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_BIN_JAVA_CP_INTEGER</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_CP_FLOAT</name></expr>:</case>
<return>return <expr><call><name>r_bin_java_cp_get_4bytes</name> <argument_list>(<argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name>out_sz</name></expr></argument>, <argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_integer</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>R_BIN_JAVA_CP_LONG</name></expr>:</case>
<case>case <expr><name>R_BIN_JAVA_CP_DOUBLE</name></expr>:</case>
<return>return <expr><call><name>r_bin_java_cp_get_4bytes</name> <argument_list>(<argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name>out_sz</name></expr></argument>, <argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_long</name><operator>.</operator><name>bytes</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>R_BIN_JAVA_CP_UTF8</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_bin_java_cp_get_utf8</name> <argument_list>(<argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name>out_sz</name></expr></argument>,
<argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bin_java_valid_class</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaObj</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur_bin</name> <init>= <expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>r_bin_java_load_bin</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>calc_size</name></name> <operator>==</operator> <name>buf_sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_bin_java_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>R_BIN_JAVA_GLOBAL_BIN</name> <operator>=</operator> <name>cur_bin</name></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_java_calc_class_size</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinJavaObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>cur_bin</name> <init>= <expr><name>R_BIN_JAVA_GLOBAL_BIN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>bin_size</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bin</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_bin_java_load_bin</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bin_size</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>calc_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_bin_java_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>R_BIN_JAVA_GLOBAL_BIN</name> <operator>=</operator> <name>cur_bin</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>bin_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name> <name>U</name></type>(<name>r_bin_java_get_cp_idx_with_name</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type> <name>bin_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin_obj-&gt;cp_list</argument>, <argument>iter</argument>, <argument>obj</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_UTF8</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>ord</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_java_external_printf</name><parameter_list>(<parameter><decl><type><name>PrintfCallback</name></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Eprintf</name> <operator>=</operator> <ternary><condition><expr><name>cb</name></expr> ?</condition><then> <expr><name>cb</name></expr> </then><else>: <expr><operator>(</operator><name>PrintfCallback</name><operator>)</operator> <name>printf</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
