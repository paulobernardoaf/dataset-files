<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\java\dsojson.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dsojson.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"class.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>char</name> <modifier>*</modifier></type> <name>dso_json_dict_entry_to_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonDictEntry</name> <modifier>*</modifier></type> <name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type> <name>dso_json_list_to_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type> <name>dso_json_dict_to_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonDict</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type> <name>dso_json_num_to_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonNum</name> <modifier>*</modifier></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type> <name>dso_json_str_to_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonStr</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cmpDsoStr_to_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonStr</name> <modifier>*</modifier></type><name>dsoStr1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dsoStr2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>DsoJsonInfo</name><modifier>*</modifier></type> <name>get_type_info</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>dso_json_get_str_data</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dso_obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>DsoJsonStr</name> <modifier>*</modifier></type> <name>dso_json_get_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dso_obj</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>DsoJsonInfo</name></type> <name><name>DSO_JSON_INFOS</name> <index>[]</index></name><init>= <expr><block>{
<expr><block>{<expr><name>DSO_JSON_NULL</name></expr>}</block></expr>,
<expr><block>{<expr><name>DSO_JSON_NUM</name></expr>}</block></expr>,
<expr><block>{<expr><name>DSO_JSON_STR</name></expr>}</block></expr>,
<expr><block>{<expr><name>DSO_JSON_LIST</name></expr>}</block></expr>,
<expr><block>{<expr><name>DSO_JSON_DICT</name></expr>}</block></expr>,
<expr><block>{<expr><name>DSO_JSON_DICT_ENTRY</name></expr>}</block></expr>,
<expr><block>{<expr><name>DSO_JSON_END</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>build_str_list_from_iterable</name> <parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>the_list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type> <name>res</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>json_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>the_list</argument>, <argument>iter</argument>, <argument>json_obj</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>dso_json_obj_to_str</name> <argument_list>(<argument><expr><name>json_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>build_str_from_str_list_for_iterable</name> <parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>the_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_array</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>str_list</name> <init>= <expr><call><name>build_str_list_from_iterable</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>str_list</argument>, <argument>iter</argument>, <argument>str</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_array</name></expr>?</condition><then> <expr><literal type="string">"["</literal></expr></then><else>: <expr><literal type="string">"{"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>str_list</argument>, <argument>iter</argument>, <argument>str</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>res</name><operator>+</operator><name>pos</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>,
<argument><expr><name>str</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>iter</name><operator>-&gt;</operator><name>n</name></name></expr>?</condition><then> <expr><literal type="string">","</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_array</name></expr>?</condition><then><expr><literal type="string">"]"</literal></expr></then><else>: <expr><literal type="string">"}"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>str_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_type</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>y</name> <operator>&amp;&amp;</operator> <name><name>y</name><operator>-&gt;</operator><name>info</name></name><operator>)</operator></expr>?</condition><then> <expr><name><name>y</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>type</name></name></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dso_json_is_null</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>get_type</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DSO_JSON_NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dso_json_is_list</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>get_type</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DSO_JSON_LIST</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dso_json_is_dict_entry</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>get_type</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DSO_JSON_DICT_ENTRY</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ut8</name></type> <name>dso_json_char_needs_hexing</name> <parameter_list>( <parameter><decl><type><name>ut8</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x7f</literal></expr>:</case>
<case>case <expr><literal type="number">0x81</literal></expr>:</case>
<case>case <expr><literal type="number">0x8F</literal></expr>:</case>
<case>case <expr><literal type="number">0x90</literal></expr>:</case>
<case>case <expr><literal type="number">0x9D</literal></expr>:</case>
<case>case <expr><literal type="number">0xA0</literal></expr>:</case>
<case>case <expr><literal type="number">0xAD</literal></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>dso_json_obj_to_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type> <name>dso_obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dso_obj</name> <operator>&amp;&amp;</operator> <name><name>dso_obj</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dso_obj</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DSO_JSON_NULL</name></expr>:</case> <return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>DSO_JSON_NUM</name></expr>:</case> <return>return <expr><call><name>dso_json_num_to_str</name> <argument_list>(<argument><expr><name><name>dso_obj</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_num</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>DSO_JSON_STR</name></expr>:</case> <return>return <expr><call><name>dso_json_str_to_str</name> <argument_list>(<argument><expr><name><name>dso_obj</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_str</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>DSO_JSON_LIST</name></expr>:</case> <return>return <expr><call><name>dso_json_list_to_str</name> <argument_list>(<argument><expr><name><name>dso_obj</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_list</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>DSO_JSON_DICT</name></expr>:</case> <return>return <expr><call><name>dso_json_dict_to_str</name> <argument_list>(<argument><expr><name><name>dso_obj</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>DSO_JSON_DICT_ENTRY</name></expr>:</case> <return>return <expr><call><name>dso_json_dict_entry_to_str</name> <argument_list>(<argument><expr><name><name>dso_obj</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict_entry</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dso_json_obj_del</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dso_obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dso_obj</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>dso_obj</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DSO_JSON_NULL</name></expr>:</case> <break>break;</break>
<case>case <expr><name>DSO_JSON_NUM</name></expr>:</case> <expr_stmt><expr><call><name>dso_json_num_free</name> <argument_list>(<argument><expr><name><name>dso_obj</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DSO_JSON_STR</name></expr>:</case> <expr_stmt><expr><call><name>dso_json_str_free</name> <argument_list>(<argument><expr><name><name>dso_obj</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DSO_JSON_LIST</name></expr>:</case> <expr_stmt><expr><call><name>dso_json_list_free</name> <argument_list>(<argument><expr><name>dso_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><name>DSO_JSON_DICT</name></expr>:</case> <expr_stmt><expr><call><name>dso_json_dict_free</name> <argument_list>(<argument><expr><name><name>dso_obj</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DSO_JSON_DICT_ENTRY</name></expr>:</case> <expr_stmt><expr><call><name>dso_json_dict_entry_free</name> <argument_list>(<argument><expr><name><name>dso_obj</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

free (dso_obj);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>DsoJsonInfo</name><modifier>*</modifier></type> <name>get_type_info</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name><name>DSO_JSON_INFOS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>DSO_JSON_END</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>DSO_JSON_INFOS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>&amp;</operator><name><name>DSO_JSON_INFOS</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmpDsoStr_to_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonStr</name> <modifier>*</modifier></type><name>dsoStr1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dsoStr2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dsoStr1</name> <operator>&amp;&amp;</operator> <name><name>dsoStr1</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name>dsoStr2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>dsoStr1</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>dsoStr2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>allocDsoStr</name> <parameter_list>(<parameter><decl><type><name>DsoJsonStr</name> <modifier>*</modifier></type><name>dsoStr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>dsoStr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dsoStr</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>dsoStr</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>dsoStr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>dso_json_get_list</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dso_obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>the_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dso_obj</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dso_obj</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DSO_JSON_LIST</name></expr>:</case> <expr_stmt><expr><name>the_list</name> <operator>=</operator> <name><name>dso_obj</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_list</name><operator>-&gt;</operator><name>json_list</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DSO_JSON_DICT</name></expr>:</case> <expr_stmt><expr><name>the_list</name> <operator>=</operator> <name><name>dso_obj</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict</name><operator>-&gt;</operator><name>json_dict</name></name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>the_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>dso_json_get_str_data</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dso_obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonStr</name> <modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>dso_json_get_str</name> <argument_list>(<argument><expr><name>dso_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DsoJsonStr</name> <modifier>*</modifier></type> <name>dso_json_get_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dso_obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonStr</name> <modifier>*</modifier></type> <name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dso_obj</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dso_obj</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DSO_JSON_STR</name></expr>:</case> <expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>dso_obj</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_str</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DSO_JSON_DICT_ENTRY</name></expr>:</case> <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>dso_json_get_str</name> <argument_list>(<argument><expr><name><name>dso_obj</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict_entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DsoJsonObj</name> <modifier>*</modifier></type> <name>dso_json_null_new</name> <parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>DsoJsonObj</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>get_type_info</name> <argument_list>(<argument><expr><name>DSO_JSON_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dso_json_null_free</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>DsoJsonObj</name> <modifier>*</modifier></type> <name>dso_json_str_new</name> <parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>dso_json_null_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>get_type_info</name> <argument_list>(<argument><expr><name>DSO_JSON_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_str</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>DsoJsonStr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dso_json_str_free</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonStr</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>(</operator><name>DsoJsonStr</name> <operator>*</operator><operator>)</operator><name>y</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>DsoJsonObj</name> <modifier>*</modifier></type> <name>dso_json_dict_entry_new</name> <parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>dso_json_null_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>get_type_info</name> <argument_list>(<argument><expr><name>DSO_JSON_DICT_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict_entry</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>DsoJsonDictEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict_entry</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dso_json_null_free</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict_entry</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>dso_json_str_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict_entry</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>dso_json_null_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DsoJsonObj</name> <modifier>*</modifier></type> <name>dso_json_dict_entry_new_from_key_obj_val_obj</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>dso_json_dict_entry_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict_entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict_entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict_entry</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict_entry</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>
<function><type><name>void</name></type> <name>dso_json_dict_entry_free</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonDictEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>DsoJsonDictEntry</name> <operator>*</operator><operator>)</operator><name>y</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>dso_json_dict_entry_to_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonDictEntry</name> <modifier>*</modifier></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>dso_json_obj_to_str</name> <argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>dso_json_obj_to_str</name> <argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s:\"\""</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_entry_set_key_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type> <name>entry_obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dso_json_is_dict_entry</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonDictEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>DsoJsonDictEntry</name> <operator>*</operator><operator>)</operator><name>entry_obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>o_key</name> <init>= <expr><call><name>dso_json_str_new_from_str</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>o_key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_entry_set_key_str_len</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type> <name>entry_obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dso_json_is_dict_entry</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonDictEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>DsoJsonDictEntry</name> <operator>*</operator><operator>)</operator><name>entry_obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>o_key</name> <init>= <expr><call><name>dso_json_str_new_from_str_len</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>o_key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_entry_set_key_num</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type> <name>entry_obj</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dso_json_is_dict_entry</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonDictEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>DsoJsonDictEntry</name> <operator>*</operator><operator>)</operator><name>entry_obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>o_key</name> <init>= <expr><call><name>dso_json_num_new_from_num</name> <argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>o_key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_entry_value_append_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>entry_obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dso_json_is_dict_entry</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>o_str</name> <init>= <expr><call><name>dso_json_str_new_from_str</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dso_json_dict_entry_value_append_obj</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>, <argument><expr><name>o_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name>o_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_entry_value_append_str_len</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>entry_obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dso_json_is_dict_entry</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>o_str</name> <init>= <expr><call><name>dso_json_str_new_from_str_len</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dso_json_dict_entry_value_append_obj</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>, <argument><expr><name>o_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name>o_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_entry_value_append_num</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>entry_obj</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dso_json_is_dict_entry</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>o_num</name> <init>= <expr><call><name>dso_json_num_new_from_num</name> <argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dso_json_dict_entry_value_append_obj</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>, <argument><expr><name>o_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name>o_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_entry_value_append_obj</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>entry_obj</name></decl></parameter>, <parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dso_json_is_dict_entry</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonDictEntry</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>entry_obj</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict_entry</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>dso_json_is_null</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>new_list</name> <init>= <expr><call><name>dso_json_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>new_list</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>dso_json_is_list</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>x</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>dso_json_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_list_append</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dso_json_is_list</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dso_json_list_append</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_entry_value_set_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>entry_obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dso_json_is_dict_entry</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>o_val</name> <init>= <expr><call><name>dso_json_str_new_from_str</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dso_json_dict_entry_value_set_obj</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>, <argument><expr><name>o_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_entry_value_set_str_len</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>entry_obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dso_json_is_dict_entry</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>o_val</name> <init>= <expr><call><name>dso_json_str_new_from_str_len</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dso_json_dict_entry_value_set_obj</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>, <argument><expr><name>o_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_entry_value_set_num</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>entry_obj</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dso_json_is_dict_entry</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>o_val</name> <init>= <expr><call><name>dso_json_num_new_from_num</name> <argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dso_json_dict_entry_value_set_obj</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>, <argument><expr><name>o_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_entry_value_set_empty_dict</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>entry_obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dso_json_is_dict_entry</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>o_val</name> <init>= <expr><call><name>dso_json_dict_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dso_json_dict_entry_value_set_obj</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>, <argument><expr><name>o_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_entry_value_set_empty_list</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>entry_obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dso_json_is_dict_entry</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>o_val</name> <init>= <expr><call><name>dso_json_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dso_json_dict_entry_value_set_obj</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>, <argument><expr><name>o_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_entry_value_set_obj</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>entry_obj</name></decl></parameter>, <parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dso_json_is_dict_entry</name> <argument_list>(<argument><expr><name>entry_obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonDictEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>entry_obj</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict_entry</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DsoJsonObj</name> <modifier>*</modifier></type> <name>dso_json_list_new</name> <parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>dso_json_null_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>get_type_info</name> <argument_list>(<argument><expr><name>DSO_JSON_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_list</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>DsoJsonList</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_list</name><operator>-&gt;</operator><name>json_list</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>dso_json_obj_del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dso_json_list_free</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_list</name></name> <operator>&amp;&amp;</operator> <name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_list</name><operator>-&gt;</operator><name>json_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_list</name><operator>-&gt;</operator><name>json_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_list</name><operator>-&gt;</operator><name>json_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>dso_json_list_to_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>list</name> <operator>&amp;&amp;</operator> <name><name>list</name><operator>-&gt;</operator><name>json_list</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>build_str_from_str_list_for_iterable</name> <argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>json_list</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"[]"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_list_append</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>list_obj</name></decl></parameter>, <parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_type</name> <argument_list>(<argument><expr><name>list_obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DSO_JSON_LIST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonList</name> <modifier>*</modifier></type> <name>list</name> <init>= <expr><name><name>list_obj</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_list</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>json_list</name></name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_list_append_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>list_obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_type</name> <argument_list>(<argument><expr><name>list_obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DSO_JSON_LIST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>dso_json_str_new_from_str</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>dso_json_list_append</name> <argument_list>(<argument><expr><name>list_obj</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_list_append_num</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>list_obj</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_type</name> <argument_list>(<argument><expr><name>list_obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DSO_JSON_LIST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>dso_json_num_new_from_num</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>dso_json_list_append</name> <argument_list>(<argument><expr><name>list_obj</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DsoJsonObj</name> <modifier>*</modifier></type> <name>dso_json_dict_new</name> <parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>dso_json_null_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>get_type_info</name> <argument_list>(<argument><expr><name>DSO_JSON_DICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>DsoJsonDict</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dso_json_null_free</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict</name><operator>-&gt;</operator><name>json_dict</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>dso_json_obj_del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dso_json_dict_free</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonDict</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>(</operator><name>DsoJsonDict</name> <operator>*</operator><operator>)</operator><name>y</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;&amp;</operator> <name><name>x</name><operator>-&gt;</operator><name>json_dict</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>json_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>json_dict</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>dso_json_dict_to_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonDict</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>&amp;&amp;</operator> <name><name>dict</name><operator>-&gt;</operator><name>json_dict</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>build_str_from_str_list_for_iterable</name> <argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>json_dict</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"{}"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_insert_str_key_obj</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>val_obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>key_obj</name> <init>= <expr><call><name>dso_json_str_new_from_str</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>dso_json_dict_insert_key_obj</name> <argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key_obj</name></expr></argument>, <argument><expr><name>val_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name>key_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_insert_str_key_num</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>key_obj</name> <init>= <expr><call><name>dso_json_str_new_from_str</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>val_obj</name> <init>= <expr><call><name>dso_json_num_new_from_num</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>dso_json_dict_insert_key_obj</name> <argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key_obj</name></expr></argument>, <argument><expr><name>val_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name>key_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_insert_str_key_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>key_obj</name> <init>= <expr><call><name>dso_json_str_new_from_str</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>val_obj</name> <init>= <expr><call><name>dso_json_str_new_from_str</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>dso_json_dict_insert_key_obj</name> <argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key_obj</name></expr></argument>, <argument><expr><name>val_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name>key_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>dso_json_dict_insert_num_key_obj</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>val_obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>key_obj</name> <init>= <expr><call><name>dso_json_str_new_from_num</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>dso_json_dict_insert_key_obj</name> <argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key_obj</name></expr></argument>, <argument><expr><name>val_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name>key_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>dso_json_dict_insert_num_key_num</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>key_obj</name> <init>= <expr><call><name>dso_json_str_new_from_num</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>val_obj</name> <init>= <expr><call><name>dso_json_num_new_from_num</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>dso_json_dict_insert_key_obj</name> <argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key_obj</name></expr></argument>, <argument><expr><name>val_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name>key_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_insert_num_key_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>key_obj</name> <init>= <expr><call><name>dso_json_str_new_from_num</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>val_obj</name> <init>= <expr><call><name>dso_json_str_new_from_str</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>dso_json_dict_insert_key_obj</name> <argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key_obj</name></expr></argument>, <argument><expr><name>val_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name>key_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>dso_json_dict_insert_key_obj</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>the_list</name> <init>= <expr><call><name>dso_json_get_list</name> <argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>the_list</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_type</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DSO_JSON_STR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>dso_json_null_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <name>key</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>dso_json_dict_contains_key_obj</name> <argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>dso_json_dict_entry_new_from_key_obj_val_obj</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <name>key</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>dso_json_dict_remove_key_obj</name> <argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>dso_json_dict_entry_new_from_key_obj_val_obj</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dso_json_dict_free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_remove_key_obj</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dso_json_dict_remove_key_str</name> <argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>dso_json_get_str_data</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_remove_key_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dso_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>the_list</name> <init>= <expr><call><name>dso_json_get_list</name> <argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>the_list</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>the_list</argument>, <argument>iter</argument>, <argument>dso_obj</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_type</name> <argument_list>(<argument><expr><name>dso_obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DSO_JSON_DICT_ENTRY</name> <operator>&amp;&amp;</operator>
<call><name>get_type</name> <argument_list>(<argument><expr><name><name>dso_obj</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict_entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DSO_JSON_STR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cmpDsoStr_to_str</name> <argument_list>(<argument><expr><call><name>dso_json_get_str</name> <argument_list>(<argument><expr><name>dso_obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_contains_key_obj</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dso_json_dict_contains_key_str</name> <argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>dso_json_get_str_data</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dso_json_dict_contains_key_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>dso_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>the_list</name> <init>= <expr><call><name>dso_json_get_list</name> <argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>the_list</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>the_list</argument>, <argument>iter</argument>, <argument>dso_obj</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_type</name> <argument_list>(<argument><expr><name>dso_obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DSO_JSON_DICT_ENTRY</name> <operator>&amp;&amp;</operator>
<call><name>get_type</name> <argument_list>(<argument><expr><name><name>dso_obj</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_dict_entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DSO_JSON_STR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cmpDsoStr_to_str</name> <argument_list>(<argument><expr><call><name>dso_json_get_str</name> <argument_list>(<argument><expr><name>dso_obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>DsoJsonObj</name> <modifier>*</modifier></type> <name>dso_json_num_new</name> <parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>dso_json_null_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>get_type_info</name> <argument_list>(<argument><expr><name>DSO_JSON_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_num</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>DsoJsonNum</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dso_json_num_free</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonNum</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>(</operator><name>DsoJsonNum</name> <operator>*</operator><operator>)</operator><name>y</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>dso_json_num_to_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonNum</name> <modifier>*</modifier></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name><name>num</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>DsoJsonObj</name> <modifier>*</modifier></type> <name>dso_json_num_new_from_num</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>dso_json_num_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>dso_json_convert_string</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>str_sz</name> <init>= <expr><literal type="number">4</literal><operator>*</operator><name>len</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cpy_buffer</name> <init>= <expr><ternary><condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>str_sz</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cpy_buffer</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>cpy_buffer</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cpy_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bytes</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>cpy_buffer</name><operator>+</operator><name>pos</name></expr></argument>, <argument><expr><literal type="string">"\\%c"</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>dso_json_char_needs_hexing</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>cpy_buffer</name><operator>+</operator><name>pos</name></expr></argument>, <argument><expr><literal type="string">"\\x%02x"</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>cpy_buffer</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>bytes</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>cpy_buffer</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cpy_buffer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>dso_json_str_to_str</name> <parameter_list>(<parameter><decl><type><name>DsoJsonStr</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>str</name><operator>-&gt;</operator><name>len</name></name><operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>dso_json_convert_string</name> <argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DsoJsonObj</name> <modifier>*</modifier></type> <name>dso_json_str_new_from_str</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>dso_json_str_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>DsoJsonStr</name> <modifier>*</modifier></type> <name>dsoStr</name> <init>= <expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_str</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>allocDsoStr</name> <argument_list>(<argument><expr><name>dsoStr</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dsoStr</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>dsoStr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>dsoStr</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DsoJsonObj</name> <modifier>*</modifier></type> <name>dso_json_str_new_from_str_len</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>dso_json_str_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>DsoJsonStr</name> <modifier>*</modifier></type> <name>dsoStr</name> <init>= <expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_str</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>allocDsoStr</name> <argument_list>(<argument><expr><name>dsoStr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>dsoStr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>dsoStr</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DsoJsonObj</name> <modifier>*</modifier></type> <name>dso_json_str_new_from_num</name> <parameter_list>(<parameter><decl><type><name>long</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>dso_json_str_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>DsoJsonStr</name> <modifier>*</modifier></type> <name>dsoStr</name> <init>= <expr><name><name>x</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>_str</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>allocDsoStr</name> <argument_list>(<argument><expr><name>dsoStr</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>dsoStr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>dsoStr</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
</unit>
