<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\rar\cpu.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eprintf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr,x,##__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIPSPACES</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (x) while (*x==' '||*x=='\t') x++</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>skipspaces</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>SKIPSPACES</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>x</name></expr>;</return> </block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>getreg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'r'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>&lt;</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
}</block></struct></type> <name>Bitbuf</name>;</typedef>



<function><type><specifier>static</specifier> <name>int</name></type> <name>bitget</name><parameter_list>(<parameter><decl><type><name>Bitbuf</name> <modifier>*</modifier></type><name>bb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bit</name><operator>&gt;=</operator><name><name>bb</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>bb</name><operator>-&gt;</operator><name>out</name><index>[<expr><name>bit</name><operator>/</operator><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><operator>(</operator><name>bit</name><operator>%</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bitadd</name><parameter_list>(<parameter><decl><type><name>Bitbuf</name> <modifier>*</modifier></type><name>bb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>bb</name><operator>-&gt;</operator><name>bits</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name><name>bb</name><operator>-&gt;</operator><name>bits</name></name><operator>+</operator><name>i</name><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <operator>(</operator><name><name>bb</name><operator>-&gt;</operator><name>bits</name></name><operator>+</operator><name>i</name><operator>)</operator><operator>%</operator><literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bit</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>out</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>v</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>n</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>out</name><index>[<expr><name>b</name></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>bit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_BYTE</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_JUMP</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_PROC</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOPS</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define>
<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
}</block> <decl><name><name>opcodes</name> <index>[<expr><name>NOPS</name></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"mov"</literal></expr>, <expr><literal type="number">3</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cmp"</literal></expr>, <expr><literal type="number">3</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"add"</literal></expr>, <expr><literal type="number">3</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sub"</literal></expr>, <expr><literal type="number">1</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"jz"</literal></expr>, <expr><literal type="number">1</literal><operator>|</operator><name>T_JUMP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"jnz"</literal></expr>, <expr><literal type="number">1</literal><operator>|</operator><name>T_JUMP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"inc"</literal></expr>, <expr><literal type="number">1</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dec"</literal></expr>, <expr><literal type="number">1</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"jmp"</literal></expr>, <expr><literal type="number">1</literal><operator>|</operator><name>T_JUMP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xor"</literal></expr>, <expr><literal type="number">3</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"and"</literal></expr>, <expr><literal type="number">3</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"or"</literal></expr>, <expr><literal type="number">3</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"test"</literal></expr>, <expr><literal type="number">3</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"js"</literal></expr>, <expr><literal type="number">1</literal><operator>|</operator><name>T_JUMP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"jb"</literal></expr>, <expr><literal type="number">1</literal><operator>|</operator><name>T_JUMP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"jbe"</literal></expr>, <expr><literal type="number">1</literal><operator>|</operator><name>T_JUMP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ja"</literal></expr>, <expr><literal type="number">1</literal><operator>|</operator><name>T_JUMP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"jae"</literal></expr>, <expr><literal type="number">1</literal><operator>|</operator><name>T_JUMP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"push"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pop"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"call"</literal></expr>, <expr><literal type="number">1</literal><operator>|</operator><name>T_PROC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ret"</literal></expr>, <expr><name>T_PROC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"not"</literal></expr>, <expr><literal type="number">1</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"shl"</literal></expr>, <expr><literal type="number">3</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"shr"</literal></expr>, <expr><literal type="number">3</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sar"</literal></expr>, <expr><literal type="number">3</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"neg"</literal></expr>, <expr><literal type="number">1</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pusha"</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"popa"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pushf"</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"popf"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"movzx"</literal></expr>,<expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"movsx"</literal></expr>,<expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xchg"</literal></expr>, <expr><literal type="number">3</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mul"</literal></expr>, <expr><literal type="number">3</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"div"</literal></expr>, <expr><literal type="number">3</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"adc"</literal></expr>, <expr><literal type="number">3</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sbb"</literal></expr>, <expr><literal type="number">3</literal><operator>|</operator><name>T_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"print"</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"movb"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"movd"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cmpb"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cmpd"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"addb"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"addd"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"subb"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"subd"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"incb"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"incd"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"decb"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"decd"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"negb"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"negd"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int bitnum (Bitbuf *bb, int n, int c) {
int i, ret = 0;
if (n&lt;bb-&gt;bits)
for (i=0; i&lt;c; i++)
if (bitget (bb, n+i)&gt;0)
ret |= (1&lt;&lt;i);
return ret;
}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bitnum</name> <parameter_list>(<parameter><decl><type><name>Bitbuf</name> <modifier>*</modifier></type><name>bb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>&lt;</operator><name><name>bb</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>c</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>bitget</name> <argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>n</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>c</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opcode_str</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name><operator>&lt;</operator><name>NOPS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>opcodes</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>opcode_num</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>opcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>opcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
