<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\tcc\tcc.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_TCC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TCC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_types.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcc_config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CONFIG_TCCBOOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tccboot.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_TCC_STATIC</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CONFIG_TCCASSERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCC_ASSERT</name><parameter_list>(<parameter><type><name>ex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert(ex)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCC_ASSERT</name><parameter_list>(<parameter><type><name>ex</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__HAIKU__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CONFIG_TCC_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/timeb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>UINT_PTR</name></type> <name>uintptr_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro> <cpp:value>__inline</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inp</name></cpp:macro> <cpp:value>next_inp</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBTCC_AS_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBTCCAPI</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUB_FUNC</name></cpp:macro> <cpp:value>LIBTCCAPI</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_BINARY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libtcc.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>uint8_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name> <name>int</name></type> <name>uint16_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>uint32_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>uint64_t</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>int8_t</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>int64_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDOUBLE_SIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDOUBLE_ALIGN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ALIGN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__HAIKU__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>uint64_t</name></type> <name>addr_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TCC_IS_NATIVE</name></cpp:undef>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CONFIG_SYSROOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_SYSROOT</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CONFIG_TCCDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_TCCDIR</name></cpp:macro> <cpp:value>"."</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CONFIG_LDDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_LDDIR</name></cpp:macro> <cpp:value>"lib"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CONFIG_TCC_CRTPREFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_TCC_CRTPREFIX</name></cpp:macro> <cpp:value>CONFIG_SYSROOT "/usr/" CONFIG_LDDIR</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CONFIG_TCC_SYSINCLUDEPATHS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCC_TARGET_PE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_TCC_SYSINCLUDEPATHS</name></cpp:macro> <cpp:value>"{B}/include;{B}/include/winapi"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>CONFIG_MULTIARCHDIR</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_TCC_SYSINCLUDEPATHS</name></cpp:macro> <cpp:value>CONFIG_SYSROOT "/usr/local/include" ":" CONFIG_SYSROOT "/usr/local/include/" CONFIG_MULTIARCHDIR ":" CONFIG_SYSROOT "/usr/include" ":" CONFIG_SYSROOT "/usr/include/" CONFIG_MULTIARCHDIR ":" "{B}/include"</cpp:value></cpp:define>





<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_TCC_SYSINCLUDEPATHS</name></cpp:macro> <cpp:value>CONFIG_SYSROOT "/usr/local/include" ":" CONFIG_SYSROOT "/usr/include" ":" "{B}/include"</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CONFIG_TCC_LIBPATHS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCC_TARGET_PE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_TCC_LIBPATHS</name></cpp:macro> <cpp:value>"{B}/lib;{B}"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_TCC_LIBPATHS</name></cpp:macro> <cpp:value>CONFIG_SYSROOT "/usr/" CONFIG_LDDIR ":" CONFIG_SYSROOT "/" CONFIG_LDDIR ":" CONFIG_SYSROOT "/usr/local/" CONFIG_LDDIR</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_NEW0</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type arg; ZERO_FILL(arg)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCLUDE_STACK_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFDEF_STACK_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSTACK_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_MAX_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACK_STACK_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_HASH_SIZE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_ALLOC_INCR</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_MAX_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 


<typedef>typedef <type><struct>struct <name>TokenSym</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>TokenSym</name></name> <modifier>*</modifier></type><name>hash_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Sym</name></name> <modifier>*</modifier></type><name>sym_define</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>Sym</name></name> <modifier>*</modifier></type><name>sym_label</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>Sym</name></name> <modifier>*</modifier></type><name>sym_struct</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>Sym</name></name> <modifier>*</modifier></type><name>sym_identifier</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tok</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>TokenSym</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCC_TARGET_PE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>nwchar_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>int</name></type> <name>nwchar_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>CString</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>size_allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data_allocated</name></decl>;</decl_stmt> 
}</block></struct></type> <name>CString</name>;</typedef>


<typedef>typedef <type><struct>struct <name>CType</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Sym</name></name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
}</block></struct></type> <name>CType</name>;</typedef>


<typedef>typedef <type><union>union <name>CValue</name> <block>{
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>ld</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ul</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>CString</name></name> <modifier>*</modifier></type><name>cstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>tab</name><index>[<expr><name>LDOUBLE_SIZE</name><operator>/</operator><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></union></type> <name>CValue</name>;</typedef>


<typedef>typedef <type><struct>struct <name>SValue</name> <block>{
<decl_stmt><decl><type><name>CType</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>r</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>r2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CValue</name></type> <name>c</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>Sym</name></name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt> 
}</block></struct></type> <name>SValue</name>;</typedef>


<typedef>typedef <type><struct>struct <name>Sym</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>asm_label</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r</name></decl>;</decl_stmt> 
<union>union <block>{
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>c</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt> 
}</block>;</union>
<decl_stmt><decl><type><name>CType</name></type> <name>type</name></decl>;</decl_stmt> 
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>Sym</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>jnext</name></decl>;</decl_stmt> 
}</block>;</union>
<decl_stmt><decl><type><name><name>struct</name> <name>Sym</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>Sym</name></name> <modifier>*</modifier></type><name>prev_tok</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Sym</name>;</typedef>


<typedef>typedef <type><struct>struct <name>AttributeDef</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>
<name>func_call</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>, 
<name>aligned</name> <range>: <expr><literal type="number">5</literal></expr></range>, 
<name>packed</name> <range>: <expr><literal type="number">1</literal></expr></range>,
<name>func_export</name> <range>: <expr><literal type="number">1</literal></expr></range>,
<name>func_import</name> <range>: <expr><literal type="number">1</literal></expr></range>,
<name>func_args</name> <range>: <expr><literal type="number">5</literal></expr></range>,
<name>mode</name> <range>: <expr><literal type="number">4</literal></expr></range>,
<name>weak</name> <range>: <expr><literal type="number">1</literal></expr></range>,
<name>fill</name> <range>: <expr><literal type="number">11</literal></expr></range>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alias_target</name></decl>;</decl_stmt> 
}</block></struct></type> <name>AttributeDef</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_CALL</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((AttributeDef*)&amp;(r))-&gt;func_call)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_EXPORT</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((AttributeDef*)&amp;(r))-&gt;func_export)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_IMPORT</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((AttributeDef*)&amp;(r))-&gt;func_import)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ARGS</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((AttributeDef*)&amp;(r))-&gt;func_args)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ALIGN</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((AttributeDef*)&amp;(r))-&gt;aligned)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_PACKED</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((AttributeDef*)&amp;(r))-&gt;packed)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_MODE</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((AttributeDef*)&amp;(r))-&gt;mode)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_ATTR</name><parameter_list>(<parameter><type><name>ad</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(int*)(ad))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYM_STRUCT</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYM_FIELD</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYM_FIRST_ANOM</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLA_SP_LOC_SET</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLA_SP_SAVED</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLA_NEED_NEW_FRAME</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLA_IN_SCOPE</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLA_SCOPE_FLAGS</name></cpp:macro> <cpp:value>(VLA_SP_SAVED|VLA_NEED_NEW_FRAME|VLA_IN_SCOPE)</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_NEW</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_OLD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_ELLIPSIS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_CDECL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_STDCALL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_FASTCALL1</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_FASTCALL2</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_FASTCALL3</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_FASTCALLW</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MACRO_OBJ</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MACRO_FUNC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LABEL_DEFINED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LABEL_FORWARD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LABEL_DECLARED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_ABSTRACT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_DIRECT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IO_BUF_SIZE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>BufferedFile</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>BufferedFile</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_num</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ifndef_macro</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ifndef_macro_saved</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ifdef_stack_ptr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><name>IO_BUF_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>BufferedFile</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CH_EOB</name></cpp:macro> <cpp:value>'\\'</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CH_EOF</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define> 



<typedef>typedef <type><struct>struct <name>ParseState</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>macro_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CValue</name></type> <name>tokc</name></decl>;</decl_stmt>
}</block></struct></type> <name>ParseState</name>;</typedef>


<typedef>typedef <type><struct>struct <name>TokenString</name> <block>{
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allocated_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_line_num</name></decl>;</decl_stmt>
}</block></struct></type> <name>TokenString</name>;</typedef>


<typedef>typedef <type><struct>struct <name>InlineFunc</name> <block>{
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>token_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>InlineFunc</name>;</typedef>



<typedef>typedef <type><struct>struct <name>CachedInclude</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ifndef_macro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash_next</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>CachedInclude</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHED_INCLUDES_HASH_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CONFIG_TCC_ASM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>ExprValue</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>
}</block></struct></type> <name>ExprValue</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ASM_OPERANDS</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>ASMOperand</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>constraint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>asm_str</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>SValue</name> <modifier>*</modifier></type><name>vt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ref_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>input_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>priority</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_llong</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_memory</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_rw</name></decl>;</decl_stmt> 
}</block></struct></type> <name>ASMOperand</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>sym_attr</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>got_offset</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCC_TARGET_ARM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>plt_thumb_stub</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<struct>struct <name>TCCState</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>verbose</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nostdinc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nostdlib</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nocommon</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>static_link</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>rdynamic</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>symbolic</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>alacarte_link</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tcc_lib_path</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>soname</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rpath</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>output_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>output_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>os</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>char_is_unsigned</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>leading_underscore</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>warn_write_strings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>warn_unsupported</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>warn_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>warn_none</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>warn_implicit_function_declaration</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>do_debug</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CONFIG_TCC_BCHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>do_bounds_check</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>addr_t</name></type> <name>text_addr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>has_text_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>init_symbol</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fini_symbol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>seg_size</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>include_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_include_paths</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sysinclude_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_sysinclude_paths</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>library_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_library_paths</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>crt_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_crt_paths</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>error_opaque</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>error_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>error_set_jmp_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmp_buf</name></type> <name>error_jmp_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_errors</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>ppfp</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>target_deps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_target_deps</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BufferedFile</name> <modifier>*</modifier></type><name><name>include_stack</name><index>[<expr><name>INCLUDE_STACK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BufferedFile</name> <modifier>*</modifier><modifier>*</modifier></type><name>include_stack_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>ifdef_stack</name><index>[<expr><name>IFDEF_STACK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ifdef_stack_ptr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name><name>cached_includes_hash</name><index>[<expr><name>CACHED_INCLUDES_HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CachedInclude</name> <modifier>*</modifier><modifier>*</modifier></type><name>cached_includes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_cached_includes</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name><name>pack_stack</name><index>[<expr><name>PACK_STACK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pack_stack_ptr</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>InlineFunc</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>inline_fns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_inline_fns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sym_attr</name></name> <modifier>*</modifier></type><name>sym_attrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_sym_attrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>symtab_to_dynsym</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>asm_labels</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nb_files</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nb_libraries</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outfile</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>option_m</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>print_search_dirs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>option_r</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>do_bench</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>gen_deps</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>deps_outfile</name></decl>;</decl_stmt> 
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_VALMASK</name></cpp:macro> <cpp:value>0x003f</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_CONST</name></cpp:macro> <cpp:value>0x0030</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_LLOCAL</name></cpp:macro> <cpp:value>0x0031</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_LOCAL</name></cpp:macro> <cpp:value>0x0032</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_CMP</name></cpp:macro> <cpp:value>0x0033</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_JMP</name></cpp:macro> <cpp:value>0x0034</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_JMPI</name></cpp:macro> <cpp:value>0x0035</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_REF</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_LVAL</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_SYM</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_MUSTCAST</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_MUSTBOUND</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_BOUNDED</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_LVAL_BYTE</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_LVAL_SHORT</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_LVAL_UNSIGNED</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_LVAL_TYPE</name></cpp:macro> <cpp:value>(VT_LVAL_BYTE | VT_LVAL_SHORT | VT_LVAL_UNSIGNED)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_BTYPE</name></cpp:macro> <cpp:value>0x000f</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_INT32</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_INT16</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_INT8</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_VOID</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_PTR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_ENUM</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_FUNC</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_STRUCT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_UNION</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_FLOAT</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_DOUBLE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_LDOUBLE</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_BOOL</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_INT64</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_LONG</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_QLONG</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_QFLOAT</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_UNSIGNED</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_ARRAY</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_BITFIELD</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_CONSTANT</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_VOLATILE</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_SIGNED</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_CHAR</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_VLA</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_EXTERN</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_STATIC</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_TYPEDEF</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_INLINE</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_IMPORT</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_EXPORT</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_WEAK</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_STRUCT_SHIFT</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_STORAGE</name></cpp:macro> <cpp:value>(VT_EXTERN | VT_STATIC | VT_TYPEDEF | VT_INLINE | VT_IMPORT | VT_EXPORT | VT_WEAK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_TYPE</name></cpp:macro> <cpp:value>(~(VT_STORAGE))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_ULT</name></cpp:macro> <cpp:value>0x92</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_UGE</name></cpp:macro> <cpp:value>0x93</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_EQ</name></cpp:macro> <cpp:value>0x94</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_NE</name></cpp:macro> <cpp:value>0x95</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_ULE</name></cpp:macro> <cpp:value>0x96</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_UGT</name></cpp:macro> <cpp:value>0x97</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_Nset</name></cpp:macro> <cpp:value>0x98</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_Nclear</name></cpp:macro> <cpp:value>0x99</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_LT</name></cpp:macro> <cpp:value>0x9c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_GE</name></cpp:macro> <cpp:value>0x9d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_LE</name></cpp:macro> <cpp:value>0x9e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_GT</name></cpp:macro> <cpp:value>0x9f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_LAND</name></cpp:macro> <cpp:value>0xa0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_LOR</name></cpp:macro> <cpp:value>0xa1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_DEC</name></cpp:macro> <cpp:value>0xa2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_MID</name></cpp:macro> <cpp:value>0xa3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_INC</name></cpp:macro> <cpp:value>0xa4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_UDIV</name></cpp:macro> <cpp:value>0xb0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_UMOD</name></cpp:macro> <cpp:value>0xb1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_PDIV</name></cpp:macro> <cpp:value>0xb2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_CINT</name></cpp:macro> <cpp:value>0xb3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_CCHAR</name></cpp:macro> <cpp:value>0xb4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_STR</name></cpp:macro> <cpp:value>0xb5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_TWOSHARPS</name></cpp:macro> <cpp:value>0xb6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_LCHAR</name></cpp:macro> <cpp:value>0xb7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_LSTR</name></cpp:macro> <cpp:value>0xb8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_CFLOAT</name></cpp:macro> <cpp:value>0xb9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_LINENUM</name></cpp:macro> <cpp:value>0xba</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_CDOUBLE</name></cpp:macro> <cpp:value>0xc0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_CLDOUBLE</name></cpp:macro> <cpp:value>0xc1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_UMULL</name></cpp:macro> <cpp:value>0xc2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_ADDC1</name></cpp:macro> <cpp:value>0xc3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_ADDC2</name></cpp:macro> <cpp:value>0xc4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_SUBC1</name></cpp:macro> <cpp:value>0xc5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_SUBC2</name></cpp:macro> <cpp:value>0xc6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_CUINT</name></cpp:macro> <cpp:value>0xc8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_CLLONG</name></cpp:macro> <cpp:value>0xc9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_CULLONG</name></cpp:macro> <cpp:value>0xca</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_ARROW</name></cpp:macro> <cpp:value>0xcb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_DOTS</name></cpp:macro> <cpp:value>0xcc</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_SHR</name></cpp:macro> <cpp:value>0xcd</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_PPNUM</name></cpp:macro> <cpp:value>0xce</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_NOSUBST</name></cpp:macro> <cpp:value>0xcf</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_SHL</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_SAR</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_A_MOD</name></cpp:macro> <cpp:value>0xa5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_A_AND</name></cpp:macro> <cpp:value>0xa6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_A_MUL</name></cpp:macro> <cpp:value>0xaa</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_A_ADD</name></cpp:macro> <cpp:value>0xab</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_A_SUB</name></cpp:macro> <cpp:value>0xad</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_A_DIV</name></cpp:macro> <cpp:value>0xaf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_A_XOR</name></cpp:macro> <cpp:value>0xde</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_A_OR</name></cpp:macro> <cpp:value>0xfc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_A_SHL</name></cpp:macro> <cpp:value>0x81</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_A_SAR</name></cpp:macro> <cpp:value>0x82</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>offsetof</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>offsetof</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t) &amp;((type *)0)-&gt;field)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>countof</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>countof</name><parameter_list>(<parameter><type><name>tab</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(tab) / sizeof((tab)[0]))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_EOF</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_LINEFEED</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_IDENT</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_ASM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEF(TOK_ASM_ ##x, #x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_ASM_int</name></cpp:macro> <cpp:value>TOK_INT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_ASM_weak</name></cpp:macro> <cpp:value>TOK_WEAK1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>TCC_TARGET_I386</name> <operator>||</operator> <name>defined</name> <name>TCC_TARGET_X86_64</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_BWL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEF(TOK_ASM_ ##x ##b, #x "b") DEF(TOK_ASM_ ##x ##w, #x "w") DEF(TOK_ASM_ ##x ##l, #x "l") DEF(TOK_ASM_ ##x, #x)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_WL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEF(TOK_ASM_ ##x ##w, #x "w") DEF(TOK_ASM_ ##x ##l, #x "l") DEF(TOK_ASM_ ##x, #x)</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCC_TARGET_X86_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_BWLQ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEF(TOK_ASM_ ##x ##b, #x "b") DEF(TOK_ASM_ ##x ##w, #x "w") DEF(TOK_ASM_ ##x ##l, #x "l") DEF(TOK_ASM_ ##x ##q, #x "q") DEF(TOK_ASM_ ##x, #x)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_WLQ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEF(TOK_ASM_ ##x ##w, #x "w") DEF(TOK_ASM_ ##x ##l, #x "l") DEF(TOK_ASM_ ##x ##q, #x "q") DEF(TOK_ASM_ ##x, #x)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_BWLX</name></cpp:macro> <cpp:value>DEF_BWLQ</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_WLX</name></cpp:macro> <cpp:value>DEF_WLQ</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NBWLX</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_BWLX</name></cpp:macro> <cpp:value>DEF_BWL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_WLX</name></cpp:macro> <cpp:value>DEF_WL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NBWLX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_FP1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEF(TOK_ASM_ ##f ##x ##s, "f" #x "s") DEF(TOK_ASM_ ##fi ##x ##l, "fi" #x "l") DEF(TOK_ASM_ ##f ##x ##l, "f" #x "l") DEF(TOK_ASM_ ##fi ##x ##s, "fi" #x "s")</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_FP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEF(TOK_ASM_ ##f ##x, "f" #x ) DEF(TOK_ASM_ ##f ##x ##p, "f" #x "p") DEF_FP1(x)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_ASMTEST</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEF_ASM(x ##o) DEF_ASM(x ##no) DEF_ASM(x ##b) DEF_ASM(x ##c) DEF_ASM(x ##nae) DEF_ASM(x ##nb) DEF_ASM(x ##nc) DEF_ASM(x ##ae) DEF_ASM(x ##e) DEF_ASM(x ##z) DEF_ASM(x ##ne) DEF_ASM(x ##nz) DEF_ASM(x ##be) DEF_ASM(x ##na) DEF_ASM(x ##nbe) DEF_ASM(x ##a) DEF_ASM(x ##s) DEF_ASM(x ##ns) DEF_ASM(x ##p) DEF_ASM(x ##pe) DEF_ASM(x ##np) DEF_ASM(x ##po) DEF_ASM(x ##l) DEF_ASM(x ##nge) DEF_ASM(x ##nl) DEF_ASM(x ##ge) DEF_ASM(x ##le) DEF_ASM(x ##ng) DEF_ASM(x ##nle) DEF_ASM(x ##g)</cpp:value></cpp:define>































<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<enum>enum <name>tcc_token</name> <block>{
<decl><name>TOK_LAST</name> <init>= <expr><name>TOK_IDENT</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>id,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcctok.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEF</name></cpp:undef>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_UIDENT</name></cpp:macro> <cpp:value>TOK_DEFINE</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snprintf</name></cpp:macro> <cpp:value>_snprintf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vsnprintf</name></cpp:macro> <cpp:value>_vsnprintf</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtold</name></cpp:macro> <cpp:value>(long double)strtod</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtof</name></cpp:macro> <cpp:value>(float)strtod</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtoll</name></cpp:macro> <cpp:value>_strtoi64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtoull</name></cpp:macro> <cpp:value>_strtoui64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function_decl><type><specifier>extern</specifier> <name>float</name></type> <name>strtof</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__nptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>__endptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>long</name> <name>double</name></type> <name>strtold</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__nptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>__endptr</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DIRSEP</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c == '/' || c == '\\')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ABSPATH</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(IS_DIRSEP(p[0]) || (p[0] &amp;&amp; p[1] == ':' &amp;&amp; IS_DIRSEP(p[2])))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATHCMP</name></cpp:macro> <cpp:value>stricmp</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DIRSEP</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c == '/')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ABSPATH</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IS_DIRSEP(p[0])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATHCMP</name></cpp:macro> <cpp:value>strcmp</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCC_TARGET_PE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATHSEP</name></cpp:macro> <cpp:value>';'</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATHSEP</name></cpp:macro> <cpp:value>':'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_space</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\v'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\f'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>isid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'_'</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>isnum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>isdot</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>isoct</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>toup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="char">'A'</literal></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PUB_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUB_FUNC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONE_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_INLN</name></cpp:macro> <cpp:value>static inline</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_FUNC</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_DATA</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_INLN</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_FUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_DATA</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>gnu_ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>tcc_ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name><name>struct</name> <name>TCCState</name></name> <modifier>*</modifier></type><name>tcc_state</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>tcc_nerr</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name><name>tcc_state</name><operator>-&gt;</operator><name>nb_errors</name></name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MEM_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>mem_cur_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>mem_max_size</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AFF_PRINT_ERROR</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AFF_REFERENCED_DLL</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AFF_PREPROCESS</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define> 


<function_decl><type><name>PUB_FUNC</name> <name>char</name> <modifier>*</modifier></type><name>pstrcpy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PUB_FUNC</name> <name>char</name> <modifier>*</modifier></type><name>pstrcat</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PUB_FUNC</name> <name>char</name> <modifier>*</modifier></type><name>pstrncpy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PUB_FUNC</name> <name>char</name> <modifier>*</modifier></type><name>tcc_basename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PUB_FUNC</name> <name>char</name> <modifier>*</modifier></type><name>tcc_fileextension</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PUB_FUNC</name> <name>void</name></type> <name>tcc_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PUB_FUNC</name> <name>void</name> <modifier>*</modifier></type><name>tcc_malloc</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PUB_FUNC</name> <name>void</name> <modifier>*</modifier></type><name>tcc_mallocz</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PUB_FUNC</name> <name>void</name> <modifier>*</modifier></type><name>tcc_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PUB_FUNC</name> <name>char</name> <modifier>*</modifier></type><name>tcc_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PUB_FUNC</name> <name>void</name></type> <name>tcc_memstats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PUB_FUNC</name> <name>void</name></type> <name>tcc_error_noabort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PUB_FUNC</name> <name>void</name></type> <name>tcc_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PUB_FUNC</name> <name>void</name></type> <name>tcc_warning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PUB_FUNC</name> <name>void</name></type> <name>strcat_printf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>dynarray_add</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ptab</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nb_ptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>dynarray_reset</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>cstr_ccat</name><parameter_list>(<parameter><decl><type><name>CString</name> <modifier>*</modifier></type><name>cstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>cstr_cat</name><parameter_list>(<parameter><decl><type><name>CString</name> <modifier>*</modifier></type><name>cstr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>cstr_wccat</name><parameter_list>(<parameter><decl><type><name>CString</name> <modifier>*</modifier></type><name>cstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>cstr_new</name><parameter_list>(<parameter><decl><type><name>CString</name> <modifier>*</modifier></type><name>cstr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>cstr_free</name><parameter_list>(<parameter><decl><type><name>CString</name> <modifier>*</modifier></type><name>cstr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>cstr_reset</name><parameter_list>(<parameter><decl><type><name>CString</name> <modifier>*</modifier></type><name>cstr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ST_INLN</name> <name>void</name></type> <name>sym_free</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>Sym</name> <modifier>*</modifier></type><name>sym_push2</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>Sym</name> <modifier>*</modifier></type><name>sym_find2</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>Sym</name> <modifier>*</modifier></type><name>sym_push</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>sym_pop</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptop</name></decl></parameter>, <parameter><decl><type><name>Sym</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_INLN</name> <name>Sym</name> <modifier>*</modifier></type><name>struct_find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_INLN</name> <name>Sym</name> <modifier>*</modifier></type><name>sym_find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>Sym</name> <modifier>*</modifier></type><name>global_identifier_push</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>tcc_open_bf</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>int</name></type> <name>tcc_open</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>tcc_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ST_FUNC</name> <name>int</name></type> <name>tcc_add_file_internal</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PUB_FUNC</name> <name>void</name></type> <name>tcc_print_stats</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>total_time</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PUB_FUNC</name> <name>int</name></type> <name>tcc_parse_args</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PUB_FUNC</name> <name>void</name></type> <name>tcc_set_environment</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>ST_DATA</name> <name><name>struct</name> <name>BufferedFile</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>tok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>CValue</name></type> <name>tokc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>macro_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>parse_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>tok_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>CString</name></type> <name>tokcstr</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>total_lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>total_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>tok_ident</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>TokenSym</name> <modifier>*</modifier><modifier>*</modifier></type><name>table_ident</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_FLAG_BOL</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_FLAG_BOF</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_FLAG_ENDIF</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_FLAG_EOF</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_FLAG_PREPROCESS</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_FLAG_TOK_NUM</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_FLAG_LINEFEED</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_FLAG_ASM_COMMENTS</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_FLAG_SPACES</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define> 

<function_decl><type><name>ST_FUNC</name> <name>TokenSym</name> <modifier>*</modifier></type><name>tok_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>char</name> <modifier>*</modifier></type><name>get_tok_str</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>CValue</name> <modifier>*</modifier></type><name>cv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>save_parse_state</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>restore_parse_state</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_INLN</name> <name>void</name></type> <name>tok_str_new</name><parameter_list>(<parameter><decl><type><name>TokenString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>tok_str_free</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>tok_str_add</name><parameter_list>(<parameter><decl><type><name>TokenString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>tok_str_add_tok</name><parameter_list>(<parameter><decl><type><name>TokenString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_INLN</name> <name>void</name></type> <name>define_push</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>macro_type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>Sym</name> <modifier>*</modifier></type><name>first_arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>define_undef</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_INLN</name> <name>Sym</name> <modifier>*</modifier></type><name>define_find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>free_defines</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>Sym</name> <modifier>*</modifier></type><name>label_find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>Sym</name> <modifier>*</modifier></type><name>label_push</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>label_pop</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptop</name></decl></parameter>, <parameter><decl><type><name>Sym</name> <modifier>*</modifier></type><name>slast</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>parse_define</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>preprocess</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>is_bof</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>next_nomacro</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>next</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_INLN</name> <name>void</name></type> <name>unget_tok</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>last_tok</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>preprocess_init</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>preprocess_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>int</name></type> <name>tcc_preprocess</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>skip</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>expect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_INT</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_FLOAT</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_IRET</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_LRET</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_FRET</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_IRET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_LRET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_FRET</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYM_POOL_NB</name></cpp:macro> <cpp:value>(8192 / sizeof(Sym))</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ST_DATA</name> <name>Sym</name> <modifier>*</modifier></type><name>sym_free_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>sym_pools</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>nb_sym_pools</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>Sym</name> <modifier>*</modifier></type><name>global_stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>Sym</name> <modifier>*</modifier></type><name>local_stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>Sym</name> <modifier>*</modifier></type><name>local_label_stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>Sym</name> <modifier>*</modifier></type><name>global_label_stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>Sym</name> <modifier>*</modifier></type><name>define_stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>CType</name></type> <name>char_pointer_type</name></decl>, <decl><type ref="prev"/><name>func_old_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>CType</name></type> <name>int8_type</name></decl>, <decl><type ref="prev"/><name>int16_type</name></decl>, <decl><type ref="prev"/><name>int32_type</name></decl>, <decl><type ref="prev"/><name>int64_type</name></decl>, <decl><type ref="prev"/><name>size_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>SValue</name></type> <name><name>__vstack</name><index>[<expr><literal type="number">1</literal><operator>+</operator> <name>VSTACK_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vtop</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vstack</name></cpp:macro> <cpp:value>(__vstack + 1)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>rsym</name></decl>, <decl><type ref="prev"/><name>anon_sym</name></decl>, <decl><type ref="prev"/><name>ind</name></decl>, <decl><type ref="prev"/><name>loc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>const_wanted</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>nocode_wanted</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>global_expr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ST_DATA</name> <name>CType</name></type> <name>func_vt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>func_vc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>last_line_num</name></decl>, <decl><type ref="prev"/><name>last_ind</name></decl>, <decl><type ref="prev"/><name>func_ind</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ST_DATA</name> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_DATA</name> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl>;</decl_stmt>

<function_decl><type><name>ST_INLN</name> <name>bool</name></type> <name>is_structured</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_INLN</name> <name>bool</name></type> <name>is_struct</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_INLN</name> <name>bool</name></type> <name>is_union</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_INLN</name> <name>bool</name></type> <name>is_float</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_INLN</name> <name>bool</name></type> <name>not_structured</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ST_FUNC</name> <name>int</name></type> <name>ieee_finite</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>test_lvalue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>vpushi</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>Sym</name> <modifier>*</modifier></type><name>external_global_sym</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>vset</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>vswap</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>vpush_global_sym</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>vrote</name><parameter_list>(<parameter><decl><type><name>SValue</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>vrott</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>vrotb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCC_TARGET_ARM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>ST_FUNC</name> <name>int</name></type> <name>get_reg_ex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rc2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>lexpand_nr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>vpushv</name><parameter_list>(<parameter><decl><type><name>SValue</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>save_reg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>int</name></type> <name>get_reg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>save_regs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>int</name></type> <name>gv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>gv2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rc1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rc2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>vpop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>gen_op</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>int</name></type> <name>type_size</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>mk_pointer</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>vstore</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>inc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>post</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>parse_asm_str</name><parameter_list>(<parameter><decl><type><name>CString</name> <modifier>*</modifier></type><name>astr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>int</name></type> <name>lvalue_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>indir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>unary</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>expr_prod</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>expr_sum</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>gexpr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>long</name> <name>long</name></type> <name>expr_const</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>gen_inline_functions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ST_FUNC</name> <name>void</name></type> <name>decl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>TCC_TARGET_X86_64</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>TCC_TARGET_PE</name></expr></cpp:if>
<function_decl><type><name>ST_FUNC</name> <name>int</name></type> <name>classify_x86_64_va_arg</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>ty</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ST_DATA</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONE_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_DATA</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_DATA</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>PUB_FUNC</name> <name>void</name></type> <name>tcc_appendf</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> (<modifier>*</modifier><name>tcc_cb</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
