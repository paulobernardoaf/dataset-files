<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\tcc\libtcc.c">


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcc.h"</cpp:file></cpp:include>





<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>gnu_ext</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>tcc_ext</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ST_DATA</name> <name><name>struct</name> <name>TCCState</name></name> <modifier>*</modifier></type><name>tcc_state</name></decl>;</decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>normalize_slashes</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>path</name> <operator>+</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>path</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><name>PUB_FUNC</name> <name>char</name> <modifier>*</modifier></type><name>pstrcpy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q_end</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>buf_size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>q</name> <operator>&lt;</operator> <name>q_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>PUB_FUNC</name> <name>char</name> <modifier>*</modifier></type><name>pstrcat</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pstrcpy</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PUB_FUNC</name> <name>char</name> <modifier>*</modifier></type><name>pstrncpy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>PUB_FUNC</name> <name>char</name> <modifier>*</modifier></type><name>tcc_basename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&gt;</operator> <name>name</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_DIRSEP</name> <argument_list>(<argument><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>PUB_FUNC</name> <name>char</name> <modifier>*</modifier></type><name>tcc_fileextension</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>tcc_basename</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>strrchr</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>e</name></expr>?</condition><then> <expr><name>e</name></expr></then><else>: <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><name>PUB_FUNC</name> <name>void</name> <modifier>*</modifier></type><name>tcc_mallocz</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>PUB_FUNC</name> <name>void</name></type> <name>tcc_memstats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MEM_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"memory: %d byte(s), max = %d byte(s)\n"</literal></expr></argument>, <argument><expr><name>mem_cur_size</name></expr></argument>, <argument><expr><name>mem_max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>ST_FUNC</name> <name>void</name></type> <name>dynarray_add</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ptab</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nb_ptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nb</name></decl>, <decl><type ref="prev"/><name>nb_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nb</name> <operator>=</operator> <operator>*</operator><name>nb_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>*</operator><name>ptab</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nb</name> <operator>&amp;</operator> <operator>(</operator><name>nb</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nb_alloc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>nb_alloc</name> <operator>=</operator> <name>nb</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>nb_alloc</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptab</name> <operator>=</operator> <name>pp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pp</name><index>[<expr><name>nb</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nb_ptr</name> <operator>=</operator> <name>nb</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>dynarray_reset</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator> <name>pp</name></expr>;</init> <condition><expr><operator>*</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr><operator>,</operator> <expr><operator>--</operator><operator>*</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>pp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tcc_split_path</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>p_ary</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_nb_ary</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CString</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cstr_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>in</name></expr>;</init> <condition><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr><operator>,</operator> <expr><name>c</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>PATHSEP</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'{'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cstr_cat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tcc_lib_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dynarray_add</name> <argument_list>(<argument><expr><name>p_ary</name></expr></argument>, <argument><expr><name>p_nb_ary</name></expr></argument>, <argument><expr><name><name>str</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>;</do>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>strcat_vprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PUB_FUNC</name> <name>void</name></type> <name>strcat_printf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat_vprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>error1</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_warning</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BufferedFile</name> <modifier>*</modifier><modifier>*</modifier></type><name>pf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <name>file</name></expr>;</init> <condition><expr><name>f</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>prev</name></name></expr></incr>)</control> <block>{<block_content>
<empty_stmt>;</empty_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>pf</name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>include_stack</name></name></expr>;</init> <condition><expr><name>pf</name> <operator>&lt;</operator> <name><name>s1</name><operator>-&gt;</operator><name>include_stack_ptr</name></name></expr>;</condition> <incr><expr><name>pf</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>strcat_printf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"In file included from %s:%d:\n"</literal></expr></argument>,
<argument><expr><name><operator>(</operator><operator>*</operator><name>pf</name><operator>)</operator><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pf</name><operator>)</operator><operator>-&gt;</operator><name>line_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>line_num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcat_printf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%d: "</literal></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>line_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strcat_printf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strcat_printf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"tcc: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_warning</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcat_printf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"warning: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strcat_printf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"error: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>strcat_vprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s1</name><operator>-&gt;</operator><name>error_func</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>s1</name><operator>-&gt;</operator><name>error_func</name></name> <argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>error_opaque</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_warning</name> <operator>||</operator> <name><name>s1</name><operator>-&gt;</operator><name>warn_error</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>nb_errors</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>LIBTCCAPI</name> <name>void</name></type> <name>tcc_set_error_func</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>error_opaque</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>error_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error_opaque</name></name> <operator>=</operator> <name>error_opaque</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error_func</name></name> <operator>=</operator> <name>error_func</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>PUB_FUNC</name> <name>void</name></type> <name>tcc_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><name>tcc_state</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error1</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PUB_FUNC</name> <name>void</name></type> <name>tcc_warning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><name>tcc_state</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>warn_none</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error1</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>ST_FUNC</name> <name>void</name></type> <name>tcc_open_bf</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BufferedFile</name> <modifier>*</modifier></type><name>bf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buflen</name> <init>= <expr><ternary><condition><expr><name>initlen</name></expr>?</condition><then> <expr><name>initlen</name></expr></then><else>: <expr><name>IO_BUF_SIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufferedFile</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>initlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>buf_end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CH_EOB</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pstrcpy</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>normalize_slashes</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>line_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>ifndef_macro</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name>bf</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>tcc_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BufferedFile</name> <modifier>*</modifier></type><name>bf</name> <init>= <expr><name>file</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total_lines</name> <operator>+=</operator> <name><name>bf</name><operator>-&gt;</operator><name>line_num</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>int</name></type> <name>tcc_open</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>filename</name> <operator>=</operator> <literal type="string">"stdin"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s1</name><operator>-&gt;</operator><name>verbose</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name><name>s1</name><operator>-&gt;</operator><name>verbose</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s %*s%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>?</condition><then> <expr><literal type="string">"nf"</literal></expr></then><else>: <expr><literal type="string">"-&gt;"</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>s1</name><operator>-&gt;</operator><name>include_stack_ptr</name></name> <operator>-</operator> <name><name>s1</name><operator>-&gt;</operator><name>include_stack</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tcc_open_bf</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>tcc_compile</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>define_start</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INC_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s: **** new file\n"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>preprocess_init</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>funcname</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>int8_type</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>VT_INT8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>int16_type</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>VT_INT16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>int32_type</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>VT_INT32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>int64_type</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>VT_INT64</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>char_pointer_type</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>VT_INT8</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mk_pointer</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>char_pointer_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tcc_state</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>size_type</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>VT_INT32</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>size_type</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>VT_INT64</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>func_old_type</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>VT_FUNC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>func_old_type</name><operator>.</operator><name>ref</name></name> <operator>=</operator> <call><name>sym_push</name> <argument_list>(<argument><expr><name>SYM_FIELD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>int32_type</name></expr></argument>, <argument><expr><name>FUNC_CDECL</name></expr></argument>, <argument><expr><name>FUNC_OLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCC_TARGET_ARM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>arm_init_types</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

{
Sym *s1;

p = anon_sym++;
sym = sym_push (p, mk_pointer (VT_VOID), FUNC_CDECL, FUNC_NEW);
s1 = sym_push (SYM_FIELD, VT_UNSIGNED | VT_INT, 0, 0);
s1-&gt;next = NULL;
sym-&gt;next = s1;
sym_push (TOK_alloca, VT_FUNC | (p &lt;&lt; VT_STRUCT_SHIFT), VT_CONST, 0);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>define_start</name> <operator>=</operator> <name>define_stack</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nocode_wanted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setjmp</name> <argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>error_jmp_buf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>nb_errors</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>error_set_jmp_enabled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tok_flags</name> <operator>=</operator> <name>TOK_FLAG_BOL</name> <operator>|</operator> <name>TOK_FLAG_BOF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parse_flags</name> <operator>=</operator> <name>PARSE_FLAG_PREPROCESS</name> <operator>|</operator> <name>PARSE_FLAG_TOK_NUM</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decl</name> <argument_list>(<argument><expr><name>VT_CONST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"declaration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (pvtop != vtop) {
fprintf (stderr, "internal compiler error:"
" vstack leak? (%d)", vtop - pvtop);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>error_set_jmp_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><call><name>free_defines</name> <argument_list>(<argument><expr><name>define_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sym_pop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>global_stack</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sym_pop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>local_stack</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>s1</name><operator>-&gt;</operator><name>nb_errors</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>LIBTCCAPI</name> <name>int</name></type> <name>tcc_compile_string</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcc_open_bf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tcc_compile</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_close</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LIBTCCAPI</name> <name>void</name></type> <name>tcc_define_symbol</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len1</name></decl>, <decl><type ref="prev"/><name>len2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="string">"1"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len1</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len2</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tcc_open_bf</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="string">"&lt;define&gt;"</literal></expr></argument>, <argument><expr><name>len1</name> <operator>+</operator> <name>len2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>sym</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>len1</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>len1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_define</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcc_close</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LIBTCCAPI</name> <name>void</name></type> <name>tcc_undefine_symbol</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TokenSym</name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>tok_alloc</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>define_find</name> <argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>tok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>define_undef</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>tcc_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tcc_state</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tcc_state</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>free_defines</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <name>tok_ident</name> <operator>-</operator> <name>TOK_IDENT</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>table_ident</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>table_ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>dynarray_reset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sym_pools</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb_sym_pools</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tokcstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sym_free_first</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>macro_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>LIBTCCAPI</name> <name>TCCState</name> <modifier>*</modifier></type><name>tcc_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>os</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arch</name> <operator>||</operator> <operator>!</operator><name>os</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>tcc_cleanup</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>tcc_mallocz</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TCCState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tcc_state</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_type</name></name> <operator>=</operator> <name>TCC_OUTPUT_MEMORY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>preprocess_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>include_stack_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>include_stack</name></name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>define_push</name> <argument_list>(<argument><expr><name>TOK___LINE__</name></expr></argument>, <argument><expr><name>MACRO_OBJ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>define_push</name> <argument_list>(<argument><expr><name>TOK___FILE__</name></expr></argument>, <argument><expr><name>MACRO_OBJ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>define_push</name> <argument_list>(<argument><expr><name>TOK___DATE__</name></expr></argument>, <argument><expr><name>MACRO_OBJ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>define_push</name> <argument_list>(<argument><expr><name>TOK___TIME__</name></expr></argument>, <argument><expr><name>MACRO_OBJ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>TCC_VERSION</name></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>a</name> <operator>*</operator> <literal type="number">10000</literal> <operator>+</operator> <name>b</name> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__TINYC__"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__R2TINYC__"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__STDC__"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__STDC_VERSION__"</literal></expr></argument>, <argument><expr><literal type="string">"199901L"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__STDC_HOSTED__"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ut8"</literal></expr></argument>, <argument><expr><literal type="string">"uint8_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ut16"</literal></expr></argument>, <argument><expr><literal type="string">"uint16_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ut32"</literal></expr></argument>, <argument><expr><literal type="string">"uint32_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ut64"</literal></expr></argument>, <argument><expr><literal type="string">"uint64_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"size_t"</literal></expr></argument>, <argument><expr><literal type="string">"uint64_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"size_t"</literal></expr></argument>, <argument><expr><literal type="string">"uint32_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"st8"</literal></expr></argument>, <argument><expr><literal type="string">"int8_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"st16"</literal></expr></argument>, <argument><expr><literal type="string">"int16_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"st32"</literal></expr></argument>, <argument><expr><literal type="string">"int32_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"st64"</literal></expr></argument>, <argument><expr><literal type="string">"int64_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><literal type="string">"x86"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">32</literal> <operator>||</operator> <name>bits</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__i386__"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__i386"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"i386"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__x86_64__"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><literal type="string">"arm"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__ARM_ARCH_4__"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__arm_elf__"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__arm_elf"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"arm_elf"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__arm__"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__arm"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"arm"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__APCS_32__"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><literal type="string">"windows"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__WINDOWS__"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"_WIN64"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__unix__"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__unix"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><literal type="string">"linux"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__linux__"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__linux"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>str</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#s</cpp:value></cpp:define>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><literal type="string">"freebsd"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__FreeBSD__"</literal></expr></argument>, <argument><expr><call><name>str</name> <argument_list>( <argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>str</name></cpp:undef>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><literal type="string">"windows"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>bits</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__SIZE_TYPE__"</literal></expr></argument>, <argument><expr><literal type="string">"unsigned long long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__PTRDIFF_TYPE__"</literal></expr></argument>, <argument><expr><literal type="string">"long long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__SIZE_TYPE__"</literal></expr></argument>, <argument><expr><literal type="string">"unsigned long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__PTRDIFF_TYPE__"</literal></expr></argument>, <argument><expr><literal type="string">"long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><literal type="string">"windows"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__WCHAR_TYPE__"</literal></expr></argument>, <argument><expr><literal type="string">"unsigned short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__WCHAR_TYPE__"</literal></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__REDIRECT(name, proto, alias)"</literal></expr></argument>, <argument><expr><literal type="string">"name proto __asm__(#alias)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_define_symbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__REDIRECT_NTH(name, proto, alias)"</literal></expr></argument>, <argument><expr><literal type="string">"name proto __asm__(#alias) __THROW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alacarte_link</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nocommon</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHAR_IS_UNSIGNED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>char_is_unsigned</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
s-&gt;leading_underscore = 1;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><literal type="string">"x86"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">32</literal> <operator>||</operator> <name>bits</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>seg_size</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>LIBTCCAPI</name> <name>void</name></type> <name>tcc_delete</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>tcc_cleanup</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>dynarray_reset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>library_paths</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>nb_library_paths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dynarray_reset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>crt_paths</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>nb_crt_paths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>dynarray_reset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>cached_includes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>nb_cached_includes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dynarray_reset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>include_paths</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>nb_include_paths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dynarray_reset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>sysinclude_paths</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>nb_sysinclude_paths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>tcc_lib_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>soname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>rpath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>init_symbol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>fini_symbol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>outfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>deps_outfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dynarray_reset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>files</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>nb_files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dynarray_reset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>target_deps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>nb_target_deps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>os</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCC_IS_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SELINUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>munmap</name> <argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>write_mem</name></name></expr></argument>, <argument><expr><name><name>s1</name><operator>-&gt;</operator><name>mem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>munmap</name> <argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>runtime_mem</name></name></expr></argument>, <argument><expr><name><name>s1</name><operator>-&gt;</operator><name>mem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>runtime_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>LIBTCCAPI</name> <name>int</name></type> <name>tcc_add_include_path</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>tcc_split_path</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>include_paths</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>nb_include_paths</name></name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>LIBTCCAPI</name> <name>int</name></type> <name>tcc_add_sysinclude_path</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>tcc_split_path</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sysinclude_paths</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>nb_sysinclude_paths</name></name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>int</name></type> <name>tcc_add_file_internal</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<expr_stmt><expr><name>ext</name> <operator>=</operator> <call><name>tcc_fileextension</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ext</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tcc_open</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AFF_PRINT_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"file '%s' not found"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dynarray_add</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>target_deps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>nb_target_deps</name></name></expr></argument>,
<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AFF_PREPROCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tcc_preprocess</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>the_end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><call><name>PATHCMP</name> <argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>PATHCMP</name> <argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>PATHCMP</name> <argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">"cparse"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tcc_compile</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>the_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"unrecognized file type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>the_end</name>:</label>
<expr_stmt><expr><call><name>tcc_close</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>LIBTCCAPI</name> <name>int</name></type> <name>tcc_add_file</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>directory</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>directory</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>output_type</name></name> <operator>==</operator> <name>TCC_OUTPUT_PREPROCESS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>tcc_add_file_internal</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>AFF_PRINT_ERROR</name> <operator>|</operator> <name>AFF_PREPROCESS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>tcc_add_file_internal</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>AFF_PRINT_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WD_ALL</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_INVERT</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>FlagDef</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>FlagDef</name>;</typedef>

<function><type><name>ST_FUNC</name> <name>int</name></type> <name>set_flag</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FlagDef</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FlagDef</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'o'</literal> <operator>&amp;&amp;</operator> <name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>!</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>flags</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_flags</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>found</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<label><name>found</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FD_INVERT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>!</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>s</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>tcc_cb</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>PUB_FUNC</name> <name>void</name></type> <name>tcc_set_callback</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>tcc_cb</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tcc_cb_ptr</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PUB_FUNC</name> <name>void</name></type> <name>tcc_appendf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcc_cb</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>tcc_cb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
