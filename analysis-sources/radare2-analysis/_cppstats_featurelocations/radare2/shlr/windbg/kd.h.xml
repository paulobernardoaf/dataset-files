<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\windbg\kd.h">
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>KD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KD_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types_base.h&gt;</cpp:file></cpp:include>

<enum>enum <block>{
<decl><name>KD_E_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>KD_E_BADCHKSUM</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>KD_E_TIMEOUT</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,
<decl><name>KD_E_MALFORMED</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>,
<decl><name>KD_E_IOERR</name> <init>= <expr><operator>-</operator><literal type="number">4</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <name>KD_PACKET_TYPE</name> <block>{
<decl><name>KD_PACKET_TYPE_UNUSED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>KD_PACKET_TYPE_STATE_CHANGE32</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>KD_PACKET_TYPE_STATE_MANIPULATE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>KD_PACKET_TYPE_DEBUG_IO</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>KD_PACKET_TYPE_ACKNOWLEDGE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>KD_PACKET_TYPE_RESEND</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>KD_PACKET_TYPE_RESET</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>KD_PACKET_TYPE_STATE_CHANGE64</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>KD_PACKET_TYPE_POLL_BREAKIN</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>KD_PACKET_TYPE_TRACE_IO</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>KD_PACKET_TYPE_CONTROL_REQUEST</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>KD_PACKET_TYPE_FILE_IO</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>KD_PACKET_WAIT_STATE_CHANGE</name> <block>{
<decl><name>DbgKdMinimumStateChange</name> <init>= <expr><literal type="number">0x00003030</literal></expr></init></decl>,
<decl><name>DbgKdExceptionStateChange</name> <init>= <expr><literal type="number">0x00003030</literal></expr></init></decl>,
<decl><name>DbgKdLoadSymbolsStateChange</name> <init>= <expr><literal type="number">0x00003031</literal></expr></init></decl>,
<decl><name>DbgKdCommandStringStateChange</name> <init>= <expr><literal type="number">0x00003032</literal></expr></init></decl>,
<decl><name>DbgKdMaximumStateChange</name> <init>= <expr><literal type="number">0x00003033</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>KD_PACKET_MANIPULATE_TYPE</name> <block>{
<decl><name>DbgKdMinimumManipulate</name> <init>= <expr><literal type="number">0x00003130</literal></expr></init></decl>,
<decl><name>DbgKdReadVirtualMemoryApi</name> <init>= <expr><literal type="number">0x00003130</literal></expr></init></decl>,
<decl><name>DbgKdWriteVirtualMemoryApi</name> <init>= <expr><literal type="number">0x00003131</literal></expr></init></decl>,
<decl><name>DbgKdGetContextApi</name> <init>= <expr><literal type="number">0x00003132</literal></expr></init></decl>,
<decl><name>DbgKdSetContextApi</name> <init>= <expr><literal type="number">0x00003133</literal></expr></init></decl>,
<decl><name>DbgKdWriteBreakPointApi</name> <init>= <expr><literal type="number">0x00003134</literal></expr></init></decl>,
<decl><name>DbgKdRestoreBreakPointApi</name> <init>= <expr><literal type="number">0x00003135</literal></expr></init></decl>,
<decl><name>DbgKdContinueApi</name> <init>= <expr><literal type="number">0x00003136</literal></expr></init></decl>,
<decl><name>DbgKdReadControlSpaceApi</name> <init>= <expr><literal type="number">0x00003137</literal></expr></init></decl>,
<decl><name>DbgKdWriteControlSpaceApi</name> <init>= <expr><literal type="number">0x00003138</literal></expr></init></decl>,
<decl><name>DbgKdReadIoSpaceApi</name> <init>= <expr><literal type="number">0x00003139</literal></expr></init></decl>,
<decl><name>DbgKdWriteIoSpaceApi</name> <init>= <expr><literal type="number">0x0000313A</literal></expr></init></decl>,
<decl><name>DbgKdRebootApi</name> <init>= <expr><literal type="number">0x0000313B</literal></expr></init></decl>,
<decl><name>DbgKdContinueApi2</name> <init>= <expr><literal type="number">0x0000313C</literal></expr></init></decl>,
<decl><name>DbgKdReadPhysicalMemoryApi</name> <init>= <expr><literal type="number">0x0000313D</literal></expr></init></decl>,
<decl><name>DbgKdWritePhysicalMemoryApi</name> <init>= <expr><literal type="number">0x0000313E</literal></expr></init></decl>,
<decl><name>DbgKdQuerySpecialCallsApi</name> <init>= <expr><literal type="number">0x0000313F</literal></expr></init></decl>,
<decl><name>DbgKdSetSpecialCallApi</name> <init>= <expr><literal type="number">0x00003140</literal></expr></init></decl>,
<decl><name>DbgKdClearSpecialCallsApi</name> <init>= <expr><literal type="number">0x00003141</literal></expr></init></decl>,
<decl><name>DbgKdSetInternalBreakPointApi</name> <init>= <expr><literal type="number">0x00003142</literal></expr></init></decl>,
<decl><name>DbgKdGetInternalBreakPointApi</name> <init>= <expr><literal type="number">0x00003143</literal></expr></init></decl>,
<decl><name>DbgKdReadIoSpaceExtendedApi</name> <init>= <expr><literal type="number">0x00003144</literal></expr></init></decl>,
<decl><name>DbgKdWriteIoSpaceExtendedApi</name> <init>= <expr><literal type="number">0x00003145</literal></expr></init></decl>,
<decl><name>DbgKdGetVersionApi</name> <init>= <expr><literal type="number">0x00003146</literal></expr></init></decl>,
<decl><name>DbgKdWriteBreakPointExApi</name> <init>= <expr><literal type="number">0x00003147</literal></expr></init></decl>,
<decl><name>DbgKdRestoreBreakPointExApi</name> <init>= <expr><literal type="number">0x00003148</literal></expr></init></decl>,
<decl><name>DbgKdCauseBugCheckApi</name> <init>= <expr><literal type="number">0x00003149</literal></expr></init></decl>,
<decl><name>DbgKdSwitchProcessor</name> <init>= <expr><literal type="number">0x00003150</literal></expr></init></decl>,
<decl><name>DbgKdPageInApi</name> <init>= <expr><literal type="number">0x00003151</literal></expr></init></decl>,
<decl><name>DbgKdReadMachineSpecificRegister</name> <init>= <expr><literal type="number">0x00003152</literal></expr></init></decl>,
<decl><name>DbgKdWriteMachineSpecificRegister</name> <init>= <expr><literal type="number">0x00003153</literal></expr></init></decl>,
<decl><name>OldVlm1</name> <init>= <expr><literal type="number">0x00003154</literal></expr></init></decl>,
<decl><name>OldVlm2</name> <init>= <expr><literal type="number">0x00003155</literal></expr></init></decl>,
<decl><name>DbgKdSearchMemoryApi</name> <init>= <expr><literal type="number">0x00003156</literal></expr></init></decl>,
<decl><name>DbgKdGetBusDataApi</name> <init>= <expr><literal type="number">0x00003157</literal></expr></init></decl>,
<decl><name>DbgKdSetBusDataApi</name> <init>= <expr><literal type="number">0x00003158</literal></expr></init></decl>,
<decl><name>DbgKdCheckLowMemoryApi</name> <init>= <expr><literal type="number">0x00003159</literal></expr></init></decl>,
<decl><name>DbgKdClearAllInternalBreakpointsApi</name> <init>= <expr><literal type="number">0x0000315A</literal></expr></init></decl>,
<decl><name>DbgKdFillMemoryApi</name> <init>= <expr><literal type="number">0x0000315B</literal></expr></init></decl>,
<decl><name>DbgKdQueryMemoryApi</name> <init>= <expr><literal type="number">0x0000315C</literal></expr></init></decl>,
<decl><name>DbgKdSwitchPartition</name> <init>= <expr><literal type="number">0x0000315D</literal></expr></init></decl>,
<decl><name>DbgKdMaximumManipulate</name> <init>= <expr><literal type="number">0x0000315E</literal></expr></init></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KD_PACKET_DATA</name></cpp:macro> <cpp:value>0x30303030</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KD_PACKET_CTRL</name></cpp:macro> <cpp:value>0x69696969</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KD_MAX_PAYLOAD</name></cpp:macro> <cpp:value>0x800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KD_PACKET_MAX_SIZE</name></cpp:macro> <cpp:value>4000</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KD_RET_OK</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KD_RET_ERR</name></cpp:macro> <cpp:value>0xC0000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KD_RET_ENOENT</name></cpp:macro> <cpp:value>0xC000000F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KD_MACH_I386</name></cpp:macro> <cpp:value>0x014C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KD_MACH_IA64</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KD_MACH_AMD64</name></cpp:macro> <cpp:value>0x8664</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KD_MACH_ARM</name></cpp:macro> <cpp:value>0x01c0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KD_MACH_EBC</name></cpp:macro> <cpp:value>0x0EBC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBGKD_VERS_FLAG_DATA</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBGKD_VERS_FLAG_PTR64</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<macro><name>R_PACKED</name> <argument_list>(
<argument>typedef struct kd_req_t {
uint32_t req;
uint16_t cpu_level;
uint16_t cpu;
uint32_t ret;

uint32_t pad;
union {
R_PACKED(
struct {
uint64_t addr;
uint32_t length;
uint32_t read;
}) r_mem;
R_PACKED (
struct {
uint16_t major;
uint16_t minor;
uint8_t proto_major;
uint8_t proto_minor;
uint16_t flags;
uint16_t machine;
uint8_t misc[<literal type="number">6</literal>];
uint64_t kernel_base;
uint64_t mod_addr;
uint64_t dbg_addr;
}) r_ver;
struct {
uint32_t reason;
uint32_t tf;
uint32_t dr7;
uint32_t css;
uint32_t cse;
} r_cont;
struct {
uint64_t addr;
uint32_t handle;
} r_set_bp;
struct {
uint32_t handle;
} r_del_bp;
struct {
uint64_t addr;
uint32_t flags;
} r_set_ibp;
struct {
uint64_t addr;
uint32_t flags;
uint32_t calls;
} r_get_ibp;
struct {
uint32_t flags;
} r_ctx;
struct {
uint64_t addr;
uint64_t reserved;
uint32_t address_space;
uint32_t flags;
} r_query_mem;


uint8_t raw[<literal type="number">40</literal>];
};
uint8_t data[<literal type="number">0</literal>];
}</argument>)</argument_list></macro> <expr_stmt><expr><name>kd_req_t</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KD_EXC_BKPT</name></cpp:macro> <cpp:value>0x80000003</cpp:value></cpp:define>
<macro><name>R_PACKED</name> <argument_list>(
<argument>typedef struct kd_stc_64 {
uint32_t state;
uint16_t cpu_level;
uint16_t cpu;
uint32_t cpu_count;
uint32_t pad1;
uint64_t kthread;
uint64_t pc;
union {
R_PACKED (
struct {
uint32_t code;
uint32_t flags;
uint64_t ex_record;
uint64_t ex_addr;
}) exception;
};
}</argument>)</argument_list></macro> <expr_stmt><expr><name>kd_stc_64</name></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <name>kd_ioc_t</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>pad</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>kd_ioc_t</name>;</typedef>

<macro><name>R_PACKED</name> <argument_list>(
<argument>typedef struct kd_packet_t {
uint32_t leader;
uint16_t type;
uint16_t length;
uint32_t id;
uint32_t checksum;
uint8_t data[<literal type="number">0</literal>];
}</argument>)</argument_list></macro> <expr_stmt><expr><name>kd_packet_t</name></expr>;</expr_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_CONCAT_</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a##b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_CONCAT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ASSERT_CONCAT_(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ct_assert</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>enum { ASSERT_CONCAT(assert_line_, __LINE__) = 1/(!!(e)) }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>ct_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kd_packet_t</name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ct_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kd_req_t</name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ct_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kd_ioc_t</name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>int</name></type> <name>kd_send_ctrl_packet</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>kd_send_data_packet</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>req_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>kd_read_packet</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>kd_packet_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>kd_packet_is_valid</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>kd_packet_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>kd_packet_is_ack</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>kd_packet_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>kd_data_checksum</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
