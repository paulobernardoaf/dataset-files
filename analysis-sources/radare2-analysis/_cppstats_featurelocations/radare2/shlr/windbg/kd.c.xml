<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\windbg\kd.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transport.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kd.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KD_DBG</name></cpp:macro> <cpp:value>if (false)</cpp:value></cpp:define>

<function><type><name>uint32_t</name></type> <name>kd_data_checksum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>acc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>||</operator> <operator>!</operator><name>buf_len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>acc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buf_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>acc</name> <operator>+=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>acc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>kd_send_ctrl_packet</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>kd_packet_t</name></type> <name>pkt</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>leader</name></name> <operator>=</operator> <name>KD_PACKET_CTRL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>checksum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>iob_write</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kd_packet_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>KD_E_IOERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>KD_E_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>kd_send_data_packet</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>req_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>kd_packet_t</name></type> <name>pkt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>req_len</name> <operator>+</operator> <name>buf_len</name> <operator>&gt;</operator> <name>KD_MAX_PAYLOAD</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>KD_E_MALFORMED</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>leader</name></name> <operator>=</operator> <name>KD_PACKET_DATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>req_len</name> <operator>+</operator> <name>buf_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>checksum</name></name> <operator>=</operator> <call><name>kd_data_checksum</name> <argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>req_len</name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>kd_data_checksum</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>iob_write</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kd_packet_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>KD_E_IOERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>iob_write</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>req</name></expr></argument>, <argument><expr><name>req_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>KD_E_IOERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&amp;&amp;</operator> <call><name>iob_write</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>KD_E_IOERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>iob_write</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <literal type="string">"\xAA"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>KD_E_IOERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>KD_E_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>kd_read_packet</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>kd_packet_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>kd_packet_t</name></type> <name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>iob_read</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>kd_packet_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>KD_E_IOERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>kd_packet_is_valid</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>KD_DBG</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"invalid leader %08x, trying to recover\n"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>leader</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>kd_packet_is_valid</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>kd_send_ctrl_packet</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_RESEND</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sig</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>iob_read</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sig</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>iob_read</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sig</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><literal type="string">"000"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strncmp</name> <argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><literal type="string">"iii"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>iob_read</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pkt</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>kd_packet_t</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>KD_E_IOERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>KD_E_IOERR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>KD_E_IOERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>kd_packet_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pkt</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>KD_E_IOERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kd_packet_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>iob_read</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>kd_packet_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>checksum</name></name> <operator>!=</operator> <call><name>kd_data_checksum</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>kd_packet_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>KD_DBG</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Checksum mismatch!\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>KD_E_MALFORMED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>leader</name></name> <operator>==</operator> <name>KD_PACKET_DATA</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>trailer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>iob_read</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>trailer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>trailer</name> <operator>!=</operator> <literal type="number">0xAA</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>KD_DBG</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Missing trailer 0xAA\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>KD_E_MALFORMED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>kd_send_ctrl_packet</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_ACKNOWLEDGE</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>kd_packet_t</name> <operator>*</operator><operator>)</operator> <name>buf</name><operator>)</operator><operator>-&gt;</operator><name>id</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">0x800</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>kd_packet_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr>;</expr_stmt>

<return>return <expr><name>KD_E_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>kd_packet_is_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>kd_packet_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>leader</name></name> <operator>==</operator> <name>KD_PACKET_CTRL</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>leader</name></name> <operator>==</operator> <name>KD_PACKET_DATA</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>kd_packet_is_ack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>kd_packet_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>leader</name></name> <operator>==</operator> <name>KD_PACKET_CTRL</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>KD_PACKET_TYPE_ACKNOWLEDGE</name></expr>;</return>
</block_content>}</block></function>
</unit>
