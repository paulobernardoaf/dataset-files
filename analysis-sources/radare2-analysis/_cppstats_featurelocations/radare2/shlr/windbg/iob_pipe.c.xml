<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\windbg\iob_pipe.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transport.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>iob_pipe_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hPipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPTSTR</name></type> <name>path_</name> <init>= <expr><call><name>r_sys_conv_utf8_to_win</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hPipe</name> <operator>=</operator> <call><name>CreateFile</name> <argument_list>(<argument><expr><name>path_</name></expr></argument>, <argument><expr><name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><name>FILE_FLAG_OVERLAPPED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>hPipe</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>?</condition><then> <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>HANDLE</name><operator>)</operator><name>hPipe</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iob_pipe_close</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iob_pipe_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>ov</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ov</name><operator>.</operator><name>hEvent</name></name> <operator>=</operator> <call><name>CreateEvent</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ov</name><operator>.</operator><name>hEvent</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadFile</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ov</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>GetLastError</name> <argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_IO_PENDING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"ReadFile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>WaitForSingleObject</name> <argument_list>(<argument><expr><name><name>ov</name><operator>.</operator><name>hEvent</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>WAIT_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CancelIo</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GetOverlappedResult</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ov</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>ov</name><operator>.</operator><name>hEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iob_pipe_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>cbWrited</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>ov</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WriteFile</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ov</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>GetLastError</name> <argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_IO_PENDING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"WriteFile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GetOverlappedResult</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ov</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbWrited</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbWrited</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>iob_pipe_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>sa</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>socket</name> <argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sun_path</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connect</name> <argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>sock</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iob_pipe_close</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>close</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iob_pipe_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>readset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name>timeout</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>FD_ZERO</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>readset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_SET</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>select</name> <argument_list>(<argument><expr><name>fd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>readset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>recv</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>EINTR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iob_pipe_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>send</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"iob_pipe_write, send"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EPIPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>io_backend_t</name></type> <name>iob_pipe</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"pipe"</literal></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>config</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>open</name> <operator>=</operator> <operator>&amp;</operator><name>iob_pipe_open</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <operator>&amp;</operator><name>iob_pipe_close</name></expr>,
<expr><operator>.</operator><name>read</name> <operator>=</operator> <operator>&amp;</operator><name>iob_pipe_read</name></expr>,
<expr><operator>.</operator><name>write</name> <operator>=</operator> <operator>&amp;</operator><name>iob_pipe_write</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
