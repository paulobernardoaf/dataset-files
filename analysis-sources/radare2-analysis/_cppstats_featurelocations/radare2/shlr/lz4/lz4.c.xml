<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\lz4\lz4.c">










































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCELERATION_DEFAULT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZ4_FORCE_MEMORY_ACCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_6__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_6J__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_6K__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_6Z__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_6ZK__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_6T2__</name></expr></argument>)</argument_list></call> <operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_FORCE_MEMORY_ACCESS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_FORCE_MEMORY_ACCESS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_FORCE_SW_BITCOUNT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lz4.h"</cpp:file></cpp:include>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4127</name><name>)</name></cpp:pragma> 
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4293</name><name>)</name></cpp:pragma> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZ4_FORCE_INLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_FORCE_INLINE</name></cpp:macro> <cpp:value>static __forceinline</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal></expr></cpp:if> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_FORCE_INLINE</name></cpp:macro> <cpp:value>static inline __attribute__((always_inline))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_FORCE_INLINE</name></cpp:macro> <cpp:value>static inline</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_FORCE_INLINE</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__PPC64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_FORCE_O2_GCC_PPC64LE</name></cpp:macro> <cpp:value>__attribute__((optimize("O2")))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_FORCE_O2_INLINE_GCC_PPC64LE</name></cpp:macro> <cpp:value>__attribute__((optimize("O2"))) LZ4_FORCE_INLINE</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_FORCE_O2_GCC_PPC64LE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_FORCE_O2_INLINE_GCC_PPC64LE</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__GNUC__</name> <operator>&gt;=</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__INTEL_COMPILER</name> <operator>&gt;=</operator> <literal type="number">800</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>expect</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__builtin_expect ((expr),(value)) )</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>expect</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(expr)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>likely</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>expect((expr) != 0, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unlikely</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>expect((expr) != 0, 0)</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>size_t</name></type> <name>reg_t</name>;</typedef>




<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>LZ4_isLittleEndian</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<union><specifier>const</specifier> union <block>{ <decl_stmt><decl><type><name>ut32</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut8</name></type> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>one</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</union> 
<return>return <expr><name><name>one</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LZ4_FORCE_MEMORY_ACCESS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>LZ4_FORCE_MEMORY_ACCESS</name><operator>==</operator><literal type="number">2</literal><operator>)</operator></expr></cpp:if>


<function><type><specifier>static</specifier> <name>ut16</name></type> <name>LZ4_read16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>memPtr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>ut16</name><operator>*</operator><operator>)</operator> <name>memPtr</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>ut32</name></type> <name>LZ4_read32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>memPtr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>ut32</name><operator>*</operator><operator>)</operator> <name>memPtr</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>reg_t</name></type> <name>LZ4_read_ARCH</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>memPtr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>reg_t</name><operator>*</operator><operator>)</operator> <name>memPtr</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LZ4_write16</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>memPtr</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator><name>memPtr</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>LZ4_write32</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>memPtr</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>ut32</name><operator>*</operator><operator>)</operator><name>memPtr</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> </block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LZ4_FORCE_MEMORY_ACCESS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>LZ4_FORCE_MEMORY_ACCESS</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr></cpp:elif>



<typedef>typedef <type><union>union <block>{ <decl_stmt><decl><type><name>ut16</name></type> <name>u16</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut32</name></type> <name>u32</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>reg_t</name></type> <name>uArch</name></decl>;</decl_stmt> }</block></union></type> <name>__attribute__</name>((<name>packed</name>)) <name>unalign</name>;</typedef>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>LZ4_read16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unalign</name><operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>u16</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>ut32</name></type> <name>LZ4_read32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unalign</name><operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>u32</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>reg_t</name></type> <name>LZ4_read_ARCH</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unalign</name><operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>uArch</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LZ4_write16</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>memPtr</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>unalign</name><operator>*</operator><operator>)</operator><name>memPtr</name><operator>)</operator><operator>-&gt;</operator><name>u16</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>LZ4_write32</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>memPtr</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>unalign</name><operator>*</operator><operator>)</operator><name>memPtr</name><operator>)</operator><operator>-&gt;</operator><name>u32</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> </block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>LZ4_read16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>memPtr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>memPtr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>LZ4_read32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>memPtr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>memPtr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>reg_t</name></type> <name>LZ4_read_ARCH</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>memPtr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>reg_t</name></type> <name>val</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>memPtr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LZ4_write16</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>memPtr</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>memPtr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LZ4_write32</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>memPtr</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>memPtr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>LZ4_readLE16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>memPtr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LZ4_isLittleEndian</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>LZ4_read16</name><argument_list>(<argument><expr><name>memPtr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>memPtr</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>ut16</name><operator>)</operator><operator>(</operator><operator>(</operator><name>ut16</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LZ4_writeLE16</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>memPtr</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LZ4_isLittleEndian</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LZ4_write16</name> <argument_list>(<argument><expr><name>memPtr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>memPtr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><name>value</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LZ4_copy8</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>,<argument><expr><name>src</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LZ4_FORCE_O2_INLINE_GCC_PPC64LE</name>
<name>void</name></type> <name>LZ4_wildCopy</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dstPtr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>srcPtr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dstEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>d</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dstPtr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>srcPtr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>e</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dstEnd</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><call><name>LZ4_copy8</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>d</name><operator>+=</operator><literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>+=</operator><literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>d</name><operator>&lt;</operator><name>e</name></expr>)</condition>;</do>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINMATCH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WILDCOPYLENGTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LASTLITERALS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFLIMIT</name></cpp:macro> <cpp:value>(WILDCOPYLENGTH+MINMATCH)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>LZ4_minLength</name> <init>= <expr><operator>(</operator><name>MFLIMIT</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KB</name></cpp:macro> <cpp:value>*(1 &lt;&lt;10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB</name></cpp:macro> <cpp:value>*(1 &lt;&lt;20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB</name></cpp:macro> <cpp:value>*(1U&lt;&lt;30)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXD_LOG</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DISTANCE</name></cpp:macro> <cpp:value>((1 &lt;&lt; MAXD_LOG) - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ML_BITS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ML_MASK</name></cpp:macro> <cpp:value>((1U&lt;&lt;ML_BITS)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN_BITS</name></cpp:macro> <cpp:value>(8-ML_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN_MASK</name></cpp:macro> <cpp:value>((1U&lt;&lt;RUN_BITS)-1)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>LZ4_NbCommonBytes</name> <parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>reg_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LZ4_isLittleEndian</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZ4_FORCE_SW_BITCOUNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_BitScanForward64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>r</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__GNUC__</name><operator>&gt;=</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZ4_FORCE_SW_BITCOUNT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><operator>(</operator><call><name>__builtin_ctzll</name><argument_list>(<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>DeBruijnBytePos</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>DeBruijnBytePos</name><index>[<expr><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>val</name><operator>)</operator> <operator>*</operator> <literal type="number">0x0218A392CDABBD3FULL</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">58</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZ4_FORCE_SW_BITCOUNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_BitScanForward</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>r</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__GNUC__</name><operator>&gt;=</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZ4_FORCE_SW_BITCOUNT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><operator>(</operator><call><name>__builtin_ctz</name><argument_list>(<argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>DeBruijnBytePos</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>DeBruijnBytePos</name><index>[<expr><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name>st32</name><operator>)</operator><name>val</name><operator>)</operator> <operator>*</operator> <literal type="number">0x077CB531U</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">27</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZ4_FORCE_SW_BITCOUNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_BitScanReverse64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>r</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__GNUC__</name><operator>&gt;=</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZ4_FORCE_SW_BITCOUNT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><operator>(</operator><call><name>__builtin_clzll</name><argument_list>(<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut32</name></type> <name>by32</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>unsigned</name></type> <name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>val</name><operator>&gt;&gt;</operator><name>by32</name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>r</name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <expr_stmt><expr><name>r</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>val</name><operator>&gt;&gt;=</operator><name>by32</name></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>val</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>r</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>val</name><operator>&gt;&gt;=</operator><literal type="number">8</literal></expr>;</expr_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <expr_stmt><expr><name>val</name><operator>&gt;&gt;=</operator><literal type="number">24</literal></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <operator>(</operator><operator>!</operator><name>val</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZ4_FORCE_SW_BITCOUNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_BitScanReverse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>r</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__GNUC__</name><operator>&gt;=</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZ4_FORCE_SW_BITCOUNT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><operator>(</operator><call><name>__builtin_clz</name><argument_list>(<argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>unsigned</name></type> <name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>val</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>r</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>val</name><operator>&gt;&gt;=</operator><literal type="number">8</literal></expr>;</expr_stmt> </block_content>}</block></if> <else>else <block>{<block_content> <expr_stmt><expr><name>r</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>val</name><operator>&gt;&gt;=</operator><literal type="number">24</literal></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <operator>(</operator><operator>!</operator><name>val</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STEPSIZE</name></cpp:macro> <cpp:value>sizeof(reg_t)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>LZ4_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>pMatch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>pInLimit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pStart</name> <init>= <expr><name>pIn</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>pIn</name><operator>&lt;</operator><name>pInLimit</name><operator>-</operator><operator>(</operator><name>STEPSIZE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>reg_t</name> <specifier>const</specifier></type> <name>diff</name> <init>= <expr><call><name>LZ4_read_ARCH</name><argument_list>(<argument><expr><name>pMatch</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>LZ4_read_ARCH</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>diff</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>pIn</name><operator>+=</operator><name>STEPSIZE</name></expr>;</expr_stmt> <expr_stmt><expr><name>pMatch</name><operator>+=</operator><name>STEPSIZE</name></expr>;</expr_stmt> <continue>continue;</continue> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pIn</name> <operator>+=</operator> <call><name>LZ4_NbCommonBytes</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>pIn</name> <operator>-</operator> <name>pStart</name><operator>)</operator></expr>;</return>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>STEPSIZE</name><operator>==</operator><literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pIn</name><operator>&lt;</operator><operator>(</operator><name>pInLimit</name><operator>-</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>LZ4_read32</name><argument_list>(<argument><expr><name>pMatch</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>LZ4_read32</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>pIn</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt> <expr_stmt><expr><name>pMatch</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pIn</name><operator>&lt;</operator><operator>(</operator><name>pInLimit</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>LZ4_read16</name><argument_list>(<argument><expr><name>pMatch</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>LZ4_read16</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>pIn</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>pMatch</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pIn</name><operator>&lt;</operator><name>pInLimit</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>pMatch</name> <operator>==</operator> <operator>*</operator><name>pIn</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pIn</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>pIn</name> <operator>-</operator> <name>pStart</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZ4_COMMONDEFS_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>LZ4_64Klimit</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">64</literal> <name>KB</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>MFLIMIT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut32</name></type> <name>LZ4_skipTrigger</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt> 





<typedef>typedef <type><enum>enum <block>{ <decl><name>notLimited</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>limitedOutput</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block></enum></type> <name>limitedOutput_directive</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{ <decl><name>byPtr</name></decl>, <decl><name>byut32</name></decl>, <decl><name>byut16</name></decl> }</block></enum></type> <name>tableType_t</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{ <decl><name>noDict</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>withPrefix64k</name></decl>, <decl><name>usingExtDict</name></decl> }</block></enum></type> <name>dict_directive</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{ <decl><name>noDictIssue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>dictSmall</name></decl> }</block></enum></type> <name>dictIssue_directive</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{ <decl><name>endOnOutputSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>endOnInputSize</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block></enum></type> <name>endCondition_directive</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{ <decl><name>full</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>partial</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block></enum></type> <name>earlyEnd_directive</name>;</typedef>





<function><type><name>int</name></type> <name>LZ4_versionNumber</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>LZ4_VERSION_NUMBER</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>LZ4_versionString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>LZ4_VERSION_STRING</name></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>LZ4_compressBound</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>isize</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>LZ4_COMPRESSBOUND</name><argument_list>(<argument><expr><name>isize</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>LZ4_sizeofState</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>LZ4_STREAMSIZE</name></expr>;</return> </block_content>}</block></function>




<function><type><specifier>static</specifier> <name>ut32</name></type> <name>LZ4_hash4</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>sequence</name></decl></parameter>, <parameter><decl><type><name>tableType_t</name> <specifier>const</specifier></type> <name>tableType</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tableType</name> <operator>==</operator> <name>byut16</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>sequence</name> <operator>*</operator> <literal type="number">2654435761U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>MINMATCH</name><operator>*</operator><literal type="number">8</literal><operator>)</operator><operator>-</operator><operator>(</operator><name>LZ4_HASHLOG</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>sequence</name> <operator>*</operator> <literal type="number">2654435761U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>MINMATCH</name><operator>*</operator><literal type="number">8</literal><operator>)</operator><operator>-</operator><name>LZ4_HASHLOG</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>LZ4_hash5</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>sequence</name></decl></parameter>, <parameter><decl><type><name>tableType_t</name> <specifier>const</specifier></type> <name>tableType</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>prime5bytes</name> <init>= <expr><literal type="number">889523592379ULL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>prime8bytes</name> <init>= <expr><literal type="number">11400714785074694791ULL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>hashLog</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>tableType</name> <operator>==</operator> <name>byut16</name><operator>)</operator></expr> ?</condition><then> <expr><name>LZ4_HASHLOG</name><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>LZ4_HASHLOG</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LZ4_isLittleEndian</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>sequence</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>*</operator> <name>prime5bytes</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>hashLog</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>sequence</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>*</operator> <name>prime8bytes</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>hashLog</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>LZ4_FORCE_INLINE</name> <name>ut32</name></type> <name>LZ4_hashPosition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier> <specifier>const</specifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>tableType_t</name> <specifier>const</specifier></type> <name>tableType</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>reg_t</name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tableType</name> <operator>!=</operator> <name>byut16</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>LZ4_hash5</name><argument_list>(<argument><expr><call><name>LZ4_read_ARCH</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>LZ4_hash4</name><argument_list>(<argument><expr><call><name>LZ4_read32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LZ4_putPositionOnHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tableBase</name></decl></parameter>, <parameter><decl><type><name>tableType_t</name> <specifier>const</specifier></type> <name>tableType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>srcBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>tableType</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>byPtr</name></expr>:</case> <block>{<block_content> <decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier><modifier>*</modifier></type> <name>hashTable</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>*</operator><operator>)</operator><name>tableBase</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name><name>hashTable</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt> <return>return;</return> </block_content>}</block>
<case>case <expr><name>byut32</name></expr>:</case> <block>{<block_content> <decl_stmt><decl><type><name>ut32</name><modifier>*</modifier></type> <name>hashTable</name> <init>= <expr><operator>(</operator><name>ut32</name><operator>*</operator><operator>)</operator> <name>tableBase</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name><name>hashTable</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><name>p</name><operator>-</operator><name>srcBase</name><operator>)</operator></expr>;</expr_stmt> <return>return;</return> </block_content>}</block>
<case>case <expr><name>byut16</name></expr>:</case> <block>{<block_content> <decl_stmt><decl><type><name>ut16</name><modifier>*</modifier></type> <name>hashTable</name> <init>= <expr><operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator> <name>tableBase</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name><name>hashTable</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>)</operator><operator>(</operator><name>p</name><operator>-</operator><name>srcBase</name><operator>)</operator></expr>;</expr_stmt> <return>return;</return> </block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>LZ4_FORCE_INLINE</name> <name>void</name></type> <name>LZ4_putPosition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tableBase</name></decl></parameter>, <parameter><decl><type><name>tableType_t</name></type> <name>tableType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>srcBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name> <specifier>const</specifier></type> <name>h</name> <init>= <expr><call><name>LZ4_hashPosition</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LZ4_putPositionOnHash</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>tableBase</name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>, <argument><expr><name>srcBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>LZ4_getPositionOnHash</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tableBase</name></decl></parameter>, <parameter><decl><type><name>tableType_t</name></type> <name>tableType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>srcBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tableType</name> <operator>==</operator> <name>byPtr</name></expr>)</condition> <block>{<block_content> <decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier><modifier>*</modifier></type> <name>hashTable</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>*</operator><operator>)</operator> <name>tableBase</name></expr></init></decl>;</decl_stmt> <return>return <expr><name><name>hashTable</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</return> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tableType</name> <operator>==</operator> <name>byut32</name></expr>)</condition> <block>{<block_content> <decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name><modifier>*</modifier> <specifier>const</specifier></type> <name>hashTable</name> <init>= <expr><operator>(</operator><name>ut32</name><operator>*</operator><operator>)</operator> <name>tableBase</name></expr></init></decl>;</decl_stmt> <return>return <expr><name><name>hashTable</name><index>[<expr><name>h</name></expr>]</index></name> <operator>+</operator> <name>srcBase</name></expr>;</return> </block_content>}</block></if></if_stmt>
<block>{<block_content> <decl_stmt><decl><type><specifier>const</specifier> <name>ut16</name><modifier>*</modifier> <specifier>const</specifier></type> <name>hashTable</name> <init>= <expr><operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator> <name>tableBase</name></expr></init></decl>;</decl_stmt> <return>return <expr><name><name>hashTable</name><index>[<expr><name>h</name></expr>]</index></name> <operator>+</operator> <name>srcBase</name></expr>;</return> </block_content>}</block> 
</block_content>}</block></function>

<function><type><name>LZ4_FORCE_INLINE</name> <specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>LZ4_getPosition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tableBase</name></decl></parameter>, <parameter><decl><type><name>tableType_t</name></type> <name>tableType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>srcBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name> <specifier>const</specifier></type> <name>h</name> <init>= <expr><call><name>LZ4_hashPosition</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>LZ4_getPositionOnHash</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>tableBase</name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>, <argument><expr><name>srcBase</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>LZ4_FORCE_INLINE</name> <name>int</name></type> <name>LZ4_compress_generic</name><parameter_list>(
<parameter><decl><type><name>LZ4_stream_t_internal</name><modifier>*</modifier> <specifier>const</specifier></type> <name>cctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>source</name></decl></parameter>,
<parameter><decl><type><name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>inputSize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxOutputSize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>limitedOutput_directive</name></type> <name>outputLimited</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>tableType_t</name></type> <name>tableType</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dict_directive</name></type> <name>dict</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dictIssue_directive</name></type> <name>dictIssue</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>acceleration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>ip</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator> <name>source</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>lowLimit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>lowRefLimit</name> <init>= <expr><name>ip</name> <operator>-</operator> <name><name>cctx</name><operator>-&gt;</operator><name>dictSize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>dictionary</name> <init>= <expr><name><name>cctx</name><operator>-&gt;</operator><name>dictionary</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>dictEnd</name> <init>= <expr><name>dictionary</name> <operator>+</operator> <name><name>cctx</name><operator>-&gt;</operator><name>dictSize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>dictDelta</name> <init>= <expr><name>dictEnd</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>source</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>anchor</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator> <name>source</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>iend</name> <init>= <expr><name>ip</name> <operator>+</operator> <name>inputSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>mflimit</name> <init>= <expr><name>iend</name> <operator>-</operator> <name>MFLIMIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>matchlimit</name> <init>= <expr><name>iend</name> <operator>-</operator> <name>LASTLITERALS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>op</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>dest</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>olimit</name> <init>= <expr><name>op</name> <operator>+</operator> <name>maxOutputSize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>forwardH</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ut32</name><operator>)</operator><name>inputSize</name> <operator>&gt;</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name>LZ4_MAX_INPUT_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<switch>switch<condition>(<expr><name>dict</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>withPrefix64k</name></expr>:</case>
<expr_stmt><expr><name>base</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>source</name> <operator>-</operator> <name><name>cctx</name><operator>-&gt;</operator><name>currentOffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lowLimit</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>source</name> <operator>-</operator> <name><name>cctx</name><operator>-&gt;</operator><name>dictSize</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>usingExtDict</name></expr>:</case>
<expr_stmt><expr><name>base</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>source</name> <operator>-</operator> <name><name>cctx</name><operator>-&gt;</operator><name>currentOffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lowLimit</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>source</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>noDict</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>base</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lowLimit</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>source</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tableType</name> <operator>==</operator> <name>byut16</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>inputSize</name><operator>&gt;=</operator><name>LZ4_64Klimit</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>inputSize</name><operator>&lt;</operator><name>LZ4_minLength</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_last_literals</name>;</goto></block_content></block></if></if_stmt> 


<expr_stmt><expr><call><name>LZ4_putPosition</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name><name>cctx</name><operator>-&gt;</operator><name>hashTable</name></name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>forwardH</name> <operator>=</operator> <call><name>LZ4_hashPosition</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>( <init>;</init> <condition>;</condition> <incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>refDelta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>token</name></decl>;</decl_stmt>


<block>{<block_content> <decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>forwardIp</name> <init>= <expr><name>ip</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>step</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>searchMatchNb</name> <init>= <expr><name>acceleration</name> <operator>&lt;&lt;</operator> <name>LZ4_skipTrigger</name></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name> <specifier>const</specifier></type> <name>h</name> <init>= <expr><name>forwardH</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ip</name> <operator>=</operator> <name>forwardIp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>forwardIp</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
<expr_stmt><expr><name>step</name> <operator>=</operator> <operator>(</operator><name>searchMatchNb</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>LZ4_skipTrigger</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>forwardIp</name> <operator>&gt;</operator> <name>mflimit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_last_literals</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>LZ4_getPositionOnHash</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>cctx</name><operator>-&gt;</operator><name>hashTable</name></name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dict</name><operator>==</operator><name>usingExtDict</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>&lt;</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>source</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>refDelta</name> <operator>=</operator> <name>dictDelta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lowLimit</name> <operator>=</operator> <name>dictionary</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>refDelta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lowLimit</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>source</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>forwardH</name> <operator>=</operator> <call><name>LZ4_hashPosition</name><argument_list>(<argument><expr><name>forwardIp</name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LZ4_putPositionOnHash</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>cctx</name><operator>-&gt;</operator><name>hashTable</name></name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>( <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>dictIssue</name><operator>==</operator><name>dictSmall</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>match</name> <operator>&lt;</operator> <name>lowRefLimit</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>||</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>tableType</name><operator>==</operator><name>byut16</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>match</name> <operator>+</operator> <name>MAX_DISTANCE</name> <operator>&lt;</operator> <name>ip</name><operator>)</operator></expr></else></ternary><operator>)</operator>
<operator>||</operator> <operator>(</operator><call><name>LZ4_read32</name><argument_list>(<argument><expr><name>match</name><operator>+</operator><name>refDelta</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>LZ4_read32</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>;</do>
</block_content>}</block>


<while>while <condition>(<expr><operator>(</operator><operator>(</operator><name>ip</name><operator>&gt;</operator><name>anchor</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>match</name><operator>+</operator><name>refDelta</name> <operator>&gt;</operator> <name>lowLimit</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>unlikely</name><argument_list>(<argument><expr><name><name>ip</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>match</name><index>[<expr><name>refDelta</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>ip</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>match</name><operator>--</operator></expr>;</expr_stmt> </block_content>}</block></while>


<block>{<block_content> <decl_stmt><decl><type><name>unsigned</name> <specifier>const</specifier></type> <name>litLength</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>ip</name> <operator>-</operator> <name>anchor</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <name>op</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>outputLimited</name><operator>)</operator> <operator>&amp;&amp;</operator> 
<operator>(</operator><call><name>unlikely</name><argument_list>(<argument><expr><name>op</name> <operator>+</operator> <name>litLength</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>LASTLITERALS</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>litLength</name><operator>/</operator><literal type="number">255</literal><operator>)</operator> <operator>&gt;</operator> <name>olimit</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>litLength</name> <operator>&gt;=</operator> <name>RUN_MASK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>litLength</name><operator>-</operator><name>RUN_MASK</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>token</name> <operator>=</operator> <operator>(</operator><name>RUN_MASK</name><operator>&lt;&lt;</operator><name>ML_BITS</name><operator>)</operator></expr>;</expr_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>len</name> <operator>&gt;=</operator> <literal type="number">255</literal></expr> ;</condition> <incr><expr><name>len</name><operator>-=</operator><literal type="number">255</literal></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>token</name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><name>litLength</name><operator>&lt;&lt;</operator><name>ML_BITS</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>LZ4_wildCopy</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>op</name><operator>+</operator><name>litLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name><operator>+=</operator><name>litLength</name></expr>;</expr_stmt>
</block_content>}</block>

<label><name>_next_match</name>:</label>

<expr_stmt><expr><call><name>LZ4_writeLE16</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>(</operator><name>ut16</name><operator>)</operator><operator>(</operator><name>ip</name><operator>-</operator><name>match</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>matchCode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dict</name><operator>==</operator><name>usingExtDict</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>lowLimit</name><operator>==</operator><name>dictionary</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>limit</name></decl>;</decl_stmt>
<expr_stmt><expr><name>match</name> <operator>+=</operator> <name>refDelta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>ip</name> <operator>+</operator> <operator>(</operator><name>dictEnd</name><operator>-</operator><name>match</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <name>matchlimit</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>limit</name> <operator>=</operator> <name>matchlimit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>matchCode</name> <operator>=</operator> <call><name>LZ4_count</name><argument_list>(<argument><expr><name>ip</name><operator>+</operator><name>MINMATCH</name></expr></argument>, <argument><expr><name>match</name><operator>+</operator><name>MINMATCH</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>MINMATCH</name> <operator>+</operator> <name>matchCode</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ip</name><operator>==</operator><name>limit</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <specifier>const</specifier></type> <name>more</name> <init>= <expr><call><name>LZ4_count</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>source</name></expr></argument>, <argument><expr><name>matchlimit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>matchCode</name> <operator>+=</operator> <name>more</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>more</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>matchCode</name> <operator>=</operator> <call><name>LZ4_count</name><argument_list>(<argument><expr><name>ip</name><operator>+</operator><name>MINMATCH</name></expr></argument>, <argument><expr><name>match</name><operator>+</operator><name>MINMATCH</name></expr></argument>, <argument><expr><name>matchlimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>MINMATCH</name> <operator>+</operator> <name>matchCode</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>outputLimited</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>unlikely</name><argument_list>(<argument><expr><name>op</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>LASTLITERALS</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>matchCode</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>&gt;</operator> <name>olimit</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>matchCode</name> <operator>&gt;=</operator> <name>ML_MASK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>token</name> <operator>+=</operator> <name>ML_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>matchCode</name> <operator>-=</operator> <name>ML_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LZ4_write32</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>matchCode</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>op</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LZ4_write32</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>matchCode</name> <operator>-=</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>op</name> <operator>+=</operator> <name>matchCode</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><name>matchCode</name> <operator>%</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>token</name> <operator>+=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><name>matchCode</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>anchor</name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>ip</name> <operator>&gt;</operator> <name>mflimit</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>LZ4_putPosition</name><argument_list>(<argument><expr><name>ip</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>cctx</name><operator>-&gt;</operator><name>hashTable</name></name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>LZ4_getPosition</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name><name>cctx</name><operator>-&gt;</operator><name>hashTable</name></name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>==</operator> <name>usingExtDict</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>&lt;</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>source</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>refDelta</name> <operator>=</operator> <name>dictDelta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lowLimit</name> <operator>=</operator> <name>dictionary</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>refDelta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lowLimit</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>source</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LZ4_putPosition</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name><name>cctx</name><operator>-&gt;</operator><name>hashTable</name></name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>dictIssue</name><operator>==</operator><name>dictSmall</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>match</name><operator>&gt;=</operator><name>lowRefLimit</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>match</name><operator>+</operator><name>MAX_DISTANCE</name><operator>&gt;=</operator><name>ip</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>LZ4_read32</name><argument_list>(<argument><expr><name>match</name><operator>+</operator><name>refDelta</name></expr></argument>)</argument_list></call><operator>==</operator><call><name>LZ4_read32</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content> <expr_stmt><expr><name>token</name><operator>=</operator><name>op</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>token</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <goto>goto <name>_next_match</name>;</goto> </block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>forwardH</name> <operator>=</operator> <call><name>LZ4_hashPosition</name><argument_list>(<argument><expr><operator>++</operator><name>ip</name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>_last_literals</name>:</label>

<block>{<block_content> <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>lastRun</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>iend</name> <operator>-</operator> <name>anchor</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>outputLimited</name><operator>)</operator> <operator>&amp;&amp;</operator> 
<operator>(</operator><operator>(</operator><name>op</name> <operator>-</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name><operator>)</operator> <operator>+</operator> <name>lastRun</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>lastRun</name><operator>+</operator><literal type="number">255</literal><operator>-</operator><name>RUN_MASK</name><operator>)</operator><operator>/</operator><literal type="number">255</literal><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name>maxOutputSize</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lastRun</name> <operator>&gt;=</operator> <name>RUN_MASK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>accumulator</name> <init>= <expr><name>lastRun</name> <operator>-</operator> <name>RUN_MASK</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <name>RUN_MASK</name> <operator>&lt;&lt;</operator> <name>ML_BITS</name></expr>;</expr_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>accumulator</name> <operator>&gt;=</operator> <literal type="number">255</literal></expr> ;</condition> <incr><expr><name>accumulator</name><operator>-=</operator><literal type="number">255</literal></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <name>accumulator</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><name>lastRun</name><operator>&lt;&lt;</operator><name>ML_BITS</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>lastRun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>+=</operator> <name>lastRun</name></expr>;</expr_stmt>
</block_content>}</block>


<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>op</name><operator>)</operator><operator>-</operator><name>dest</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>LZ4_compress_fast_extState</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxOutputSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>acceleration</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LZ4_stream_t_internal</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>LZ4_stream_t</name><operator>*</operator><operator>)</operator><name>state</name><operator>)</operator><operator>-&gt;</operator><name>internal_donotuse</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LZ4_resetStream</name> <argument_list>(<argument><expr><operator>(</operator><name>LZ4_stream_t</name><operator>*</operator><operator>)</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>acceleration</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>acceleration</name> <operator>=</operator> <name>ACCELERATION_DEFAULT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>maxOutputSize</name> <operator>&gt;=</operator> <call><name>LZ4_compressBound</name><argument_list>(<argument><expr><name>inputSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>inputSize</name> <operator>&lt;</operator> <name>LZ4_64Klimit</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>LZ4_compress_generic</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>inputSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>notLimited</name></expr></argument>, <argument><expr><name>byut16</name></expr></argument>, <argument><expr><name>noDict</name></expr></argument>, <argument><expr><name>noDictIssue</name></expr></argument>, <argument><expr><name>acceleration</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>LZ4_compress_generic</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>inputSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>notLimited</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><name>byut32</name></expr> </then><else>: <expr><name>byPtr</name></expr></else></ternary></expr></argument>, <argument><expr><name>noDict</name></expr></argument>, <argument><expr><name>noDictIssue</name></expr></argument>, <argument><expr><name>acceleration</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>inputSize</name> <operator>&lt;</operator> <name>LZ4_64Klimit</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>LZ4_compress_generic</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>inputSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>, <argument><expr><name>limitedOutput</name></expr></argument>, <argument><expr><name>byut16</name></expr></argument>, <argument><expr><name>noDict</name></expr></argument>, <argument><expr><name>noDictIssue</name></expr></argument>, <argument><expr><name>acceleration</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>LZ4_compress_generic</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>inputSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>, <argument><expr><name>limitedOutput</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><name>byut32</name></expr> </then><else>: <expr><name>byPtr</name></expr></else></ternary></expr></argument>, <argument><expr><name>noDict</name></expr></argument>, <argument><expr><name>noDictIssue</name></expr></argument>, <argument><expr><name>acceleration</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>LZ4_compress_fast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxOutputSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>acceleration</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LZ4_stream_t</name></type> <name>ctx</name></decl>;</decl_stmt>
<return>return <expr><call><name>LZ4_compress_fast_extState</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>inputSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>, <argument><expr><name>acceleration</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>LZ4_compress_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxOutputSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>LZ4_compress_fast</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>inputSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>LZ4_compress_fast_force</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxOutputSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>acceleration</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LZ4_stream_t</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LZ4_resetStream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>inputSize</name> <operator>&lt;</operator> <name>LZ4_64Klimit</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>LZ4_compress_generic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>internal_donotuse</name></name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>inputSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>, <argument><expr><name>limitedOutput</name></expr></argument>, <argument><expr><name>byut16</name></expr></argument>, <argument><expr><name>noDict</name></expr></argument>, <argument><expr><name>noDictIssue</name></expr></argument>, <argument><expr><name>acceleration</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>LZ4_compress_generic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>internal_donotuse</name></name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>inputSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>, <argument><expr><name>limitedOutput</name></expr></argument>, <argument><expr><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">8</literal></expr> ?</condition><then> <expr><name>byut32</name></expr> </then><else>: <expr><name>byPtr</name></expr></else></ternary></expr></argument>, <argument><expr><name>noDict</name></expr></argument>, <argument><expr><name>noDictIssue</name></expr></argument>, <argument><expr><name>acceleration</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>LZ4_compress_destSize_generic</name><parameter_list>(
<parameter><decl><type><name>LZ4_stream_t_internal</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>src</name></decl></parameter>,
<parameter><decl><type><name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier> <specifier>const</specifier></type> <name>srcSizePtr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>targetDstSize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>tableType_t</name></type> <name>tableType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>ip</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator> <name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>base</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator> <name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>lowLimit</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator> <name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>anchor</name> <init>= <expr><name>ip</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>iend</name> <init>= <expr><name>ip</name> <operator>+</operator> <operator>*</operator><name>srcSizePtr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>mflimit</name> <init>= <expr><name>iend</name> <operator>-</operator> <name>MFLIMIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>matchlimit</name> <init>= <expr><name>iend</name> <operator>-</operator> <name>LASTLITERALS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>op</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>oend</name> <init>= <expr><name>op</name> <operator>+</operator> <name>targetDstSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>oMaxLit</name> <init>= <expr><name>op</name> <operator>+</operator> <name>targetDstSize</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>oMaxMatch</name> <init>= <expr><name>op</name> <operator>+</operator> <name>targetDstSize</name> <operator>-</operator> <operator>(</operator><name>LASTLITERALS</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>oMaxSeq</name> <init>= <expr><name>oMaxLit</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>forwardH</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>targetDstSize</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ut32</name><operator>)</operator><operator>*</operator><name>srcSizePtr</name> <operator>&gt;</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name>LZ4_MAX_INPUT_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tableType</name> <operator>==</operator> <name>byut16</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>srcSizePtr</name><operator>&gt;=</operator><name>LZ4_64Klimit</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>srcSizePtr</name><operator>&lt;</operator><name>LZ4_minLength</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_last_literals</name>;</goto></block_content></block></if></if_stmt> 


<expr_stmt><expr><operator>*</operator><name>srcSizePtr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LZ4_putPosition</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hashTable</name></name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>forwardH</name> <operator>=</operator> <call><name>LZ4_hashPosition</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>( <init>;</init> <condition>;</condition> <incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>token</name></decl>;</decl_stmt>


<block>{<block_content> <decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>forwardIp</name> <init>= <expr><name>ip</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>step</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>searchMatchNb</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>LZ4_skipTrigger</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>h</name> <init>= <expr><name>forwardH</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ip</name> <operator>=</operator> <name>forwardIp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>forwardIp</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
<expr_stmt><expr><name>step</name> <operator>=</operator> <operator>(</operator><name>searchMatchNb</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>LZ4_skipTrigger</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>forwardIp</name> <operator>&gt;</operator> <name>mflimit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_last_literals</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>LZ4_getPositionOnHash</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hashTable</name></name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>forwardH</name> <operator>=</operator> <call><name>LZ4_hashPosition</name><argument_list>(<argument><expr><name>forwardIp</name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LZ4_putPositionOnHash</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hashTable</name></name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>( <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>tableType</name><operator>==</operator><name>byut16</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>match</name> <operator>+</operator> <name>MAX_DISTANCE</name> <operator>&lt;</operator> <name>ip</name><operator>)</operator></expr></else></ternary><operator>)</operator>
<operator>||</operator> <operator>(</operator><call><name>LZ4_read32</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>LZ4_read32</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>;</do>
</block_content>}</block>


<while>while <condition>(<expr><operator>(</operator><name>ip</name><operator>&gt;</operator><name>anchor</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>match</name> <operator>&gt;</operator> <name>lowLimit</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>unlikely</name><argument_list>(<argument><expr><name><name>ip</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>match</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>ip</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>match</name><operator>--</operator></expr>;</expr_stmt> </block_content>}</block></while>


<block>{<block_content> <decl_stmt><decl><type><name>unsigned</name></type> <name>litLength</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>ip</name> <operator>-</operator> <name>anchor</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <name>op</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>litLength</name><operator>+</operator><literal type="number">240</literal><operator>)</operator><operator>/</operator><literal type="number">255</literal><operator>)</operator> <operator>+</operator> <name>litLength</name> <operator>&gt;</operator> <name>oMaxLit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>op</name><operator>--</operator></expr>;</expr_stmt>
<goto>goto <name>_last_literals</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>litLength</name><operator>&gt;=</operator><name>RUN_MASK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name> <init>= <expr><name>litLength</name> <operator>-</operator> <name>RUN_MASK</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>token</name><operator>=</operator><operator>(</operator><name>RUN_MASK</name><operator>&lt;&lt;</operator><name>ML_BITS</name><operator>)</operator></expr>;</expr_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>len</name> <operator>&gt;=</operator> <literal type="number">255</literal></expr> ;</condition> <incr><expr><name>len</name><operator>-=</operator><literal type="number">255</literal></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>token</name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><name>litLength</name><operator>&lt;&lt;</operator><name>ML_BITS</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>LZ4_wildCopy</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>op</name><operator>+</operator><name>litLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>+=</operator> <name>litLength</name></expr>;</expr_stmt>
</block_content>}</block>

<label><name>_next_match</name>:</label>

<expr_stmt><expr><call><name>LZ4_writeLE16</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>(</operator><name>ut16</name><operator>)</operator><operator>(</operator><name>ip</name><operator>-</operator><name>match</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>op</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>


<block>{<block_content> <decl_stmt><decl><type><name>size_t</name></type> <name>matchLength</name> <init>= <expr><call><name>LZ4_count</name><argument_list>(<argument><expr><name>ip</name><operator>+</operator><name>MINMATCH</name></expr></argument>, <argument><expr><name>match</name><operator>+</operator><name>MINMATCH</name></expr></argument>, <argument><expr><name>matchlimit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>matchLength</name><operator>+</operator><literal type="number">240</literal><operator>)</operator><operator>/</operator><literal type="number">255</literal><operator>)</operator> <operator>&gt;</operator> <name>oMaxMatch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matchLength</name> <operator>=</operator> <operator>(</operator><literal type="number">15</literal><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>oMaxMatch</name><operator>-</operator><name>op</name><operator>)</operator> <operator>*</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>MINMATCH</name> <operator>+</operator> <name>matchLength</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>matchLength</name><operator>&gt;=</operator><name>ML_MASK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>token</name> <operator>+=</operator> <name>ML_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>matchLength</name> <operator>-=</operator> <name>ML_MASK</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>matchLength</name> <operator>&gt;=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>matchLength</name><operator>-=</operator><literal type="number">255</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt> </block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><name>matchLength</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>token</name> <operator>+=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><name>matchLength</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name>anchor</name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>ip</name> <operator>&gt;</operator> <name>mflimit</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&gt;</operator> <name>oMaxSeq</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>LZ4_putPosition</name><argument_list>(<argument><expr><name>ip</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hashTable</name></name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>LZ4_getPosition</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hashTable</name></name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LZ4_putPosition</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hashTable</name></name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>match</name><operator>+</operator><name>MAX_DISTANCE</name><operator>&gt;=</operator><name>ip</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>LZ4_read32</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call><operator>==</operator><call><name>LZ4_read32</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content> <expr_stmt><expr><name>token</name><operator>=</operator><name>op</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>token</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <goto>goto <name>_next_match</name>;</goto> </block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>forwardH</name> <operator>=</operator> <call><name>LZ4_hashPosition</name><argument_list>(<argument><expr><operator>++</operator><name>ip</name></expr></argument>, <argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>_last_literals</name>:</label>

<block>{<block_content> <decl_stmt><decl><type><name>size_t</name></type> <name>lastRunSize</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>iend</name> <operator>-</operator> <name>anchor</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>lastRunSize</name><operator>+</operator><literal type="number">240</literal><operator>)</operator><operator>/</operator><literal type="number">255</literal><operator>)</operator> <operator>+</operator> <name>lastRunSize</name> <operator>&gt;</operator> <name>oend</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lastRunSize</name> <operator>=</operator> <operator>(</operator><name>oend</name><operator>-</operator><name>op</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lastRunSize</name> <operator>-=</operator> <operator>(</operator><name>lastRunSize</name><operator>+</operator><literal type="number">240</literal><operator>)</operator><operator>/</operator><literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ip</name> <operator>=</operator> <name>anchor</name> <operator>+</operator> <name>lastRunSize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lastRunSize</name> <operator>&gt;=</operator> <name>RUN_MASK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>accumulator</name> <init>= <expr><name>lastRunSize</name> <operator>-</operator> <name>RUN_MASK</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <name>RUN_MASK</name> <operator>&lt;&lt;</operator> <name>ML_BITS</name></expr>;</expr_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>accumulator</name> <operator>&gt;=</operator> <literal type="number">255</literal></expr> ;</condition> <incr><expr><name>accumulator</name><operator>-=</operator><literal type="number">255</literal></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <name>accumulator</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><name>lastRunSize</name><operator>&lt;&lt;</operator><name>ML_BITS</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>lastRunSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>+=</operator> <name>lastRunSize</name></expr>;</expr_stmt>
</block_content>}</block>


<expr_stmt><expr><operator>*</operator><name>srcSizePtr</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>ip</name><operator>)</operator><operator>-</operator><name>src</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>op</name><operator>)</operator><operator>-</operator><name>dst</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>LZ4_compress_destSize_extState</name> <parameter_list>(<parameter><decl><type><name>LZ4_stream_t</name><modifier>*</modifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>srcSizePtr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>targetDstSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>LZ4_resetStream</name> <argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>targetDstSize</name> <operator>&gt;=</operator> <call><name>LZ4_compressBound</name><argument_list>(<argument><expr><operator>*</operator><name>srcSizePtr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<return>return <expr><call><name>LZ4_compress_fast_extState</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>*</operator><name>srcSizePtr</name></expr></argument>, <argument><expr><name>targetDstSize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>srcSizePtr</name> <operator>&lt;</operator> <name>LZ4_64Klimit</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>LZ4_compress_destSize_generic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>internal_donotuse</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>srcSizePtr</name></expr></argument>, <argument><expr><name>targetDstSize</name></expr></argument>, <argument><expr><name>byut16</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>LZ4_compress_destSize_generic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>internal_donotuse</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>srcSizePtr</name></expr></argument>, <argument><expr><name>targetDstSize</name></expr></argument>, <argument><expr><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">8</literal></expr> ?</condition><then> <expr><name>byut32</name></expr> </then><else>: <expr><name>byPtr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>LZ4_compress_destSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>srcSizePtr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>targetDstSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LZ4_stream_t</name></type> <name>ctx</name></decl>;</decl_stmt>
<return>return <expr><call><name>LZ4_compress_destSize_extState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>srcSizePtr</name></expr></argument>, <argument><expr><name>targetDstSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_STATIC_ASSERT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ enum { LZ4_static_assert = 1/(int)(!!(c)) }; }</cpp:value></cpp:define> 
<function><type><name>LZ4_stream_t</name><modifier>*</modifier></type> <name>LZ4_createStream</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LZ4_stream_t</name><modifier>*</modifier></type> <name>lz4s</name> <init>= <expr><operator>(</operator><name>LZ4_stream_t</name><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>LZ4_STREAMSIZE_U64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LZ4_STATIC_ASSERT</name> <argument_list>(<argument><expr><name>LZ4_STREAMSIZE</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LZ4_stream_t_internal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>LZ4_resetStream</name><argument_list>(<argument><expr><name>lz4s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>lz4s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>LZ4_resetStream</name> <parameter_list>(<parameter><decl><type><name>LZ4_stream_t</name><modifier>*</modifier></type> <name>LZ4_stream</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>LZ4_stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LZ4_stream_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>LZ4_freeStream</name> <parameter_list>(<parameter><decl><type><name>LZ4_stream_t</name><modifier>*</modifier></type> <name>LZ4_stream</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>LZ4_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_UNIT</name></cpp:macro> <cpp:value>sizeof(reg_t)</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>LZ4_loadDict</name> <parameter_list>(<parameter><decl><type><name>LZ4_stream_t</name><modifier>*</modifier></type> <name>LZ4_dict</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dictionary</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dictSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LZ4_stream_t_internal</name><modifier>*</modifier></type> <name>dict</name> <init>= <expr><operator>&amp;</operator><name><name>LZ4_dict</name><operator>-&gt;</operator><name>internal_donotuse</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>dictionary</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>dictEnd</name> <init>= <expr><name>p</name> <operator>+</operator> <name>dictSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>base</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>initCheck</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>currentOffset</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <name>GB</name><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>LZ4_resetStream</name><argument_list>(<argument><expr><name>LZ4_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dictSize</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>HASH_UNIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>dictionary</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dictEnd</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">64</literal> <name>KB</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <name>dictEnd</name> <operator>-</operator> <literal type="number">64</literal> <name>KB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>currentOffset</name></name> <operator>+=</operator> <literal type="number">64</literal> <name>KB</name></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>dict</name><operator>-&gt;</operator><name>currentOffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>dictionary</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><name>dictEnd</name> <operator>-</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>currentOffset</name></name> <operator>+=</operator> <name><name>dict</name><operator>-&gt;</operator><name>dictSize</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;=</operator> <name>dictEnd</name><operator>-</operator><name>HASH_UNIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LZ4_putPosition</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>hashTable</name></name></expr></argument>, <argument><expr><name>byut32</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name><name>dict</name><operator>-&gt;</operator><name>dictSize</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LZ4_renormDictT</name><parameter_list>(<parameter><decl><type><name>LZ4_stream_t_internal</name><modifier>*</modifier></type> <name>LZ4_dict</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>LZ4_dict</name><operator>-&gt;</operator><name>currentOffset</name></name> <operator>&gt;</operator> <literal type="number">0x80000000</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>LZ4_dict</name><operator>-&gt;</operator><name>currentOffset</name></name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>src</name><operator>)</operator></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>ut32</name> <specifier>const</specifier></type> <name>delta</name> <init>= <expr><name><name>LZ4_dict</name><operator>-&gt;</operator><name>currentOffset</name></name> <operator>-</operator> <literal type="number">64</literal> <name>KB</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>dictEnd</name> <init>= <expr><name><name>LZ4_dict</name><operator>-&gt;</operator><name>dictionary</name></name> <operator>+</operator> <name><name>LZ4_dict</name><operator>-&gt;</operator><name>dictSize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>LZ4_HASH_SIZE_U32</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>LZ4_dict</name><operator>-&gt;</operator><name>hashTable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>delta</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>LZ4_dict</name><operator>-&gt;</operator><name>hashTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>LZ4_dict</name><operator>-&gt;</operator><name>hashTable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>LZ4_dict</name><operator>-&gt;</operator><name>currentOffset</name></name> <operator>=</operator> <literal type="number">64</literal> <name>KB</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>LZ4_dict</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>&gt;</operator> <literal type="number">64</literal> <name>KB</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>LZ4_dict</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>=</operator> <literal type="number">64</literal> <name>KB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>LZ4_dict</name><operator>-&gt;</operator><name>dictionary</name></name> <operator>=</operator> <name>dictEnd</name> <operator>-</operator> <name><name>LZ4_dict</name><operator>-&gt;</operator><name>dictSize</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>LZ4_compress_fast_continue</name> <parameter_list>(<parameter><decl><type><name>LZ4_stream_t</name><modifier>*</modifier></type> <name>LZ4_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxOutputSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>acceleration</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LZ4_stream_t_internal</name><modifier>*</modifier></type> <name>streamPtr</name> <init>= <expr><operator>&amp;</operator><name><name>LZ4_stream</name><operator>-&gt;</operator><name>internal_donotuse</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>dictEnd</name> <init>= <expr><name><name>streamPtr</name><operator>-&gt;</operator><name>dictionary</name></name> <operator>+</operator> <name><name>streamPtr</name><operator>-&gt;</operator><name>dictSize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>smallest</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator> <name>source</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>streamPtr</name><operator>-&gt;</operator><name>initCheck</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>streamPtr</name><operator>-&gt;</operator><name>dictSize</name></name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>smallest</name><operator>&gt;</operator><name>dictEnd</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>smallest</name> <operator>=</operator> <name>dictEnd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LZ4_renormDictT</name> <argument_list>(<argument><expr><name>streamPtr</name></expr></argument>, <argument><expr><name>smallest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>acceleration</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>acceleration</name> <operator>=</operator> <name>ACCELERATION_DEFAULT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>sourceEnd</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator> <name>source</name> <operator>+</operator> <name>inputSize</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sourceEnd</name> <operator>&gt;</operator> <name><name>streamPtr</name><operator>-&gt;</operator><name>dictionary</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sourceEnd</name> <operator>&lt;</operator> <name>dictEnd</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>streamPtr</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><name>dictEnd</name> <operator>-</operator> <name>sourceEnd</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>streamPtr</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>&gt;</operator> <literal type="number">64</literal> <name>KB</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>streamPtr</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>=</operator> <literal type="number">64</literal> <name>KB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>streamPtr</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>streamPtr</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>streamPtr</name><operator>-&gt;</operator><name>dictionary</name></name> <operator>=</operator> <name>dictEnd</name> <operator>-</operator> <name><name>streamPtr</name><operator>-&gt;</operator><name>dictSize</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>dictEnd</name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>source</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>streamPtr</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>&lt;</operator> <literal type="number">64</literal> <name>KB</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>streamPtr</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>&lt;</operator> <name><name>streamPtr</name><operator>-&gt;</operator><name>currentOffset</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>LZ4_compress_generic</name><argument_list>(<argument><expr><name>streamPtr</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>inputSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>, <argument><expr><name>limitedOutput</name></expr></argument>, <argument><expr><name>byut32</name></expr></argument>, <argument><expr><name>withPrefix64k</name></expr></argument>, <argument><expr><name>dictSmall</name></expr></argument>, <argument><expr><name>acceleration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>LZ4_compress_generic</name><argument_list>(<argument><expr><name>streamPtr</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>inputSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>, <argument><expr><name>limitedOutput</name></expr></argument>, <argument><expr><name>byut32</name></expr></argument>, <argument><expr><name>withPrefix64k</name></expr></argument>, <argument><expr><name>noDictIssue</name></expr></argument>, <argument><expr><name>acceleration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>streamPtr</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>+=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name>inputSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>streamPtr</name><operator>-&gt;</operator><name>currentOffset</name></name> <operator>+=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name>inputSize</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>streamPtr</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>&lt;</operator> <literal type="number">64</literal> <name>KB</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>streamPtr</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>&lt;</operator> <name><name>streamPtr</name><operator>-&gt;</operator><name>currentOffset</name></name><operator>)</operator><operator>)</operator></expr>
?</condition><then> <expr><call><name>LZ4_compress_generic</name><argument_list>(<argument><expr><name>streamPtr</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>inputSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>, <argument><expr><name>limitedOutput</name></expr></argument>, <argument><expr><name>byut32</name></expr></argument>, <argument><expr><name>usingExtDict</name></expr></argument>, <argument><expr><name>dictSmall</name></expr></argument>, <argument><expr><name>acceleration</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>LZ4_compress_generic</name><argument_list>(<argument><expr><name>streamPtr</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>inputSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>, <argument><expr><name>limitedOutput</name></expr></argument>, <argument><expr><name>byut32</name></expr></argument>, <argument><expr><name>usingExtDict</name></expr></argument>, <argument><expr><name>noDictIssue</name></expr></argument>, <argument><expr><name>acceleration</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>streamPtr</name><operator>-&gt;</operator><name>dictionary</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>streamPtr</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name>inputSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>streamPtr</name><operator>-&gt;</operator><name>currentOffset</name></name> <operator>+=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name>inputSize</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>LZ4_compress_forceExtDict</name> <parameter_list>(<parameter><decl><type><name>LZ4_stream_t</name><modifier>*</modifier></type> <name>LZ4_dict</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LZ4_stream_t_internal</name><modifier>*</modifier></type> <name>streamPtr</name> <init>= <expr><operator>&amp;</operator><name><name>LZ4_dict</name><operator>-&gt;</operator><name>internal_donotuse</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>dictEnd</name> <init>= <expr><name><name>streamPtr</name><operator>-&gt;</operator><name>dictionary</name></name> <operator>+</operator> <name><name>streamPtr</name><operator>-&gt;</operator><name>dictSize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>smallest</name> <init>= <expr><name>dictEnd</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>smallest</name> <operator>&gt;</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator> <name>source</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>smallest</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator> <name>source</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LZ4_renormDictT</name><argument_list>(<argument><expr><name>streamPtr</name></expr></argument>, <argument><expr><name>smallest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>LZ4_compress_generic</name><argument_list>(<argument><expr><name>streamPtr</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>inputSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>notLimited</name></expr></argument>, <argument><expr><name>byut32</name></expr></argument>, <argument><expr><name>usingExtDict</name></expr></argument>, <argument><expr><name>noDictIssue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>streamPtr</name><operator>-&gt;</operator><name>dictionary</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>streamPtr</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name>inputSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>streamPtr</name><operator>-&gt;</operator><name>currentOffset</name></name> <operator>+=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name>inputSize</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>LZ4_saveDict</name> <parameter_list>(<parameter><decl><type><name>LZ4_stream_t</name><modifier>*</modifier></type> <name>LZ4_dict</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>safeBuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dictSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LZ4_stream_t_internal</name><modifier>*</modifier> <specifier>const</specifier></type> <name>dict</name> <init>= <expr><operator>&amp;</operator><name><name>LZ4_dict</name><operator>-&gt;</operator><name>internal_donotuse</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>previousDictEnd</name> <init>= <expr><name><name>dict</name><operator>-&gt;</operator><name>dictionary</name></name> <operator>+</operator> <name><name>dict</name><operator>-&gt;</operator><name>dictSize</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ut32</name><operator>)</operator><name>dictSize</name> <operator>&gt;</operator> <literal type="number">64</literal> <name>KB</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dictSize</name> <operator>=</operator> <literal type="number">64</literal> <name>KB</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ut32</name><operator>)</operator><name>dictSize</name> <operator>&gt;</operator> <name><name>dict</name><operator>-&gt;</operator><name>dictSize</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dictSize</name> <operator>=</operator> <name><name>dict</name><operator>-&gt;</operator><name>dictSize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>safeBuffer</name></expr></argument>, <argument><expr><name>previousDictEnd</name> <operator>-</operator> <name>dictSize</name></expr></argument>, <argument><expr><name>dictSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>dictionary</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>safeBuffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name>dictSize</name></expr>;</expr_stmt>

<return>return <expr><name>dictSize</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>LZ4_FORCE_O2_GCC_PPC64LE</name>
<name>LZ4_FORCE_INLINE</name> <name>int</name></type> <name>LZ4_decompress_generic</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>src</name></decl></parameter>,
<parameter><decl><type><name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcSize</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>outputSize</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>endOnInput</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>partialDecoding</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>targetOutputSize</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>dict</name></decl></parameter>, 
<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>lowPrefix</name></decl></parameter>, 
<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>dictStart</name></decl></parameter>, 
<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>dictSize</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>ip</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator> <name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>iend</name> <init>= <expr><name>ip</name> <operator>+</operator> <name>srcSize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>op</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>oend</name> <init>= <expr><name>op</name> <operator>+</operator> <name>outputSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>cpy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>oexit</name> <init>= <expr><name>op</name> <operator>+</operator> <name>targetOutputSize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>dictEnd</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>dictStart</name> <operator>+</operator> <name>dictSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name><name>dec32table</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dec64table</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>safeDecode</name> <init>= <expr><operator>(</operator><name>endOnInput</name><operator>==</operator><name>endOnInputSize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>checkOffset</name> <init>= <expr><operator>(</operator><operator>(</operator><name>safeDecode</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>dictSize</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">64</literal> <name>KB</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>partialDecoding</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>oexit</name> <operator>&gt;</operator> <name>oend</name><operator>-</operator><name>MFLIMIT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>oexit</name> <operator>=</operator> <name>oend</name><operator>-</operator><name>MFLIMIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>endOnInput</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>unlikely</name><argument_list>(<argument><expr><name>outputSize</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>srcSize</name><operator>==</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>ip</name><operator>==</operator><literal type="number">0</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>endOnInput</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>unlikely</name><argument_list>(<argument><expr><name>outputSize</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><ternary><condition><expr><operator>*</operator><name>ip</name><operator>==</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <specifier>const</specifier></type> <name>token</name> <init>= <expr><operator>*</operator><name>ip</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>length</name><operator>=</operator><operator>(</operator><name>token</name><operator>&gt;&gt;</operator><name>ML_BITS</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>RUN_MASK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>s</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>ip</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><ternary><condition><expr><name>endOnInput</name></expr> ?</condition><then> <expr><name>ip</name><operator>&lt;</operator><name>iend</name><operator>-</operator><name>RUN_MASK</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>s</name><operator>==</operator><literal type="number">255</literal><operator>)</operator></expr> )</condition>;</do>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>safeDecode</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>op</name><operator>)</operator><operator>+</operator><name>length</name><operator>&lt;</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>op</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_output_error</name>;</goto></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>safeDecode</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>ip</name><operator>)</operator><operator>+</operator><name>length</name><operator>&lt;</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>ip</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_output_error</name>;</goto></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>cpy</name> <operator>=</operator> <name>op</name><operator>+</operator><name>length</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>(</operator><name>endOnInput</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cpy</name><operator>&gt;</operator><operator>(</operator><ternary><condition><expr><name>partialDecoding</name></expr>?</condition><then><expr><name>oexit</name></expr></then><else>:<expr><name>oend</name><operator>-</operator><name>MFLIMIT</name></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ip</name><operator>+</operator><name>length</name><operator>&gt;</operator><name>iend</name><operator>-</operator><operator>(</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>LASTLITERALS</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name>endOnInput</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>cpy</name><operator>&gt;</operator><name>oend</name><operator>-</operator><name>WILDCOPYLENGTH</name><operator>)</operator><operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>partialDecoding</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cpy</name> <operator>&gt;</operator> <name>oend</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_output_error</name>;</goto></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>endOnInput</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ip</name><operator>+</operator><name>length</name> <operator>&gt;</operator> <name>iend</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_output_error</name>;</goto></block_content></block></if></if_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>endOnInput</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>cpy</name> <operator>!=</operator> <name>oend</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_output_error</name>;</goto></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>endOnInput</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ip</name><operator>+</operator><name>length</name> <operator>!=</operator> <name>iend</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>cpy</name> <operator>&gt;</operator> <name>oend</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_output_error</name>;</goto></block_content></block></if></if_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
<break>break;</break> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LZ4_wildCopy</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>cpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>cpy</name></expr>;</expr_stmt>


<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>LZ4_readLE16</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ip</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>op</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>checkOffset</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>unlikely</name><argument_list>(<argument><expr><name>match</name> <operator>+</operator> <name>dictSize</name> <operator>&lt;</operator> <name>lowPrefix</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_output_error</name>;</goto></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>LZ4_write32</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name>length</name> <operator>=</operator> <name>token</name> <operator>&amp;</operator> <name>ML_MASK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <name>ML_MASK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>s</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>ip</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>endOnInput</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ip</name> <operator>&gt;</operator> <name>iend</name><operator>-</operator><name>LASTLITERALS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_output_error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>s</name><operator>==</operator><literal type="number">255</literal></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>safeDecode</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>op</name><operator>)</operator><operator>+</operator><name>length</name><operator>&lt;</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_output_error</name>;</goto></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <name>MINMATCH</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dict</name><operator>==</operator><name>usingExtDict</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>match</name> <operator>&lt;</operator> <name>lowPrefix</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>op</name><operator>+</operator><name>length</name> <operator>&gt;</operator> <name>oend</name><operator>-</operator><name>LASTLITERALS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_output_error</name>;</goto></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>lowPrefix</name><operator>-</operator><name>match</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>dictEnd</name> <operator>-</operator> <operator>(</operator><name>lowPrefix</name><operator>-</operator><name>match</name><operator>)</operator></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>copySize</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>lowPrefix</name><operator>-</operator><name>match</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>restSize</name> <init>= <expr><name>length</name> <operator>-</operator> <name>copySize</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>dictEnd</name> <operator>-</operator> <name>copySize</name></expr></argument>, <argument><expr><name>copySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>+=</operator> <name>copySize</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>restSize</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>op</name><operator>-</operator><name>lowPrefix</name><operator>)</operator></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>endOfMatch</name> <init>= <expr><name>op</name> <operator>+</operator> <name>restSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>copyFrom</name> <init>= <expr><name>lowPrefix</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>op</name> <operator>&lt;</operator> <name>endOfMatch</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>copyFrom</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>lowPrefix</name></expr></argument>, <argument><expr><name>restSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>+=</operator> <name>restSize</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt> </block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>cpy</name> <operator>=</operator> <name>op</name> <operator>+</operator> <name>length</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>offset</name><operator>&lt;</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dec64</name> <init>= <expr><name><name>dec64table</name><index>[<expr><name>offset</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>match</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>match</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>match</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>match</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>match</name> <operator>+=</operator> <name><name>dec32table</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>op</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>match</name> <operator>-=</operator> <name>dec64</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> <expr_stmt><expr><call><name>LZ4_copy8</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>match</name><operator>+=</operator><literal type="number">8</literal></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>op</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>cpy</name><operator>&gt;</operator><name>oend</name><operator>-</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier> <specifier>const</specifier></type> <name>oCopyLimit</name> <init>= <expr><name>oend</name><operator>-</operator><operator>(</operator><name>WILDCOPYLENGTH</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cpy</name> <operator>&gt;</operator> <name>oend</name><operator>-</operator><name>LASTLITERALS</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_output_error</name>;</goto></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;</operator> <name>oCopyLimit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LZ4_wildCopy</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><name>oCopyLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>match</name> <operator>+=</operator> <name>oCopyLimit</name> <operator>-</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>oCopyLimit</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>op</name><operator>&lt;</operator><name>cpy</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>match</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>LZ4_copy8</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name><operator>&gt;</operator><literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>LZ4_wildCopy</name><argument_list>(<argument><expr><name>op</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>match</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>cpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>cpy</name></expr>;</expr_stmt> 
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>endOnInput</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>op</name><operator>)</operator><operator>-</operator><name>dst</name><operator>)</operator></expr>;</return> 
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>ip</name><operator>)</operator><operator>-</operator><name>src</name><operator>)</operator></expr>;</return> 


<label><name>_output_error</name>:</label>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>-</operator><operator>(</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>ip</name><operator>)</operator><operator>-</operator><name>src</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>LZ4_FORCE_O2_GCC_PPC64LE</name>
<name>int</name></type> <name>LZ4_decompress_safe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compressedSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxDecompressedSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>LZ4_decompress_generic</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>compressedSize</name></expr></argument>, <argument><expr><name>maxDecompressedSize</name></expr></argument>, <argument><expr><name>endOnInputSize</name></expr></argument>, <argument><expr><name>full</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>noDict</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>LZ4_FORCE_O2_GCC_PPC64LE</name>
<name>int</name></type> <name>LZ4_decompress_safe_partial</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compressedSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>targetOutputSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxDecompressedSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>LZ4_decompress_generic</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>compressedSize</name></expr></argument>, <argument><expr><name>maxDecompressedSize</name></expr></argument>, <argument><expr><name>endOnInputSize</name></expr></argument>, <argument><expr><name>partial</name></expr></argument>, <argument><expr><name>targetOutputSize</name></expr></argument>, <argument><expr><name>noDict</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>LZ4_FORCE_O2_GCC_PPC64LE</name>
<name>int</name></type> <name>LZ4_decompress_fast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>originalSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>LZ4_decompress_generic</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>originalSize</name></expr></argument>, <argument><expr><name>endOnOutputSize</name></expr></argument>, <argument><expr><name>full</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>withPrefix64k</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>(</operator><name>dest</name> <operator>-</operator> <literal type="number">64</literal> <name>KB</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">64</literal> <name>KB</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>LZ4_streamDecode_t</name><modifier>*</modifier></type> <name>LZ4_createStreamDecode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>LZ4_streamDecode_t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>LZ4_freeStreamDecode</name> <parameter_list>(<parameter><decl><type><name>LZ4_streamDecode_t</name><modifier>*</modifier></type> <name>LZ4_stream</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>LZ4_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>LZ4_setStreamDecode</name> <parameter_list>(<parameter><decl><type><name>LZ4_streamDecode_t</name><modifier>*</modifier></type> <name>LZ4_streamDecode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dictionary</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dictSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LZ4_streamDecode_t_internal</name><modifier>*</modifier></type> <name>lz4sd</name> <init>= <expr><operator>&amp;</operator><name><name>LZ4_streamDecode</name><operator>-&gt;</operator><name>internal_donotuse</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>prefixSize</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>dictSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>prefixEnd</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator> <name>dictionary</name> <operator>+</operator> <name>dictSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>externalDict</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>extDictSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>








<function><type><name>LZ4_FORCE_O2_GCC_PPC64LE</name>
<name>int</name></type> <name>LZ4_decompress_safe_continue</name> <parameter_list>(<parameter><decl><type><name>LZ4_streamDecode_t</name><modifier>*</modifier></type> <name>LZ4_streamDecode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compressedSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxOutputSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LZ4_streamDecode_t_internal</name><modifier>*</modifier></type> <name>lz4sd</name> <init>= <expr><operator>&amp;</operator><name><name>LZ4_streamDecode</name><operator>-&gt;</operator><name>internal_donotuse</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lz4sd</name><operator>-&gt;</operator><name>prefixEnd</name></name> <operator>==</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>LZ4_decompress_generic</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>compressedSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>,
<argument><expr><name>endOnInputSize</name></expr></argument>, <argument><expr><name>full</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>usingExtDict</name></expr></argument>, <argument><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>prefixEnd</name></name> <operator>-</operator> <name><name>lz4sd</name><operator>-&gt;</operator><name>prefixSize</name></name></expr></argument>, <argument><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>externalDict</name></name></expr></argument>, <argument><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>extDictSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>prefixSize</name></name> <operator>+=</operator> <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>prefixEnd</name></name> <operator>+=</operator> <name>result</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>extDictSize</name></name> <operator>=</operator> <name><name>lz4sd</name><operator>-&gt;</operator><name>prefixSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>externalDict</name></name> <operator>=</operator> <name><name>lz4sd</name><operator>-&gt;</operator><name>prefixEnd</name></name> <operator>-</operator> <name><name>lz4sd</name><operator>-&gt;</operator><name>extDictSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>LZ4_decompress_generic</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>compressedSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>,
<argument><expr><name>endOnInputSize</name></expr></argument>, <argument><expr><name>full</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>usingExtDict</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name></expr></argument>, <argument><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>externalDict</name></name></expr></argument>, <argument><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>extDictSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>prefixSize</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>prefixEnd</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name> <operator>+</operator> <name>result</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>LZ4_FORCE_O2_GCC_PPC64LE</name>
<name>int</name></type> <name>LZ4_decompress_fast_continue</name> <parameter_list>(<parameter><decl><type><name>LZ4_streamDecode_t</name><modifier>*</modifier></type> <name>LZ4_streamDecode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>originalSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LZ4_streamDecode_t_internal</name><modifier>*</modifier></type> <name>lz4sd</name> <init>= <expr><operator>&amp;</operator><name><name>LZ4_streamDecode</name><operator>-&gt;</operator><name>internal_donotuse</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lz4sd</name><operator>-&gt;</operator><name>prefixEnd</name></name> <operator>==</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>LZ4_decompress_generic</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>originalSize</name></expr></argument>,
<argument><expr><name>endOnOutputSize</name></expr></argument>, <argument><expr><name>full</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>usingExtDict</name></expr></argument>, <argument><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>prefixEnd</name></name> <operator>-</operator> <name><name>lz4sd</name><operator>-&gt;</operator><name>prefixSize</name></name></expr></argument>, <argument><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>externalDict</name></name></expr></argument>, <argument><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>extDictSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>prefixSize</name></name> <operator>+=</operator> <name>originalSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>prefixEnd</name></name> <operator>+=</operator> <name>originalSize</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>extDictSize</name></name> <operator>=</operator> <name><name>lz4sd</name><operator>-&gt;</operator><name>prefixSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>externalDict</name></name> <operator>=</operator> <name><name>lz4sd</name><operator>-&gt;</operator><name>prefixEnd</name></name> <operator>-</operator> <name><name>lz4sd</name><operator>-&gt;</operator><name>extDictSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>LZ4_decompress_generic</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>originalSize</name></expr></argument>,
<argument><expr><name>endOnOutputSize</name></expr></argument>, <argument><expr><name>full</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>usingExtDict</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name></expr></argument>, <argument><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>externalDict</name></name></expr></argument>, <argument><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>extDictSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>prefixSize</name></name> <operator>=</operator> <name>originalSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lz4sd</name><operator>-&gt;</operator><name>prefixEnd</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name> <operator>+</operator> <name>originalSize</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>LZ4_FORCE_O2_GCC_PPC64LE</name>
<name>LZ4_FORCE_INLINE</name> <name>int</name></type> <name>LZ4_decompress_usingDict_generic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compressedSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxOutputSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>safe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dictStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dictSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dictSize</name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>LZ4_decompress_generic</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>compressedSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>, <argument><expr><name>safe</name></expr></argument>, <argument><expr><name>full</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>noDict</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dictStart</name><operator>+</operator><name>dictSize</name> <operator>==</operator> <name>dest</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dictSize</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">64</literal> <name>KB</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>LZ4_decompress_generic</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>compressedSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>, <argument><expr><name>safe</name></expr></argument>, <argument><expr><name>full</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>withPrefix64k</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name><operator>-</operator><literal type="number">64</literal> <name>KB</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>LZ4_decompress_generic</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>compressedSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>, <argument><expr><name>safe</name></expr></argument>, <argument><expr><name>full</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>noDict</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name><operator>-</operator><name>dictSize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>LZ4_decompress_generic</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>compressedSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>, <argument><expr><name>safe</name></expr></argument>, <argument><expr><name>full</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>usingExtDict</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>dictStart</name></expr></argument>, <argument><expr><name>dictSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>LZ4_FORCE_O2_GCC_PPC64LE</name>
<name>int</name></type> <name>LZ4_decompress_safe_usingDict</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compressedSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxOutputSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dictStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dictSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>LZ4_decompress_usingDict_generic</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>compressedSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dictStart</name></expr></argument>, <argument><expr><name>dictSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>LZ4_FORCE_O2_GCC_PPC64LE</name>
<name>int</name></type> <name>LZ4_decompress_fast_usingDict</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>originalSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dictStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dictSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>LZ4_decompress_usingDict_generic</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>originalSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dictStart</name></expr></argument>, <argument><expr><name>dictSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LZ4_FORCE_O2_GCC_PPC64LE</name>
<name>int</name></type> <name>LZ4_decompress_safe_forceExtDict</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compressedSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxOutputSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dictStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dictSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>LZ4_decompress_generic</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>compressedSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>, <argument><expr><name>endOnInputSize</name></expr></argument>, <argument><expr><name>full</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>usingExtDict</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>dictStart</name></expr></argument>, <argument><expr><name>dictSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>LZ4_compress_limitedOutput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxOutputSize</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>LZ4_compress_default</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>inputSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>LZ4_compress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputSize</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>LZ4_compress_default</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>inputSize</name></expr></argument>, <argument><expr><call><name>LZ4_compressBound</name><argument_list>(<argument><expr><name>inputSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>LZ4_compress_limitedOutput_withState</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstSize</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>LZ4_compress_fast_extState</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>dstSize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>LZ4_compress_withState</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSize</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>LZ4_compress_fast_extState</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><call><name>LZ4_compressBound</name><argument_list>(<argument><expr><name>srcSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>LZ4_compress_limitedOutput_continue</name> <parameter_list>(<parameter><decl><type><name>LZ4_stream_t</name><modifier>*</modifier></type> <name>LZ4_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxDstSize</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>LZ4_compress_fast_continue</name><argument_list>(<argument><expr><name>LZ4_stream</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>maxDstSize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>LZ4_compress_continue</name> <parameter_list>(<parameter><decl><type><name>LZ4_stream_t</name><modifier>*</modifier></type> <name>LZ4_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputSize</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>LZ4_compress_fast_continue</name><argument_list>(<argument><expr><name>LZ4_stream</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>inputSize</name></expr></argument>, <argument><expr><call><name>LZ4_compressBound</name><argument_list>(<argument><expr><name>inputSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>







<function><type><name>int</name></type> <name>LZ4_uncompress</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outputSize</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>LZ4_decompress_fast</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>outputSize</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>LZ4_uncompress_unknownOutputSize</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxOutputSize</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>LZ4_decompress_safe</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>isize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>




<function><type><name>int</name></type> <name>LZ4_sizeofStreamState</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>LZ4_STREAMSIZE</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LZ4_init</name><parameter_list>(<parameter><decl><type><name>LZ4_stream_t</name><modifier>*</modifier></type> <name>lz4ds</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier></type> <name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>lz4ds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LZ4_stream_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lz4ds</name><operator>-&gt;</operator><name>internal_donotuse</name><operator>.</operator><name>bufferStart</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>LZ4_resetStreamState</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>inputBuffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>state</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>LZ4_init</name><argument_list>(<argument><expr><operator>(</operator><name>LZ4_stream_t</name><operator>*</operator><operator>)</operator><name>state</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>inputBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>LZ4_create</name> <parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>inputBuffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LZ4_stream_t</name><modifier>*</modifier></type> <name>lz4ds</name> <init>= <expr><operator>(</operator><name>LZ4_stream_t</name><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LZ4_stream_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LZ4_init</name> <argument_list>(<argument><expr><name>lz4ds</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>inputBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>lz4ds</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>LZ4_slideInputBuffer</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>LZ4_Data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LZ4_stream_t_internal</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>LZ4_stream_t</name><operator>*</operator><operator>)</operator><name>LZ4_Data</name><operator>)</operator><operator>-&gt;</operator><name>internal_donotuse</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dictSize</name> <init>= <expr><call><name>LZ4_saveDict</name><argument_list>(<argument><expr><operator>(</operator><name>LZ4_stream_t</name><operator>*</operator><operator>)</operator><name>LZ4_Data</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>bufferStart</name></name></expr></argument>, <argument><expr><literal type="number">64</literal> <name>KB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>bufferStart</name></name> <operator>+</operator> <name>dictSize</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>LZ4_decompress_safe_withPrefix64k</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compressedSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxOutputSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>LZ4_decompress_generic</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>compressedSize</name></expr></argument>, <argument><expr><name>maxOutputSize</name></expr></argument>, <argument><expr><name>endOnInputSize</name></expr></argument>, <argument><expr><name>full</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>withPrefix64k</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name> <operator>-</operator> <literal type="number">64</literal> <name>KB</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">64</literal> <name>KB</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>LZ4_decompress_fast_withPrefix64k</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>originalSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>LZ4_decompress_generic</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>originalSize</name></expr></argument>, <argument><expr><name>endOnOutputSize</name></expr></argument>, <argument><expr><name>full</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>withPrefix64k</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name> <operator>-</operator> <literal type="number">64</literal> <name>KB</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">64</literal> <name>KB</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
