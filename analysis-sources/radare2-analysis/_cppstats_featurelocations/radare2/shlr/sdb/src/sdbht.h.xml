<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\sdb\src\sdbht.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SDB_HT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SDB_HT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ht_pp.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <name>sdb_kv</name> <block>{

<decl_stmt><decl><type><name>HtPPKv</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>cas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>expire</name></decl>;</decl_stmt>
}</block></struct></type> <name>SdbKv</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>sdbkv_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>sdbkv_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>sdbkv_key_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key_len</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>sdbkv_value_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value_len</name></name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>SDB_API</name> <name>SdbKv</name><modifier>*</modifier></type> <name>sdbkv_new2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>SDB_API</name> <name>SdbKv</name><modifier>*</modifier></type> <name>sdbkv_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>SDB_API</name> <name>void</name></type> <name>sdbkv_free</name><parameter_list>(<parameter><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>SDB_API</name> <name>ut32</name></type> <name>sdb_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>HtPP</name><modifier>*</modifier></type> <name>sdb_ht_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>void</name></type> <name>sdb_ht_free</name><parameter_list>(<parameter><decl><type><name>HtPP</name><modifier>*</modifier></type> <name>ht</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_ht_insert</name><parameter_list>(<parameter><decl><type><name>HtPP</name><modifier>*</modifier></type> <name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_ht_insert_kvp</name><parameter_list>(<parameter><decl><type><name>HtPP</name><modifier>*</modifier></type> <name>ht</name></decl></parameter>, <parameter><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kvp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>update</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_ht_update</name><parameter_list>(<parameter><decl><type><name>HtPP</name><modifier>*</modifier></type> <name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_ht_delete</name><parameter_list>(<parameter><decl><type><name>HtPP</name><modifier>*</modifier></type> <name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>char</name><modifier>*</modifier></type> <name>sdb_ht_find</name><parameter_list>(<parameter><decl><type><name>HtPP</name><modifier>*</modifier></type> <name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>found</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>SdbKv</name><modifier>*</modifier></type> <name>sdb_ht_find_kvp</name><parameter_list>(<parameter><decl><type><name>HtPP</name><modifier>*</modifier></type> <name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>found</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
