<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\sdb\src\ht_up.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ht_up.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ht_inc.c"</cpp:file></cpp:include>

<expr_stmt><expr><specifier>static</specifier> <call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <macro><name>internal_ht_default_new</name><argument_list>(<argument>ut32 size</argument>, <argument>ut32 prime_idx</argument>, <argument>HT_(DupValue) valdup</argument>, <argument>HT_(KvFreeFunc) pair_free</argument>, <argument>HT_(CalcSizeV) calcsizeV</argument>)</argument_list></macro> <block>{
<macro><name>HT_</name><argument_list>(<argument>Options</argument>)</argument_list></macro> <expr><name>opt</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>cmp</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>hashfn</name> <operator>=</operator> <name>NULL</name></expr>, 
<expr><operator>.</operator><name>dupkey</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>dupvalue</name> <operator>=</operator> <name>valdup</name></expr>,
<expr><operator>.</operator><name>calcsizeK</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>calcsizeV</name> <operator>=</operator> <name>calcsizeV</name></expr>,
<expr><operator>.</operator><name>freefn</name> <operator>=</operator> <name>pair_free</name></expr>,
<expr><operator>.</operator><name>elem_size</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr>;
<return>return <expr><call><name>internal_ht_new</name> <argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>prime_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>SDB_API</name></type> <name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list><modifier>*</modifier> <name>Ht_</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list><argument_list>(<argument><expr><macro><name>HT_</name><argument_list>(<argument>DupValue</argument>)</argument_list></macro> <name>valdup</name></expr></argument>, <argument><expr><macro><name>HT_</name><argument_list>(<argument>KvFreeFunc</argument>)</argument_list></macro> <name>pair_free</name></expr></argument>, <argument><expr><macro><name>HT_</name><argument_list>(<argument>CalcSizeV</argument>)</argument_list></macro> <name>calcsizeV</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>internal_ht_default_new</name> <argument_list>(<argument><expr><name><name>ht_primes_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>valdup</name></expr></argument>, <argument><expr><name>pair_free</name></expr></argument>, <argument><expr><name>calcsizeV</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>SDB_API</name></type> <name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list><modifier>*</modifier> <name>Ht_</name><argument_list>(<argument><expr><name>new0</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><call><name>Ht_</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>SDB_API</name></type> <name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list><modifier>*</modifier> <name>Ht_</name><argument_list>(<argument><expr><name>new_size</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>ut32</name> <name>initial_size</name></expr></argument>, <argument><expr><macro><name>HT_</name><argument_list>(<argument>DupValue</argument>)</argument_list></macro> <name>valdup</name></expr></argument>, <argument><expr><macro><name>HT_</name><argument_list>(<argument>KvFreeFunc</argument>)</argument_list></macro> <name>pair_free</name></expr></argument>, <argument><expr><macro><name>HT_</name><argument_list>(<argument>CalcSizeV</argument>)</argument_list></macro> <name>calcsizeV</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name>S_ARRAY_SIZE</name> <argument_list>(<argument><expr><name>ht_primes_sizes</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>ht_primes_sizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>LOAD_FACTOR</name> <operator>&lt;</operator> <name>initial_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>S_ARRAY_SIZE</name> <argument_list>(<argument><expr><name>ht_primes_sizes</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>UT32_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>sz</name> <init>= <expr><call><name>compute_size</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><name>initial_size</name> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>LOAD_FACTOR</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>internal_ht_default_new</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>valdup</name></expr></argument>, <argument><expr><name>pair_free</name></expr></argument>, <argument><expr><name>calcsizeV</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</unit>
