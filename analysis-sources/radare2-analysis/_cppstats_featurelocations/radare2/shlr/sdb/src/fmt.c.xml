<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\sdb\src\fmt.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sdb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>concat</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (x) { int size = 2+strlen(x?x:"")+(out?strlen(out)+4:0); if (out) { char *o = realloc (out, size); if (o) {strcat (o, ",");strcat (o, x);out = o;} } else {out = strdup (x);} }</cpp:value></cpp:define>












<function><type><name>SDB_API</name> <name>char</name> <modifier>*</modifier></type><name>sdb_fmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KL</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KN</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>Key</name><index>[<expr><name>KN</name></expr>]</index><index>[<expr><name>KL</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>KN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>Key</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name> <argument_list>(<argument><expr><name><name>Key</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>KL</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Key</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>KL</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>Key</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>char</name> <modifier>*</modifier></type><name>sdb_fmt_tostr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <operator>!</operator><name>fmt</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>fmt</name></expr>;</condition> <incr><expr><name>fmt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><call><name>concat</name> <argument_list>(<argument><expr><call><name>sdb_itoa</name> <argument_list>(<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <name>len</name><operator>)</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><call><name>concat</name> <argument_list>(<argument><expr><call><name>sdb_itoa</name> <argument_list>(<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>short</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <name>len</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><call><name>concat</name> <argument_list>(<argument><expr><call><name>sdb_itoa</name> <argument_list>(<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <name>len</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><call><name>concat</name> <argument_list>(<argument><expr><call><name>sdb_itoa</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <name>len</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<expr_stmt><expr><call><name>concat</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>e_str</name> <operator>=</operator> <call><name>sdb_encode</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <name>len</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>concat</name> <argument_list>(<argument><expr><name>e_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>e_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><call><name>concat</name> <argument_list>(<argument><expr><call><name>sdb_itoa</name> <argument_list>(<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <name>len</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><sizeof>sizeof <argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>SDB_API</name> <name>int</name></type> <name>sdb_fmt_tobin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stru</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>items</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stru8</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>stru</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>word</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e_str</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_str</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>_str</name> <operator>||</operator> <operator>!</operator><name>fmt</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>fmt</name></expr>;</condition> <incr><expr><name>fmt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>word</name> <operator>=</operator> <call><name>sdb_anext</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>word</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>word</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>items</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<switch>switch <condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>(</operator><name>stru8</name> <operator>+</operator> <name>idx</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><call><name>sdb_atoi</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><name>stru8</name> <operator>+</operator> <name>idx</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>sdb_atoi</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>*</operator><operator>)</operator><operator>(</operator><name>stru8</name> <operator>+</operator> <name>idx</name><operator>)</operator><operator>)</operator> <operator>=</operator> <call><name>sdb_atoi</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>short</name><operator>*</operator><operator>)</operator><operator>(</operator><name>stru8</name> <operator>+</operator> <name>idx</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><call><name>sdb_atoi</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>e_str</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sdb_decode</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>stru8</name> <operator>+</operator> <name>idx</name><operator>)</operator><operator>)</operator> <operator>=</operator> <ternary><condition><expr><name>e_str</name></expr>?</condition><then> <expr><name>e_str</name></expr></then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>stru8</name> <operator>+</operator> <name>idx</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>strdup</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>stru8</name> <operator>+</operator> <name>idx</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><call><name>sdb_atoi</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>idx</name> <operator>+=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><sizeof>sizeof <argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>items</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>void</name></type> <name>sdb_fmt_free</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stru</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>fmt</name></expr>;</condition> <incr><expr><name>fmt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'p'</literal></expr>:</case> 
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>stru</name> <operator>+</operator> <name>len</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><sizeof>sizeof <argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>int</name></type> <name>sdb_fmt_init</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>fmt</name></expr>;</condition> <incr><expr><name>fmt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><name>len</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut8</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="char">'h'</literal></expr>:</case> <expr_stmt><expr><name>len</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="char">'d'</literal></expr>:</case> <expr_stmt><expr><name>len</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="char">'q'</literal></expr>:</case> <expr_stmt><expr><name>len</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="char">'z'</literal></expr>:</case> <expr_stmt><expr><name>len</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name>len</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="char">'p'</literal></expr>:</case> <expr_stmt><expr><name>len</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <break>break;</break> 
</block_content>}</block></switch>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sdb_anext2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nxt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>SDB_RS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nxt</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>nxt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name>nxt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>SDB_API</name> <name>ut64</name><modifier>*</modifier></type> <name>sdb_fmt_array_num</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>retp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>list</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>list</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>ut32</name><operator>)</operator> <call><name>sdb_alen</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>retp</name> <operator>=</operator> <name>ret</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>retp</name><operator>++</operator> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>sdb_anext2</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>n</name> <init>= <expr><call><name>sdb_atoi</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>retp</name><operator>++</operator> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>next</name></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>sdb_fmt_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_s</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>retp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>list</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>list</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>sdb_alen</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>retp</name> <operator>=</operator> <name>ret</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_s</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ret</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>sdb_anext2</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slen</name> <init>= <expr><ternary><condition><expr><name>next</name></expr>?</condition><then> <expr><operator>(</operator><name>next</name> <operator>-</operator> <name>str</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></then><else>:
<expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>_s</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_s</name><index>[<expr><name>slen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>retp</name><operator>++</operator> <operator>=</operator> <name>_s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_s</name> <operator>+=</operator> <name>slen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>next</name></expr>)</condition>;</do>
<expr_stmt><expr><operator>*</operator><name>retp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
