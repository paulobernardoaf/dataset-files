<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\sdb\src\sdbht.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sdbht.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>sdbkv_fini</name><parameter_list>(<parameter><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>HtPP</name><modifier>*</modifier></type> <name>sdb_ht_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><call><name>ht_pp_new</name> <argument_list>(<argument><expr><operator>(</operator><name>HtPPDupValue</name><operator>)</operator><name>strdup</name></expr></argument>, <argument><expr><operator>(</operator><name>HtPPKvFreeFunc</name><operator>)</operator><name>sdbkv_fini</name></expr></argument>, <argument><expr><operator>(</operator><name>HtPPCalcSizeV</name><operator>)</operator><name>strlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ht</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>elem_size</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>SdbKv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ht</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sdb_ht_internal_insert</name><parameter_list>(<parameter><decl><type><name>HtPP</name><modifier>*</modifier></type> <name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>update</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ht</name> <operator>||</operator> <operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>SdbKv</name></type> <name>kvp</name> <init>= <expr><block>{<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>kvp</name><operator>.</operator><name>base</name><operator>.</operator><name>key</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kvp</name><operator>.</operator><name>base</name><operator>.</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>kvp</name><operator>.</operator><name>base</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kvp</name><operator>.</operator><name>base</name><operator>.</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>kvp</name><operator>.</operator><name>base</name><operator>.</operator><name>key_len</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>kvp</name><operator>.</operator><name>base</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kvp</name><operator>.</operator><name>base</name><operator>.</operator><name>value_len</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>kvp</name><operator>.</operator><name>base</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kvp</name><operator>.</operator><name>expire</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>ht_pp_insert_kv</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><operator>(</operator><name>HtPPKv</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>kvp</name></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>err</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>kvp</name><operator>.</operator><name>base</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>kvp</name><operator>.</operator><name>base</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_ht_insert</name><parameter_list>(<parameter><decl><type><name>HtPP</name><modifier>*</modifier></type> <name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sdb_ht_internal_insert</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_ht_insert_kvp</name><parameter_list>(<parameter><decl><type><name>HtPP</name><modifier>*</modifier></type> <name>ht</name></decl></parameter>, <parameter><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kvp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>update</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ht_pp_insert_kv</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><operator>(</operator><name>HtPPKv</name><operator>*</operator><operator>)</operator><name>kvp</name></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_ht_update</name><parameter_list>(<parameter><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sdb_ht_internal_insert</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>SdbKv</name><modifier>*</modifier></type> <name>sdb_ht_find_kvp</name><parameter_list>(<parameter><decl><type><name>HtPP</name><modifier>*</modifier></type> <name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>found</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>SdbKv</name> <operator>*</operator><operator>)</operator><call><name>ht_pp_find_kv</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>char</name><modifier>*</modifier></type> <name>sdb_ht_find</name><parameter_list>(<parameter><decl><type><name>HtPP</name><modifier>*</modifier></type> <name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>found</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>ht_pp_find</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>void</name></type> <name>sdb_ht_free</name><parameter_list>(<parameter><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ht_pp_free</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_ht_delete</name><parameter_list>(<parameter><decl><type><name>HtPP</name><modifier>*</modifier></type> <name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ht_pp_delete</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
