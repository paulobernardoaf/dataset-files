<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\sdb\src\dict.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sdb.h"</cpp:file></cpp:include>

<function><type><name>SDB_API</name> <name>dict</name> <modifier>*</modifier></type><name>dict_new</name> <parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>dict_freecb</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dict_init</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>R_MAX</name> <argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ut32</name></type> <name>dict_bucket</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>dicti</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>k</name> <operator>%</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>dict_init</name> <parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>dict_freecb</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dictkv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>table</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>void</name></type> <name>dict_fini</name> <parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>f</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dictkv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>kv</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>k</name></name> <operator>!=</operator> <name>MHTNO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>f</name></name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kv</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_init</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>void</name></type> <name>dict_free</name> <parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>dict_fini</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>SDB_API</name> <name>dicti</name></type> <name>dict_hash</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>dicti</name><operator>)</operator><call><name>sdb_hash</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>dict_set</name> <parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>dicti</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>dicti</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m</name> <operator>||</operator> <operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>k</name> <operator>==</operator> <name>MHTNO</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bucket</name> <init>= <expr><call><name>dict_bucket</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictkv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>bucket</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kv</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dictkv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>bucket</name></expr>]</index></name> <operator>=</operator> <name>kv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>MHTNO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>MHTNO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><call><name>dict_set</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>dictkv</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>kv</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>k</name></name> <operator>!=</operator> <name>MHTNO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>k</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>kv</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<decl_stmt><decl><type><name>int</name></type> <name>curln</name> <init>= <expr><operator>(</operator><name>kv</name> <operator>-</operator> <name>tmp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictkv</name> <modifier>*</modifier></type><name>newkv</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>curln</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dictkv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newkv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kv</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>bucket</name></expr>]</index></name> <operator>=</operator> <name>newkv</name></expr>;</expr_stmt>
<expr_stmt><expr><name>kv</name> <operator>+=</operator> <name>curln</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
<expr_stmt><expr><name>kv</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>MHTNO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>MHTNO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>void</name></type> <name>dict_stats</name> <parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d: "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dictkv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>kv</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>k</name></name> <operator>!=</operator> <name>MHTNO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>kv</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>dictkv</name> <modifier>*</modifier></type><name>dict_getr</name> <parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>dicti</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bucket</name> <init>= <expr><call><name>dict_bucket</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictkv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>bucket</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>kv</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>k</name></name> <operator>!=</operator> <name>MHTNO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>k</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>kv</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>kv</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>dicti</name></type> <name>dict_get</name> <parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>dicti</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictkv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><call><name>dict_getr</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>kv</name></expr> ?</condition><then> <expr><name><name>kv</name><operator>-&gt;</operator><name>v</name></name></expr> </then><else>: <expr><name>MHTNO</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>void</name> <modifier>*</modifier></type><name>dict_getu</name> <parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>dicti</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictkv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><call><name>dict_getr</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>kv</name></expr> ?</condition><then> <expr><name><name>kv</name><operator>-&gt;</operator><name>u</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>dict_add</name> <parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>dicti</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>dicti</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>dict_getr</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><call><name>dict_set</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>dict_del</name> <parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>dicti</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bucket</name> <init>= <expr><call><name>dict_bucket</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>MHTNO</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>dictkv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>bucket</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>kv</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>k</name></name> <operator>!=</operator> <name>MHTNO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>k</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>f</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>f</name></name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>dictkv</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name>kv</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>k</name></name> <operator>!=</operator> <name>MHTNO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>kv</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>MHTNO</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>kv</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>SDB_API</name> <name>void</name></type> <name>dict_foreach</name> <parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>dictkv_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>iterate</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name>iterate</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dictkv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>kv</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>k</name></name> <operator>!=</operator> <name>MHTNO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>cb</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iterate</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>kv</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char *dict_str(dict *m, dicti k) {

char *res = malloc (1024);
int bucket = k % m-&gt;size;
dicti *kv = m-&gt;table[bucket];
char *p = res;
for (i = 0; i &lt; 1024; i++) {
sprintf (p, "%s%lld", comma, kv-&gt;v);
p += strlen (p);
kv++;
}
return res;
}

static char *dict_str(dict *m) {
char *res = malloc (1024);
int bucket = k % m-&gt;size;
dicti *kv = m-&gt;table[bucket];
int i;
char *p = res;
for (i = 0; i &lt; m-&gt;size; i++) {
sprintf (p, "%s%lld", comma, kv-&gt;v);
p += strlen (p);
kv++;
}
return res;
}

int main() {
dict m;
dict_init (&amp;m, 2, free);
dict_set (&amp;m, 0x100, 1, NULL);
dict_set (&amp;m, 0x200, 2, NULL);
dict_set (&amp;m, 0x300, 3, NULL);
dict_set (&amp;m, 0x400, 4, NULL);
printf ("%d %d\n", (int)dict_get(&amp;m, 0x100), (int)dict_get(&amp;m, 0x200));
printf ("%d %d\n", (int)dict_get(&amp;m, 0x300), (int)dict_get(&amp;m, 0x400));
dict_stats(&amp;m);

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
dict_set(&amp;m, dict_hash("username"), 1024, NULL);
dict_set(&amp;m, 32, 212, strdup("test"));
dict_del(&amp;m, dict_hash("username"));
printf ("%d\n", (int)dict_get(&amp;m, dict_hash("username")));
printf ("%s\n", dict_getu(&amp;m, 32)); 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
dict_fini(&amp;m);
return 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
