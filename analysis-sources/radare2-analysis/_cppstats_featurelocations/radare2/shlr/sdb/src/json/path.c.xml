<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\sdb\src\json\path.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rangstr.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../types.h"</cpp:file></cpp:include>

<function><type><name>SDB_IPI</name> <name>void</name></type> <name>json_path_first</name><parameter_list>(<parameter><decl><type><name>Rangstr</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>p</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <ternary><condition><expr><name>p</name></expr>?</condition><then> <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name></name><operator>)</operator></expr></then><else>: <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SDB_IPI</name> <name>int</name></type> <name>json_path_next</name><parameter_list>(<parameter><decl><type><name>Rangstr</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>stop</name> <init>= <expr><literal type="char">'.'</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name><operator>||</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>p</name></name><operator>||</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>t</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>t</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>t</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>rep</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>t</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>stop</name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>t</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>t</name></name></expr>]</index></name> <operator>==</operator> <name>stop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>t</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>t</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>t</name></name></expr>]</index></name> <operator>!=</operator> <name>stop</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>t</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>t</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>t</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>f</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>t</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>rep</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>f</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>f</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>t</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
typedef int (*JSONCallback)();

int json_foreach(const char *s, JSONCallback cb UNUSED) {
int i, len, ret;
unsigned short *res = NULL;
len = strlen (s);
res = malloc (len);
ret = sdb_js0n ((const unsigned char *)s, len, res);
if (!ret) return 0;
if (*s=='[') {
for (i=0; res[i]; i+=2) {
printf ("%d %.*s\n", i, res[i+1], s+res[i]);
}
} else {
for (i=0; res[i]; i+=4) {
printf ("%.*s = ", res[i+1], s+res[i]);
printf ("%.*s\n", res[i+3], s+res[i+2]);
}
}
return 1;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
SDB_IPI int json_walk (const char *s) {
RangstrType *res;
int i, ret, len = strlen (s);
res = malloc (len+1);
ret = sdb_js0n ((const unsigned char *)s, len, res);
if (!ret) {
free (res);
return 0;
}
if (*s=='[' || *s=='{') {
for (i=0; res[i]; i+=2) {
printf ("%d %.*s\n", i, res[i+1], s+res[i]);
}
} else {
for (i=0; res[i]; i+=4) {
printf ("%.*s = ", res[i+1], s+res[i]);
printf ("%.*s\n", res[i+3], s+res[i+2]);
}
}
free (res);
return 1;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SDB_IPI</name> <name>Rangstr</name></type> <name>json_find</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Rangstr</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESFIXSZ</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<decl_stmt><decl><type><name>RangstrType</name></type> <name><name>resfix</name><index>[<expr><name>RESFIXSZ</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RangstrType</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>resfix</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rangstr</name></type> <name>rsn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rangstr_null</name> <argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>RESFIXSZ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RangstrType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot allocate %d byte%s\n"</literal></expr></argument>,
<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"s"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rangstr_null</name> <argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sdb_js0n</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFREE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (x &amp;&amp; x != resfix) free (x)</cpp:value></cpp:define>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PFREE</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rangstr_null</name> <argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rangstr_int</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rsn</name> <operator>=</operator> <call><name>rangstr_news</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PFREE</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rsn</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Rangstr</name></type> <name>rsn</name> <init>= <expr><call><name>rangstr_news</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rangstr_cmp</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rsn</name> <operator>=</operator> <call><name>rangstr_news</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PFREE</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rsn</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<label><name>beach</name>:</label>
<expr_stmt><expr><call><name>PFREE</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rangstr_null</name> <argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_IPI</name> <name>Rangstr</name></type> <name>json_get</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>js</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rangstr</name></type> <name>rj2</name></decl>, <decl><type ref="prev"/><name>rj</name> <init>= <expr><call><name>rangstr_new</name> <argument_list>(<argument><expr><name>js</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rangstr</name></type> <name>rs</name> <init>= <expr><call><name>rangstr_new</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>json_path_first</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>rst</name> <operator>=</operator> <name><name>rs</name><operator>.</operator><name>t</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>f</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>rangstr_find</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>f</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
printf ("x = %d f = %d t = %d\n", x, rs.f, rs.t);
fprintf (stderr, "source (%s)\n", rangstr_dup (&amp;rs));
fprintf (stderr, "onjson (%s)\n", rangstr_dup (&amp;rj));
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>rst</name> <operator>==</operator> <name><name>rs</name><operator>.</operator><name>t</name></name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>rj</name><operator>.</operator><name>p</name></name></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rj</name><operator>.</operator><name>p</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>rj2</name> <operator>=</operator> <call><name>json_find</name> <argument_list>(<argument><expr><call><name>rangstr_str</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rj2</name><operator>.</operator><name>p</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rj</name><operator>.</operator><name>p</name><index>[<expr><name><name>rj</name><operator>.</operator><name>t</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>rj2</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rj</name> <operator>=</operator> <name>rj2</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
fprintf (stderr, "-- (%s)\n", rangstr_dup (&amp;rj));
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block> while <condition>(<expr><call><name>json_path_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
printf ("x = %d\n", x); printf ("rsf = %d\n", rs.f);
fprintf (stderr, "xxx (%s)\n", rangstr_dup (&amp;rj));
return rj;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rst</name> <operator>==</operator> <name><name>rs</name><operator>.</operator><name>t</name></name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>rj</name><operator>.</operator><name>p</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>rst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>x</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>;</do>
<return>return <expr><name>rj</name></expr>;</return>
</block_content>}</block></function>
</unit>
