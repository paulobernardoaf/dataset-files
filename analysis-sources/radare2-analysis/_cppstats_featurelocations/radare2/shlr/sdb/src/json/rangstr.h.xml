<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\sdb\src\json\rangstr.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_INCLUDE_RANGSTR_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_INCLUDE_RANGSTR_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../types.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RangstrType</name></cpp:macro> <cpp:value>unsigned short</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>f</name></decl>, <name>t</name>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
}</block></struct></type> <name>Rangstr</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
SDB_IPI void rangstr_print (Rangstr *s);
SDB_IPI Rangstr rangstr_new (const char *s);
SDB_IPI Rangstr rangstr_null(void);
SDB_IPI int rangstr_int (Rangstr *s);
SDB_IPI char *rangstr_dup (Rangstr *rs);
SDB_IPI Rangstr rangstr_news (const char *s, RangstrType *res, int i);
SDB_IPI int rangstr_cmp (Rangstr *a, Rangstr *b);
SDB_IPI const char *rangstr_str (Rangstr* rs);
SDB_IPI int rangstr_length (Rangstr* rs);
SDB_IPI int rangstr_find (Rangstr* rs, char ch);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
