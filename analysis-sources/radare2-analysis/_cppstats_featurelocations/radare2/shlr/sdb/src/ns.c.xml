<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\sdb\src\ns.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sdb.h"</cpp:file></cpp:include>

<function><type><name>SDB_API</name> <name>void</name></type> <name>sdb_ns_lock</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbNs</name> <modifier>*</modifier></type><name>ns</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ns_lock</name></name> <operator>=</operator> <name>lock</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>depth</name></expr>)</condition> <block>{<block_content> 
<macro><name>ls_foreach</name> <argument_list>(<argument>s-&gt;ns</argument>, <argument>it</argument>, <argument>ns</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_ns_lock</name> <argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>depth</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>in_list</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SdbNs</name> <modifier>*</modifier></type><name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name> <operator>&amp;&amp;</operator> <name>item</name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>ls_foreach</name> <argument_list>(<argument>list</argument>, <argument>it</argument>, <argument>ns</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>ns</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ns_free</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SdbListIter</name></type> <name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>deleted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbNs</name> <modifier>*</modifier></type><name>ns</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name> <operator>||</operator> <operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>in_list</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ls_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ls_foreach</name> <argument_list>(<argument>s-&gt;ns</argument>, <argument>it</argument>, <argument>ns</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>deleted</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>in_list</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ls_delete</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ns</name></name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>deleted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ls_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ns_free</name> <argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>deleted</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_delete</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ns</name></name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>it</name> <operator>=</operator> <operator>&amp;</operator><name>next</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ns</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>void</name></type> <name>sdb_ns_free</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>ls_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ns_free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ns</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SdbNs</name> <modifier>*</modifier></type><name>sdb_ns_new</name> <parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>dir</name><index>[<expr><name>SDB_MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbNs</name> <modifier>*</modifier></type><name>ns</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>dir</name></name> <operator>&amp;&amp;</operator> <name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dir_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dir_len</name><operator>+</operator><name>name_len</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>&gt;</operator><name>SDB_MAX_PATH</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name>dir_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>dir</name> <operator>+</operator> <name>dir_len</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>dir</name> <operator>+</operator> <name>dir_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dir</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>SdbNs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ns</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <ternary><condition><expr><name>name</name></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ns</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ns</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_ns_unset</name> <parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SdbNs</name> <modifier>*</modifier></type><name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>name</name> <operator>||</operator> <name>r</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<macro><name>ls_foreach</name> <argument_list>(<argument>s-&gt;ns</argument>, <argument>it</argument>, <argument>ns</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ns</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ls_delete</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ns</name></name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name> <operator>==</operator> <name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ls_delete</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ns</name></name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>int</name></type> <name>sdb_ns_set</name> <parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SdbNs</name> <modifier>*</modifier></type><name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>hash</name> <init>= <expr><call><name>sdb_hash</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><name>r</name> <operator>||</operator> <operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>ls_foreach</name> <argument_list>(<argument>s-&gt;ns</argument>, <argument>it</argument>, <argument>ns</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ns</name><operator>-&gt;</operator><name>hash</name></name> <operator>==</operator> <name>hash</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name> <operator>==</operator> <name>r</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>refs</name></name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ns_lock</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr><name>SdbNs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>refs</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_append</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ns</name></name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>Sdb</name> <modifier>*</modifier></type><name>sdb_ns</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>create</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbNs</name> <modifier>*</modifier></type><name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>hash</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>sdb_hash</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ls_foreach</name> <argument_list>(<argument>s-&gt;ns</argument>, <argument>it</argument>, <argument>ns</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ns</name><operator>-&gt;</operator><name>hash</name></name> <operator>==</operator> <name>hash</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>create</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ns_lock</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>sdb_ns_new</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ns</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ls_append</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ns</name></name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>Sdb</name> <modifier>*</modifier></type><name>sdb_ns_path</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>create</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><name>path</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>str</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>slash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdb_ns</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>slash</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>slash</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ns_sync</name> <parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SdbNs</name> <modifier>*</modifier></type><name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<macro><name>ls_foreach</name> <argument_list>(<argument>s-&gt;ns</argument>, <argument>it</argument>, <argument>ns</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>in_list</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ls_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ns_sync</name> <argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_sync</name> <argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>sdb_sync</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>void</name></type> <name>sdb_ns_sync</name> <parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>ls_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ns_sync</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
