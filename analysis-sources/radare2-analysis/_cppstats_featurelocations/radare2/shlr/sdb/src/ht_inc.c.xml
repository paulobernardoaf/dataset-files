<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\sdb\src\ht_inc.c">

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_FACTOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ARRAY_SIZE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof (x) / sizeof (x[0]))</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut32</name></type> <name><name>ht_primes_sizes</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">131</literal></expr>,
<expr><literal type="number">163</literal></expr>, <expr><literal type="number">197</literal></expr>, <expr><literal type="number">239</literal></expr>, <expr><literal type="number">293</literal></expr>, <expr><literal type="number">353</literal></expr>, <expr><literal type="number">431</literal></expr>, <expr><literal type="number">521</literal></expr>, <expr><literal type="number">631</literal></expr>, <expr><literal type="number">761</literal></expr>, <expr><literal type="number">919</literal></expr>,
<expr><literal type="number">1103</literal></expr>, <expr><literal type="number">1327</literal></expr>, <expr><literal type="number">1597</literal></expr>, <expr><literal type="number">1931</literal></expr>, <expr><literal type="number">2333</literal></expr>, <expr><literal type="number">2801</literal></expr>, <expr><literal type="number">3371</literal></expr>, <expr><literal type="number">4049</literal></expr>, <expr><literal type="number">4861</literal></expr>,
<expr><literal type="number">5839</literal></expr>, <expr><literal type="number">7013</literal></expr>, <expr><literal type="number">8419</literal></expr>, <expr><literal type="number">10103</literal></expr>, <expr><literal type="number">12143</literal></expr>, <expr><literal type="number">14591</literal></expr>, <expr><literal type="number">17519</literal></expr>, <expr><literal type="number">21023</literal></expr>,
<expr><literal type="number">25229</literal></expr>, <expr><literal type="number">30293</literal></expr>, <expr><literal type="number">36353</literal></expr>, <expr><literal type="number">43627</literal></expr>, <expr><literal type="number">52361</literal></expr>, <expr><literal type="number">62851</literal></expr>, <expr><literal type="number">75431</literal></expr>, <expr><literal type="number">90523</literal></expr>,
<expr><literal type="number">108631</literal></expr>, <expr><literal type="number">130363</literal></expr>, <expr><literal type="number">156437</literal></expr>, <expr><literal type="number">187751</literal></expr>, <expr><literal type="number">225307</literal></expr>, <expr><literal type="number">270371</literal></expr>, <expr><literal type="number">324449</literal></expr>,
<expr><literal type="number">389357</literal></expr>, <expr><literal type="number">467237</literal></expr>, <expr><literal type="number">560689</literal></expr>, <expr><literal type="number">672827</literal></expr>, <expr><literal type="number">807403</literal></expr>, <expr><literal type="number">968897</literal></expr>, <expr><literal type="number">1162687</literal></expr>,
<expr><literal type="number">1395263</literal></expr>, <expr><literal type="number">1674319</literal></expr>, <expr><literal type="number">2009191</literal></expr>, <expr><literal type="number">2411033</literal></expr>, <expr><literal type="number">2893249</literal></expr>, <expr><literal type="number">3471899</literal></expr>,
<expr><literal type="number">4166287</literal></expr>, <expr><literal type="number">4999559</literal></expr>, <expr><literal type="number">5999471</literal></expr>, <expr><literal type="number">7199369</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>hashfn</name><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>k</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>hashfn</name></name></expr> ?</condition><then> <expr><call><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>hashfn</name></name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>KEY_TO_HASH</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>bucketfn</name><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>k</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>hashfn</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>ht</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>KEY_TYPE</name></type> <name>dupkey</name><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>k</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>dupkey</name></name></expr> ?</condition><then> <expr><call><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>dupkey</name></name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name>KEY_TYPE</name><operator>)</operator><name>k</name></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE_TYPE</name></type> <name>dupval</name><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>VALUE_TYPE</name> <name>v</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>dupvalue</name></name></expr> ?</condition><then> <expr><call><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>dupvalue</name></name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name>VALUE_TYPE</name><operator>)</operator><name>v</name></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>calcsize_key</name><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>k</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>calcsizeK</name></name></expr> ?</condition><then> <expr><call><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>calcsizeK</name></name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>calcsize_val</name><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>VALUE_TYPE</name> <name>v</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>calcsizeV</name></name></expr> ?</condition><then> <expr><call><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>calcsizeV</name></name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>freefn</name><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ht</name></expr></argument>, <argument><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><name>kv</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>freefn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>freefn</name></name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>next_idx</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>UT32_MAX</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <call><name>S_ARRAY_SIZE</name> <argument_list>(<argument><expr><name>ht_primes_sizes</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>UT32_MAX</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>compute_size</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>


<return>return <expr><ternary><condition><expr><name>idx</name> <operator>!=</operator> <name>UT32_MAX</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <call><name>S_ARRAY_SIZE</name><argument_list>(<argument><expr><name>ht_primes_sizes</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>ht_primes_sizes</name><index>[<expr><name>idx</name></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name>sz</name> <operator>|</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_kv_equal</name><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>key</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ut32</name> <name>key_len</name></expr></argument>, <argument><expr><specifier>const</specifier> <call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><name>kv</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key_len</name> <operator>!=</operator> <name><name>kv</name><operator>-&gt;</operator><name>key_len</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>key</name> <operator>==</operator> <name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name> <operator>&amp;&amp;</operator> <name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>cmp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>!</operator><call><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>cmp</name></name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <specifier>inline</specifier> <call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><macro><name>kv_at</name><argument_list>(<argument>HtName_(Ht) *ht</argument>, <argument>HT_(Bucket) *bt</argument>, <argument>ut32 i</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>bt</name><operator>-&gt;</operator><name>arr</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>elem_size</name></name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <specifier>inline</specifier> <call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><macro><name>next_kv</name><argument_list>(<argument>HtName_(Ht) *ht</argument>, <argument>HT_(Kv) *kv</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>kv</name> <operator>+</operator> <name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>elem_size</name></name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUCKET_FOREACH</name><parameter_list>(<parameter><type><name>ht</name></type></parameter>, <parameter><type><name>bt</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>kv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((bt)-&gt;arr) for ((j) = 0, (kv) = (bt)-&gt;arr; (j) &lt; (bt)-&gt;count; (j)++, (kv) = next_kv (ht, kv))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUCKET_FOREACH_SAFE</name><parameter_list>(<parameter><type><name>ht</name></type></parameter>, <parameter><type><name>bt</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>count</name></type></parameter>, <parameter><type><name>kv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((bt)-&gt;arr) for ((j) = 0, (kv) = (bt)-&gt;arr, (count) = (ht)-&gt;count; (j) &lt; (bt)-&gt;count; (j) = (count) == (ht)-&gt;count? j + 1: j, (kv) = (count) == (ht)-&gt;count? next_kv (ht, kv): kv, (count) = (ht)-&gt;count)</cpp:value></cpp:define>














<expr_stmt><expr><specifier>static</specifier> <call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <macro><name>internal_ht_new</name><argument_list>(<argument>ut32 size</argument>, <argument>ut32 prime_idx</argument>, <argument>HT_(Options) *opt</argument>)</argument_list></macro> <block>{
<expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <name>ht</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>ht</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ht</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block>
<name><name>ht</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>prime_idx</name></name> <operator>=</operator> <name>prime_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>ht</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ht</name><operator>-&gt;</operator><name>table</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <operator>*</operator><name>opt</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>elem_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>elem_size</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ht</name></expr>;</return>
}

SDB_API <expr_stmt><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call> <operator>*</operator><macro><name>Ht_</name><argument_list>(<argument>new_opt</argument>)</argument_list></macro><operator>(</operator><call><name>HT_</name><argument_list>(<argument><expr><name>Options</name></expr></argument>)</argument_list></call> <operator>*</operator><name>opt</name><operator>)</operator> <block>{
<return>return <expr><call><name>internal_ht_new</name> <argument_list>(<argument><expr><name><name>ht_primes_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>SDB_API</name> <name>void</name> <name>Ht_</name></type><argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <name>ht</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ht</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ht</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Bucket</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bt</name> <operator>=</operator> <operator>&amp;</operator><name><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><name>kv</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>freefn</name></name></expr>)</condition> <block>{<block_content>
<macro><name>BUCKET_FOREACH</name> <argument_list>(<argument>ht</argument>, <argument>bt</argument>, <argument>j</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>freefn</name></name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bt</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>internal_ht_grow</name><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <name>ht</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <name>ht2</name></expr>;</expr_stmt>
<macro><name>HtName_</name><argument_list>(<argument>Ht</argument>)</argument_list></macro> <expr_stmt><expr><name>swap</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>idx</name> <init>= <expr><call><name>next_idx</name> <argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>prime_idx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>sz</name> <init>= <expr><call><name>compute_size</name> <argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ht2</name> <operator>=</operator> <call><name>internal_ht_new</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ht</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ht2</name></expr>)</condition> <block>{<block_content>


<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ht</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Bucket</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bt</name> <operator>=</operator> <operator>&amp;</operator><name><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><name>kv</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>j</name></decl>;</decl_stmt>

<macro><name>BUCKET_FOREACH</name> <argument_list>(<argument>ht</argument>, <argument>bt</argument>, <argument>j</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>
<function_decl><type><name>Ht_</name></type>(<name>insert_kv</name>) <parameter_list>(<parameter><decl><type><name>ht2</name></type></decl></parameter>, <parameter><decl><type><name>kv</name></type></decl></parameter>, <parameter><decl><type><name>false</name></type></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block>
</block_content>}</block></for>

<expr_stmt><expr><name>swap</name> <operator>=</operator> <operator>*</operator><name>ht</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ht</name> <operator>=</operator> <operator>*</operator><name>ht2</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ht2</name> <operator>=</operator> <name>swap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ht2</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>freefn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<function_decl><type><name>Ht_</name></type>(<name>free</name>) <parameter_list>(<parameter><decl><type><name>ht2</name></type></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>check_growing</name><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ht</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name>LOAD_FACTOR</name> <operator>*</operator> <name><name>ht</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>internal_ht_grow</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><macro><name>reserve_kv</name><argument_list>(<argument>HtName_(Ht) *ht</argument>, <argument>const KEY_TYPE key</argument>, <argument>const int key_len</argument>, <argument>bool update</argument>)</argument_list></macro> <block>{
<expr><call><name>HT_</name><argument_list>(<argument><expr><name>Bucket</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bt</name> <operator>=</operator> <operator>&amp;</operator><name><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><call><name>bucketfn</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;
<expr><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><name>kvtmp</name></expr>;
<expr><name>ut32</name> <name>j</name></expr>;

<macro><name>BUCKET_FOREACH</name> <argument_list>(<argument>ht</argument>, <argument>bt</argument>, <argument>j</argument>, <argument>kvtmp</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><call><name>is_kv_equal</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>kvtmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>update</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freefn</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>kvtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>kvtmp</name></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></expr></expr_stmt>
}

HT_<expr_stmt><expr><operator>(</operator><name>Kv</name><operator>)</operator> <operator>*</operator><name>newkvarr</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name><name>bt</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>bt</name><operator>-&gt;</operator><name>count</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>elem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newkvarr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bt</name><operator>-&gt;</operator><name>arr</name></name> <operator>=</operator> <name>newkvarr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bt</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><call><name>kv_at</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>, <argument><expr><name><name>bt</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}

SDB_API <decl_stmt><decl><type><name>bool</name> <name>Ht_</name></type><argument_list>(<argument><expr><name>insert_kv</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ht</name></expr></argument>, <argument><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><name>kv</name></expr></argument>, <argument><expr><name>bool</name> <name>update</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><name>kv_dst</name> <operator>=</operator> <call><name>reserve_kv</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key_len</name></name></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kv_dst</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>kv_dst</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>elem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_growing</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>insert_update</name><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>key</name></expr></argument>, <argument><expr><name>VALUE_TYPE</name> <name>value</name></expr></argument>, <argument><expr><name>bool</name> <name>update</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>key_len</name> <init>= <expr><call><name>calcsize_key</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call><operator>*</operator> <name>kv_dst</name> <operator>=</operator> <call><name>reserve_kv</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kv_dst</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>kv_dst</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>dupkey</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv_dst</name><operator>-&gt;</operator><name>key_len</name></name> <operator>=</operator> <name>key_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv_dst</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>dupval</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv_dst</name><operator>-&gt;</operator><name>value_len</name></name> <operator>=</operator> <call><name>calcsize_val</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_growing</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>SDB_API</name> <name>bool</name> <name>Ht_</name></type><argument_list>(<argument><expr><name>insert</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>key</name></expr></argument>, <argument><expr><name>VALUE_TYPE</name> <name>value</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>insert_update</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>SDB_API</name> <name>bool</name> <name>Ht_</name></type><argument_list>(<argument><expr><name>update</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>key</name></expr></argument>, <argument><expr><name>VALUE_TYPE</name> <name>value</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>insert_update</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>SDB_API</name> <name>bool</name> <name>Ht_</name></type><argument_list>(<argument><expr><name>update_key</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>old_key</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>new_key</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE_TYPE</name></type> <name>value</name> <init>= <expr><call><call><name>Ht_</name><argument_list>(<argument><expr><name>find</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>old_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>inserted</name> <init>= <expr><call><name>insert_update</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>new_key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inserted</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Bucket</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bt</name> <operator>=</operator> <operator>&amp;</operator><name><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><call><name>bucketfn</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>old_key</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>old_key_len</name> <init>= <expr><call><name>calcsize_key</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>old_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><name>kv</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>j</name></decl>;</decl_stmt>

<macro><name>BUCKET_FOREACH</name> <argument_list>(<argument>ht</argument>, <argument>bt</argument>, <argument>j</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_kv_equal</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>old_key</name></expr></argument>, <argument><expr><name>old_key_len</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>dupvalue</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>HT_NULL_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>value_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>freefn</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>next_kv</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name><name>bt</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>elem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bt</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><name>SDB_API</name></type> <name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list><modifier>*</modifier> <name>Ht_</name><argument_list>(<argument><expr><name>find_kv</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>key</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator> <name>found</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ht</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Bucket</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bt</name> <operator>=</operator> <operator>&amp;</operator><name><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><call><name>bucketfn</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>key_len</name> <init>= <expr><call><name>calcsize_key</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><name>kv</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>j</name></decl>;</decl_stmt>

<macro><name>BUCKET_FOREACH</name> <argument_list>(<argument>ht</argument>, <argument>bt</argument>, <argument>j</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_kv_equal</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>kv</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><name>SDB_API</name> <name>VALUE_TYPE</name> <name>Ht_</name></type><argument_list>(<argument><expr><name>find</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>key</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator> <name>found</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><name>res</name> <operator>=</operator> <call><call><name>Ht_</name><argument_list>(<argument><expr><name>find_kv</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>res</name></expr> ?</condition><then> <expr><name><name>res</name><operator>-&gt;</operator><name>value</name></name></expr> </then><else>: <expr><name>HT_NULL_VALUE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>SDB_API</name> <name>bool</name> <name>Ht_</name></type><argument_list>(<argument><expr><name>delete</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call><operator>*</operator> <name>ht</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>KEY_TYPE</name> <name>key</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Bucket</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bt</name> <operator>=</operator> <operator>&amp;</operator><name><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><call><name>bucketfn</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>key_len</name> <init>= <expr><call><name>calcsize_key</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><name>kv</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>j</name></decl>;</decl_stmt>

<macro><name>BUCKET_FOREACH</name> <argument_list>(<argument>ht</argument>, <argument>bt</argument>, <argument>j</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_kv_equal</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freefn</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>next_kv</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name><name>bt</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>elem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bt</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>SDB_API</name> <name>void</name> <name>Ht_</name></type><argument_list>(<argument><expr><name>foreach</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>HtName_</name><argument_list>(<argument><expr><name>Ht</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ht</name></expr></argument>, <argument><expr><macro><name>HT_</name><argument_list>(<argument>ForeachCallback</argument>)</argument_list></macro> <name>cb</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>user</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ht</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Bucket</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bt</name> <operator>=</operator> <operator>&amp;</operator><name><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HT_</name><argument_list>(<argument><expr><name>Kv</name></expr></argument>)</argument_list></call> <operator>*</operator><name>kv</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<macro><name>BUCKET_FOREACH_SAFE</name> <argument_list>(<argument>ht</argument>, <argument>bt</argument>, <argument>j</argument>, <argument>count</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cb</name> <argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>
</unit>
