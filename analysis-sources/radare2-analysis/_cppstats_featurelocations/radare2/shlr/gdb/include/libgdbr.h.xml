<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\gdb\include\libgdbr.h">
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBGDBR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBGDBR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>ssize_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_types_base.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_th.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_NOT_SUPPORTED</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_ERROR_1</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GDB_REMOTE_TYPE_GDB</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GDB_REMOTE_TYPE_LLDB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GDB_MAX_PKTSZ</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <name>libgdbr_message_t</name> <block>{
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>chk</name></decl>;</decl_stmt> 
}</block></struct></type> <name>libgdbr_message_t</name>;</typedef>





<typedef>typedef <type><struct>struct <name>libgdbr_stub_features_t</name> <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>pkt_sz</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>qXfer_btrace_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>qXfer_btrace_conf_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>qXfer_spu_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>qXfer_spu_write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>qXfer_libraries_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>qXfer_libraries_svr4_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>qXfer_siginfo_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>qXfer_siginfo_write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>qXfer_auxv_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>qXfer_exec_file_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>qXfer_features_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>qXfer_memory_map_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>qXfer_sdata_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>qXfer_threads_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>qXfer_traceframe_info_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>qXfer_uib_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>qXfer_fdpic_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>qXfer_osdata_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Qbtrace_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Qbtrace_bts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Qbtrace_pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Qbtrace_conf_bts_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Qbtrace_conf_pt_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>QNonStop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>QCatchSyscalls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>QPassSignals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>QStartNoAckMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>QAgent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>QAllow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>QDisableRandomization</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>QTBuffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>QThreadEvents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>StaticTracepoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>InstallInTrace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ConditionalBreakpoints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ConditionalTracepoints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ReverseContinue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ReverseStep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>swbreak</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hwbreak</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>fork_events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>vfork__events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>exec_events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>vContSupported</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>no_resumed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>augmented_libraries_svr4_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>multiprocess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>TracepointSource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>EnableDisableTracepoints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>tracenz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>BreakpointCommands</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>QThreadSuffixSupported</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>QListThreadsInStopReply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>qEcho</name></decl>;</decl_stmt>
}</block> <decl><name>lldb</name></decl>;</struct>

<decl_stmt><decl><type><name>bool</name></type> <name>qC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extended_mode</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>c</name></decl>, <name>C</name>, <name>s</name>, <name>S</name>, <name>t</name>, <name>r</name>;</decl_stmt>
}</block> <decl><name>vcont</name></decl>;</struct>
<decl_stmt><decl><type><name>bool</name></type> <name>P</name></decl>;</decl_stmt>
}</block></struct></type> <name>libgdbr_stub_features_t</name>;</typedef>




<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct libgdbr_fstat_t {
unsigned dev;
unsigned ino;
unsigned mode;
unsigned numlinks;
unsigned uid;
unsigned gid;
unsigned rdev;
uint64_t size;
uint64_t blksize;
uint64_t blocks;
unsigned atime;
unsigned mtime;
unsigned ctime;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>libgdbr_fstat_t</name></expr>;</expr_stmt>




<typedef>typedef <type><struct>struct <name>libgdbr_stop_reason</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>signum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>core</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reason</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>syscall</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>library</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>swbreak</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hwbreak</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>create</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>vforkdone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_valid</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>present</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>
}</block> <decl><name>watchpoint</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>present</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
}</block> <decl><name>exec</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>present</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl>;</decl_stmt>
}</block> <decl><name>thread</name></decl>, <name>fork</name>, <name>vfork</name>;</struct>
}</block></struct></type> <name>libgdbr_stop_reason_t</name>;</typedef>





<typedef>typedef <type><struct>struct <name>libgdbr_t</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>send_buff</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ssize_t</name></type> <name>send_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>send_max</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>read_buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>read_max</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ssize_t</name></type> <name>read_len</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>connected</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>acks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>data_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>data_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gdb_reg_t</name> <modifier>*</modifier></type><name>registers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>page_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>attached</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>libgdbr_stub_features_t</name></type> <name>stub_features</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>remote_file_fd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>num_retries</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>remote_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>no_ack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>server_debug</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>get_baddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libgdbr_stop_reason_t</name></type> <name>stop_reason</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RThreadLock</name> <modifier>*</modifier></type><name>gdbr_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gdbr_lock_depth</name></decl>;</decl_stmt> 


<struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>regprofile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arch</name></decl>, <name>bits</name>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>valid</name></decl>;</decl_stmt>
}</block> <decl><name>target</name></decl>;</struct>

<decl_stmt><decl><type><name>bool</name></type> <name>isbreaked</name></decl>;</decl_stmt>
}</block></struct></type> <name>libgdbr_t</name>;</typedef>





<function_decl><type><name>int</name></type> <name>gdbr_init</name><parameter_list>(<parameter><decl><type><name>libgdbr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_server</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>gdbr_set_architecture</name><parameter_list>(<parameter><decl><type><name>libgdbr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gdbr_get_reg_profile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>arch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>gdbr_set_reg_profile</name><parameter_list>(<parameter><decl><type><name>libgdbr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>gdbr_cleanup</name><parameter_list>(<parameter><decl><type><name>libgdbr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
