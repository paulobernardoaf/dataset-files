<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\gdb\src\common.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libgdbr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdbr_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_util/r_str.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>handle_qSupported</name><parameter_list>(<parameter><decl><type><name>libgdbr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tok</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"PacketSize="</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>pkt_sz</name></name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><call><name>strtoul</name> <argument_list>(<argument><expr><name>tok</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"PacketSize="</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>pkt_sz</name></name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>pkt_sz</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"qXfer:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tok</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>tok</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"btrace:read"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_btrace_read</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"btrace:read"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"btrace-conf:read"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_btrace_conf_read</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"btrace-conf:read"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"spu:read"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_spu_read</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"spu:read"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"spu:write"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_spu_write</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"spu:write"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"libraries:read"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_libraries_read</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"libraries:read"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"libraries-svr4:read"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_libraries_svr4_read</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"libraries-svr4:read"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"memory-map:read"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_memory_map_read</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"memory-map:read"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"auxv:read"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_auxv_read</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"auxv:read"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"exec-file:read"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_exec_file_read</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"exec-file:read"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"features:read"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_features_read</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"features:read"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"sdata:read"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_sdata_read</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"sdata:read"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"siginfo:read"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_siginfo_read</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"siginfo:read"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"siginfo:write"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_siginfo_write</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"siginfo:write"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"threads:read"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_threads_read</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"threads:read"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"traceframe-info:read"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_traceframe_info_read</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"traceframe-info:read"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"uib:read"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_uib_read</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"uib:read"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"fdpic:read"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_fdpic_read</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"fdpic:read"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"osdata:read"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_osdata_read</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"osdata:read"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tok</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'Q'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"Qbtrace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tok</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"Qbtrace"</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>tok</name> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":off"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>Qbtrace_off</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":bts"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>Qbtrace_bts</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":pt"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>Qbtrace_pt</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"-conf:bts:size"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>Qbtrace_conf_bts_size</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"-conf:bts:size"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":-conf:pt:size"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>Qbtrace_conf_pt_size</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"-conf:pt:size"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"QNonStop"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>QNonStop</name></name> <operator>=</operator> <operator>(</operator><name><name>tok</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"QNonStop"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"QCatchSyscalls"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>QCatchSyscalls</name></name> <operator>=</operator> <operator>(</operator><name><name>tok</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"QCatchSyscalls"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"QPassSignals"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>QPassSignals</name></name> <operator>=</operator> <operator>(</operator><name><name>tok</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"QPassSignals"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"QStartNoAckMode"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>QStartNoAckMode</name></name> <operator>=</operator> <operator>(</operator><name><name>tok</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"QStartNoAckMode"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"QAgent"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>QAgent</name></name> <operator>=</operator> <operator>(</operator><name><name>tok</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"QAgent"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"QAllow"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>QAllow</name></name> <operator>=</operator> <operator>(</operator><name><name>tok</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"QAllow"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"QDisableRandomization"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>QDisableRandomization</name></name> <operator>=</operator> <operator>(</operator><name><name>tok</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"QDisableRandomization"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"QTBuffer:size"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>QTBuffer_size</name></name> <operator>=</operator> <operator>(</operator><name><name>tok</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"QTBuffer:size"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"QThreadEvents"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>QThreadEvents</name></name> <operator>=</operator> <operator>(</operator><name><name>tok</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"QThreadEvents"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"QThreadSuffixSupported"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>=</operator> <name>GDB_REMOTE_TYPE_LLDB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>lldb</name><operator>.</operator><name>QThreadSuffixSupported</name></name>
<operator>=</operator> <operator>(</operator><name><name>tok</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"QThreadSuffixSupported"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"QListThreadsInStopReply"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>=</operator> <name>GDB_REMOTE_TYPE_LLDB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>lldb</name><operator>.</operator><name>QListThreadsInStopReply</name></name>
<operator>=</operator> <operator>(</operator><name><name>tok</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"QListThreadsInStopReply"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"multiprocess"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>multiprocess</name></name> <operator>=</operator> <operator>(</operator><name><name>tok</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"multiprocess"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"qEcho"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>=</operator> <name>GDB_REMOTE_TYPE_LLDB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>lldb</name><operator>.</operator><name>qEcho</name></name> <operator>=</operator> <operator>(</operator><name><name>tok</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"qEcho"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"ReverseStep"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>ReverseStep</name></name> <operator>=</operator> <operator>(</operator><name><name>tok</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"ReverseStep"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"ReverseContinue"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>ReverseContinue</name></name> <operator>=</operator> <operator>(</operator><name><name>tok</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"ReverseContinue"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><call><name>send_ack</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>send_ack</name><parameter_list>(<parameter><decl><type><name>libgdbr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>g</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>no_ack</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_socket_write</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>server_debug</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[sent ack]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>send_msg</name><parameter_list>(<parameter><decl><type><name>libgdbr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name> <operator>||</operator> <operator>!</operator><name>msg</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pack</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>send_packet</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>send_len</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
