<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\zip\zlib\compress.c">






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZLIB_INTERNAL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zlib.h"</cpp:file></cpp:include>












<function><type><name>int</name> <name>ZEXPORT</name></type> <name>compress2</name> <parameter_list>(<parameter><decl><type><name>dest</name></type></decl></parameter>, <parameter><decl><type><name>destLen</name></type></decl></parameter>, <parameter><decl><type><name>source</name></type></decl></parameter>, <parameter><decl><type><name>sourceLen</name></type></decl></parameter>, <parameter><decl><type><name>level</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>Bytef</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLongf</name> <modifier>*</modifier></type><name>destLen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Bytef</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLong</name></type> <name>sourceLen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>z_stream</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uInt</name></type> <name>max</name> <init>= <expr><operator>(</operator><name>uInt</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLong</name></type> <name>left</name></decl>;</decl_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <operator>*</operator><name>destLen</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>destLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>zalloc</name></name> <operator>=</operator> <operator>(</operator><name>alloc_func</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>zfree</name></name> <operator>=</operator> <operator>(</operator><name>free_func</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <operator>(</operator><name>voidpf</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>deflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>z_const</name> <name>Bytef</name> <operator>*</operator><operator>)</operator><name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <ternary><condition><expr><name>left</name> <operator>&gt;</operator> <operator>(</operator><name>uLong</name><operator>)</operator><name>max</name></expr> ?</condition><then> <expr><name>max</name></expr> </then><else>: <expr><operator>(</operator><name>uInt</name><operator>)</operator><name>left</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>-=</operator> <name><name>stream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <ternary><condition><expr><name>sourceLen</name> <operator>&gt;</operator> <operator>(</operator><name>uLong</name><operator>)</operator><name>max</name></expr> ?</condition><then> <expr><name>max</name></expr> </then><else>: <expr><operator>(</operator><name>uInt</name><operator>)</operator><name>sourceLen</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>sourceLen</name> <operator>-=</operator> <name><name>stream</name><operator>.</operator><name>avail_in</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><ternary><condition><expr><name>sourceLen</name></expr> ?</condition><then> <expr><name>Z_NO_FLUSH</name></expr> </then><else>: <expr><name>Z_FINISH</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>err</name> <operator>==</operator> <name>Z_OK</name></expr>)</condition>;</do>

<expr_stmt><expr><operator>*</operator><name>destLen</name> <operator>=</operator> <name><name>stream</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>deflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>err</name> <operator>==</operator> <name>Z_STREAM_END</name></expr> ?</condition><then> <expr><name>Z_OK</name></expr> </then><else>: <expr><name>err</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name> <name>ZEXPORT</name></type> <name>compress</name> <parameter_list>(<parameter><decl><type><name>dest</name></type></decl></parameter>, <parameter><decl><type><name>destLen</name></type></decl></parameter>, <parameter><decl><type><name>source</name></type></decl></parameter>, <parameter><decl><type><name>sourceLen</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>Bytef</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLongf</name> <modifier>*</modifier></type><name>destLen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Bytef</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLong</name></type> <name>sourceLen</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><call><name>compress2</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>destLen</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>sourceLen</name></expr></argument>, <argument><expr><name>Z_DEFAULT_COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>uLong</name> <name>ZEXPORT</name></type> <name>compressBound</name> <parameter_list>(<parameter><decl><type><name>sourceLen</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>uLong</name></type> <name>sourceLen</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><name>sourceLen</name> <operator>+</operator> <operator>(</operator><name>sourceLen</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sourceLen</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>sourceLen</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal><operator>)</operator> <operator>+</operator> <literal type="number">13</literal></expr>;</return>
</block_content>}</block></function>
</unit>
