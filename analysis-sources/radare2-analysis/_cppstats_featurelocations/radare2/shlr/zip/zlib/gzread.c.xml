<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\zip\zlib\gzread.c">




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gzguts.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><name>local</name> <name>int</name> <name>gz_load</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gz_statep</name><operator>,</operator> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>unsigned</name><operator>,</operator> <name>unsigned</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>local</name> <name>int</name> <name>gz_avail</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gz_statep</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>local</name> <name>int</name> <name>gz_look</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gz_statep</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>local</name> <name>int</name> <name>gz_decomp</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gz_statep</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>local</name> <name>int</name> <name>gz_fetch</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gz_statep</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>local</name> <name>int</name> <name>gz_skip</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gz_statep</name><operator>,</operator> <name>z_off64_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>local</name> <name>z_size_t</name> <name>gz_read</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gz_statep</name><operator>,</operator> <name>voidp</name><operator>,</operator> <name>z_size_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>





<function><type><name>local</name> <name>int</name></type> <name>gz_load</name><parameter_list>(<parameter><decl><type><name>state</name></type></decl></parameter>, <parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>, <parameter><decl><type><name>have</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>have</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>get</name></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>have</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>get</name> <operator>=</operator> <name>len</name> <operator>-</operator> <operator>*</operator><name>have</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>get</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>get</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>have</name></expr></argument>, <argument><expr><name>get</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>have</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>ret</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name>have</name> <operator>&lt;</operator> <name>len</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_ERRNO</name></expr></argument>, <argument><expr><call><name>zstrerror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><name>local</name> <name>int</name></type> <name>gz_avail</name><parameter_list>(<parameter><decl><type><name>state</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>got</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_streamp</name></type> <name>strm</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_BUF_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>eof</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>in</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name> <init>= <expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>q</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>n</name></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gz_load</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>in</name></name> <operator>+</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>got</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>+=</operator> <name>got</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>in</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>










<function><type><name>local</name> <name>int</name></type> <name>gz_look</name><parameter_list>(<parameter><decl><type><name>state</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>z_streamp</name></type> <name>strm</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>in</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>want</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>want</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>in</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_MEM_ERROR</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>want</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>zalloc</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>zfree</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>inflateInit2</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">15</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_MEM_ERROR</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gz_avail</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>strm</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">31</literal> <operator>&amp;&amp;</operator> <name><name>strm</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">139</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>inflateReset</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>how</name></name> <operator>=</operator> <name>GZIP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>direct</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>direct</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name></expr></argument>, <argument><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>how</name></name> <operator>=</operator> <name>COPY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>direct</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>local</name> <name>int</name></type> <name>gz_decomp</name><parameter_list>(<parameter><decl><type><name>state</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>Z_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>had</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_streamp</name></type> <name>strm</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>had</name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name></expr>;</expr_stmt>
<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>gz_avail</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_BUF_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected end of file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>inflate</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>Z_STREAM_ERROR</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>Z_NEED_DICT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_STREAM_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"internal error: inflate stream corrupt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>Z_MEM_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_MEM_ERROR</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>Z_DATA_ERROR</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_DATA_ERROR</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"compressed data error"</literal></expr> </then><else>: <expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition>;</do>


<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name> <operator>=</operator> <name>had</name> <operator>-</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>Z_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>how</name></name> <operator>=</operator> <name>LOOK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>local</name> <name>int</name></type> <name>gz_fetch</name><parameter_list>(<parameter><decl><type><name>state</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>z_streamp</name></type> <name>strm</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<switch>switch<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>how</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LOOK</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><call><name>gz_look</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>how</name></name> <operator>==</operator> <name>LOOK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>COPY</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><call><name>gz_load</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name><operator>)</operator></expr></argument>)</argument_list></call>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>GZIP</name></expr>:</case> 
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gz_decomp</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></switch>
</block_content>}</block> while <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>eof</name></name> <operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name><operator>)</operator></expr>)</condition>;</do>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>local</name> <name>int</name></type> <name>gz_skip</name><parameter_list>(<parameter><decl><type><name>state</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_off64_t</name></type> <name>len</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>


<while>while <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><call><name>GT_OFF</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>z_off64_t</name><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name> <operator>&gt;</operator> <name>len</name></expr> ?</condition><then>
<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>len</name></expr> </then><else>: <expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>


<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gz_fetch</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt></block_content></block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>local</name> <name>z_size_t</name></type> <name>gz_read</name><parameter_list>(<parameter><decl><type><name>state</name></type></decl></parameter>, <parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>voidp</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>z_size_t</name></type> <name>got</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>seek</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>seek</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gz_skip</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>got</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>past</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if>



<if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>how</name></name> <operator>==</operator> <name>LOOK</name> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gz_fetch</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue> 


</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>how</name></name> <operator>==</operator> <name>COPY</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>gz_load</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>


<else>else <block>{<block_content> 
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>strm</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gz_decomp</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>got</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name></expr>)</condition>;</do>


<return>return <expr><name>got</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name> <name>ZEXPORT</name></type> <name>gzread</name><parameter_list>(<parameter><decl><type><name>file</name></type></decl></parameter>, <parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>gzFile</name></type> <name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>voidp</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>gz_statep</name><operator>)</operator><name>file</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>GZ_READ</name> <operator>||</operator>
<operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_BUF_ERROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_STREAM_ERROR</name></expr></argument>, <argument><expr><literal type="string">"request does not fit in an int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>gz_read</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_BUF_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>z_size_t</name> <name>ZEXPORT</name></type> <name>gzfread</name><parameter_list>(<parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>size</name></type></decl></parameter>, <parameter><decl><type><name>nitems</name></type></decl></parameter>, <parameter><decl><type><name>file</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>voidp</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_size_t</name></type> <name>nitems</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gzFile</name></type> <name>file</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>z_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>gz_statep</name><operator>)</operator><name>file</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>GZ_READ</name> <operator>||</operator>
<operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_BUF_ERROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <name>nitems</name> <operator>*</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>/</operator> <name>size</name> <operator>!=</operator> <name>nitems</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_STREAM_ERROR</name></expr></argument>, <argument><expr><literal type="string">"request does not fit in a size_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><ternary><condition><expr><name>len</name></expr> ?</condition><then> <expr><call><name>gz_read</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>size</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Z_PREFIX_SET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>z_gzgetc</name></cpp:undef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>gzgetc</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name> <name>ZEXPORT</name></type> <name>gzgetc</name><parameter_list>(<parameter><decl><type><name>file</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>gzFile</name></type> <name>file</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>gz_statep</name><operator>)</operator><name>file</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>GZ_READ</name> <operator>||</operator>
<operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_BUF_ERROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name><operator>)</operator><operator>++</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gz_read</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <name>ZEXPORT</name></type> <name>gzgetc_</name><parameter_list>(<parameter><decl><type><name>file</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>gzFile</name></type> <name>file</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><call><name>gzgetc</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name> <name>ZEXPORT</name></type> <name>gzungetc</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>, <parameter><decl><type><name>file</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gzFile</name></type> <name>file</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>gz_statep</name><operator>)</operator><name>file</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>GZ_READ</name> <operator>||</operator>
<operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_BUF_ERROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>seek</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>seek</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gz_skip</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pos</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>past</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name> <operator>==</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_DATA_ERROR</name></expr></argument>, <argument><expr><literal type="string">"out of room to push characters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>src</name> <operator>&gt;</operator> <name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>dest</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>src</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pos</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>past</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier> <name>ZEXPORT</name></type> <name>gzgets</name><parameter_list>(<parameter><decl><type><name>file</name></type></decl></parameter>, <parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>gzFile</name></type> <name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>eol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>gz_statep</name><operator>)</operator><name>file</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>GZ_READ</name> <operator>||</operator>
<operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>Z_BUF_ERROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>seek</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>seek</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gz_skip</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>str</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition><block type="pseudo"><block_content> <do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>gz_fetch</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>past</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<break>break;</break> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name> <operator>&gt;</operator> <name>left</name></expr> ?</condition><then> <expr><name>left</name></expr> </then><else>: <expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>eol</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>memchr</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>eol</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>eol</name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>next</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>left</name> <operator>&amp;&amp;</operator> <name>eol</name> <operator>==</operator> <name>NULL</name></expr>)</condition>;</do></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name> <name>ZEXPORT</name></type> <name>gzdirect</name><parameter_list>(<parameter><decl><type><name>file</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>gzFile</name></type> <name>file</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>gz_statep</name><operator>)</operator><name>file</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>GZ_READ</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>how</name></name> <operator>==</operator> <name>LOOK</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>have</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gz_look</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>direct</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name> <name>ZEXPORT</name></type> <name>gzclose_r</name><parameter_list>(<parameter><decl><type><name>file</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>gzFile</name></type> <name>file</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gz_statep</name></type> <name>state</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Z_STREAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>gz_statep</name><operator>)</operator><name>file</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>GZ_READ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Z_STREAM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>strm</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>Z_BUF_ERROR</name></expr> ?</condition><then> <expr><name>Z_BUF_ERROR</name></expr> </then><else>: <expr><name>Z_OK</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gz_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Z_OK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>Z_ERRNO</name></expr> </then><else>: <expr><name>err</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
