<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\zip\include\deflate.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEFLATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFLATE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zutil.h"</cpp:file></cpp:include>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_GZIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZIP</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LENGTH_CODES</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LITERALS</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_CODES</name></cpp:macro> <cpp:value>(LITERALS+1+LENGTH_CODES)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_CODES</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BL_CODES</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEAP_SIZE</name></cpp:macro> <cpp:value>(2*L_CODES+1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BITS</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Buf_size</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_STATE</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRA_STATE</name></cpp:macro> <cpp:value>69</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_STATE</name></cpp:macro> <cpp:value>73</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMENT_STATE</name></cpp:macro> <cpp:value>91</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HCRC_STATE</name></cpp:macro> <cpp:value>103</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUSY_STATE</name></cpp:macro> <cpp:value>113</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FINISH_STATE</name></cpp:macro> <cpp:value>666</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <name>ct_data_s</name> <block>{
<union>union <block>{
<decl_stmt><decl><type><name>ush</name></type> <name>freq</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ush</name></type> <name>code</name></decl>;</decl_stmt> 
}</block> <decl><name>fc</name></decl>;</union>
<union>union <block>{
<decl_stmt><decl><type><name>ush</name></type> <name>dad</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ush</name></type> <name>len</name></decl>;</decl_stmt> 
}</block> <decl><name>dl</name></decl>;</union>
}</block></struct></type> <name>FAR</name> <name>ct_data</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Freq</name></cpp:macro> <cpp:value>fc.freq</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Code</name></cpp:macro> <cpp:value>fc.code</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Dad</name></cpp:macro> <cpp:value>dl.dad</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Len</name></cpp:macro> <cpp:value>dl.len</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>static_tree_desc_s</name></name></type> <name>static_tree_desc</name>;</typedef>

<typedef>typedef <type><struct>struct <name>tree_desc_s</name> <block>{
<decl_stmt><decl><type><name>ct_data</name> <modifier>*</modifier></type><name>dyn_tree</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>max_code</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>static_tree_desc</name> <modifier>*</modifier></type><name>stat_desc</name></decl>;</decl_stmt> 
}</block></struct></type> <name>FAR</name> <name>tree_desc</name>;</typedef>

<typedef>typedef <type><name>ush</name></type> <name>Pos</name>;</typedef>
<typedef>typedef <type><name>Pos</name> <name>FAR</name></type> <name>Posf</name>;</typedef>
<typedef>typedef <type><name>unsigned</name></type> <name>IPos</name>;</typedef>





<typedef>typedef <type><struct>struct <name>internal_state</name> <block>{
<decl_stmt><decl><type><name>z_streamp</name></type> <name>strm</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Bytef</name> <modifier>*</modifier></type><name>pending_buf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ulg</name></type> <name>pending_buf_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Bytef</name> <modifier>*</modifier></type><name>pending_out</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uInt</name></type> <name>pending</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>wrap</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>gz_headerp</name></type> <name>gzhead</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uInt</name></type> <name>gzindex</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Byte</name></type> <name>method</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>last_flush</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>uInt</name></type> <name>w_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uInt</name></type> <name>w_bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uInt</name></type> <name>w_mask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Bytef</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>









<decl_stmt><decl><type><name>ulg</name></type> <name>window_size</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>Posf</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>Posf</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uInt</name></type> <name>ins_h</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uInt</name></type> <name>hash_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uInt</name></type> <name>hash_bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uInt</name></type> <name>hash_mask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uInt</name></type> <name>hash_shift</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>long</name></type> <name>block_start</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uInt</name></type> <name>match_length</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>IPos</name></type> <name>prev_match</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>match_available</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uInt</name></type> <name>strstart</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uInt</name></type> <name>match_start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uInt</name></type> <name>lookahead</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uInt</name></type> <name>prev_length</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uInt</name></type> <name>max_chain_length</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uInt</name></type> <name>max_lazy_match</name></decl>;</decl_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max_insert_length</name></cpp:macro> <cpp:value>max_lazy_match</cpp:value></cpp:define>





<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>strategy</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uInt</name></type> <name>good_match</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>nice_match</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name><name>struct</name> <name>ct_data_s</name></name></type> <name><name>dyn_ltree</name><index>[<expr><name>HEAP_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>ct_data_s</name></name></type> <name><name>dyn_dtree</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>D_CODES</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>ct_data_s</name></name></type> <name><name>bl_tree</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>BL_CODES</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>tree_desc_s</name></name></type> <name>l_desc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>tree_desc_s</name></name></type> <name>d_desc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>tree_desc_s</name></name></type> <name>bl_desc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ush</name></type> <name><name>bl_count</name><index>[<expr><name>MAX_BITS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name><name>heap</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>L_CODES</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>heap_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>heap_max</name></decl>;</decl_stmt> 




<decl_stmt><decl><type><name>uch</name></type> <name><name>depth</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>L_CODES</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uchf</name> <modifier>*</modifier></type><name>l_buf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uInt</name></type> <name>lit_bufsize</name></decl>;</decl_stmt>



















<decl_stmt><decl><type><name>uInt</name></type> <name>last_lit</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ushf</name> <modifier>*</modifier></type><name>d_buf</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>ulg</name></type> <name>opt_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ulg</name></type> <name>static_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uInt</name></type> <name>matches</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uInt</name></type> <name>insert</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ulg</name></type> <name>compressed_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ulg</name></type> <name>bits_sent</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ush</name></type> <name>bi_buf</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>bi_valid</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>ulg</name></type> <name>high_water</name></decl>;</decl_stmt>






}</block></struct></type> <name>FAR</name> <name>deflate_state</name>;</typedef>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>put_byte</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{s-&gt;pending_buf[s-&gt;pending++] = (c);}</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_LOOKAHEAD</name></cpp:macro> <cpp:value>(MAX_MATCH+MIN_MATCH+1)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DIST</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s)-&gt;w_size-MIN_LOOKAHEAD)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN_INIT</name></cpp:macro> <cpp:value>MAX_MATCH</cpp:value></cpp:define>




<decl_stmt><decl><type><name>void</name> <name>ZLIB_INTERNAL</name> <name>_tr_init</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>deflate_state</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>ZLIB_INTERNAL</name> <name>_tr_tally</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>deflate_state</name> <operator>*</operator><name>s</name><operator>,</operator> <name>unsigned</name> <name>dist</name><operator>,</operator> <name>unsigned</name> <name>lc</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>ZLIB_INTERNAL</name> <name>_tr_flush_block</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>deflate_state</name> <operator>*</operator><name>s</name><operator>,</operator> <name>charf</name> <operator>*</operator><name>buf</name><operator>,</operator>
<name>ulg</name> <name>stored_len</name><operator>,</operator> <name>int</name> <name>last</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>ZLIB_INTERNAL</name> <name>_tr_flush_bits</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>deflate_state</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>ZLIB_INTERNAL</name> <name>_tr_align</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>deflate_state</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>ZLIB_INTERNAL</name> <name>_tr_stored_block</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>deflate_state</name> <operator>*</operator><name>s</name><operator>,</operator> <name>charf</name> <operator>*</operator><name>buf</name><operator>,</operator>
<name>ulg</name> <name>stored_len</name><operator>,</operator> <name>int</name> <name>last</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d_code</name><parameter_list>(<parameter><type><name>dist</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dist) &lt; 256 ? _dist_code[dist] : _dist_code[256+((dist)&gt;&gt;7)])</cpp:value></cpp:define>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GEN_TREES_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STDC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uch</name> <name>ZLIB_INTERNAL</name></type> <name><name>_length_code</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uch</name> <name>ZLIB_INTERNAL</name></type> <name><name>_dist_code</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uch</name> <name>ZLIB_INTERNAL</name></type> <name><name>_length_code</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uch</name> <name>ZLIB_INTERNAL</name></type> <name><name>_dist_code</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_tr_tally_lit</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>flush</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ uch cc = (c); s-&gt;d_buf[s-&gt;last_lit] = 0; s-&gt;l_buf[s-&gt;last_lit++] = cc; s-&gt;dyn_ltree[cc].Freq++; flush = (s-&gt;last_lit == s-&gt;lit_bufsize-1); }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_tr_tally_dist</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>distance</name></type></parameter>, <parameter><type><name>length</name></type></parameter>, <parameter><type><name>flush</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ uch len = (length); ush dist = (distance); s-&gt;d_buf[s-&gt;last_lit] = dist; s-&gt;l_buf[s-&gt;last_lit++] = len; dist--; s-&gt;dyn_ltree[_length_code[len]+LITERALS+1].Freq++; s-&gt;dyn_dtree[d_code(dist)].Freq++; flush = (s-&gt;last_lit == s-&gt;lit_bufsize-1); }</cpp:value></cpp:define>









<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_tr_tally_lit</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>flush</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>flush = _tr_tally(s, 0, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_tr_tally_dist</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>distance</name></type></parameter>, <parameter><type><name>length</name></type></parameter>, <parameter><type><name>flush</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>flush = _tr_tally(s, distance, length)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
