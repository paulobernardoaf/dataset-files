<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\zip\include\zipconf.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_HAD_ZIPCONF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HAD_ZIPCONF_H</name></cpp:macro></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBZIP_VERSION</name></cpp:macro> <cpp:value>"0.11.1"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBZIP_VERSION_MAJOR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBZIP_VERSION_MINOR</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBZIP_VERSION_MICRO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types_base.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>st8</name></type> <name>zip_int8_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_INT8_MIN</name></cpp:macro> <cpp:value>ST8_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_INT8_MAX</name></cpp:macro> <cpp:value>ST8_MAX</cpp:value></cpp:define>

<typedef>typedef <type><name>ut8</name></type> <name>zip_uint8_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_UINT8_MAX</name></cpp:macro> <cpp:value>UT8_MAX</cpp:value></cpp:define>

<typedef>typedef <type><name>st16</name></type> <name>zip_int16_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_INT16_MIN</name></cpp:macro> <cpp:value>ST16_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_INT16_MAX</name></cpp:macro> <cpp:value>ST16_MAX</cpp:value></cpp:define>

<typedef>typedef <type><name>ut16</name></type> <name>zip_uint16_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_UINT16_MAX</name></cpp:macro> <cpp:value>UT16_MAX</cpp:value></cpp:define>

<typedef>typedef <type><name>st32</name></type> <name>zip_int32_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_INT32_MIN</name></cpp:macro> <cpp:value>ST32_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_INT32_MAX</name></cpp:macro> <cpp:value>ST32_MAX</cpp:value></cpp:define>

<typedef>typedef <type><name>ut32</name></type> <name>zip_uint32_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_UINT32_MAX</name></cpp:macro> <cpp:value>UT32_MAX</cpp:value></cpp:define>

<typedef>typedef <type><name>st64</name></type> <name>zip_int64_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_INT64_MIN</name></cpp:macro> <cpp:value>ST64_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_INT64_MAX</name></cpp:macro> <cpp:value>ST64_MAX</cpp:value></cpp:define>

<typedef>typedef <type><name>ut64</name></type> <name>zip_uint64_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_UINT64_MAX</name></cpp:macro> <cpp:value>UT64_MAX</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
