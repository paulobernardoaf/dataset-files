<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\heap\include\r_jemalloc\internal\prof.h">
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_TYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name><name>struct</name> <name>prof_bt_s</name></name></type> <name>prof_bt_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>prof_cnt_s</name></name></type> <name>prof_cnt_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>prof_tctx_s</name></name></type> <name>prof_tctx_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>prof_gctx_s</name></name></type> <name>prof_gctx_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>prof_tdata_s</name></name></type> <name>prof_tdata_t</name>;</typedef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_PROF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_PREFIX_DEFAULT</name></cpp:macro> <cpp:value>"jeprof"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_PREFIX_DEFAULT</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_PROF_SAMPLE_DEFAULT</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_PROF_INTERVAL_DEFAULT</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_BT_MAX</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_CKH_MINITEMS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_DUMP_BUFSIZE</name></cpp:macro> <cpp:value>65536</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_PRINTF_BUFSIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_NCTX_LOCKS</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_NTDATA_LOCKS</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_TDATA_STATE_REINCARNATED</name></cpp:macro> <cpp:value>((prof_tdata_t *)(uintptr_t)1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_TDATA_STATE_PURGATORY</name></cpp:macro> <cpp:value>((prof_tdata_t *)(uintptr_t)2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_TDATA_STATE_MAX</name></cpp:macro> <cpp:value>PROF_TDATA_STATE_PURGATORY</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_STRUCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<struct>struct <name>prof_bt_s</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>vec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_PROF_LIBGCC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>prof_bt_t</name> <modifier>*</modifier></type><name>bt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>max</name></decl>;</decl_stmt>
}</block></struct></type> <name>prof_unwind_data_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>prof_cnt_s</name> <block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>curobjs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>curbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>accumobjs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>accumbytes</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><enum>enum <block>{
<decl><name>prof_tctx_state_initializing</name></decl>,
<decl><name>prof_tctx_state_nominal</name></decl>,
<decl><name>prof_tctx_state_dumping</name></decl>,
<decl><name>prof_tctx_state_purgatory</name></decl> 
}</block></enum></type> <name>prof_tctx_state_t</name>;</typedef>

<struct>struct <name>prof_tctx_s</name> <block>{

<decl_stmt><decl><type><name>prof_tdata_t</name> <modifier>*</modifier></type><name>tdata</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uint64_t</name></type> <name>thr_uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>thr_discrim</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>prof_cnt_t</name></type> <name>cnts</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>prof_gctx_t</name> <modifier>*</modifier></type><name>gctx</name></decl>;</decl_stmt>














<decl_stmt><decl><type><name>uint64_t</name></type> <name>tctx_uid</name></decl>;</decl_stmt>


<macro><name>rb_node</name><argument_list>(<argument>prof_tctx_t</argument>)</argument_list></macro> <expr_stmt><expr><name>tctx_link</name></expr>;</expr_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>prepared</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>prof_tctx_state_t</name></type> <name>state</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>prof_cnt_t</name></type> <name>dump_cnts</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <macro><name>rb_tree</name><argument_list>(<argument>prof_tctx_t</argument>)</argument_list></macro> <expr_stmt><expr><name>prof_tctx_tree_t</name></expr>;</expr_stmt></typedef>

<struct>struct <name>prof_gctx_s</name> <block>{

<decl_stmt><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>











<decl_stmt><decl><type><name>unsigned</name></type> <name>nlimbo</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>prof_tctx_tree_t</name></type> <name>tctxs</name></decl>;</decl_stmt>


<macro><name>rb_node</name><argument_list>(<argument>prof_gctx_t</argument>)</argument_list></macro> <expr_stmt><expr><name>dump_link</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>prof_cnt_t</name></type> <name>cnt_summed</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>prof_bt_t</name></type> <name>bt</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <macro><name>rb_tree</name><argument_list>(<argument>prof_gctx_t</argument>)</argument_list></macro> <expr_stmt><expr><name>prof_gctx_tree_t</name></expr>;</expr_stmt></typedef>

<struct>struct <name>prof_tdata_s</name> <block>{
<decl_stmt><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>thr_uid</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uint64_t</name></type> <name>thr_discrim</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>thread_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>attached</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>expired</name></decl>;</decl_stmt>

<macro><name>rb_node</name><argument_list>(<argument>prof_tdata_t</argument>)</argument_list></macro> <expr_stmt><expr><name>tdata_link</name></expr>;</expr_stmt>






<decl_stmt><decl><type><name>uint64_t</name></type> <name>tctx_uid_next</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>ckh_t</name></type> <name>bt2tctx</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>prng_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>bytes_until_sample</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>enq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>enq_idump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>enq_gdump</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>bool</name></type> <name>dumping</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>prof_cnt_t</name></type> <name>cnt_summed</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>vec</name><index>[<expr><name>PROF_BT_MAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <macro><name>rb_tree</name><argument_list>(<argument>prof_tdata_t</argument>)</argument_list></macro> <expr_stmt><expr><name>prof_tdata_tree_t</name></expr>;</expr_stmt></typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_EXTERNS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>opt_prof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>opt_prof_active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>opt_prof_thread_active_init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>opt_lg_prof_sample</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>extern</specifier> <name>ssize_t</name></type> <name>opt_lg_prof_interval</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>opt_prof_gdump</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>opt_prof_final</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>opt_prof_leak</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>opt_prof_accum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>opt_prof_prefix</name><index>[

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_PROF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>PATH_MAX</name> <operator>+</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>prof_active</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>prof_gdump_val</name></decl>;</decl_stmt>








<decl_stmt><decl><type><specifier>extern</specifier> <name>uint64_t</name></type> <name>prof_interval</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>lg_prof_sample</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>prof_alloc_rollback</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>updated</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>prof_malloc_sample_object</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>,
<parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>prof_free_sampled_object</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>, <parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bt_init</name><parameter_list>(<parameter><decl><type><name>prof_bt_t</name> <modifier>*</modifier></type><name>bt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>prof_backtrace</name><parameter_list>(<parameter><decl><type><name>prof_bt_t</name> <modifier>*</modifier></type><name>bt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>prof_lookup</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>prof_bt_t</name> <modifier>*</modifier></type><name>bt</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_JET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>size_t</name></type> <name>prof_tdata_count</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>prof_bt_count</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>prof_cnt_t</name> <modifier>*</modifier></type><name>prof_cnt_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>prof_dump_open_t</name>)<parameter_list>(<parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>extern</specifier> <name>prof_dump_open_t</name> <modifier>*</modifier></type><name>prof_dump_open</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>bool</name></type> (<name>prof_dump_header_t</name>)<parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>prof_cnt_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>extern</specifier> <name>prof_dump_header_t</name> <modifier>*</modifier></type><name>prof_dump_header</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>void</name></type> <name>prof_idump</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>prof_mdump</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>prof_gdump</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>prof_tdata_t</name> <modifier>*</modifier></type><name>prof_tdata_init</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>prof_tdata_t</name> <modifier>*</modifier></type><name>prof_tdata_reinit</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>prof_tdata_t</name> <modifier>*</modifier></type><name>tdata</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>prof_reset</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>lg_sample</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>prof_tdata_cleanup</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>prof_active_get</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>prof_active_set</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prof_thread_name_get</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>prof_thread_name_set</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>thread_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>prof_thread_active_get</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>prof_thread_active_set</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>prof_thread_active_init_get</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>prof_thread_active_init_set</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_init</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>prof_gdump_get</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>prof_gdump_set</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>prof_boot0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>prof_boot1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>prof_boot2</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>prof_prefork0</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>prof_prefork1</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>prof_postfork_parent</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>prof_postfork_child</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>prof_sample_threshold_update</name><parameter_list>(<parameter><decl><type><name>prof_tdata_t</name> <modifier>*</modifier></type><name>tdata</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_INLINES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>bool</name></type> <name>prof_active_get_unlocked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>prof_gdump_get_unlocked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>prof_tdata_t</name> <modifier>*</modifier></type><name>prof_tdata_get</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>create</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>prof_tctx_get</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>prof_tctx_set</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>,
<parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>prof_tctx_reset</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>old_ptr</name></decl></parameter>, <parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>prof_sample_accum_update</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>commit</name></decl></parameter>,
<parameter><decl><type><name>prof_tdata_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tdata_out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>prof_alloc_prep</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>prof_active</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>update</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>prof_malloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>,
<parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>prof_realloc</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>,
<parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>prof_active</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>updated</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>old_ptr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>old_usize</name></decl></parameter>, <parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>old_tctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>prof_free</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_PROF_C_</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>bool</name></type>
<name>prof_active_get_unlocked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>







<return>return <expr><operator>(</operator><name>prof_active</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>bool</name></type>
<name>prof_gdump_get_unlocked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>






<return>return <expr><operator>(</operator><name>prof_gdump_val</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>prof_tdata_t</name> <modifier>*</modifier></type>
<name>prof_tdata_get</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>create</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>prof_tdata_t</name> <modifier>*</modifier></type><name>tdata</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>config_prof</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tdata</name> <operator>=</operator> <call><name>tsd_prof_tdata_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>create</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>tdata</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>tsd_nominal</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tdata</name> <operator>=</operator> <call><name>prof_tdata_init</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tsd_prof_tdata_set</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>tdata</name><operator>-&gt;</operator><name>expired</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tdata</name> <operator>=</operator> <call><name>prof_tdata_reinit</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tsd_prof_tdata_set</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>( <argument><expr><operator>(</operator> <operator>(</operator><name>tdata</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>!</operator> <operator>(</operator><name><name>tdata</name><operator>-&gt;</operator><name>attached</name></name><operator>)</operator> <operator>)</operator></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>tdata</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>prof_tctx_t</name> <modifier>*</modifier></type>
<name>prof_tctx_get</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><operator>!</operator><name>config_prof</name> <operator>||</operator> <name>ptr</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>arena_prof_tctx_get</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>
<name>prof_tctx_set</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>, <parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>arena_prof_tctx_set</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>tctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>
<name>prof_tctx_reset</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>old_ptr</name></decl></parameter>,
<parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>old_tctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arena_prof_tctx_reset</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>old_ptr</name></expr></argument>, <argument><expr><name>old_tctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>bool</name></type>
<name>prof_sample_accum_update</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>update</name></decl></parameter>,
<parameter><decl><type><name>prof_tdata_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tdata_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>prof_tdata_t</name> <modifier>*</modifier></type><name>tdata</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>config_prof</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tdata</name> <operator>=</operator> <call><name>prof_tdata_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tdata</name> <operator>&lt;=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>PROF_TDATA_STATE_MAX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tdata</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tdata_out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>tdata_out</name> <operator>=</operator> <name>tdata</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>tdata</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>tdata</name><operator>-&gt;</operator><name>bytes_until_sample</name></name> <operator>&gt;=</operator> <name>usize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>update</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tdata</name><operator>-&gt;</operator><name>bytes_until_sample</name></name> <operator>-=</operator> <name>usize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>update</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prof_sample_threshold_update</name><argument_list>(<argument><expr><name>tdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>!</operator><name><name>tdata</name><operator>-&gt;</operator><name>active</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>prof_tctx_t</name> <modifier>*</modifier></type>
<name>prof_alloc_prep</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>prof_active</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>update</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>prof_tdata_t</name> <modifier>*</modifier></type><name>tdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>prof_bt_t</name></type> <name>bt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>usize</name> <operator>!=</operator> <call><name>s2u</name><argument_list>(<argument><expr><name>usize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prof_active</name> <operator>||</operator> <call><name>likely</name><argument_list>(<argument><expr><call><name>prof_sample_accum_update</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>update</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>tdata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>prof_tctx_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1U</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>bt_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bt</name></expr></argument>, <argument><expr><name><name>tdata</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prof_backtrace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>prof_lookup</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>
<name>prof_malloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>, <parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>usize</name> <operator>==</operator> <call><name>isalloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tctx</name> <operator>&gt;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prof_malloc_sample_object</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>tctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prof_tctx_set</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><operator>(</operator><name>prof_tctx_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>
<name>prof_realloc</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>, <parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>prof_active</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>updated</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>old_ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>old_usize</name></decl></parameter>,
<parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>old_tctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>sampled</name></decl>, <decl><type ref="prev"/><name>old_sampled</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tctx</name> <operator>&lt;=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prof_active</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>updated</name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>usize</name> <operator>==</operator> <call><name>isalloc</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>prof_sample_accum_update</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><call><name>prof_alloc_rollback</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tctx</name> <operator>=</operator> <operator>(</operator><name>prof_tctx_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1U</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sampled</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tctx</name> <operator>&gt;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>old_sampled</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>old_tctx</name> <operator>&gt;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sampled</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prof_malloc_sample_object</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>tctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prof_tctx_reset</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>old_ptr</name></expr></argument>, <argument><expr><name>old_tctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>old_sampled</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prof_free_sampled_object</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>old_usize</name></expr></argument>, <argument><expr><name>old_tctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>
<name>prof_free</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>tctx</name> <init>= <expr><call><name>prof_tctx_get</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>usize</name> <operator>==</operator> <call><name>isalloc</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tctx</name> <operator>&gt;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prof_free_sampled_object</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>tctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
