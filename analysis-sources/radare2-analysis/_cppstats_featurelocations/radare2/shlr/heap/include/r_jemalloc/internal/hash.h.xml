<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\heap\include\r_jemalloc\internal\hash.h">





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_TYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_STRUCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_EXTERNS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_INLINES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>uint32_t</name></type> <name>hash_x86_32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>seed</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hash_x86_128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>seed</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name><name>r_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hash_x64_128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>seed</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name><name>r_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>seed</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name><name>r_hash</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_HASH_C_</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>


<function><type><name>JEMALLOC_INLINE</name> <name>uint32_t</name></type>
<name>hash_rotl_32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name>r</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>r</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>uint64_t</name></type>
<name>hash_rotl_64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name>r</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>r</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>uint32_t</name></type>
<name>hash_get_block_32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>p</name> <operator>&amp;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>uint64_t</name></type>
<name>hash_get_block_64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>p</name> <operator>&amp;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>uint32_t</name></type>
<name>hash_fmix_32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>^=</operator> <name>h</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>*=</operator> <literal type="number">0x85ebca6b</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <name>h</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>*=</operator> <literal type="number">0xc2b2ae35</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <name>h</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>h</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>uint64_t</name></type>
<name>hash_fmix_64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>^=</operator> <name>k</name> <operator>&gt;&gt;</operator> <literal type="number">33</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>*=</operator> <call><name>KQU</name><argument_list>(<argument><expr><literal type="number">0xff51afd7ed558ccd</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>^=</operator> <name>k</name> <operator>&gt;&gt;</operator> <literal type="number">33</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>*=</operator> <call><name>KQU</name><argument_list>(<argument><expr><literal type="number">0xc4ceb9fe1a85ec53</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>^=</operator> <name>k</name> <operator>&gt;&gt;</operator> <literal type="number">33</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>k</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>uint32_t</name></type>
<name>hash_x86_32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nblocks</name> <init>= <expr><name>len</name> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>h1</name> <init>= <expr><name>seed</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>c1</name> <init>= <expr><literal type="number">0xcc9e2d51</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>c2</name> <init>= <expr><literal type="number">0x1b873593</literal></expr></init></decl>;</decl_stmt>


<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>blocks</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <name>nblocks</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>-</operator><name>nblocks</name></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>k1</name> <init>= <expr><call><name>hash_get_block_32</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>hash_rotl_32</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h1</name> <operator>=</operator> <call><name>hash_rotl_32</name><argument_list>(<argument><expr><name>h1</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h1</name> <operator>=</operator> <name>h1</name><operator>*</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">0xe6546b64</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>


<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <name>nblocks</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>k1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>len</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>tail</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>tail</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c1</name></expr>;</expr_stmt> <expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>hash_rotl_32</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c2</name></expr>;</expr_stmt> <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block>


<expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>=</operator> <call><name>hash_fmix_32</name><argument_list>(<argument><expr><name>h1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>h1</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>UNUSED</name> <name>JEMALLOC_INLINE</name> <name>void</name></type>
<name>hash_x86_128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>seed</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name><name>r_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nblocks</name> <init>= <expr><name>len</name> <operator>/</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>h1</name> <init>= <expr><name>seed</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>h2</name> <init>= <expr><name>seed</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>h3</name> <init>= <expr><name>seed</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>h4</name> <init>= <expr><name>seed</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>c1</name> <init>= <expr><literal type="number">0x239b961b</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>c2</name> <init>= <expr><literal type="number">0xab0e9789</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>c3</name> <init>= <expr><literal type="number">0x38b34ae5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>c4</name> <init>= <expr><literal type="number">0xa1e38b93</literal></expr></init></decl>;</decl_stmt>


<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>blocks</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <name>nblocks</name><operator>*</operator><literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>-</operator><name>nblocks</name></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>k1</name> <init>= <expr><call><name>hash_get_block_32</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>k2</name> <init>= <expr><call><name>hash_get_block_32</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>k3</name> <init>= <expr><call><name>hash_get_block_32</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>k4</name> <init>= <expr><call><name>hash_get_block_32</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c1</name></expr>;</expr_stmt> <expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>hash_rotl_32</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c2</name></expr>;</expr_stmt> <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>=</operator> <call><name>hash_rotl_32</name><argument_list>(<argument><expr><name>h1</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>h2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h1</name> <operator>=</operator> <name>h1</name><operator>*</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">0x561ccd1b</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k2</name> <operator>*=</operator> <name>c2</name></expr>;</expr_stmt> <expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>hash_rotl_32</name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>k2</name> <operator>*=</operator> <name>c3</name></expr>;</expr_stmt> <expr_stmt><expr><name>h2</name> <operator>^=</operator> <name>k2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h2</name> <operator>=</operator> <call><name>hash_rotl_32</name><argument_list>(<argument><expr><name>h2</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>h2</name> <operator>+=</operator> <name>h3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h2</name> <operator>=</operator> <name>h2</name><operator>*</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">0x0bcaa747</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k3</name> <operator>*=</operator> <name>c3</name></expr>;</expr_stmt> <expr_stmt><expr><name>k3</name> <operator>=</operator> <call><name>hash_rotl_32</name><argument_list>(<argument><expr><name>k3</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>k3</name> <operator>*=</operator> <name>c4</name></expr>;</expr_stmt> <expr_stmt><expr><name>h3</name> <operator>^=</operator> <name>k3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h3</name> <operator>=</operator> <call><name>hash_rotl_32</name><argument_list>(<argument><expr><name>h3</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>h3</name> <operator>+=</operator> <name>h4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h3</name> <operator>=</operator> <name>h3</name><operator>*</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">0x96cd1c35</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k4</name> <operator>*=</operator> <name>c4</name></expr>;</expr_stmt> <expr_stmt><expr><name>k4</name> <operator>=</operator> <call><name>hash_rotl_32</name><argument_list>(<argument><expr><name>k4</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>k4</name> <operator>*=</operator> <name>c1</name></expr>;</expr_stmt> <expr_stmt><expr><name>h4</name> <operator>^=</operator> <name>k4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h4</name> <operator>=</operator> <call><name>hash_rotl_32</name><argument_list>(<argument><expr><name>h4</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>h4</name> <operator>+=</operator> <name>h1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h4</name> <operator>=</operator> <name>h4</name><operator>*</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">0x32ac3b17</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>


<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <name>nblocks</name><operator>*</operator><literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>k1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>k2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>k3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>k4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>len</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">15</literal></expr>:</case> <expr_stmt><expr><name>k4</name> <operator>^=</operator> <name><name>tail</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">14</literal></expr>:</case> <expr_stmt><expr><name>k4</name> <operator>^=</operator> <name><name>tail</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name>k4</name> <operator>^=</operator> <name><name>tail</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k4</name> <operator>*=</operator> <name>c4</name></expr>;</expr_stmt> <expr_stmt><expr><name>k4</name> <operator>=</operator> <call><name>hash_rotl_32</name><argument_list>(<argument><expr><name>k4</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>k4</name> <operator>*=</operator> <name>c1</name></expr>;</expr_stmt> <expr_stmt><expr><name>h4</name> <operator>^=</operator> <name>k4</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name>k3</name> <operator>^=</operator> <name><name>tail</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>k3</name> <operator>^=</operator> <name><name>tail</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>k3</name> <operator>^=</operator> <name><name>tail</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>k3</name> <operator>^=</operator> <name><name>tail</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k3</name> <operator>*=</operator> <name>c3</name></expr>;</expr_stmt> <expr_stmt><expr><name>k3</name> <operator>=</operator> <call><name>hash_rotl_32</name><argument_list>(<argument><expr><name>k3</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>k3</name> <operator>*=</operator> <name>c4</name></expr>;</expr_stmt> <expr_stmt><expr><name>h3</name> <operator>^=</operator> <name>k3</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>k2</name> <operator>^=</operator> <name><name>tail</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>k2</name> <operator>^=</operator> <name><name>tail</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>k2</name> <operator>^=</operator> <name><name>tail</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>k2</name> <operator>^=</operator> <name><name>tail</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k2</name> <operator>*=</operator> <name>c2</name></expr>;</expr_stmt> <expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>hash_rotl_32</name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>k2</name> <operator>*=</operator> <name>c3</name></expr>;</expr_stmt> <expr_stmt><expr><name>h2</name> <operator>^=</operator> <name>k2</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>tail</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>tail</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>tail</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>tail</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c1</name></expr>;</expr_stmt> <expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>hash_rotl_32</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c2</name></expr>;</expr_stmt> <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block>


<expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>len</name></expr>;</expr_stmt> <expr_stmt><expr><name>h2</name> <operator>^=</operator> <name>len</name></expr>;</expr_stmt> <expr_stmt><expr><name>h3</name> <operator>^=</operator> <name>len</name></expr>;</expr_stmt> <expr_stmt><expr><name>h4</name> <operator>^=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>h2</name></expr>;</expr_stmt> <expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>h3</name></expr>;</expr_stmt> <expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>h4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h2</name> <operator>+=</operator> <name>h1</name></expr>;</expr_stmt> <expr_stmt><expr><name>h3</name> <operator>+=</operator> <name>h1</name></expr>;</expr_stmt> <expr_stmt><expr><name>h4</name> <operator>+=</operator> <name>h1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>=</operator> <call><name>hash_fmix_32</name><argument_list>(<argument><expr><name>h1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h2</name> <operator>=</operator> <call><name>hash_fmix_32</name><argument_list>(<argument><expr><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h3</name> <operator>=</operator> <call><name>hash_fmix_32</name><argument_list>(<argument><expr><name>h3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h4</name> <operator>=</operator> <call><name>hash_fmix_32</name><argument_list>(<argument><expr><name>h4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>h2</name></expr>;</expr_stmt> <expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>h3</name></expr>;</expr_stmt> <expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>h4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h2</name> <operator>+=</operator> <name>h1</name></expr>;</expr_stmt> <expr_stmt><expr><name>h3</name> <operator>+=</operator> <name>h1</name></expr>;</expr_stmt> <expr_stmt><expr><name>h4</name> <operator>+=</operator> <name>h1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>h2</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>h1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>h4</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>h3</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>UNUSED</name> <name>JEMALLOC_INLINE</name> <name>void</name></type>
<name>hash_x64_128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>seed</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name><name>r_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nblocks</name> <init>= <expr><name>len</name> <operator>/</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>h1</name> <init>= <expr><name>seed</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>h2</name> <init>= <expr><name>seed</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>c1</name> <init>= <expr><call><name>KQU</name><argument_list>(<argument><expr><literal type="number">0x87c37b91114253d5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>c2</name> <init>= <expr><call><name>KQU</name><argument_list>(<argument><expr><literal type="number">0x4cf5ad432745937f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>blocks</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint64_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>k1</name> <init>= <expr><call><name>hash_get_block_64</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>k2</name> <init>= <expr><call><name>hash_get_block_64</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c1</name></expr>;</expr_stmt> <expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>hash_rotl_64</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c2</name></expr>;</expr_stmt> <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>=</operator> <call><name>hash_rotl_64</name><argument_list>(<argument><expr><name>h1</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>h2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h1</name> <operator>=</operator> <name>h1</name><operator>*</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">0x52dce729</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k2</name> <operator>*=</operator> <name>c2</name></expr>;</expr_stmt> <expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>hash_rotl_64</name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>k2</name> <operator>*=</operator> <name>c1</name></expr>;</expr_stmt> <expr_stmt><expr><name>h2</name> <operator>^=</operator> <name>k2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h2</name> <operator>=</operator> <call><name>hash_rotl_64</name><argument_list>(<argument><expr><name>h2</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>h2</name> <operator>+=</operator> <name>h1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h2</name> <operator>=</operator> <name>h2</name><operator>*</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">0x38495ab5</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>


<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>data</name> <operator>+</operator> <name>nblocks</name><operator>*</operator><literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>k1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>k2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>len</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">15</literal></expr>:</case> <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>tail</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">14</literal></expr>:</case> <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>tail</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>tail</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>tail</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>tail</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>tail</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>tail</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k2</name> <operator>*=</operator> <name>c2</name></expr>;</expr_stmt> <expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>hash_rotl_64</name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>k2</name> <operator>*=</operator> <name>c1</name></expr>;</expr_stmt> <expr_stmt><expr><name>h2</name> <operator>^=</operator> <name>k2</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>tail</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>tail</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>tail</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>tail</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>tail</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>tail</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>tail</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>tail</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c1</name></expr>;</expr_stmt> <expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>hash_rotl_64</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c2</name></expr>;</expr_stmt> <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block>


<expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>len</name></expr>;</expr_stmt> <expr_stmt><expr><name>h2</name> <operator>^=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>h2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h2</name> <operator>+=</operator> <name>h1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>=</operator> <call><name>hash_fmix_64</name><argument_list>(<argument><expr><name>h1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h2</name> <operator>=</operator> <call><name>hash_fmix_64</name><argument_list>(<argument><expr><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>h2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h2</name> <operator>+=</operator> <name>h1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>h1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>h2</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>
<name>hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name><name>r_hash</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_BIG_ENDIAN</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><call><name>hash_x64_128</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>r_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>hashes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hash_x86_128</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>hashes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r_hash</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>hashes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r_hash</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>hashes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
