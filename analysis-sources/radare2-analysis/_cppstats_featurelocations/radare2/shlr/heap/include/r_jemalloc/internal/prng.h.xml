<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\heap\include\r_jemalloc\internal\prng.h">
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_TYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRNG_A_32</name></cpp:macro> <cpp:value>UINT32_C(1103515241)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRNG_C_32</name></cpp:macro> <cpp:value>UINT32_C(12347)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRNG_A_64</name></cpp:macro> <cpp:value>UINT64_C(6364136223846793005)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRNG_C_64</name></cpp:macro> <cpp:value>UINT64_C(1442695040888963407)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_STRUCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_EXTERNS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_INLINES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>uint32_t</name></type> <name>prng_state_next_u32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>prng_state_next_u64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>prng_state_next_zu</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>prng_lg_range_u32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>lg_range</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>atomic</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>prng_lg_range_u64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>lg_range</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>prng_lg_range_zu</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>lg_range</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>atomic</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>prng_range_u32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>atomic</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>prng_range_u64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>range</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>prng_range_zu</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>atomic</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_PRNG_C_</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>uint32_t</name></type>
<name>prng_state_next_u32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>state</name> <operator>*</operator> <name>PRNG_A_32</name><operator>)</operator> <operator>+</operator> <name>PRNG_C_32</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>uint64_t</name></type>
<name>prng_state_next_u64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>state</name> <operator>*</operator> <name>PRNG_A_64</name><operator>)</operator> <operator>+</operator> <name>PRNG_C_64</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>
<name>prng_state_next_zu</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
<return>return <expr><operator>(</operator><operator>(</operator><name>state</name> <operator>*</operator> <name>PRNG_A_32</name><operator>)</operator> <operator>+</operator> <name>PRNG_C_32</name><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">3</literal></expr></cpp:elif>
<return>return <expr><operator>(</operator><operator>(</operator><name>state</name> <operator>*</operator> <name>PRNG_A_64</name><operator>)</operator> <operator>+</operator> <name>PRNG_C_64</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> Unsupported pointer size</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>uint32_t</name></type>
<name>prng_lg_range_u32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>lg_range</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>atomic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>state1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lg_range</name> <argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal> <operator>||</operator> <name>lg_range</name></expr></argument> &gt;</argument_list></name><literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
assert(lg_range &gt; 0);
assert(lg_range &lt;= 32);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>atomic</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>state0</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>state0</name> <operator>=</operator> <call><name>atomic_read_uint32</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state1</name> <operator>=</operator> <call><name>prng_state_next_u32</name><argument_list>(<argument><expr><name>state0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>atomic_cas_uint32</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>state0</name></expr></argument>, <argument><expr><name>state1</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>state1</name> <operator>=</operator> <call><name>prng_state_next_u32</name><argument_list>(<argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>state1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>state1</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>lg_range</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>uint64_t</name></type>
<name>prng_lg_range_u64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>lg_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>state1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lg_range</name> <argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal> <operator>||</operator> <name>lg_range</name></expr></argument> &gt;</argument_list></name> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
assert(lg_range &gt; 0);
assert(lg_range &lt;= 64);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>state1</name> <operator>=</operator> <call><name>prng_state_next_u64</name><argument_list>(<argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>state1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>state1</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>lg_range</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>
<name>prng_lg_range_zu</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>lg_range</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>atomic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>state1</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
assert(lg_range &gt; 0);
assert(lg_range &lt;= ZU(1) &lt;&lt; (3 + LG_SIZEOF_PTR));
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>atomic</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>state0</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>state0</name> <operator>=</operator> <call><name>atomic_read_z</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state1</name> <operator>=</operator> <call><name>prng_state_next_zu</name><argument_list>(<argument><expr><name>state0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>atomic_cas_z</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>state0</name></expr></argument>, <argument><expr><name>state1</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>state1</name> <operator>=</operator> <call><name>prng_state_next_zu</name><argument_list>(<argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>state1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>state1</name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>LG_SIZEOF_PTR</name><operator>)</operator><operator>)</operator> <operator>-</operator> <name>lg_range</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>uint32_t</name></type>
<name>prng_range_u32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>atomic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>lg_range</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
assert(range &gt; 1);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>range</name> <operator>&lt;</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>lg_range</name> <operator>=</operator> <call><name>ffs_u32</name><argument_list>(<argument><expr><call><name>pow2_ceil_u32</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>prng_lg_range_u32</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>lg_range</name></expr></argument>, <argument><expr><name>atomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <name>range</name></expr>)</condition>;</do>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>uint64_t</name></type>
<name>prng_range_u64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>lg_range</name></decl>;</decl_stmt>




<expr_stmt><expr><name>lg_range</name> <operator>=</operator> <call><name>ffs_u64</name><argument_list>(<argument><expr><call><name>pow2_ceil_u64</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>prng_lg_range_u64</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>lg_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <name>range</name></expr>)</condition>;</do>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>
<name>prng_range_zu</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>atomic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>lg_range</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>range</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>lg_range</name> <operator>=</operator> <call><name>ffs_u64</name><argument_list>(<argument><expr><call><name>pow2_ceil_u64</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>prng_lg_range_zu</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>lg_range</name></expr></argument>, <argument><expr><name>atomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <name>range</name></expr>)</condition>;</do>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
