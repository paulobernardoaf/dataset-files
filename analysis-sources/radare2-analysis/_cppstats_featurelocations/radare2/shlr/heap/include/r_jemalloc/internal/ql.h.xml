<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\heap\include\r_jemalloc\internal\ql.h">
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ql_head</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { a_type *qlh_first; }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ql_head_initializer</name><parameter_list>(<parameter><type><name>a_head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{NULL}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ql_elm</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>qr(a_type)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ql_new</name><parameter_list>(<parameter><type><name>a_head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (a_head)-&gt;qlh_first = NULL; } while (0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ql_elm_new</name><parameter_list>(<parameter><type><name>a_elm</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>qr_new((a_elm), a_field)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ql_first</name><parameter_list>(<parameter><type><name>a_head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a_head)-&gt;qlh_first)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ql_last</name><parameter_list>(<parameter><type><name>a_head</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ql_first(a_head) != NULL) ? qr_prev(ql_first(a_head), a_field) : NULL)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ql_next</name><parameter_list>(<parameter><type><name>a_head</name></type></parameter>, <parameter><type><name>a_elm</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ql_last(a_head, a_field) != (a_elm)) ? qr_next((a_elm), a_field) : NULL)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ql_prev</name><parameter_list>(<parameter><type><name>a_head</name></type></parameter>, <parameter><type><name>a_elm</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ql_first(a_head) != (a_elm)) ? qr_prev((a_elm), a_field) : NULL)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ql_before_insert</name><parameter_list>(<parameter><type><name>a_head</name></type></parameter>, <parameter><type><name>a_qlelm</name></type></parameter>, <parameter><type><name>a_elm</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { qr_before_insert((a_qlelm), (a_elm), a_field); if (ql_first(a_head) == (a_qlelm)) { ql_first(a_head) = (a_elm); } } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ql_after_insert</name><parameter_list>(<parameter><type><name>a_qlelm</name></type></parameter>, <parameter><type><name>a_elm</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>qr_after_insert((a_qlelm), (a_elm), a_field)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ql_head_insert</name><parameter_list>(<parameter><type><name>a_head</name></type></parameter>, <parameter><type><name>a_elm</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (ql_first(a_head) != NULL) { qr_before_insert(ql_first(a_head), (a_elm), a_field); } ql_first(a_head) = (a_elm); } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ql_tail_insert</name><parameter_list>(<parameter><type><name>a_head</name></type></parameter>, <parameter><type><name>a_elm</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (ql_first(a_head) != NULL) { qr_before_insert(ql_first(a_head), (a_elm), a_field); } ql_first(a_head) = qr_next((a_elm), a_field); } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ql_remove</name><parameter_list>(<parameter><type><name>a_head</name></type></parameter>, <parameter><type><name>a_elm</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (ql_first(a_head) == (a_elm)) { ql_first(a_head) = qr_next(ql_first(a_head), a_field); } if (ql_first(a_head) != (a_elm)) { qr_remove((a_elm), a_field); } else { ql_first(a_head) = NULL; } } while (0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ql_head_remove</name><parameter_list>(<parameter><type><name>a_head</name></type></parameter>, <parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { a_type *t = ql_first(a_head); ql_remove((a_head), t, a_field); } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ql_tail_remove</name><parameter_list>(<parameter><type><name>a_head</name></type></parameter>, <parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { a_type *t = ql_last(a_head, a_field); ql_remove((a_head), t, a_field); } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ql_foreach</name><parameter_list>(<parameter><type><name>a_var</name></type></parameter>, <parameter><type><name>a_head</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>qr_foreach((a_var), ql_first(a_head), a_field)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ql_reverse_foreach</name><parameter_list>(<parameter><type><name>a_var</name></type></parameter>, <parameter><type><name>a_head</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>qr_reverse_foreach((a_var), ql_first(a_head), a_field)</cpp:value></cpp:define>

</unit>
