<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\heap\include\r_jemalloc\internal\rtree.h">





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_TYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name><name>struct</name> <name>rtree_node_elm_s</name></name></type> <name>rtree_node_elm_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>rtree_level_s</name></name></type> <name>rtree_level_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>rtree_s</name></name></type> <name>rtree_t</name>;</typedef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_RTREE_BITS_PER_LEVEL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTREE_BITS_PER_LEVEL</name></cpp:macro> <cpp:value>(1U &lt;&lt; LG_RTREE_BITS_PER_LEVEL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTREE_HEIGHT_MAX</name></cpp:macro> <cpp:value>((1U &lt;&lt; (LG_SIZEOF_PTR+3)) / RTREE_BITS_PER_LEVEL)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTREE_NODE_INITIALIZING</name></cpp:macro> <cpp:value>((rtree_node_elm_t *)0x1)</cpp:value></cpp:define>






<typedef>typedef <function_decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type>(<name>rtree_node_alloc_t</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>rtree_node_dalloc_t</name>)<parameter_list>(<parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_STRUCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<struct>struct <name>rtree_node_elm_s</name> <block>{
<union>union <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pun</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>extent_node_t</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
}</block>;</union>
}</block>;</struct>

<struct>struct <name>rtree_level_s</name> <block>{






















<union>union <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>subtree_pun</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>subtree</name></decl>;</decl_stmt>
}</block>;</union>

<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>cumbits</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>rtree_s</name> <block>{
<decl_stmt><decl><type><name>rtree_node_alloc_t</name> <modifier>*</modifier></type><name>alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtree_node_dalloc_t</name> <modifier>*</modifier></type><name>dalloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>height</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name><name>start_level</name><index>[<expr><name>RTREE_HEIGHT_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtree_level_t</name></type> <name><name>levels</name><index>[<expr><name>RTREE_HEIGHT_MAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_EXTERNS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>bool</name></type> <name>rtree_new</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>rtree_node_alloc_t</name> <modifier>*</modifier></type><name>alloc</name></decl></parameter>,
<parameter><decl><type><name>rtree_node_dalloc_t</name> <modifier>*</modifier></type><name>dalloc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rtree_delete</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>rtree_subtree_read_hard</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>rtree_child_read_hard</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>,
<parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>elm</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_INLINES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>unsigned</name></type> <name>rtree_start_level</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uintptr_t</name></type> <name>rtree_subkey</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>rtree_node_valid</name><parameter_list>(<parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>rtree_child_tryread</name><parameter_list>(<parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>elm</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>rtree_child_read</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>elm</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>extent_node_t</name> <modifier>*</modifier></type><name>rtree_val_read</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>elm</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rtree_val_write</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>elm</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>extent_node_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>rtree_subtree_tryread</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>level</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>rtree_subtree_read</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>level</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>extent_node_t</name> <modifier>*</modifier></type><name>rtree_get</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>rtree_set</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>extent_node_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_RTREE_C_</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>unsigned</name></type>
<name>rtree_start_level</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>start_level</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>key</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>rtree</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_level</name> <operator>=</operator> <name><name>rtree</name><operator>-&gt;</operator><name>start_level</name><index>[<expr><call><name>lg_floor</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator>
<name>LG_RTREE_BITS_PER_LEVEL</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>start_level</name> <operator>&lt;</operator> <name><name>rtree</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>start_level</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>uintptr_t</name></type>
<name>rtree_subkey</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>key</name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>LG_SIZEOF_PTR</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>-</operator>
<name><name>rtree</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>cumbits</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>
<name><name>rtree</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>bits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>bool</name></type>
<name>rtree_node_valid</name><parameter_list>(<parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>node</name> <operator>&gt;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>RTREE_NODE_INITIALIZING</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>rtree_node_elm_t</name> <modifier>*</modifier></type>
<name>rtree_child_tryread</name><parameter_list>(<parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>elm</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>


<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>elm</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dependent</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>rtree_node_valid</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>atomic_read_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elm</name><operator>-&gt;</operator><name>pun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>dependent</name> <operator>||</operator> <name>child</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>child</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>rtree_node_elm_t</name> <modifier>*</modifier></type>
<name>rtree_child_read</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>elm</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>level</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>rtree_child_tryread</name><argument_list>(<argument><expr><name>elm</name></expr></argument>, <argument><expr><name>dependent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dependent</name> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>rtree_node_valid</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>rtree_child_read_hard</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>elm</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>dependent</name> <operator>||</operator> <name>child</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>child</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>extent_node_t</name> <modifier>*</modifier></type>
<name>rtree_val_read</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>elm</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dependent</name></expr>)</condition> <block>{<block_content>






<return>return <expr><operator>(</operator><name><name>elm</name><operator>-&gt;</operator><name>val</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>





<return>return <expr><operator>(</operator><call><name>atomic_read_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elm</name><operator>-&gt;</operator><name>pun</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>
<name>rtree_val_write</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>elm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>extent_node_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>atomic_write_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elm</name><operator>-&gt;</operator><name>pun</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>rtree_node_elm_t</name> <modifier>*</modifier></type>
<name>rtree_subtree_tryread</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>subtree</name></decl>;</decl_stmt>


<expr_stmt><expr><name>subtree</name> <operator>=</operator> <name><name>rtree</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>subtree</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dependent</name> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>rtree_node_valid</name><argument_list>(<argument><expr><name>subtree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>subtree</name> <operator>=</operator> <call><name>atomic_read_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtree</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>subtree_pun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>dependent</name> <operator>||</operator> <name>subtree</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>subtree</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>rtree_node_elm_t</name> <modifier>*</modifier></type>
<name>rtree_subtree_read</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>subtree</name></decl>;</decl_stmt>

<expr_stmt><expr><name>subtree</name> <operator>=</operator> <call><name>rtree_subtree_tryread</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>dependent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dependent</name> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>rtree_node_valid</name><argument_list>(<argument><expr><name>subtree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>subtree</name> <operator>=</operator> <call><name>rtree_subtree_read_hard</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>dependent</name> <operator>||</operator> <name>subtree</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>subtree</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>extent_node_t</name> <modifier>*</modifier></type>
<name>rtree_get</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>subkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>start_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start_level</name> <operator>=</operator> <call><name>rtree_start_level</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>rtree_subtree_tryread</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>start_level</name></expr></argument>, <argument><expr><name>dependent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTREE_GET_BIAS</name></cpp:macro> <cpp:value>(RTREE_HEIGHT_MAX - rtree-&gt;height)</cpp:value></cpp:define>
<switch>switch <condition>(<expr><name>start_level</name> <operator>+</operator> <name>RTREE_GET_BIAS</name></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTREE_GET_SUBTREE</name><parameter_list>(<parameter><type><name>level</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case level: if (unlikely(level &gt; (RTREE_HEIGHT_MAX-1)))return (NULL)if (!dependent &amp;&amp; unlikely(!rtree_node_valid(node))) return (NULL); subkey = rtree_subkey(rtree, key, level - RTREE_GET_BIAS); node = rtree_child_tryread(&amp;node[subkey], dependent);</cpp:value></cpp:define> 









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTREE_GET_LEAF</name><parameter_list>(<parameter><type><name>level</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case level: if (unlikely(level != (RTREE_HEIGHT_MAX-1))) return (NULL); if (!dependent &amp;&amp; unlikely(!rtree_node_valid(node))) return (NULL); subkey = rtree_subkey(rtree, key, level - RTREE_GET_BIAS); return (rtree_val_read(rtree, &amp;node[subkey], dependent));</cpp:value></cpp:define>













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT_MAX</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>
<macro><name>RTREE_GET_SUBTREE</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT_MAX</name> <operator>&gt;</operator> <literal type="number">2</literal></expr></cpp:if>
<macro><name>RTREE_GET_SUBTREE</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT_MAX</name> <operator>&gt;</operator> <literal type="number">3</literal></expr></cpp:if>
<macro><name>RTREE_GET_SUBTREE</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT_MAX</name> <operator>&gt;</operator> <literal type="number">4</literal></expr></cpp:if>
<macro><name>RTREE_GET_SUBTREE</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT_MAX</name> <operator>&gt;</operator> <literal type="number">5</literal></expr></cpp:if>
<macro><name>RTREE_GET_SUBTREE</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT_MAX</name> <operator>&gt;</operator> <literal type="number">6</literal></expr></cpp:if>
<macro><name>RTREE_GET_SUBTREE</name><argument_list>(<argument><literal type="number">5</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT_MAX</name> <operator>&gt;</operator> <literal type="number">7</literal></expr></cpp:if>
<macro><name>RTREE_GET_SUBTREE</name><argument_list>(<argument><literal type="number">6</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT_MAX</name> <operator>&gt;</operator> <literal type="number">8</literal></expr></cpp:if>
<macro><name>RTREE_GET_SUBTREE</name><argument_list>(<argument><literal type="number">7</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT_MAX</name> <operator>&gt;</operator> <literal type="number">9</literal></expr></cpp:if>
<macro><name>RTREE_GET_SUBTREE</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT_MAX</name> <operator>&gt;</operator> <literal type="number">10</literal></expr></cpp:if>
<macro><name>RTREE_GET_SUBTREE</name><argument_list>(<argument><literal type="number">9</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT_MAX</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>RTREE_GET_SUBTREE</name><argument_list>(<argument><literal type="number">10</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT_MAX</name> <operator>&gt;</operator> <literal type="number">12</literal></expr></cpp:if>
<macro><name>RTREE_GET_SUBTREE</name><argument_list>(<argument><literal type="number">11</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT_MAX</name> <operator>&gt;</operator> <literal type="number">13</literal></expr></cpp:if>
<macro><name>RTREE_GET_SUBTREE</name><argument_list>(<argument><literal type="number">12</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT_MAX</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>
<macro><name>RTREE_GET_SUBTREE</name><argument_list>(<argument><literal type="number">13</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT_MAX</name> <operator>&gt;</operator> <literal type="number">15</literal></expr></cpp:if>
<macro><name>RTREE_GET_SUBTREE</name><argument_list>(<argument><literal type="number">14</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT_MAX</name> <operator>&gt;</operator> <literal type="number">16</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Unsupported RTREE_HEIGHT_MAX</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>RTREE_GET_LEAF</name><argument_list>(<argument>RTREE_HEIGHT_MAX-<literal type="number">1</literal></argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RTREE_GET_SUBTREE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RTREE_GET_LEAF</name></cpp:undef>
<default>default:</default> <expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RTREE_GET_BIAS</name></cpp:undef>
<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>bool</name></type>
<name>rtree_set</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>extent_node_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>subkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>start_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start_level</name> <operator>=</operator> <call><name>rtree_start_level</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>rtree_subtree_read</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>start_level</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_level</name></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>node</name> <operator>=</operator> <name>child</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>subkey</name> <operator>=</operator> <call><name>rtree_subkey</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>rtree</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>rtree_val_write</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><index>[<expr><name>subkey</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>rtree</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>rtree_child_read</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><index>[<expr><name>subkey</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
