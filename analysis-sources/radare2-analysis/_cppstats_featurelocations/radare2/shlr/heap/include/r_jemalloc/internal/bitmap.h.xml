<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\heap\include\r_jemalloc\internal\bitmap.h">
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_TYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_BITMAP_MAXBITS</name></cpp:macro> <cpp:value>LG_RUN_MAXREGS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_MAXBITS</name></cpp:macro> <cpp:value>(ZU(1) &lt;&lt; LG_BITMAP_MAXBITS)</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>bitmap_level_s</name></name></type> <name>bitmap_level_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>bitmap_info_s</name></name></type> <name>bitmap_info_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>bitmap_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_BITMAP</name></cpp:macro> <cpp:value>LG_SIZEOF_LONG</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_BITMAP_GROUP_NBITS</name></cpp:macro> <cpp:value>(LG_SIZEOF_BITMAP + 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUP_NBITS</name></cpp:macro> <cpp:value>(ZU(1) &lt;&lt; LG_BITMAP_GROUP_NBITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUP_NBITS_MASK</name></cpp:macro> <cpp:value>(BITMAP_GROUP_NBITS-1)</cpp:value></cpp:define>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LG_BITMAP_MAXBITS</name> <operator>-</operator> <name>LG_BITMAP_GROUP_NBITS</name> <operator>&gt;</operator> <literal type="number">3</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_TREE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_BITS2GROUPS</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((nbits + BITMAP_GROUP_NBITS_MASK) &gt;&gt; LG_BITMAP_GROUP_NBITS)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_L0</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BITMAP_BITS2GROUPS(nbits)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_L1</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS(nbits))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_L2</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS((nbits))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_L3</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS( BITMAP_BITS2GROUPS((nbits)))))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_1_LEVEL</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BITMAP_GROUPS_L0(nbits)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_2_LEVEL</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BITMAP_GROUPS_1_LEVEL(nbits) + BITMAP_GROUPS_L1(nbits))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_3_LEVEL</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BITMAP_GROUPS_2_LEVEL(nbits) + BITMAP_GROUPS_L2(nbits))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_4_LEVEL</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BITMAP_GROUPS_3_LEVEL(nbits) + BITMAP_GROUPS_L3(nbits))</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LG_BITMAP_MAXBITS</name> <operator>&lt;=</operator> <name>LG_BITMAP_GROUP_NBITS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_MAX</name></cpp:macro> <cpp:value>BITMAP_GROUPS_1_LEVEL(BITMAP_MAXBITS)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LG_BITMAP_MAXBITS</name> <operator>&lt;=</operator> <name>LG_BITMAP_GROUP_NBITS</name> <operator>*</operator> <literal type="number">2</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_MAX</name></cpp:macro> <cpp:value>BITMAP_GROUPS_2_LEVEL(BITMAP_MAXBITS)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LG_BITMAP_MAXBITS</name> <operator>&lt;=</operator> <name>LG_BITMAP_GROUP_NBITS</name> <operator>*</operator> <literal type="number">3</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_MAX</name></cpp:macro> <cpp:value>BITMAP_GROUPS_3_LEVEL(BITMAP_MAXBITS)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LG_BITMAP_MAXBITS</name> <operator>&lt;=</operator> <name>LG_BITMAP_GROUP_NBITS</name> <operator>*</operator> <literal type="number">4</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_MAX</name></cpp:macro> <cpp:value>BITMAP_GROUPS_4_LEVEL(BITMAP_MAXBITS)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unsupported bitmap size"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_MAX_LEVELS</name></cpp:macro> <cpp:value>(LG_BITMAP_MAXBITS / LG_SIZEOF_BITMAP) + !!(LG_BITMAP_MAXBITS % LG_SIZEOF_BITMAP)</cpp:value></cpp:define>



<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_MAX</name></cpp:macro> <cpp:value>BITMAP_BITS2GROUPS(BITMAP_MAXBITS)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_STRUCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<struct>struct <name>bitmap_level_s</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>group_offset</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>bitmap_info_s</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>nbits</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>unsigned</name></type> <name>nlevels</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bitmap_level_t</name></type> <name><name>levels</name><index>[<expr><name>BITMAP_MAX_LEVELS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<decl_stmt><decl><type><name>size_t</name></type> <name>ngroups</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_EXTERNS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>bitmap_info_init</name><parameter_list>(<parameter><decl><type><name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbits</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bitmap_init</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>bitmap_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_INLINES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>bool</name></type> <name>bitmap_full</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>bitmap_get</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bitmap_set</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>bitmap_sfu</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bitmap_unset</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bit</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_BITMAP_C_</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><name>JEMALLOC_INLINE</name> <name>bool</name></type>
<name>bitmap_full</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>rgoff</name> <init>= <expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name><name>binfo</name><operator>-&gt;</operator><name>nlevels</name></name></expr>]</index></name><operator>.</operator><name>group_offset</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitmap_t</name></type> <name>rg</name> <init>= <expr><name><name>bitmap</name><index>[<expr><name>rgoff</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>rg</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>binfo</name><operator>-&gt;</operator><name>ngroups</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>bool</name></type>
<name>bitmap_get</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>goff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitmap_t</name></type> <name>g</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>bit</name> <operator>&gt;</operator> <name><name>binfo</name><operator>-&gt;</operator><name>nbits</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>goff</name> <operator>=</operator> <name>bit</name> <operator>&gt;&gt;</operator> <name>LG_BITMAP_GROUP_NBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>bitmap</name><index>[<expr><name>goff</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>!</operator><operator>(</operator><name>g</name> <operator>&amp;</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>
<name>bitmap_set</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>goff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>gp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitmap_t</name></type> <name>g</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bit</name> <operator>&lt;</operator> <name><name>binfo</name><operator>-&gt;</operator><name>nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>bitmap_get</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>goff</name> <operator>=</operator> <name>bit</name> <operator>&gt;&gt;</operator> <name>LG_BITMAP_GROUP_NBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gp</name> <operator>=</operator> <operator>&amp;</operator><name><name>bitmap</name><index>[<expr><name>goff</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>*</operator><name>gp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>g</name> <operator>&amp;</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>^=</operator> <call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>gp</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>bitmap_get</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>g</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>binfo</name><operator>-&gt;</operator><name>nlevels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <name>goff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>goff</name> <operator>=</operator> <name>bit</name> <operator>&gt;&gt;</operator> <name>LG_BITMAP_GROUP_NBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gp</name> <operator>=</operator> <operator>&amp;</operator><name><name>bitmap</name><index>[<expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_offset</name> <operator>+</operator> <name>goff</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>*</operator><name>gp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>g</name> <operator>&amp;</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>^=</operator> <call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>gp</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>g</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>JEMALLOC_INLINE</name> <name>size_t</name></type>
<name>bitmap_sfu</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitmap_t</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>bitmap_full</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>binfo</name><operator>-&gt;</operator><name>nlevels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>bitmap</name><index>[<expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <call><name>ffs_lu</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>bitmap</name><index>[<expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_offset</name> <operator>+</operator> <name>bit</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <operator>(</operator><name>bit</name> <operator>&lt;&lt;</operator> <name>LG_BITMAP_GROUP_NBITS</name><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>ffs_lu</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>bitmap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>bit</name> <operator>=</operator> <call><name>ffs_lu</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <name>LG_BITMAP_GROUP_NBITS</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bit</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>bitmap_set</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>bit</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>
<name>bitmap_unset</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>goff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>gp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitmap_t</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UNUSED</name> <name>bool</name></type> <name>propagate</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bit</name> <operator>&lt;</operator> <name><name>binfo</name><operator>-&gt;</operator><name>nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>bitmap_get</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>goff</name> <operator>=</operator> <name>bit</name> <operator>&gt;&gt;</operator> <name>LG_BITMAP_GROUP_NBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gp</name> <operator>=</operator> <operator>&amp;</operator><name><name>bitmap</name><index>[<expr><name>goff</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>*</operator><name>gp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>propagate</name> <operator>=</operator> <operator>(</operator><name>g</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>g</name> <operator>&amp;</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>^=</operator> <call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>gp</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>bitmap_get</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>propagate</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>binfo</name><operator>-&gt;</operator><name>nlevels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <name>goff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>goff</name> <operator>=</operator> <name>bit</name> <operator>&gt;&gt;</operator> <name>LG_BITMAP_GROUP_NBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gp</name> <operator>=</operator> <operator>&amp;</operator><name><name>bitmap</name><index>[<expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_offset</name> <operator>+</operator> <name>goff</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>*</operator><name>gp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>propagate</name> <operator>=</operator> <operator>(</operator><name>g</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>g</name> <operator>&amp;</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>^=</operator> <call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>gp</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>propagate</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
