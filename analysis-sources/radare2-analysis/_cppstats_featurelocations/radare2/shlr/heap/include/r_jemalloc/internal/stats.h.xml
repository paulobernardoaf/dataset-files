<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\heap\include\r_jemalloc\internal\stats.h">
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_TYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name><name>struct</name> <name>tcache_bin_stats_s</name></name></type> <name>tcache_bin_stats_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>malloc_bin_stats_s</name></name></type> <name>malloc_bin_stats_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>malloc_large_stats_s</name></name></type> <name>malloc_large_stats_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>malloc_huge_stats_s</name></name></type> <name>malloc_huge_stats_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>arena_stats_s</name></name></type> <name>arena_stats_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>chunk_stats_s</name></name></type> <name>chunk_stats_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_STRUCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<struct>struct <name>tcache_bin_stats_s</name> <block>{




<decl_stmt><decl><type><name>uint64_t</name></type> <name>nrequests</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>malloc_bin_stats_s</name> <block>{






<decl_stmt><decl><type><name>uint64_t</name></type> <name>nmalloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ndalloc</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>uint64_t</name></type> <name>nrequests</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>size_t</name></type> <name>curregs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>nfills</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>nflushes</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>nruns</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uint64_t</name></type> <name>reruns</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>curruns</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>malloc_large_stats_s</name> <block>{






<decl_stmt><decl><type><name>uint64_t</name></type> <name>nmalloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ndalloc</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>uint64_t</name></type> <name>nrequests</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>size_t</name></type> <name>curruns</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>malloc_huge_stats_s</name> <block>{




<decl_stmt><decl><type><name>uint64_t</name></type> <name>nmalloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ndalloc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>curhchunks</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>arena_stats_s</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>mapped</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>size_t</name></type> <name>retained</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>uint64_t</name></type> <name>npurge</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>nmadvise</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>purged</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>size_t</name></type> <name>metadata_mapped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>metadata_allocated</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>size_t</name></type> <name>allocated_large</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>nmalloc_large</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ndalloc_large</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>nrequests_large</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>allocated_huge</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>nmalloc_huge</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ndalloc_huge</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>malloc_large_stats_t</name> <modifier>*</modifier></type><name>lstats</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>malloc_huge_stats_t</name> <modifier>*</modifier></type><name>hstats</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_EXTERNS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>opt_stats_print</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>stats_cactive</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>stats_print</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>write</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbopaque</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_INLINES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>size_t</name></type> <name>stats_cactive_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>stats_cactive_add</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>stats_cactive_sub</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_STATS_C_</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><name>JEMALLOC_INLINE</name> <name>size_t</name></type>
<name>stats_cactive_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>atomic_read_z</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stats_cactive</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>
<name>stats_cactive_add</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>size</name> <operator>&amp;</operator> <name>chunksize_mask</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_add_z</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stats_cactive</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>
<name>stats_cactive_sub</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>size</name> <operator>&amp;</operator> <name>chunksize_mask</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_sub_z</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stats_cactive</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
