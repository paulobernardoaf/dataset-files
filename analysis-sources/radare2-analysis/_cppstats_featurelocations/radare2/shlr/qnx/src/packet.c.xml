<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\qnx\src\packet.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dsmsgs.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_TIMEOUT</name></cpp:macro> <cpp:value>(300 * 1000 * 1000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAME_CHAR</name></cpp:macro> <cpp:value>0x7e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESC_CHAR</name></cpp:macro> <cpp:value>0x7d</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_CHANNEL_RESET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_CHANNEL_DEBUG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_CHANNEL_TEXT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_CHANNEL_NAK</name></cpp:macro> <cpp:value>0xff</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name></type> <name><name>nak_packet</name><index>[]</index></name> <init>=
<expr><block>{<expr><name>FRAME_CHAR</name></expr>, <expr><name>SET_CHANNEL_NAK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FRAME_CHAR</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name></type> <name><name>ch_reset_packet</name><index>[]</index></name> <init>=
<expr><block>{<expr><name>FRAME_CHAR</name></expr>, <expr><name>SET_CHANNEL_RESET</name></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><name>FRAME_CHAR</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name></type> <name><name>ch_debug_packet</name><index>[]</index></name> <init>=
<expr><block>{<expr><name>FRAME_CHAR</name></expr>, <expr><name>SET_CHANNEL_DEBUG</name></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><name>FRAME_CHAR</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name></type> <name><name>ch_text_packet</name><index>[]</index></name> <init>=
<expr><block>{<expr><name>FRAME_CHAR</name></expr>, <expr><name>SET_CHANNEL_TEXT</name></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><name>FRAME_CHAR</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>append</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>data_len</name></name> <operator>==</operator> <name>DS_DATA_MAX_SIZE</name> <operator>+</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: data too long\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>data</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>data_len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unpack</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>modifier</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>sum</name> <init>= <expr><literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>g</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>read_len</name></name></expr>;</condition> <incr><expr><name><name>g</name><operator>-&gt;</operator><name>read_ptr</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>cur</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>read_buff</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>read_ptr</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ESC_CHAR</name></expr>:</case>
<expr_stmt><expr><name>modifier</name> <operator>=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><name>FRAME_CHAR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>data_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sum</name> <operator>!=</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: Checksum error\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>read_ptr</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><name>cur</name> <operator>^=</operator> <name>modifier</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>modifier</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_read_packet</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Initialize libqnxr_t first\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>data_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>read_len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>g</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>==</operator> <name><name>g</name><operator>-&gt;</operator><name>read_len</name></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_socket_ready</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>READ_TIMEOUT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>read_len</name></name> <operator>=</operator> <call><name>r_socket_read</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>g</name><operator>-&gt;</operator><name>read_buff</name></name></expr></argument>,

<argument><expr><name>DS_DATA_MAX_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>read_len</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>read_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: read failed\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>unpack</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: unpack failed\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>data_len</name></name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>DShdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>channel</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>channelrd</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>channel</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>data_len</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>SET_CHANNEL_NAK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: NAK received\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>channelrd</name></name> <operator>=</operator> <name>SET_CHANNEL_NAK</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name>SET_CHANNEL_TEXT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>channelrd</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>g</name><operator>-&gt;</operator><name>data_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_send_nak</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_socket_write</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>nak_packet</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>nak_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_send_ch_reset</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_socket_write</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>ch_reset_packet</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ch_reset_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_send_ch_debug</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_socket_write</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>ch_debug_packet</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ch_debug_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_send_ch_text</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_socket_write</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>ch_text_packet</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ch_text_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_send_packet</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Initialize libqnxr_t first\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>csum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>send_buff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>FRAME_CHAR</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>send_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>c</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>csum</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FRAME_CHAR</name></expr>:</case>
<case>case <expr><name>ESC_CHAR</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>ESC_CHAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>^=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>csum</name> <operator>^=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>csum</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FRAME_CHAR</name></expr>:</case>
<case>case <expr><name>ESC_CHAR</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>ESC_CHAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>csum</name> <operator>^=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>csum</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>FRAME_CHAR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>channelwr</name></name> <operator>!=</operator> <name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>channel</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>channel</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SET_CHANNEL_TEXT</name></expr>:</case>
<expr_stmt><expr><call><name>qnxr_send_ch_text</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SET_CHANNEL_DEBUG</name></expr>:</case>
<expr_stmt><expr><call><name>qnxr_send_ch_debug</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>channelwr</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>channel</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_socket_write</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>send_buff</name></name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>send_buff</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
