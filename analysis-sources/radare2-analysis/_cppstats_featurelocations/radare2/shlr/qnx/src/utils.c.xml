<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\qnx\src\utils.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I386_NUM_GREGS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I386_NUM_FREGS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I386_NUM_XREGS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_GPREGS</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I386_SSE_NUM_REGS</name></cpp:macro> <cpp:value>(I386_NUM_GREGS + I386_NUM_FREGS + I386_NUM_XREGS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I387_NUM_XMM_REGS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I387_ST0_REGNUM</name></cpp:macro> <cpp:value>I386_ST0_REGNUM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I387_FCTRL_REGNUM</name></cpp:macro> <cpp:value>(I387_ST0_REGNUM + 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I387_FSTAT_REGNUM</name></cpp:macro> <cpp:value>(I387_FCTRL_REGNUM + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I387_FTAG_REGNUM</name></cpp:macro> <cpp:value>(I387_FCTRL_REGNUM + 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I387_FISEG_REGNUM</name></cpp:macro> <cpp:value>(I387_FCTRL_REGNUM + 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I387_FIOFF_REGNUM</name></cpp:macro> <cpp:value>(I387_FCTRL_REGNUM + 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I387_FOSEG_REGNUM</name></cpp:macro> <cpp:value>(I387_FCTRL_REGNUM + 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I387_FOOFF_REGNUM</name></cpp:macro> <cpp:value>(I387_FCTRL_REGNUM + 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I387_FOP_REGNUM</name></cpp:macro> <cpp:value>(I387_FCTRL_REGNUM + 7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I387_XMM0_REGNUM</name></cpp:macro> <cpp:value>(I387_ST0_REGNUM + 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I387_MXCSR_REGNUM</name></cpp:macro> <cpp:value>(I387_XMM0_REGNUM + I387_NUM_XMM_REGS)</cpp:value></cpp:define>


<enum>enum <block>{
<decl><name>NTO_REG_GENERAL</name></decl>,
<decl><name>NTO_REG_FLOAT</name></decl>,
<decl><name>NTO_REG_SYSTEM</name></decl>,
<decl><name>NTO_REG_ALT</name></decl>,
<decl><name>NTO_REG_END</name></decl>
}</block>;</enum>

<enum>enum <name>i386_regnum</name> <block>{
<decl><name>I386_EAX_REGNUM</name></decl>, 
<decl><name>I386_ECX_REGNUM</name></decl>, 
<decl><name>I386_EDX_REGNUM</name></decl>, 
<decl><name>I386_EBX_REGNUM</name></decl>, 
<decl><name>I386_ESP_REGNUM</name></decl>, 
<decl><name>I386_EBP_REGNUM</name></decl>, 
<decl><name>I386_ESI_REGNUM</name></decl>, 
<decl><name>I386_EDI_REGNUM</name></decl>, 
<decl><name>I386_EIP_REGNUM</name></decl>, 
<decl><name>I386_EFLAGS_REGNUM</name></decl>, 
<decl><name>I386_CS_REGNUM</name></decl>, 
<decl><name>I386_SS_REGNUM</name></decl>, 
<decl><name>I386_DS_REGNUM</name></decl>, 
<decl><name>I386_ES_REGNUM</name></decl>, 
<decl><name>I386_FS_REGNUM</name></decl>, 
<decl><name>I386_GS_REGNUM</name></decl>, 
<decl><name>I386_ST0_REGNUM</name></decl> 
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>i386nto_gregset_reg_offset</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">7</literal> <operator>*</operator> <literal type="number">4</literal></expr>, 
<expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">4</literal></expr>, 
<expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">4</literal></expr>, 
<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>, 
<expr><literal type="number">11</literal> <operator>*</operator> <literal type="number">4</literal></expr>, 
<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal></expr>, 
<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal></expr>, 
<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal></expr>, 
<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>, 
<expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">4</literal></expr>, 
<expr><literal type="number">9</literal> <operator>*</operator> <literal type="number">4</literal></expr>, 
<expr><literal type="number">12</literal> <operator>*</operator> <literal type="number">4</literal></expr>, 
<expr><operator>-</operator><literal type="number">1</literal></expr> 
}</block></expr></init></decl>;</decl_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTO_ENAMETOOLONG</name></cpp:macro> <cpp:value>78</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTO_ELIBACC</name></cpp:macro> <cpp:value>83</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTO_ELIBBAD</name></cpp:macro> <cpp:value>84</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTO_ELIBSCN</name></cpp:macro> <cpp:value>85</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTO_ELIBMAX</name></cpp:macro> <cpp:value>86</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTO_ELIBEXEC</name></cpp:macro> <cpp:value>87</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTO_EILSEQ</name></cpp:macro> <cpp:value>88</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTO_ENOSYS</name></cpp:macro> <cpp:value>89</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MINGW32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<struct>struct <name>errnomap_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>other</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int</name></type> <name>errnoconvert</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>errnomap_t</name></name></type> <name><name>errnomap</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>NTO_ENAMETOOLONG</name></expr>, <expr><name>ENAMETOOLONG</name></expr>}</block></expr>,
<expr><block>{<expr><name>NTO_ELIBACC</name></expr>, <expr><name>ELIBACC</name></expr>}</block></expr>,
<expr><block>{<expr><name>NTO_ELIBBAD</name></expr>, <expr><name>ELIBBAD</name></expr>}</block></expr>,
<expr><block>{<expr><name>NTO_ELIBSCN</name></expr>, <expr><name>ELIBSCN</name></expr>}</block></expr>,
<expr><block>{<expr><name>NTO_ELIBMAX</name></expr>, <expr><name>ELIBMAX</name></expr>}</block></expr>,
<expr><block>{<expr><name>NTO_ELIBEXEC</name></expr>, <expr><name>ELIBEXEC</name></expr>}</block></expr>,
<expr><block>{<expr><name>NTO_EILSEQ</name></expr>, <expr><name>EILSEQ</name></expr>}</block></expr>,
<expr><block>{<expr><name>NTO_ENOSYS</name></expr>, <expr><name>ENOSYS</name></expr>}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<block>{<expr><name>NTO_ENAMETOOLONG</name></expr>, <expr><name>ENAMETOOLONG</name></expr>}</block></expr>,
<expr><block>{<expr><name>NTO_ENOSYS</name></expr>, <expr><name>ENOSYS</name></expr>}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MINGW32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<block>{<expr><name>NTO_ENAMETOOLONG</name></expr>, <expr><name>ENAMETOOLONG</name></expr>}</block></expr>,
<expr><block>{<expr><name>NTO_ELIBACC</name></expr>, <expr><name>ESRCH</name></expr>}</block></expr>,
<expr><block>{<expr><name>NTO_ELIBBAD</name></expr>, <expr><name>ESRCH</name></expr>}</block></expr>,
<expr><block>{<expr><name>NTO_ELIBSCN</name></expr>, <expr><name>ENOEXEC</name></expr>}</block></expr>,
<expr><block>{<expr><name>NTO_ELIBMAX</name></expr>, <expr><name>EPERM</name></expr>}</block></expr>,
<expr><block>{<expr><name>NTO_ELIBEXEC</name></expr>, <expr><name>ENOEXEC</name></expr>}</block></expr>,
<expr><block>{<expr><name>NTO_EILSEQ</name></expr>, <expr><name>EILSEQ</name></expr>}</block></expr>,
<expr><block>{<expr><name>NTO_ENOSYS</name></expr>, <expr><name>ENOSYS</name></expr>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<expr><literal type="number">0</literal></expr>}</block></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>errnomap</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>errnomap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>errnomap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nto</name> <operator>==</operator> <name>x</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>errnomap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>other</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type> <name>errnoconvert</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>LONGEST</name></type>
<name>extract_signed_integer</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>be</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LONGEST</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>startaddr</name> <init>= <expr><name>addr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>endaddr</name> <init>= <expr><name>startaddr</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>LONGEST</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(
<argument><expr><literal type="string">"This operation is not available on integers of more than %d byte(s)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>LONGEST</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>be</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>startaddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>LONGEST</name><operator>)</operator><operator>*</operator><name>p</name> <operator>^</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><operator>++</operator><name>p</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>endaddr</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><name>retval</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>endaddr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>LONGEST</name><operator>)</operator><operator>*</operator><name>p</name> <operator>^</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><operator>--</operator><name>p</name></expr>;</init> <condition><expr><name>p</name> <operator>&gt;=</operator> <name>startaddr</name></expr>;</condition> <incr><expr><operator>--</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><name>retval</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ULONGEST</name></type>
<name>extract_unsigned_integer</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>be</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ULONGEST</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>startaddr</name> <init>= <expr><name>addr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>endaddr</name> <init>= <expr><name>startaddr</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>LONGEST</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(
<argument><expr><literal type="string">"This operation is not available on integers of more than %d byte(s)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>LONGEST</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>be</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>startaddr</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>endaddr</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><name>retval</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>endaddr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>p</name> <operator>&gt;=</operator> <name>startaddr</name></expr>;</condition> <incr><expr><operator>--</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><name>retval</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>i386nto_regset_id</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>regno</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>regno</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NTO_REG_END</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>regno</name> <operator>&lt;</operator> <name>I386_NUM_GREGS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NTO_REG_GENERAL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>regno</name> <operator>&lt;</operator> <name>I386_NUM_GREGS</name> <operator>+</operator> <name>I386_NUM_FREGS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NTO_REG_FLOAT</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>regno</name> <operator>&lt;</operator> <name>I386_SSE_NUM_REGS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NTO_REG_FLOAT</name></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>i386nto_reg_offset</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>regnum</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>regnum</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>regnum</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name> <argument_list>(<argument><expr><name>i386nto_gregset_reg_offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>i386nto_gregset_reg_offset</name><index>[<expr><name>regnum</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>i386nto_register_area</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>regno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>regset</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>off</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>regset</name> <operator>==</operator> <name>NTO_REG_GENERAL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>regno</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NUM_GPREGS</name> <operator>*</operator> <literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>off</name> <operator>=</operator> <call><name>i386nto_reg_offset</name> <argument_list>(<argument><expr><name>regno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>off</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>regset</name> <operator>==</operator> <name>NTO_REG_FLOAT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>off_adjust</name></decl>, <decl><type ref="prev"/><name>regsize</name></decl>, <decl><type ref="prev"/><name>regset_size</name></decl>, <decl><type ref="prev"/><name>regno_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first_four</name> <init>= <expr><operator>(</operator><name>regno</name> <operator>&gt;=</operator> <name>I387_FCTRL_REGNUM</name> <operator>&amp;&amp;</operator> <name>regno</name> <operator>&lt;=</operator> <name>I387_FISEG_REGNUM</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>second_four</name> <init>= <expr><operator>(</operator><name>regno</name> <operator>&gt;</operator> <name>I387_FISEG_REGNUM</name> <operator>&amp;&amp;</operator> <name>regno</name> <operator>&lt;=</operator> <name>I387_FOP_REGNUM</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>st_reg</name> <init>= <expr><operator>(</operator><name>regno</name> <operator>&gt;=</operator> <name>I387_ST0_REGNUM</name> <operator>&amp;&amp;</operator> <name>regno</name> <operator>&lt;</operator> <name>I387_ST0_REGNUM</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xmm_reg</name> <init>= <expr><operator>(</operator><name>regno</name> <operator>&gt;=</operator> <name>I387_XMM0_REGNUM</name> <operator>&amp;&amp;</operator> <name>regno</name> <operator>&lt;</operator> <name>I387_MXCSR_REGNUM</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (nto_cpuinfo_valid &amp;&amp; nto_cpuinfo_flags | X86_CPU_FXSR)
{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>regset_size</name> <operator>=</operator> <literal type="number">512</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first_four</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>regsize</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>off_adjust</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>regno_base</name> <operator>=</operator> <name>I387_FCTRL_REGNUM</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>second_four</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>regsize</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>off_adjust</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>regno_base</name> <operator>=</operator> <name>I387_FISEG_REGNUM</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>st_reg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>regsize</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>off_adjust</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>regno_base</name> <operator>=</operator> <name>I387_ST0_REGNUM</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>xmm_reg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>regsize</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>off_adjust</name> <operator>=</operator> <literal type="number">160</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>regno_base</name> <operator>=</operator> <name>I387_XMM0_REGNUM</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>regno</name> <operator>==</operator> <name>I387_MXCSR_REGNUM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>regsize</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>off_adjust</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>regno_base</name> <operator>=</operator> <name>I387_MXCSR_REGNUM</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>off_adjust</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>regno_base</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>regsize</name> <operator>=</operator> <name>regset_size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
}
else
{
regset_size = 108;

if (first_four || second_four)
{

regsize = 4;
off_adjust = 0;
regno_base = I387_FCTRL_REGNUM;
}
else if (st_reg)
{

regsize = 10;
off_adjust = 7 * 4;
regno_base = I387_ST0_REGNUM;
}
else
{

off_adjust = 0;
regno_base = 0;
regsize = regset_size;
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>off</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>regno</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>off_adjust</name> <operator>+</operator> <operator>(</operator><name>regno</name> <operator>-</operator> <name>regno_base</name><operator>)</operator> <operator>*</operator> <name>regsize</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>regsize</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>ptid_t</name></type> <name>ptid_build</name> <parameter_list>(<parameter><decl><type><name>st32</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>tid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ptid_t</name></type> <name>ptid</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ptid</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptid</name><operator>.</operator><name>tid</name></name> <operator>=</operator> <name>tid</name></expr>;</expr_stmt>

<return>return <expr><name>ptid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ptid_equal</name> <parameter_list>(<parameter><decl><type><name>ptid_t</name></type> <name>ptid1</name></decl></parameter>, <parameter><decl><type><name>ptid_t</name></type> <name>ptid2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ptid1</name><operator>.</operator><name>pid</name></name> <operator>==</operator> <name><name>ptid2</name><operator>.</operator><name>pid</name></name> <operator>&amp;&amp;</operator> <name><name>ptid1</name><operator>.</operator><name>tid</name></name> <operator>==</operator> <name><name>ptid2</name><operator>.</operator><name>tid</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
