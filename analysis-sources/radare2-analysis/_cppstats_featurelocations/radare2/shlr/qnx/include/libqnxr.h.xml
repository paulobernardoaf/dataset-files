<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\qnx\include\libqnxr.h">
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBQNXR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBQNXR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>ssize_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>pid_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_types_base.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dsmsgs.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_NOT_SUPPORTED</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_ERROR_1</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X86_64</name></cpp:macro> <cpp:value>ARCH_X86_64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X86_32</name></cpp:macro> <cpp:value>ARCH_X86_32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARM_32</name></cpp:macro> <cpp:value>ARCH_ARM_32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARM_64</name></cpp:macro> <cpp:value>ARCH_ARM_64</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>st32</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>tid</name></decl>;</decl_stmt>
}</block></struct></type> <name>ptid_t</name>;</typedef>





<typedef>typedef <type><struct>struct <name>libqnxr_t</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>read_buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>send_buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>send_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>read_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>read_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>connected</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>mid</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>ut8</name></type> <name><name>data</name><index>[<expr><name>DS_DATA_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DSMsg_union_t</name></type> <name>pkt</name></decl>;</decl_stmt>
}</block> <decl><name>tran</name></decl>, <name>recv</name>;</union>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>data_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>architecture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>registers_t</name> <modifier>*</modifier></type><name>registers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channelrd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channelwr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>target_proto_minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>target_proto_major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stop_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>notify_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>stop_pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>signal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptid_t</name></type> <name>inferior_ptid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>waiting_for_stop</name></decl>;</decl_stmt>
}</block></struct></type> <name>libqnxr_t</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type>(<name>pidlist_cb_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>int</name></type> <name>qnxr_init</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qnxr_set_architecture</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>architecture</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qnxr_cleanup</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qnxr_connect</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qnxr_disconnect</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>qnxr_pidlist</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>pidlist_cb_t</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qnxr_select</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ptid_t</name></type> <name>qnxr_run</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ptid_t</name></type> <name>qnxr_attach</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ptid_t</name></type> <name>qnxr_wait</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qnxr_stop</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>qnxr_continue</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qnxr_step</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qnxr_read_registers</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>qnxr_write_reg</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qnxr_write_register</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qnxr_read_memory</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qnxr_write_memory</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>qnxr_set_bp</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conditions</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qnxr_set_hwbp</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conditions</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qnxr_remove_bp</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>qnxr_remove_hwbp</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>extern</specifier> <name>ptid_t</name></type> <name>null_ptid</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> <name>ptid_equal</name> <parameter_list>(<parameter><decl><type><name>ptid_t</name></type> <name>ptid1</name></decl></parameter>, <parameter><decl><type><name>ptid_t</name></type> <name>ptid2</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
