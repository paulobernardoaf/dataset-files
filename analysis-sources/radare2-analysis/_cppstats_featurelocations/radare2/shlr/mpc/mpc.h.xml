<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\shlr\mpc\mpc.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>mpc_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mpc_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>





<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>long</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>col</name></decl>;</decl_stmt>
}</block></struct></type> <name>mpc_state_t</name>;</typedef>





<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>mpc_state_t</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>expected_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>failure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>expected</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>recieved</name></decl>;</decl_stmt>
}</block></struct></type> <name>mpc_err_t</name>;</typedef>

<function_decl><type><name>void</name></type> <name>mpc_err_delete</name><parameter_list>(<parameter><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>mpc_err_string</name><parameter_list>(<parameter><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mpc_err_print</name><parameter_list>(<parameter><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mpc_err_print_to</name><parameter_list>(<parameter><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>





<typedef>typedef <type><name>void</name></type> <name>mpc_val_t</name>;</typedef>

<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
}</block></union></type> <name>mpc_result_t</name>;</typedef>

<struct_decl>struct <name>mpc_parser_t</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>mpc_parser_t</name></name></type> <name>mpc_parser_t</name>;</typedef>

<function_decl><type><name>int</name></type> <name>mpc_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>mpc_result_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>mpc_parse_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>mpc_result_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>mpc_parse_pipe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>mpc_result_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>mpc_parse_contents</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>mpc_result_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>





<typedef>typedef <function_decl><type><name>void</name></type>(<modifier>*</modifier><name>mpc_dtor_t</name>)<parameter_list>(<parameter><decl><type><name>mpc_val_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>mpc_val_t</name><modifier>*</modifier></type>(<modifier>*</modifier><name>mpc_ctor_t</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>mpc_val_t</name><modifier>*</modifier></type>(<modifier>*</modifier><name>mpc_apply_t</name>)<parameter_list>(<parameter><decl><type><name>mpc_val_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>mpc_val_t</name><modifier>*</modifier></type>(<modifier>*</modifier><name>mpc_apply_to_t</name>)<parameter_list>(<parameter><decl><type><name>mpc_val_t</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>mpc_val_t</name><modifier>*</modifier></type>(<modifier>*</modifier><name>mpc_fold_t</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>mpc_val_t</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>





<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_copy</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_define</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_undefine</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>mpc_delete</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mpc_cleanup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_any</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_char</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_range</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_oneof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_noneof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_satisfy</name><parameter_list>(<parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_pass</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_fail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_failf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_lift</name><parameter_list>(<parameter><decl><type><name>mpc_ctor_t</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_lift_val</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_anchor</name><parameter_list>(<parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>char</name></type></decl></parameter>,<parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_expect</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_expectf</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_apply</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_apply_t</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_apply_to</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_apply_to_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_not</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>da</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_not_lift</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>da</name></decl></parameter>, <parameter><decl><type><name>mpc_ctor_t</name></type> <name>lf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_maybe</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_maybe_lift</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_ctor_t</name></type> <name>lf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_many</name><parameter_list>(<parameter><decl><type><name>mpc_fold_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_many1</name><parameter_list>(<parameter><decl><type><name>mpc_fold_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_count</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_fold_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>da</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_or</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_and</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_fold_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_predictive</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_eoi</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_soi</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_boundary</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_whitespace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_whitespaces</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_blank</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_newline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_tab</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_escape</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_digit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_hexdigit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_octdigit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_digits</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_hexdigits</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_octdigits</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_lower</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_upper</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_alpha</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_underscore</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_alphanum</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_int</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_hex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_oct</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_number</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_real</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_float</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_char_lit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_string_lit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_regex_lit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_ident</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_startwith</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_endwith</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>da</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_whole</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>da</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_stripl</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_stripr</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_strip</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_tok</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_sym</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_total</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>da</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_between</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_parens</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_braces</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_brackets</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_squares</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_tok_between</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_tok_parens</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_tok_braces</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_tok_brackets</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_tok_squares</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>mpcf_dtor_null</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_ctor_null</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_ctor_str</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_free</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_int</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_hex</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_oct</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_float</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_strtriml</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_strtrimr</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_strtrim</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_escape</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_escape_regex</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_escape_string_raw</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_escape_char_raw</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_unescape</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_unescape_regex</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_unescape_string_raw</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_unescape_char_raw</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_null</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>xs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_fst</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>xs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_snd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>xs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_trd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>xs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_fst_free</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>xs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_snd_free</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>xs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_trd_free</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>xs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_strfold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>xs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_maths</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>xs</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_re</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>re</name></decl></parameter>)</parameter_list>;</function_decl>





<typedef>typedef <type><struct>struct <name>mpc_ast_t</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>contents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mpc_state_t</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>children_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mpc_ast_t</name></name><modifier>*</modifier><modifier>*</modifier></type> <name>children</name></decl>;</decl_stmt>
}</block></struct></type> <name>mpc_ast_t</name>;</typedef>

<function_decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>mpc_ast_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>contents</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>mpc_ast_build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>mpc_ast_add_root</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>mpc_ast_add_child</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>mpc_ast_add_tag</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>mpc_ast_tag</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>mpc_ast_state</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_state_t</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>mpc_ast_delete</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mpc_ast_print</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mpc_ast_print_to</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>mpc_ast_eq</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_fold_ast</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>as</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_str_ast</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_state_ast</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_tag</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_add_tag</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_root</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_state</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_total</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_not</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_maybe</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_many</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_many1</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_count</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_or</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_and</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <block>{
<decl><name>MPCA_LANG_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MPCA_LANG_PREDICTIVE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>MPCA_LANG_WHITESPACE_SENSITIVE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>

<function_decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_grammar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>grammar</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>mpca_lang</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>language</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>mpca_lang_file</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>mpca_lang_pipe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>mpca_lang_contents</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>mpc_print</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mpc_optimise</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mpc_stats</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>mpc_test_pass</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>tester</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, 
<parameter><decl><type><name>mpc_dtor_t</name></type> <name>destructor</name></decl></parameter>, 
<parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><name>printer</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>mpc_test_fail</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>tester</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>mpc_dtor_t</name></type> <name>destructor</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><name>printer</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
