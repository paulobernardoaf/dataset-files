<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\binr\r2r\run.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r2r.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSEC_PER_SEC</name></cpp:macro> <cpp:value>1000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSEC_PER_MSEC</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USEC_PER_SEC</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSEC_PER_USEC</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<struct>struct <name>r2r_subprocess_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStrBuf</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStrBuf</name></type> <name>err</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>R_API</name> <name>bool</name></type> <name>r2r_subprocess_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>
<function><type><name>R_API</name> <name>void</name></type> <name>r2r_subprocess_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>R_API</name> <name>R2RSubprocess</name> <modifier>*</modifier></type><name>r2r_subprocess_start</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>args</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>args_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>envvars</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>envvals</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>env_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>file</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator><name>args</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator><name>args_size</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator><name>envvars</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator><name>envvals</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator><name>env_size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"TODO: implement r2r_subprocess API for windows\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r2r_subprocess_wait</name><parameter_list>(<parameter><decl><type><name>R2RSubprocess</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>timeout_ms</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r2r_subprocess_kill</name><parameter_list>(<parameter><decl><type><name>R2RSubprocess</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r2r_subprocess_stdin_write</name><parameter_list>(<parameter><decl><type><name>R2RSubprocess</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>)</parameter_list> <block>{<block_content>

</block_content>}</block></function>


<function><type><name>R_API</name> <name>R2RProcessOutput</name> <modifier>*</modifier></type><name>r2r_subprocess_drain</name><parameter_list>(<parameter><decl><type><name>R2RSubprocess</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>R2RProcessOutput</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>R2RProcessOutput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <call><name>r_strbuf_drain_nofree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <call><name>r_strbuf_drain_nofree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>ret</name></name></expr>;</expr_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r2r_subprocess_free</name><parameter_list>(<parameter><decl><type><name>R2RSubprocess</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<struct>struct <name>r2r_subprocess_t</name> <block>{
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stdin_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stdout_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stderr_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>killpipe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStrBuf</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStrBuf</name></type> <name>err</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>RPVector</name></type> <name>subprocs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RThreadLock</name> <modifier>*</modifier></type><name>subprocs_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>sigchld_pipe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RThread</name> <modifier>*</modifier></type><name>sigchld_thread</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_sigchld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>b</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><name><name>sigchld_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RThreadFunctionRet</name></type> <name>sigchld_th</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rd</name> <init>= <expr><call><name>read</name> <argument_list>(<argument><expr><name><name>sigchld_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rd</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>wstat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>waitpid</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>wstat</name></expr></argument>, <argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>r_th_lock_enter</name> <argument_list>(<argument><expr><name>subprocs_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>R2RSubprocess</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<macro><name>r_pvector_foreach</name> <argument_list>(<argument>&amp;subprocs</argument>, <argument>it</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>R2RSubprocess</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <name>pid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>proc</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_th_lock_leave</name> <argument_list>(<argument><expr><name>subprocs_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WIFEXITED</name> <argument_list>(<argument><expr><name>wstat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <call><name>WEXITSTATUS</name> <argument_list>(<argument><expr><name>wstat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>killpipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_th_lock_leave</name> <argument_list>(<argument><expr><name>subprocs_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
<return>return <expr><name>R_TH_STOP</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r2r_subprocess_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_pvector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subprocs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subprocs_mutex</name> <operator>=</operator> <call><name>r_th_lock_new</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>subprocs_mutex</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pipe</name> <argument_list>(<argument><expr><name>sigchld_pipe</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_th_lock_free</name> <argument_list>(<argument><expr><name>subprocs_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sigchld_thread</name> <operator>=</operator> <call><name>r_th_new</name> <argument_list>(<argument><expr><name>sigchld_th</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sigchld_thread</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>sigchld_pipe</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>sigchld_pipe</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_th_lock_free</name> <argument_list>(<argument><expr><name>subprocs_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_sys_signal</name> <argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>handle_sigchld</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>sigchld_pipe</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>sigchld_pipe</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_th_lock_free</name> <argument_list>(<argument><expr><name>subprocs_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r2r_subprocess_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_signal</name> <argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><name><name>sigchld_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>sigchld_pipe</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_th_wait</name> <argument_list>(<argument><expr><name>sigchld_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>sigchld_pipe</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_th_free</name> <argument_list>(<argument><expr><name>sigchld_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>subprocs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_th_lock_free</name> <argument_list>(<argument><expr><name>subprocs_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>R2RSubprocess</name> <modifier>*</modifier></type><name>r2r_subprocess_start</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>args</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>args_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>envvars</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>envvals</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>env_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name>args_size</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>argv</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>file</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>args_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>argv</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>args_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>R2RSubprocess</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>R2RSubprocess</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proc</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>killpipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>killpipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pipe</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>killpipe</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>killpipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"fcntl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>stdin_pipe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pipe</name> <argument_list>(<argument><expr><name>stdin_pipe</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>stdin_fd</name></name> <operator>=</operator> <name><name>stdin_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>stdout_pipe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pipe</name> <argument_list>(<argument><expr><name>stdout_pipe</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>stdout_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"fcntl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>stdout_fd</name></name> <operator>=</operator> <name><name>stdout_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>stderr_pipe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pipe</name> <argument_list>(<argument><expr><name>stderr_pipe</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>stderr_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"fcntl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>stderr_fd</name></name> <operator>=</operator> <name><name>stderr_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_th_lock_enter</name> <argument_list>(<argument><expr><name>subprocs_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <call><name>r_sys_fork</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_th_lock_leave</name> <argument_list>(<argument><expr><name>subprocs_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"fork"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><call><name>dup2</name><argument_list>(<argument><expr><name><name>stdin_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EINTR</name><operator>)</operator></expr>)</condition> <block>{<block_content/>}</block></while>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>stdin_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>stdin_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><call><name>dup2</name><argument_list>(<argument><expr><name><name>stdout_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EINTR</name><operator>)</operator></expr>)</condition> <block>{<block_content/>}</block></while>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>stdout_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>stdout_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><call><name>dup2</name><argument_list>(<argument><expr><name><name>stderr_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>STDERR_FILENO</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EINTR</name><operator>)</operator></expr>)</condition> <block>{<block_content/>}</block></while>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>stderr_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>stderr_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>env_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>setenv</name> <argument_list>(<argument><expr><name><name>envvars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>envvals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>execvp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>stdin_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>stdout_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>stderr_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>subprocs</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_th_lock_leave</name> <argument_list>(<argument><expr><name>subprocs_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>proc</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>proc</name> <operator>&amp;&amp;</operator> <name><name>proc</name><operator>-&gt;</operator><name>killpipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>killpipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>proc</name> <operator>&amp;&amp;</operator> <name><name>proc</name><operator>-&gt;</operator><name>killpipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>killpipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stderr_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>stderr_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stderr_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>stderr_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stdout_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>stdout_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stdout_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>stdout_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stdin_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>stdin_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stdin_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>stdin_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r2r_subprocess_wait</name><parameter_list>(<parameter><decl><type><name>R2RSubprocess</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>timeout_ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>timeout_abs</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>timeout_ms</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clock_gettime</name> <argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout_abs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeout_abs</name><operator>.</operator><name>tv_nsec</name></name> <operator>+=</operator> <name>timeout_ms</name> <operator>*</operator> <name>NSEC_PER_MSEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeout_abs</name><operator>.</operator><name>tv_sec</name></name> <operator>+=</operator> <name><name>timeout_abs</name><operator>.</operator><name>tv_nsec</name></name> <operator>/</operator> <name>NSEC_PER_SEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeout_abs</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name><name>timeout_abs</name><operator>.</operator><name>tv_nsec</name></name> <operator>%</operator> <name>NSEC_PER_SEC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>stdout_eof</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>stderr_eof</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>child_dead</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><name>stdout_eof</name> <operator>||</operator> <operator>!</operator><name>stderr_eof</name> <operator>||</operator> <operator>!</operator><name>child_dead</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>fd_set</name></type> <name>rfds</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nfds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stdout_eof</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FD_SET</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>stdout_fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>stdout_fd</name></name> <operator>&gt;</operator> <name>nfds</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nfds</name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>stdout_fd</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stderr_eof</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FD_SET</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>stderr_fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>stderr_fd</name></name> <operator>&gt;</operator> <name>nfds</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nfds</name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>stderr_fd</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>child_dead</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FD_SET</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>killpipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>killpipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>nfds</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nfds</name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>killpipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nfds</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout_s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>timeout_ms</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>now</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>clock_gettime</name> <argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>usec_diff</name> <init>= <expr><operator>(</operator><operator>(</operator><name>st64</name><operator>)</operator><name><name>timeout_abs</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>now</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <name>USEC_PER_SEC</name>
<operator>+</operator> <operator>(</operator><operator>(</operator><name>st64</name><operator>)</operator><name><name>timeout_abs</name><operator>.</operator><name>tv_nsec</name></name> <operator>-</operator> <name><name>now</name><operator>.</operator><name>tv_nsec</name></name><operator>)</operator> <operator>/</operator> <name>NSEC_PER_USEC</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>usec_diff</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>timeout_s</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>usec_diff</name> <operator>/</operator> <name>USEC_PER_SEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeout_s</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name>usec_diff</name> <operator>%</operator> <name>USEC_PER_SEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <operator>&amp;</operator><name>timeout_s</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>select</name> <argument_list>(<argument><expr><name>nfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>timedout</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>stdout_fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>timedout</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">0x500</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>sz</name> <init>= <expr><call><name>read</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>stdout_fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>stdout_eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append_n</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>stderr_fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>timedout</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">0x500</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>sz</name> <init>= <expr><call><name>read</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>stderr_fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>stderr_eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append_n</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>killpipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>timedout</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>child_dead</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>timedout</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"select"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>child_dead</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r2r_subprocess_kill</name><parameter_list>(<parameter><decl><type><name>R2RSubprocess</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>kill</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r2r_subprocess_stdin_write</name><parameter_list>(<parameter><decl><type><name>R2RSubprocess</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>stdin_fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>stdin_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>stdin_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>R2RProcessOutput</name> <modifier>*</modifier></type><name>r2r_subprocess_drain</name><parameter_list>(<parameter><decl><type><name>R2RSubprocess</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_th_lock_enter</name> <argument_list>(<argument><expr><name>subprocs_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>R2RProcessOutput</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>R2RProcessOutput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <call><name>r_strbuf_drain_nofree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <call><name>r_strbuf_drain_nofree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>ret</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_th_lock_leave</name> <argument_list>(<argument><expr><name>subprocs_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r2r_subprocess_free</name><parameter_list>(<parameter><decl><type><name>R2RSubprocess</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proc</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_th_lock_enter</name> <argument_list>(<argument><expr><name>subprocs_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_remove_data</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>subprocs</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_th_lock_leave</name> <argument_list>(<argument><expr><name>subprocs_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>killpipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>killpipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>stdin_fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>stdin_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>stdout_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>stderr_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>R_API</name> <name>void</name></type> <name>r2r_process_output_free</name><parameter_list>(<parameter><decl><type><name>R2RProcessOutput</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>R2RProcessOutput</name> <modifier>*</modifier></type><name>subprocess_runner</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>args</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>args_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>envvars</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>envvals</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>env_size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>R2RRunConfig</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>R2RSubprocess</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><call><name>r2r_subprocess_start</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>args_size</name></expr></argument>, <argument><expr><name>envvars</name></expr></argument>, <argument><expr><name>envvals</name></expr></argument>, <argument><expr><name>env_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>timeout</name> <init>= <expr><operator>!</operator><call><name>r2r_subprocess_wait</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>timeout_ms</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>timeout</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r2r_subprocess_kill</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>R2RProcessOutput</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>r2r_subprocess_drain</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r2r_subprocess_free</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>R2RProcessOutput</name> <modifier>*</modifier></type><name>run_r2_test</name><parameter_list>(<parameter><decl><type><name>R2RRunConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmds</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>files</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>extra_args</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>load_plugins</name></decl></parameter>, <parameter><decl><type><name>R2RCmdRunner</name></type> <name>runner</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RPVector</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-escr.utf8=0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-escr.color=0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-escr.interactive=0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>extra_arg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>file_arg</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>extra_args</argument>, <argument>it</argument>, <argument>extra_arg</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>extra_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-Qc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>files</argument>, <argument>it</argument>, <argument>file_arg</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>file_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>envvars</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"R2_NOPLUGINS"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>envvals</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"1"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>env_size</name> <init>= <expr><ternary><condition><expr><name>load_plugins</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>R2RProcessOutput</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>runner</name> <argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>r2_cmd</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name></expr></argument>, <argument><expr><call><name>r_pvector_len</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>envvars</name></expr></argument>, <argument><expr><name>envvals</name></expr></argument>, <argument><expr><name>env_size</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>R2RProcessOutput</name> <modifier>*</modifier></type><name>r2r_run_cmd_test</name><parameter_list>(<parameter><decl><type><name>R2RRunConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>R2RCmdTest</name> <modifier>*</modifier></type><name>test</name></decl></parameter>, <parameter><decl><type><name>R2RCmdRunner</name></type> <name>runner</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>extra_args</name> <init>= <expr><ternary><condition><expr><name><name>test</name><operator>-&gt;</operator><name>args</name><operator>.</operator><name>value</name></name></expr> ?</condition><then> <expr><call><name>r_str_split_duplist</name> <argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>args</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>files</name> <init>= <expr><call><name>r_str_split_duplist</name> <argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>tmpit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>extra_args</argument>, <argument>it</argument>, <argument>tmpit</argument>, <argument>token</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>token</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name>extra_args</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>files</argument>, <argument>it</argument>, <argument>tmpit</argument>, <argument>token</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>token</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>files</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>files</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>files</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>R2RProcessOutput</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>run_r2_test</name> <argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>cmds</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>extra_args</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>load_plugins</name></name></expr></argument>, <argument><expr><name>runner</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>extra_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r2r_check_cmd_test</name><parameter_list>(<parameter><decl><type><name>R2RProcessOutput</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>R2RCmdTest</name> <modifier>*</modifier></type><name>test</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>ret</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>out</name><operator>-&gt;</operator><name>out</name></name> <operator>||</operator> <operator>!</operator><name><name>out</name><operator>-&gt;</operator><name>err</name></name> <operator>||</operator> <name><name>out</name><operator>-&gt;</operator><name>timeout</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expect_out</name> <init>= <expr><name><name>test</name><operator>-&gt;</operator><name>expect</name><operator>.</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>expect_out</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>expect_out</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expect_err</name> <init>= <expr><name><name>test</name><operator>-&gt;</operator><name>expect_err</name><operator>.</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>expect_err</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><name>expect_err</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JQ_CMD</name></cpp:macro> <cpp:value>"jq"</cpp:value></cpp:define>

<function><type><name>R_API</name> <name>bool</name></type> <name>r2r_check_jq_available</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>invalid_json</name> <init>= <expr><literal type="string">"this is not json lol"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>R2RSubprocess</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><call><name>r2r_subprocess_start</name> <argument_list>(<argument><expr><name>JQ_CMD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r2r_subprocess_stdin_write</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name>invalid_json</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>invalid_json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r2r_subprocess_wait</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>invalid_detected</name> <init>= <expr><name><name>proc</name><operator>-&gt;</operator><name>ret</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r2r_subprocess_free</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>valid_json</name> <init>= <expr><literal type="string">"{\"this is\":\"valid json\",\"lol\":true}"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>proc</name> <operator>=</operator> <call><name>r2r_subprocess_start</name> <argument_list>(<argument><expr><name>JQ_CMD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r2r_subprocess_stdin_write</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name>valid_json</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>valid_json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r2r_subprocess_wait</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>valid_detected</name> <init>= <expr><name><name>proc</name><operator>-&gt;</operator><name>ret</name></name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r2r_subprocess_free</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>invalid_detected</name> <operator>&amp;&amp;</operator> <name>valid_detected</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>R2RProcessOutput</name> <modifier>*</modifier></type><name>r2r_run_json_test</name><parameter_list>(<parameter><decl><type><name>R2RRunConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>R2RJsonTest</name> <modifier>*</modifier></type><name>test</name></decl></parameter>, <parameter><decl><type><name>R2RCmdRunner</name></type> <name>runner</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>files</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>config</name><operator>-&gt;</operator><name>json_test_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>R2RProcessOutput</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>run_r2_test</name> <argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>load_plugins</name></name></expr></argument>, <argument><expr><name>runner</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r2r_check_json_test</name><parameter_list>(<parameter><decl><type><name>R2RProcessOutput</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>R2RJsonTest</name> <modifier>*</modifier></type><name>test</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>ret</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>out</name><operator>-&gt;</operator><name>out</name></name> <operator>||</operator> <operator>!</operator><name><name>out</name><operator>-&gt;</operator><name>err</name></name> <operator>||</operator> <name><name>out</name><operator>-&gt;</operator><name>timeout</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>R2RSubprocess</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><call><name>r2r_subprocess_start</name> <argument_list>(<argument><expr><name>JQ_CMD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r2r_subprocess_stdin_write</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r2r_subprocess_wait</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name><name>proc</name><operator>-&gt;</operator><name>ret</name></name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r2r_subprocess_free</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>R2RAsmTestOutput</name> <modifier>*</modifier></type><name>r2r_run_asm_test</name><parameter_list>(<parameter><decl><type><name>R2RRunConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>R2RAsmTest</name> <modifier>*</modifier></type><name>test</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>R2RAsmTestOutput</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>R2RAsmTestOutput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPVector</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>arch</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>test</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>cpu</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>test</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>bits</name><index>[<expr><literal type="number">0x20</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>R2R_ASM_TEST_MODE_BIG_ENDIAN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-e"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>offset</name><index>[<expr><literal type="number">0x20</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_snprintf</name> <argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RStrBuf</name></type> <name>cmd_buf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cmd_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>R2R_ASM_TEST_MODE_ASSEMBLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>disasm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>R2RSubprocess</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><call><name>r2r_subprocess_start</name> <argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>rasm2_cmd</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name></expr></argument>, <argument><expr><call><name>r_pvector_len</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r2r_subprocess_wait</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>timeout_ms</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r2r_subprocess_kill</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>as_timeout</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<goto>goto <name>rip</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>ret</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>rip</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hex</name> <init>= <expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hexlen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hexlen</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>rip</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bytes</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>hexlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>byteslen</name> <init>= <expr><call><name>r_hex_str2bin</name> <argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>byteslen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>rip</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>bytes_size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>byteslen</name></expr>;</expr_stmt>
<label><name>rip</name>:</label>
<expr_stmt><expr><call><name>r_pvector_pop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r2r_subprocess_free</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>R2R_ASM_TEST_MODE_DISASSEMBLE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hex</name> <init>= <expr><call><name>r_hex_bin2strdup</name> <argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>bytes_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hex</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>R2RSubprocess</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><call><name>r2r_subprocess_start</name> <argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>rasm2_cmd</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name></expr></argument>, <argument><expr><call><name>r_pvector_len</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r2r_subprocess_wait</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>timeout_ms</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r2r_subprocess_kill</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>disas_timeout</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<goto>goto <name>ship</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>ret</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>ship</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>disasm</name> <init>= <expr><call><name>r_strbuf_drain_nofree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>disasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>disasm</name></name> <operator>=</operator> <name>disasm</name></expr>;</expr_stmt>
<label><name>ship</name>:</label>
<expr_stmt><expr><call><name>r_pvector_pop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_pop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r2r_subprocess_free</name> <argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>beach</name>:</label>
<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cmd_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r2r_check_asm_test</name><parameter_list>(<parameter><decl><type><name>R2RAsmTestOutput</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>R2RAsmTest</name> <modifier>*</modifier></type><name>test</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>R2R_ASM_TEST_MODE_ASSEMBLE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>out</name><operator>-&gt;</operator><name>bytes</name></name> <operator>||</operator> <operator>!</operator><name><name>test</name><operator>-&gt;</operator><name>bytes</name></name> <operator>||</operator> <name><name>out</name><operator>-&gt;</operator><name>bytes_size</name></name> <operator>!=</operator> <name><name>test</name><operator>-&gt;</operator><name>bytes_size</name></name> <operator>||</operator> <name><name>out</name><operator>-&gt;</operator><name>as_timeout</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>bytes_size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>R2R_ASM_TEST_MODE_DISASSEMBLE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>out</name><operator>-&gt;</operator><name>disasm</name></name> <operator>||</operator> <operator>!</operator><name><name>test</name><operator>-&gt;</operator><name>disasm</name></name> <operator>||</operator> <name><name>out</name><operator>-&gt;</operator><name>as_timeout</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>disasm</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>disasm</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r2r_asm_test_output_free</name><parameter_list>(<parameter><decl><type><name>R2RAsmTestOutput</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>disasm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r2r_test_name</name><parameter_list>(<parameter><decl><type><name>R2RTest</name> <modifier>*</modifier></type><name>test</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R2R_TEST_TYPE_CMD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>cmd_test</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>cmd_test</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"&lt;unnamed&gt;"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>R2R_TEST_TYPE_ASM</name></expr>:</case>
<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"&lt;asm&gt; %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>test</name><operator>-&gt;</operator><name>asm_test</name><operator>-&gt;</operator><name>disasm</name></name></expr> ?</condition><then> <expr><name><name>test</name><operator>-&gt;</operator><name>asm_test</name><operator>-&gt;</operator><name>disasm</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>R2R_TEST_TYPE_JSON</name></expr>:</case>
<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"&lt;json&gt; %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>test</name><operator>-&gt;</operator><name>json_test</name><operator>-&gt;</operator><name>cmd</name></name></expr> ?</condition><then> <expr><name><name>test</name><operator>-&gt;</operator><name>json_test</name><operator>-&gt;</operator><name>cmd</name></name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r2r_test_broken</name><parameter_list>(<parameter><decl><type><name>R2RTest</name> <modifier>*</modifier></type><name>test</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R2R_TEST_TYPE_CMD</name></expr>:</case>
<return>return <expr><name><name>test</name><operator>-&gt;</operator><name>cmd_test</name><operator>-&gt;</operator><name>broken</name><operator>.</operator><name>value</name></name></expr>;</return>
<case>case <expr><name>R2R_TEST_TYPE_ASM</name></expr>:</case>
<return>return <expr><ternary><condition><expr><name><name>test</name><operator>-&gt;</operator><name>asm_test</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>R2R_ASM_TEST_MODE_BROKEN</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
<case>case <expr><name>R2R_TEST_TYPE_JSON</name></expr>:</case>
<return>return <expr><name><name>test</name><operator>-&gt;</operator><name>json_test</name><operator>-&gt;</operator><name>broken</name></name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>R2RTestResultInfo</name> <modifier>*</modifier></type><name>r2r_run_test</name><parameter_list>(<parameter><decl><type><name>R2RRunConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>R2RTest</name> <modifier>*</modifier></type><name>test</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>R2RTestResultInfo</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>R2RTestResultInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>test</name></name> <operator>=</operator> <name>test</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R2R_TEST_TYPE_CMD</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>R2RCmdTest</name> <modifier>*</modifier></type><name>cmd_test</name> <init>= <expr><name><name>test</name><operator>-&gt;</operator><name>cmd_test</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>R2RProcessOutput</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>r2r_run_cmd_test</name> <argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>cmd_test</name></expr></argument>, <argument><expr><name>subprocess_runner</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>r2r_check_cmd_test</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>cmd_test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>proc_out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>R2R_TEST_TYPE_ASM</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>R2RAsmTest</name> <modifier>*</modifier></type><name>asm_test</name> <init>= <expr><name><name>test</name><operator>-&gt;</operator><name>asm_test</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>R2RAsmTestOutput</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>r2r_run_asm_test</name> <argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>asm_test</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>r2r_check_asm_test</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>asm_test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>asm_out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>as_timeout</name></name> <operator>||</operator> <name><name>out</name><operator>-&gt;</operator><name>disas_timeout</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>R2R_TEST_TYPE_JSON</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>R2RJsonTest</name> <modifier>*</modifier></type><name>json_test</name> <init>= <expr><name><name>test</name><operator>-&gt;</operator><name>json_test</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>R2RProcessOutput</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>r2r_run_json_test</name> <argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>json_test</name></expr></argument>, <argument><expr><name>subprocess_runner</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>r2r_check_json_test</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>json_test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>proc_out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<decl_stmt><decl><type><name>bool</name></type> <name>broken</name> <init>= <expr><call><name>r2r_test_broken</name> <argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <ternary><condition><expr><name>broken</name></expr> ?</condition><then> <expr><name>R2R_TEST_RESULT_BROKEN</name></expr> </then><else>: <expr><name>R2R_TEST_RESULT_FAILED</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <ternary><condition><expr><name>broken</name></expr> ?</condition><then> <expr><name>R2R_TEST_RESULT_FIXED</name></expr> </then><else>: <expr><name>R2R_TEST_RESULT_OK</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r2r_test_result_info_free</name><parameter_list>(<parameter><decl><type><name>R2RTestResultInfo</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>test</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>test</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R2R_TEST_TYPE_CMD</name></expr>:</case>
<case>case <expr><name>R2R_TEST_TYPE_JSON</name></expr>:</case>
<expr_stmt><expr><call><name>r2r_process_output_free</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>proc_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R2R_TEST_TYPE_ASM</name></expr>:</case>
<expr_stmt><expr><call><name>r2r_asm_test_output_free</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>asm_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
