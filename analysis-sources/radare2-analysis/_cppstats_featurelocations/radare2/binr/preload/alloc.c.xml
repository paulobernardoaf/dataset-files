<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\binr\preload\alloc.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_API</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ALLOC_USE_MMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_MALLOC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MALLOC</name></expr></cpp:if>
<function><type><name>R_API</name> <name>void</name></type> <name>r_initmem</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name><modifier>*</modifier></type> <name>r_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>is_available</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>MCB</name><operator>,</operator> *<name>MCB_P</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>mem_start_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>max_mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>allocated_mem</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mcb_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>heap_end</name></decl>;</decl_stmt>

<enum>enum <block>{<decl><name>NEW_MCB</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><name>NO_MCB</name></decl>,<decl><name>REUSE_MCB</name></decl>}</block>;</enum>
<enum>enum <block>{<decl><name>FREE</name></decl>,<decl><name>IN_USE</name></decl>}</block>;</enum>

<function><type><name>void</name></type> <name>InitMem</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size_in_bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>max_mem</name> <operator>=</operator> <name>size_in_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mem_start_p</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mcb_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>allocated_mem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>heap_end</name> <operator>=</operator> <name>mem_start_p</name> <operator>+</operator> <name>size_in_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>mem_start_p</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name>max_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_malloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>elem_size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>MCB_P</name></type> <name>p_mcb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><name>NO_MCB</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_mcb</name> <operator>=</operator> <operator>(</operator><name>MCB_P</name><operator>)</operator><name>mem_start_p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MCB</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>elem_size</name> <operator>+</operator> <name>sz</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>max_mem</name> <operator>-</operator> <operator>(</operator><name>allocated_mem</name> <operator>+</operator> <name>mcb_count</name> <operator>*</operator> <name>sz</name> <operator>)</operator> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>( <expr><name>heap_end</name> <operator>&gt;</operator> <operator>(</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_mcb</name> <operator>+</operator> <name>elem_size</name> <operator>+</operator> <name>sz</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_mcb</name><operator>-&gt;</operator><name>is_available</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_mcb</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>NEW_MCB</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_mcb</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <operator>(</operator><name>elem_size</name> <operator>+</operator> <name>sz</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>REUSE_MCB</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_mcb</name> <operator>=</operator> <operator>(</operator><name>MCB_P</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_mcb</name> <operator>+</operator> <name><name>p_mcb</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>!=</operator> <name>NO_MCB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_mcb</name><operator>-&gt;</operator><name>is_available</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>==</operator> <name>NEW_MCB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_mcb</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>elem_size</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>MCB</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flag</name> <operator>==</operator> <name>REUSE_MCB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>elem_size</name> <operator>=</operator> <name><name>p_mcb</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>MCB</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mcb_count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>allocated_mem</name> <operator>+=</operator> <name>elem_size</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>p_mcb</name> <operator>+</operator> <name>sz</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>MCB_P</name></type> <name>ptr</name> <init>= <expr><operator>(</operator><name>MCB_P</name><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>is_available</name></name> <operator>!=</operator> <name>FREE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mcb_count</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>is_available</name></name> <operator>=</operator> <name>FREE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>allocated_mem</name> <operator>-=</operator> <operator>(</operator><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>MCB</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__MAIN__</name></expr></cpp:if>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB</name></cpp:macro> <cpp:value>1024*1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MALLOC_MAX</name></cpp:macro> <cpp:value>2*MB</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_ALLOC_USE_STACK</name></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>B</name><index>[<expr><name>R_MALLOC_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_ALLOC_USE_MMAP</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>open</name> <argument_list>(<argument><expr><literal type="string">".mem"</literal></expr></argument>, <argument><expr><name>O_CREAT</name><operator>|</operator><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ftruncate</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>R_MALLOC_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>B</name> <init>= <expr><call><name>mmap</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>R_MALLOC_MAX</name></expr></argument>, <argument><expr><name>PROT_WRITE</name><operator>|</operator><name>PROT_READ</name></expr></argument>,
<argument><expr><name>MAP_FILE</name><operator>|</operator><name>MAP_PRIVATE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>unlink</name> <argument_list>(<argument><expr><literal type="string">".mem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>InitMem</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>R_MALLOC_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>r_malloc</name> <argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"can't malloc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>r_malloc</name> <argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"world"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%p: %s\n%p: %s\n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_free</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
