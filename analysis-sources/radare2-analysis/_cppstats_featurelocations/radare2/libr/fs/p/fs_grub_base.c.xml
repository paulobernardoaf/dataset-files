<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\fs\p\fs_grub_base.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"grubfs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WITH_GPL</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>RFSFile</name><modifier>*</modifier> <name>FSP</name></type>(<name>_open</name>)<parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>create</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>r_fs_file_new</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GrubFS</name> <modifier>*</modifier></type><name>gfs</name> <init>= <expr><call><name>grubfs_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>FSIPTR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>root</name><operator>-&gt;</operator><name>iob</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>gfs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grubfs_bind_io</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>gfs</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>open</name></name> <argument_list>(<argument><expr><name><name>gfs</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_fs_file_free</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grubfs_free</name> <argument_list>(<argument><expr><name>gfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>gfs</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name><name>gfs</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name> <name>FSP</name></type>(<name>_read</name>)<parameter_list>(<parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>GrubFS</name> <modifier>*</modifier></type><name>gfs</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>grubfs_bind_io</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>gfs</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>read</name></name> <argument_list>(<argument><expr><name><name>gfs</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>grub_hack_lastoff</name></expr>;</expr_stmt> 
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FSP</name></type>(<name>_close</name>)<parameter_list>(<parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>GrubFS</name> <modifier>*</modifier></type><name>gfs</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>gfs</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>close</name></name> <argument_list>(<argument><expr><name><name>gfs</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dirhook</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_dirhook_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>fsf</name> <init>= <expr><call><name>r_fs_file_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fsf</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><name><name>info</name><operator>-&gt;</operator><name>dir</name></name></expr>?</condition><then> <expr><literal type="char">'d'</literal></expr></then><else>:<expr><literal type="char">'f'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsf</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>mtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>fsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier><name>FSP</name></type>(<name>_dir</name>)<parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>GrubFS</name> <modifier>*</modifier></type><name>gfs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>root</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gfs</name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>grubfs_bind_io</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>root</name><operator>-&gt;</operator><name>iob</name></name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>gfs</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>dir</name></name> <argument_list>(<argument><expr><name><name>gfs</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>dirhook</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grubfs_bind_io</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_nothing</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_dirhook_info</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FSP</name></type>(<name>_mount</name>)<parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GrubFS</name> <modifier>*</modifier></type><name>gfs</name> <init>= <expr><call><name>grubfs_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>FSIPTR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>root</name><operator>-&gt;</operator><name>iob</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>gfs</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grubfs_bind_io</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>root</name><operator>-&gt;</operator><name>iob</name></name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><call><name><name>gfs</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>dir</name></name> <argument_list>(<argument><expr><name><name>gfs</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>do_nothing</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><name>false</name></expr></then><else>:<expr><name>true</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grubfs_bind_io</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FSP</name></type>(<name>_umount</name>)<parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>grubfs_free</name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>RFSPlugin</name></type> <name>FSS</name><parameter_list>(<parameter><decl><type><name>r_fs_plugin</name></type></decl></parameter>)</parameter_list> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>FSNAME</name></expr></block></expr></init><operator>,</operator>
.desc <init>= <expr><name>FSDESC</name></expr></init><operator>,</operator>
.license <init>= <expr><literal type="string">"GPL2"</literal></expr></init><operator>,</operator>
.open <init>= <expr><call><name>FSP</name><argument_list>(<argument><expr><name>_open</name></expr></argument>)</argument_list></call></expr></init><operator>,</operator>
.read <init>= <expr><call><name>FSP</name><argument_list>(<argument><expr><name>_read</name></expr></argument>)</argument_list></call></expr></init><operator>,</operator>
.close <init>= <expr><call><name>FSP</name><argument_list>(<argument><expr><name>_close</name></expr></argument>)</argument_list></call></expr></init><operator>,</operator>
.dir <init>= <expr><call><name>FSP</name><argument_list>(<argument><expr><name>_dir</name></expr></argument>)</argument_list></call></expr></init><operator>,</operator>
.mount <init>= <expr><call><name>FSP</name><argument_list>(<argument><expr><name>_mount</name></expr></argument>)</argument_list></call></expr></init><operator>,</operator>
.umount <init>= <expr><call><name>FSP</name><argument_list>(<argument><expr><name>_umount</name></expr></argument>)</argument_list></call></expr></init><operator>,</operator></function_decl>
};
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>RFSPlugin</name></type> <name>FSS</name><parameter_list>(<parameter><decl><type><name>r_fs_plugin</name></type></decl></parameter>)</parameter_list> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>FSNAME</name></expr></block></expr></init><operator>,</operator>
.desc <init>= <expr><name>FSDESC</name></expr></init><operator>,</operator></function_decl>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
