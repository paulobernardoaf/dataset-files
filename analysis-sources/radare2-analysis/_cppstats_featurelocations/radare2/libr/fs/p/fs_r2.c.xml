<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\fs\p\fs_r2.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>


<typedef>typedef <function_decl><type><name>RList</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>DirHandler</name>)<parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>RFSFile</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>CatHandler</name>)<parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>WriteHandler</name>)<parameter_list>(<parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DirHandler</name></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CatHandler</name></type> <name>cat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WriteHandler</name></type> <name>write</name></decl>;</decl_stmt>
}</block></struct></type> <name>Routes</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>RFSFile</name> <modifier>*</modifier></type><name>__flags_cat</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>RFSFile</name> <modifier>*</modifier></type><name>__cfg_cat</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>RFSFile</name> <modifier>*</modifier></type><name>__seek_cat</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>RFSFile</name> <modifier>*</modifier></type><name>__bsize_cat</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__cfg_write</name><parameter_list>(<parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__seek_write</name><parameter_list>(<parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__bsize_write</name><parameter_list>(<parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>RFSFile</name> <modifier>*</modifier></type><name>__version</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>__root</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>__cfg</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>__flags</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>Routes</name></type> <name><name>routes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"/cfg"</literal></expr>, <expr><operator>&amp;</operator><name>__cfg</name></expr>, <expr><operator>&amp;</operator><name>__cfg_cat</name></expr>, <expr><operator>&amp;</operator><name>__cfg_write</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"/flags"</literal></expr>, <expr><operator>&amp;</operator><name>__flags</name></expr>, <expr><operator>&amp;</operator><name>__flags_cat</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"/version"</literal></expr>, <expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>__version</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"/seek"</literal></expr>, <expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>__seek_cat</name></expr>, <expr><operator>&amp;</operator><name>__seek_write</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"/bsize"</literal></expr>, <expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>__bsize_cat</name></expr>, <expr><operator>&amp;</operator><name>__bsize_write</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"/"</literal></expr>, <expr><operator>&amp;</operator><name>__root</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>append_file</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name> <operator>||</operator> <operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>fsf</name> <init>= <expr><call><name>r_fs_file_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fsf</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fsf</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsf</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>fsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>fscmd</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>cmdstr</name></name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>core</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lines</name> <init>= <expr><call><name>r_str_split_lines</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lines</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>append_file</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>res</name> <operator>+</operator> <name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RFSFile</name><modifier>*</modifier></type> <name>fs_r2_open</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>create</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cwd</name> <init>= <expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cat</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cwd</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>cat</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_r2_write</name><parameter_list>(<parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>path</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>write</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>write</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>write</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_r2_read</name><parameter_list>(<parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cat</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>cat</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fs_r2_close</name><parameter_list>(<parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>


</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RFSFile</name> <modifier>*</modifier></type><name>__version</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>cmdstrf</name></name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>core</name></name></expr></argument>, <argument><expr><literal type="string">"?V"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>r_fs_file_new</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RFSFile</name> <modifier>*</modifier></type><name>__flags_cat</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>root</name> <operator>&amp;&amp;</operator> <name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><call><name>r_str_rchr</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>cmdstrf</name></name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>core</name></name></expr></argument>, <argument><expr><literal type="string">"?v %s"</literal></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>r_fs_file_new</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__bsize_write</name><parameter_list>(<parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name><name>file</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>cmdstrf</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"b %s"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RFSFile</name> <modifier>*</modifier></type><name>__bsize_cat</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>cmdstrf</name></name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>core</name></name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>r_fs_file_new</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__seek_write</name><parameter_list>(<parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name><name>file</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>cmdstrf</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"s %s"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RFSFile</name> <modifier>*</modifier></type><name>__seek_cat</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>cmdstrf</name></name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>core</name></name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>r_fs_file_new</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__cfg_write</name><parameter_list>(<parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>path</name></name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"/cfg/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name><name>file</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>cmdstrf</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"e %s.%s=%s"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RFSFile</name> <modifier>*</modifier></type><name>__cfg_cat</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>path</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>cmdstrf</name></name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>core</name></name></expr></argument>, <argument><expr><literal type="string">"e %s"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>r_fs_file_new</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>__flags</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/flags/"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <name>path</name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><ternary><condition><expr><name>prefix</name></expr>
?</condition><then> <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"fq@F:%s"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"fsq"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>fscmd</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><ternary><condition><expr><name>prefix</name></expr>?</condition><then> <expr><literal type="char">'f'</literal></expr></then><else>: <expr><literal type="char">'d'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>__cfg</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/cfg/"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <name>path</name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><ternary><condition><expr><name>prefix</name></expr>
?</condition><then> <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"es %s"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"es"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>cmdstr</name></name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>cob</name><operator>.</operator><name>core</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lines</name> <init>= <expr><call><name>r_str_split_lines</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lines</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>res</name> <operator>+</operator> <name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>append_file</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><ternary><condition><expr><name>prefix</name></expr>?</condition><then> <expr><literal type="char">'f'</literal></expr></then><else>: <expr><literal type="char">'d'</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>__root</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>type</name> <init>= <expr><ternary><condition><expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dir</name></expr>?</condition><then> <expr><literal type="char">'d'</literal></expr></then><else>: <expr><literal type="char">'f'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>append_file</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>fs_r2_dir</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>view</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dir</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>routes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>dir</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fs_r2_mount</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fs_r2_umount</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RFSPlugin</name></type> <name>r_fs_plugin_r2</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"r2"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"r2-based filesystem"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"MIT"</literal></expr>,
<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>fs_r2_open</name></expr>, 
<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>fs_r2_read</name></expr>, 
<expr><operator>.</operator><name>write</name> <operator>=</operator> <name>fs_r2_write</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>fs_r2_close</name></expr>,
<expr><operator>.</operator><name>dir</name> <operator>=</operator> <operator>&amp;</operator><name>fs_r2_dir</name></expr>,
<expr><operator>.</operator><name>mount</name> <operator>=</operator> <name>fs_r2_mount</name></expr>,
<expr><operator>.</operator><name>umount</name> <operator>=</operator> <name>fs_r2_umount</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_FS</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_fs_plugin_r2</name></expr>,
<expr><operator>.</operator><name>versr2n</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
