<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\fs\fs.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../shlr/grub/include/grub/msdos_partition.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WITH_GPL</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_GRUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_GRUB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>R_LIB_VERSION</name> <argument_list>(<argument><expr><name>r_fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RFSPlugin</name><modifier>*</modifier></type> <name><name>fs_static_plugins</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>R_FS_STATIC_PLUGINS</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>RFS</name><modifier>*</modifier></type> <name>r_fs_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFSPlugin</name><modifier>*</modifier></type> <name>static_plugin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RFS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>view</name></name> <operator>=</operator> <name>R_FS_VIEW_NORMAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>roots</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fs</name><operator>-&gt;</operator><name>roots</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_fs_free</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>roots</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator> <name>r_fs_root_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>plugins</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fs</name><operator>-&gt;</operator><name>plugins</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_fs_free</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>plugins</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>fs_static_plugins</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>static_plugin</name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr><name>RFSPlugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>static_plugin</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>static_plugin</name></expr></argument>, <argument><expr><name><name>fs_static_plugins</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RFSPlugin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_fs_add</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>static_plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>static_plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>fs</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RFSPlugin</name><modifier>*</modifier></type> <name>r_fs_plugin_get</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFSPlugin</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fs</name> <operator>||</operator> <operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>fs-&gt;plugins</argument>, <argument>iter</argument>, <argument>p</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_fs_free</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fs</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>roots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>plugins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>void</name></type> <name>r_fs_add</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><name>RFSPlugin</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>init</name></name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RFSPlugin</name><modifier>*</modifier></type> <name>sp</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RFSPlugin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RFSPlugin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>plugins</name></name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_fs_del</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><name>RFSPlugin</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

</block_content>}</block></function>


<function><type><name>R_API</name> <name>RFSRoot</name><modifier>*</modifier></type> <name>r_fs_mount</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fstype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>delta</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RFSPlugin</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFSRoot</name><modifier>*</modifier></type> <name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>lenstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>heapFsType</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_fs_mount: invalid mountpoint %s\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fstype</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>fstype</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>heapFsType</name> <operator>=</operator> <call><name>r_fs_name</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fstype</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>heapFsType</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>r_fs_plugin_get</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>fstype</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>heapFsType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>heapFsType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_str_trim_path</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>&amp;&amp;</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_fs_mount: mountpoint must have no subdirectories\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>heapFsType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fs-&gt;roots</argument>, <argument>iter</argument>, <argument>root</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lenstr</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>lenstr</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>lenstr</name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>path</name><index>[<expr><name>lenstr</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_fs_mount: Invalid mount point\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>heapFsType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<decl_stmt><decl><type><name>RFSFile</name><modifier>*</modifier></type> <name>file</name> <init>= <expr><call><name>r_fs_open</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_fs_close</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_fs_mount: Invalid mount point\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>heapFsType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_fs_dir</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_fs_mount: Invalid mount point\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>heapFsType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>r_fs_root_new</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>iob</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>iob</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>cob</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>cob</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>p</name><operator>-&gt;</operator><name>mount</name></name> <argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>heapFsType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_fs_root_free</name> <argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>roots</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Mounted %s on %s at 0x%"</literal> <name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>fstype</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>heapFsType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>root</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>r_fs_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_fs_umount</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFSRoot</name><modifier>*</modifier></type> <name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name><modifier>*</modifier></type> <name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>riter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fs-&gt;roots</argument>, <argument>iter</argument>, <argument>root</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_fs_match</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>riter</name> <operator>=</operator> <name>iter</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>riter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>roots</name></name></expr></argument>, <argument><expr><name>riter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name><modifier>*</modifier></type> <name>r_fs_root</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>roots</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFSRoot</name><modifier>*</modifier></type> <name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>olen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>path</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>roots</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_trim_path</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>fs-&gt;roots</argument>, <argument>iter</argument>, <argument>root</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_fs_match</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>olen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>olen</name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>roots</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>olen</name> <operator>&gt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>roots</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>roots</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>RFSFile</name><modifier>*</modifier></type> <name>r_fs_open</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>create</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RFSRoot</name><modifier>*</modifier></type> <name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFSFile</name><modifier>*</modifier></type> <name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>path</name> <init>= <expr><call><name>r_str_trim_dup</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>roots</name> <init>= <expr><call><name>r_fs_root</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>roots</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>roots</argument>, <argument>iter</argument>, <argument>root</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>create</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>root</name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>p</name></name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>write</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>r_fs_file_new</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>root</name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>p</name></name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>open</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>path</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name><name>root</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>open</name></name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>roots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>void</name></type> <name>r_fs_close</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><name>RFSFile</name><modifier>*</modifier></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fs</name> <operator>&amp;&amp;</operator> <name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>p</name></name> <operator>&amp;&amp;</operator> <name><name>file</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>close</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>file</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>close</name></name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_fs_write</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><name>RFSFile</name><modifier>*</modifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fs</name> <operator>&amp;&amp;</operator> <name>file</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>p</name></name> <operator>&amp;&amp;</operator> <name><name>file</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>write</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>file</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>write</name></name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_fs_write: file-&gt;p-&gt;write is null\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_fs_read</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><name>RFSFile</name><modifier>*</modifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_fs_read: too short read\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fs</name> <operator>&amp;&amp;</operator> <name>file</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>p</name></name> <operator>&amp;&amp;</operator> <name><name>file</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>read</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>file</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>read</name></name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_fs_read: file-&gt;p-&gt;read is null\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name><modifier>*</modifier></type> <name>r_fs_dir</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFSRoot</name><modifier>*</modifier></type> <name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>path</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_str_trim_path</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>roots</name> <init>= <expr><call><name>r_fs_root</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>roots</argument>, <argument>iter</argument>, <argument>root</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>root</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>path</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>dir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="string">"/"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>root</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dir</name></name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>view</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>roots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_fs_dir_dump</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFSFile</name><modifier>*</modifier></type> <name>file</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>npath</name></decl>;</decl_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>r_fs_dir</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_sys_mkdir</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_sys_mkdir_failed</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot create \"%s\"\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>file</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>npath</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>npath</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>npath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>npath</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>npath</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_FS_FILE_TYPE_DIRECTORY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_fs_dir_dump</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>npath</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>npath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>R_FS_FILE_TYPE_REGULAR</name></expr>:</case>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>r_fs_open</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>npath</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_fs_read</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_file_dump</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>npath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_fs_close</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>npath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_fs_find_off_aux</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>RList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>dirs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFSFile</name><modifier>*</modifier></type> <name>item</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>found</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dirs</name> <operator>=</operator> <call><name>r_fs_dir</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>dirs</argument>, <argument>iter</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_FS_FILE_TYPE_DIRECTORY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_fs_find_off_aux</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>r_fs_open</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_fs_read</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_fs_close</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name><modifier>*</modifier></type> <name>r_fs_find_off</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_fs_find_off_aux</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_fs_find_name_aux</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glob</name></decl></parameter>, <parameter><decl><type><name>RList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>dirs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFSFile</name><modifier>*</modifier></type> <name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>found</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dirs</name> <operator>=</operator> <call><name>r_fs_dir</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>dirs</argument>, <argument>iter</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_str_glob</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_FS_FILE_TYPE_DIRECTORY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_fs_find_name_aux</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name><modifier>*</modifier></type> <name>r_fs_find_name</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>glob</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>list</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_fs_find_name_aux</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RFSFile</name><modifier>*</modifier></type> <name>r_fs_slurp</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RFSFile</name><modifier>*</modifier></type> <name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFSRoot</name><modifier>*</modifier></type> <name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>roots</name> <init>= <expr><call><name>r_fs_root</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>roots</argument>, <argument>iter</argument>, <argument>root</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>root</name> <operator>||</operator> <operator>!</operator><name><name>root</name><operator>-&gt;</operator><name>p</name></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>open</name></name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>read</name></name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>close</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name><name>root</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>open</name></name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>root</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>read</name></name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if><else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_fs_slurp: cannot open file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>slurp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>roots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>root</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>slurp</name></name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_fs_slurp: null root-&gt;p-&gt;slurp\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>roots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../shlr/grub/include/grubfs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_GRUB</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>grub_parhook</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>disk</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>closure</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_partition</name></name><modifier>*</modifier></type> <name>par</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>list</name> <init>= <expr><operator>(</operator><name>RList</name><operator>*</operator><operator>)</operator> <name>closure</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFSPartition</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>r_fs_partition_new</name> <argument_list>(
<argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>start</name></name> <operator>*</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">512</literal> <operator>*</operator> <name><name>par</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>msdostype</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fs_parhook</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>disk</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>closure</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RFSPartition</name><modifier>*</modifier></type> <name>par</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>list</name> <init>= <expr><operator>(</operator><name>RList</name><operator>*</operator><operator>)</operator> <name>closure</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"p/part_dos.c"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>RFSPartitionType</name></type> <name><name>partitions</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"dos"</literal></expr>, <expr><operator>&amp;</operator><name>fs_part_dos</name></expr>, <expr><name>fs_parhook</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_GRUB</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>__EMSCRIPTEN__</name></expr></cpp:if>

<expr><block>{<expr><literal type="string">"msdos"</literal></expr>, <expr><operator>&amp;</operator><name>grub_msdos_partition_map</name></expr>, <expr><name>grub_parhook</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><literal type="string">"apple"</literal></expr>, <expr><operator>&amp;</operator><name>grub_apple_partition_map</name></expr>, <expr><name>grub_parhook</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sun"</literal></expr>, <expr><operator>&amp;</operator><name>grub_sun_partition_map</name></expr>, <expr><name>grub_parhook</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sunpc"</literal></expr>, <expr><operator>&amp;</operator><name>grub_sun_pc_partition_map</name></expr>, <expr><name>grub_parhook</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"amiga"</literal></expr>, <expr><operator>&amp;</operator><name>grub_amiga_partition_map</name></expr>, <expr><name>grub_parhook</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"bsdlabel"</literal></expr>, <expr><operator>&amp;</operator><name>grub_bsdlabel_partition_map</name></expr>, <expr><name>grub_parhook</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"gpt"</literal></expr>, <expr><operator>&amp;</operator><name>grub_gpt_partition_map</name></expr>, <expr><name>grub_parhook</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>r_fs_partition_type_get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&gt;=</operator> <name>R_FS_PARTITIONS_LENGTH</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>partitions</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_fs_partition_get_size</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>R_FS_PARTITIONS_LENGTH</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name><modifier>*</modifier></type> <name>r_fs_partitions</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ptype</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>delta</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cur</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>partitions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>ptype</name></expr></argument>, <argument><expr><name><name>partitions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>list</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>r_fs_partition_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_GRUB</name></expr></cpp:if>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>disk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>partitions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iterate</name> <operator>==</operator> <name>grub_parhook</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>grub_partition_map</name></name><modifier>*</modifier></type> <name>gpt</name> <init>= <expr><name><name>partitions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>grubfs_bind_io</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>disk</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <call><name>grubfs_disk</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>iob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gpt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>gpt</name><operator>-&gt;</operator><name>iterate</name></name> <argument_list>(<argument><expr><name>disk</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>partitions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iterate</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>grubfs_free</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>RFSPartitionIterator</name></type> <name>iterate</name> <init>= <expr><name><name>partitions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>iterate</name> <argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>partitions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iterate</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ptype</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptype</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unknown partition type '%s'.\n"</literal></expr></argument>, <argument><expr><name>ptype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Supported types:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>partitions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>partitions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><name>R_API</name> <name>int</name></type> <name>r_fs_partition_type_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>r_fs_partition_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GRUB_PC_PARTITION_TYPE_FAT12</name></expr>:</case>
<case>case <expr><name>GRUB_PC_PARTITION_TYPE_FAT16_GT32M</name></expr>:</case>
<case>case <expr><name>GRUB_PC_PARTITION_TYPE_FAT16_LT32M</name></expr>:</case>
<case>case <expr><name>GRUB_PC_PARTITION_TYPE_FAT32</name></expr>:</case>
<case>case <expr><name>GRUB_PC_PARTITION_TYPE_FAT32_LBA</name></expr>:</case>
<case>case <expr><name>GRUB_PC_PARTITION_TYPE_FAT16_LBA</name></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"fat"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>GRUB_PC_PARTITION_TYPE_EXT2FS</name></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"ext2"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>GRUB_PC_PARTITION_TYPE_MINIX</name></expr>:</case>
<case>case <expr><name>GRUB_PC_PARTITION_TYPE_LINUX_MINIX</name></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"minix"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>GRUB_PC_PARTITION_TYPE_NTFS</name></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"ntfs"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>GRUB_PC_PARTITION_TYPE_EXTENDED</name></expr>:</case>
<case>case <expr><name>GRUB_PC_PARTITION_TYPE_LINUX_EXTENDED</name></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"ext3"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>GRUB_PC_PARTITION_TYPE_HFS</name></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"hfs"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>GRUB_PC_PARTITION_TYPE_WIN95_EXTENDED</name></expr>:</case> 
<case>case <expr><name>GRUB_PC_PARTITION_TYPE_EZD</name></expr>:</case>
<case>case <expr><name>GRUB_PC_PARTITION_TYPE_VSTAFS</name></expr>:</case>
<case>case <expr><name>GRUB_PC_PARTITION_TYPE_FREEBSD</name></expr>:</case> 
<case>case <expr><name>GRUB_PC_PARTITION_TYPE_OPENBSD</name></expr>:</case> 
<case>case <expr><name>GRUB_PC_PARTITION_TYPE_NETBSD</name></expr>:</case> 
<case>case <expr><name>GRUB_PC_PARTITION_TYPE_GPT_DISK</name></expr>:</case>
<case>case <expr><name>GRUB_PC_PARTITION_TYPE_LINUX_RAID</name></expr>:</case>
<case>case <expr><name>GRUB_PC_PARTITION_TYPE_NONE</name></expr>:</case>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name><modifier>*</modifier></type> <name>r_fs_name</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>fstypes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RFSType</name><modifier>*</modifier></type> <name>f</name> <init>= <expr><operator>&amp;</operator><name><name>fstypes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>buflen</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>fs</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>bufoff</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>buflen</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>buflen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>bytelen</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>fs</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>byteoff</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>f</name><operator>-&gt;</operator><name>byte</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_fs_view</name><parameter_list>(<parameter><decl><type><name>RFS</name><modifier>*</modifier></type> <name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>view</name></name> <operator>=</operator> <name>view</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_fs_check</name><parameter_list>(<parameter><decl><type><name>RFS</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>path</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_str_trim_path</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>fs-&gt;roots</argument>, <argument>iter</argument>, <argument>root</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_fs_match</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function></block_content></block></function>
</unit>
