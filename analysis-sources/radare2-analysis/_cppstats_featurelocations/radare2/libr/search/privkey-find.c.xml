<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\search\privkey-find.c">




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_search.h&gt;</cpp:file></cpp:include>










<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>parse_next_field</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name><name>start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>start</name> <operator>+</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lensize</name> <init>= <expr><name><name>start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lensize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>start</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>start</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>lensize</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>check_fields</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_MAX_LEN</name></cpp:macro> <cpp:value>26000</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ut32</name></type> <name>field_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>parse_next_field</name> <argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>field_len</name> <operator>||</operator> <name>field_len</name> <operator>&gt;</operator> <name>KEY_MAX_LEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>parse_next_field</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>field_len</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>field_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>parse_next_field</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>field_len</name> <operator>||</operator> <name>field_len</name> <operator>&gt;</operator> <name>KEY_MAX_LEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>R_API</name> <name>int</name></type> <name>r_search_privkey_update</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSearchKeyword</name> <modifier>*</modifier></type><name>kw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name></type> <name><name>rsa_versionmarker</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name></type> <name><name>ecc_versionmarker</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name></type> <name><name>safecurves_versionmarker</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x30</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>rsa_versionmarker</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>s-&gt;kws</argument>, <argument>iter</argument>, <argument>kw</argument>)</argument_list></macro> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>rsa_versionmarker</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>rsa_versionmarker</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>rsa_versionmarker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
<call><name>memcmp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ecc_versionmarker</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ecc_versionmarker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>memcmp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>safecurves_versionmarker</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>safecurves_versionmarker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <name>i</name> <operator>-</operator> <name>max</name></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x30</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>index</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_fields</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>index</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_next_field</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>r_search_hit_new</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>from</name> <operator>+</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
