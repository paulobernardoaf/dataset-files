<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\search\regexp.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_search.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_regex.h&gt;</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>int</name></type> <name>r_search_regexp_update</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSearchKeyword</name> <modifier>*</modifier></type><name>kw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRegexMatch</name></type> <name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRegex</name></type> <name>compiled</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>old_nhits</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>nhits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>s-&gt;kws</argument>, <argument>iter</argument>, <argument>kw</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reflags</name> <init>= <expr><name>R_REGEX_EXTENDED</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kw</name><operator>-&gt;</operator><name>icase</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reflags</name> <operator>|=</operator> <name>R_REGEX_ICASE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_regex_comp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>compiled</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>kw</name><operator>-&gt;</operator><name>bin_keyword</name></name></expr></argument>, <argument><expr><name>reflags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot compile '%s' regexp\n"</literal></expr></argument>, <argument><expr><name><name>kw</name><operator>-&gt;</operator><name>bin_keyword</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>match</name><operator>.</operator><name>rm_so</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name><operator>.</operator><name>rm_eo</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>r_regex_exec</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>compiled</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>match</name></expr></argument>, <argument><expr><name>R_REGEX_STARTEND</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>r_search_hit_new</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>from</name> <operator>+</operator> <name><name>match</name><operator>.</operator><name>rm_so</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>match</name><operator>.</operator><name>rm_so</name></name> <operator>=</operator> <name><name>match</name><operator>.</operator><name>rm_eo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name><operator>.</operator><name>rm_eo</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>

<label><name>beach</name>:</label>
<expr_stmt><expr><call><name>r_regex_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>compiled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nhits</name></name> <operator>-</operator> <name>old_nhits</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
