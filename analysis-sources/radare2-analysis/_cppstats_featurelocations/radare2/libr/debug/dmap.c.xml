<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\debug\dmap.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_debug.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_list.h&gt;</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>void</name></type> <name>print_debug_map_json</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>prefix_comma</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s{"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>prefix_comma</name></expr> ?</condition><then> <expr><literal type="string">","</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escaped_name</name> <init>= <expr><call><name>r_str_escape</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\"name\":\"%s\","</literal></expr></argument>, <argument><expr><name>escaped_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>escaped_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>file</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>map</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escaped_path</name> <init>= <expr><call><name>r_str_escape</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\"file\":\"%s\","</literal></expr></argument>, <argument><expr><name>escaped_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>escaped_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\"addr\":%"</literal> <name>PFMT64u</name> <literal type="string">","</literal></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\"addr_end\":%"</literal> <name>PFMT64u</name> <literal type="string">","</literal></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\"type\":\"%c\","</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>map</name><operator>-&gt;</operator><name>user</name></name></expr>?</condition><then><expr><literal type="char">'u'</literal></expr></then><else>:<expr><literal type="char">'s'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\"perm\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>print_debug_map_line_header</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>print_debug_map_line</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>humansz</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>map</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr>
?</condition><then> <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%08"</literal> <name>PFMT64x</name> <literal type="string">".%s"</literal></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_name_filter</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_num_units</name> <argument_list>(<argument><expr><name>humansz</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>humansz</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"0x%016"</literal> <name>PFMT64x</name> <literal type="string">" - 0x%016"</literal> <name>PFMT64x</name> <literal type="string">" %6s %5s %s\n"</literal></expr></argument>,
<argument><expr><name><name>map</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,
<argument><expr><name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name></expr></argument>,
<argument><expr><name>humansz</name></expr></argument>,
<argument><expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmtstr</name> <init>= <expr><ternary><condition><expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>&amp;</operator> <name>R_SYS_BITS_64</name></expr>
?</condition><then> <expr><literal type="string">"0x%016"</literal> <name>PFMT64x</name> <literal type="string">" - 0x%016"</literal> <name>PFMT64x</name> <literal type="string">" %c %s %6s %c %s %s %s%s%s\n"</literal></expr>
</then><else>: <expr><literal type="string">"0x%08"</literal> <name>PFMT64x</name> <literal type="string">" - 0x%08"</literal> <name>PFMT64x</name> <literal type="string">" %c %s %6s %c %s %s %s%s%s\n"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><ternary><condition><expr><name><name>map</name><operator>-&gt;</operator><name>shared</name></name></expr> ?</condition><then> <expr><literal type="string">"sys"</literal></expr></then><else>: <expr><literal type="string">"usr"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flagname</name> <init>= <expr><ternary><condition><expr><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>getName</name></name></expr>
?</condition><then> <expr><call><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>getName</name></name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>core</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flagname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flagname</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filtered_name</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_name_filter</name> <argument_list>(<argument><expr><name>filtered_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>flagname</name></expr></argument>, <argument><expr><literal type="string">"map."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>flagname</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>filtered_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flagname</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>filtered_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_num_units</name> <argument_list>(<argument><expr><name>humansz</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>humansz</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><name>fmtstr</name></expr></argument>,
<argument><expr><name><name>map</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,
<argument><expr><name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>addr</name> <operator>&gt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'*'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>type</name></expr></argument>,
<argument><expr><name>humansz</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>map</name><operator>-&gt;</operator><name>user</name></name></expr> ?</condition><then> <expr><literal type="char">'u'</literal></expr> </then><else>: <expr><literal type="char">'s'</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr> ?</condition><then> <expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>map</name><operator>-&gt;</operator><name>file</name></name></expr> ?</condition><then> <expr><name><name>map</name><operator>-&gt;</operator><name>file</name></name></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>*</operator><name>flagname</name></expr> ?</condition><then> <expr><literal type="string">" ; "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>flagname</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_debug_map_list</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>notfirst</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbg</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'j'</literal></expr>:</case> 
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'*'</literal></expr>:</case> 
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><call><name>print_debug_map_line_header</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>maps</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>dbg</name><operator>-&gt;</operator><name>maps</name></name></expr> </then><else>: <expr><name><name>dbg</name><operator>-&gt;</operator><name>maps_user</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'j'</literal></expr>:</case> 
<expr_stmt><expr><call><name>print_debug_map_json</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>notfirst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>notfirst</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'*'</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>map</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr>
?</condition><then> <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%08"</literal> <name>PFMT64x</name> <literal type="string">".%s"</literal></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_name_filter</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"f map.%s 0x%08"</literal> <name>PFMT64x</name> <literal type="string">" 0x%08"</literal> <name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_debug_map_line</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>print_debug_map_line</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'.'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_debug_map_line</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>print_debug_map_line</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>ma</name> <init>= <expr><operator>(</operator><name>RDebugMap</name><operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>mb</name> <init>= <expr><operator>(</operator><name>RDebugMap</name><operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ma</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <name><name>mb</name><operator>-&gt;</operator><name>addr</name></name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type> <name>findMinMax</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>maps</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>min</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>skip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>addr</name></name> <operator>&lt;</operator> <operator>*</operator><name>min</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name> <operator>&gt;</operator> <operator>*</operator><name>max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>max</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><operator>(</operator><operator>*</operator><name>max</name> <operator>-</operator> <operator>*</operator><name>min</name><operator>)</operator> <operator>/</operator> <name>width</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_debug_maps_ascii_art</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>maps</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>colors</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>mul</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>min</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">90</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConsPrintablePalette</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>&amp;</operator><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_sort</name> <argument_list>(<argument><expr><name>maps</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mul</name> <operator>=</operator> <call><name>findMinMax</name> <argument_list>(<argument><expr><name>maps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>last</name> <init>= <expr><name>min</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>min</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>mul</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_prefix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_suffix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmtstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>humansz</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<macro><name>r_list_foreach</name> <argument_list>(<argument>maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_num_units</name> <argument_list>(<argument><expr><name>humansz</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>humansz</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>colors</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>color_suffix</name> <operator>=</operator> <name>Color_RESET</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>color_prefix</name> <operator>=</operator> <name><name>pal</name><operator>-&gt;</operator><name>widget_sel</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>color_prefix</name> <operator>=</operator> <name><name>pal</name><operator>-&gt;</operator><name>graph_false</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>color_prefix</name> <operator>=</operator> <name><name>pal</name><operator>-&gt;</operator><name>graph_true</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>color_prefix</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>color_suffix</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>color_prefix</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>color_suffix</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <name>last</name><operator>)</operator> <operator>&gt;</operator> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>mul</name> <operator>=</operator> <call><name>findMinMax</name> <argument_list>(<argument><expr><name>maps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>skip</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>fmtstr</name> <operator>=</operator> <ternary><condition><expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>&amp;</operator> <name>R_SYS_BITS_64</name></expr> 
?</condition><then> <expr><literal type="string">"map %4.8s %c %s0x%016"</literal> <name>PFMT64x</name> <literal type="string">"%s |"</literal></expr>
</then><else>: <expr><literal type="string">"map %4.8s %c %s0x%08"</literal> <name>PFMT64x</name> <literal type="string">"%s |"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><name>fmtstr</name></expr></argument>, <argument><expr><name>humansz</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>addr</name> <operator>&gt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> \
<name>addr</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'*'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>color_prefix</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>color_suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 
<decl_stmt><decl><type><name>ut64</name></type> <name>pos</name> <init>= <expr><name>min</name> <operator>+</operator> <operator>(</operator><name>col</name> <operator>*</operator> <name>mul</name><operator>)</operator></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>npos</name> <init>= <expr><name>min</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>col</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>mul</name><operator>)</operator></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>addr</name></name> <operator>&lt;</operator> <name>npos</name> <operator>&amp;&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name> <operator>&gt;</operator> <name>pos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>fmtstr</name> <operator>=</operator> <ternary><condition><expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>&amp;</operator> <name>R_SYS_BITS_64</name></expr> ?</condition><then> 
<expr><literal type="string">"| %s0x%016"</literal> <name>PFMT64x</name> <literal type="string">"%s %s %s\n"</literal></expr> </then><else>:
<expr><literal type="string">"| %s0x%08"</literal> <name>PFMT64x</name> <literal type="string">"%s %s %s\n"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><name>fmtstr</name></expr></argument>, <argument><expr><name>color_prefix</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name></expr></argument>, <argument><expr><name>color_suffix</name></expr></argument>,
<argument><expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_debug_map_list_visual</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>colors</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dbg</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>maps</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>dbg</name><operator>-&gt;</operator><name>maps</name></name></expr> </then><else>: <expr><name><name>dbg</name><operator>-&gt;</operator><name>maps_user</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>maps</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"TODO:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><call><name>print_debug_maps_ascii_art</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>maps</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RDebugMap</name> <modifier>*</modifier></type><name>r_debug_map_new</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr_end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <name>addr</name> <operator>&gt;</operator> <name>addr_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_debug_map_new: error (\
%"</literal> <name>PFMT64x</name> <literal type="string">"&gt;%"</literal> <name>PFMT64x</name> <literal type="string">")\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addr_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDebugMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name> <operator>=</operator> <name>addr_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>addr_end</name><operator>-</operator><name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>perm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>
<return>return <expr><name>map</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_debug_modules_list</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>dbg</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>modules_get</name></name><operator>)</operator></expr>?</condition><then>
<expr><call><name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>modules_get</name></name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_debug_map_sync</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>map_get</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>newmaps</name> <init>= <expr><call><name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>map_get</name></name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newmaps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>maps</name></name> <operator>=</operator> <name>newmaps</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RDebugMap</name><modifier>*</modifier></type> <name>r_debug_map_alloc</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>thp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>map_alloc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>map_alloc</name></name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>thp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>map</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_debug_map_dealloc</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>map_dealloc</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>map_dealloc</name></name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RDebugMap</name> <modifier>*</modifier></type><name>r_debug_map_get</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>dbg-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>map</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_debug_map_free</name><parameter_list>(<parameter><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_debug_map_list_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator><name>r_debug_map_free</name></expr>;</expr_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>
</unit>
