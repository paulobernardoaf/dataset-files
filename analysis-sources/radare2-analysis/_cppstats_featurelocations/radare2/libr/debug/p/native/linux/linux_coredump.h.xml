<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\debug\p\native\linux\linux_coredump.h">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"elf_specs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/procfs.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name> <operator>||</operator> <name>__x86_64__</name></expr></cpp:if>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X87_BIT</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSE_BIT</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVX_BIT</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BNDREGS_BIT</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BNDCSR_BIT</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPX_BIT</name></cpp:macro> <cpp:value>(BNDREGS_BIT | BNDCSR_BIT)</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVX512_k_BIT</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVX512_ZMM0_15_BIT</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVX512_ZMM16_31_BIT</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; 7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVX512_FULL_BIT</name></cpp:macro> <cpp:value>(AVX512_k_BIT|AVX512_ZMM0_15_BIT|AVX512_ZMM16_31_BIT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IA32_XSS_BIT</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; 8)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PKRU_BIT</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; 9)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_STATE_BIT</name></cpp:macro> <cpp:value>X87_BIT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTATE_SSE_SIZE</name></cpp:macro> <cpp:value>576</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTATE_AVX_SIZE</name></cpp:macro> <cpp:value>832</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTATE_MPX_SIZE</name></cpp:macro> <cpp:value>1088</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTATE_AVX512_k_SIZE</name></cpp:macro> <cpp:value>1152</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTATE_AVX512_ZMM0_7</name></cpp:macro> <cpp:value>1408</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTATE_AVX512_ZMM8_15</name></cpp:macro> <cpp:value>1664</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTATE_AVX512_ZMM16_31</name></cpp:macro> <cpp:value>2688</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTATE_FULL_SIZE</name></cpp:macro> <cpp:value>XSTATE_AVX512_ZMM16_31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTATE_HDR_SIZE</name></cpp:macro> <cpp:value>XSTATE_SSE_SIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XCR0_OFFSET</name></cpp:macro> <cpp:value>464</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTATE_SSE_MASK</name></cpp:macro> <cpp:value>(X87_BIT|SSE_BIT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTATE_AVX_MASK</name></cpp:macro> <cpp:value>(XSTATE_SSE_MASK|AVX_BIT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTATE_MPX_MASK</name></cpp:macro> <cpp:value>(MPX_BIT|XSTATE_AVX_MASK|XSTATE_SSE_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTATE_AVX512_MASK</name></cpp:macro> <cpp:value>(XSTATE_AVX_MASK|AVX512_FULL_BIT)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_PR_FNAME</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEBUG_REG_T</name></cpp:macro> <cpp:value>struct user_regs_struct</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_NT_FILE_DESCSZ</name></cpp:macro> <cpp:value>sizeof(unsigned long) * 3</cpp:value></cpp:define> 











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_MEM</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W_MEM</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MEM</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_MEM</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_MEM</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRG_PERM</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_ANON_PRIV</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_ANON_SHR</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_FILE_PRIV</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_FILE_SHR</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_ELF_HDR</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_HUG_PRIV</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_HUG_SHR</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SH_FLAG</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IO_FLAG</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DD_FLAG</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_FLAG</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FLAG</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <name>proc_per_process</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>s_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ppid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pgrp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>nice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>num_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>coredump_filter</name></decl>;</decl_stmt>
}</block></struct></type> <name>proc_per_process_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>proc_per_thread</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>sigpend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>sighold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>utime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>stime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>cutime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>cstime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>proc_per_thread</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
}</block></struct></type> <name>proc_per_thread_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>proc_content</name> <block>{
<decl_stmt><decl><type><name>proc_per_thread_t</name> <modifier>*</modifier></type><name>per_thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proc_per_process_t</name> <modifier>*</modifier></type><name>per_process</name></decl>;</decl_stmt>
}</block></struct></type> <name>proc_content_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>map_file</name> <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>map_file_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>linux_map_entry</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>start_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>end_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>perms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>anonymous</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dumpeable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>kernel_mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>file_backed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>shared</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>linux_map_entry</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
}</block></struct></type> <name>linux_map_entry_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_MAP_NODE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (me_head) { p-&gt;n = NULL; me_tail-&gt;n = p; me_tail = p; } else { me_head = p; me_tail = p; } }</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>auxv_buff</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>auxv_buff_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>thread_elf_note</name> <block>{
<decl_stmt><decl><type><name>prstatus_t</name> <modifier>*</modifier></type><name>prstatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>elf_fpregset_t</name> <modifier>*</modifier></type><name>fp_regset</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name></expr></cpp:if>
<decl_stmt><decl><type><name>elf_fpxregset_t</name> <modifier>*</modifier></type><name>fpx_regset</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>siginfo_t</name> <modifier>*</modifier></type><name>siginfo</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name> <operator>||</operator> <name>__x86_64__</name></expr></cpp:if>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>xsave_data</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm__</name> <operator>||</operator> <name>__arm64__</name></expr></cpp:elif>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arm_vfp_data</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>struct</name> <name>thread_elf_note</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
}</block></struct></type> <name>thread_elf_note_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>proc_elf_note</name> <block>{
<decl_stmt><decl><type><name>prpsinfo_t</name> <modifier>*</modifier></type><name>prpsinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auxv_buff_t</name> <modifier>*</modifier></type><name>auxv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linux_map_entry_t</name> <modifier>*</modifier></type><name>maps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>thread_elf_note_t</name> <modifier>*</modifier></type><name>thread_note</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_threads</name></decl>;</decl_stmt>
}</block></struct></type> <name>elf_proc_note_t</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>NT_PRPSINFO_T</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>NT_AUXV_T</name></decl>,
<decl><name>NT_FILE_T</name></decl>,
<decl><name>NT_PRSTATUS_T</name></decl>,
<decl><name>NT_SIGINFO_T</name></decl>,
<decl><name>NT_FPREGSET_T</name></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name></expr></cpp:if>
<decl><name>NT_PRXFPREG_T</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name> <operator>||</operator> <name>__x86_64__</name></expr></cpp:if>
<decl><name>NT_X86_XSTATE_T</name></decl>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm__</name> <operator>||</operator> <name>__arm64__</name></expr></cpp:elif>
<decl><name>NT_ARM_VFP_T</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl><name>NT_LENGHT_T</name></decl>
}</block></enum></type> <name>note_type_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>elf_note_types</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_roundedup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>note_info_t</name>;</typedef> 

<typedef>typedef <type><enum>enum <block>{
<decl><name>ADDR</name></decl>,
<decl><name>PERM</name></decl>,
<decl><name>OFFSET</name></decl>,
<decl><name>DEV</name></decl>,
<decl><name>INODE</name></decl>,
<decl><name>NAME</name></decl>
}</block></enum></type> <name>MAPS_FIELD</name>;</typedef>

<function_decl><type><specifier>extern</specifier> <name>ssize_t</name></type> <name>process_vm_readv</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>local_iov</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>liovcnt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>remote_iov</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>riovcnt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>linux_generate_corefile</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>linux_reg_read</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
</unit>
