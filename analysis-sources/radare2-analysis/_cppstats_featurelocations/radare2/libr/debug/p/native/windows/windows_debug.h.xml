<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\debug\p\native\windows\windows_debug.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS_DEBUG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINDOWS_DEBUG_H</name></cpp:macro></cpp:define>







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_debug.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;psapi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tlhelp32.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;psapi.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tchar.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;w32dbg_wrap.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XSTATE_GSSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTATE_GSSE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XSTATE_LEGACY_SSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTATE_LEGACY_SSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XSTATE_MASK_GSSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTATE_MASK_GSSE</name></cpp:macro> <cpp:value>(1LLU &lt;&lt; (XSTATE_GSSE))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CONTEXT_XSTATE</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTEXT_XSTATE</name></cpp:macro> <cpp:value>(0x00100040)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTEXT_XSTATE</name></cpp:macro> <cpp:value>(0x00010040)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTATE_AVX</name></cpp:macro> <cpp:value>(XSTATE_GSSE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTATE_MASK_AVX</name></cpp:macro> <cpp:value>(XSTATE_MASK_GSSE)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CONTEXT_ALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTEXT_ALL</name></cpp:macro> <cpp:value>1048607</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>_SYSTEM_HANDLE</name> <block>{
<decl_stmt><decl><type><name>ULONG</name></type> <name>ProcessId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name>ObjectTypeNumber</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name>Flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>USHORT</name></type> <name>Handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PVOID</name></type> <name>Object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ACCESS_MASK</name></type> <name>GrantedAccess</name></decl>;</decl_stmt>
}</block></struct></type> <name>SYSTEM_HANDLE</name><operator>,</operator> *<name>PSYSTEM_HANDLE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_SYSTEM_HANDLE_INFORMATION</name> <block>{
<decl_stmt><decl><type><name>ULONG</name></type> <name>HandleCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SYSTEM_HANDLE</name></type> <name><name>Handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SYSTEM_HANDLE_INFORMATION</name><operator>,</operator> *<name>PSYSTEM_HANDLE_INFORMATION</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_POOL_TYPE</name> <block>{
<decl><name>NonPagedPool</name></decl>,
<decl><name>PagedPool</name></decl>,
<decl><name>NonPagedPoolMustSucceed</name></decl>,
<decl><name>DontUseThisType</name></decl>,
<decl><name>NonPagedPoolCacheAligned</name></decl>,
<decl><name>PagedPoolCacheAligned</name></decl>,
<decl><name>NonPagedPoolCacheAlignedMustS</name></decl>
}</block></enum></type> <name>POOL_TYPE</name><operator>,</operator>
*<name>PPOOL_TYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_UNICODE_STRING</name> <block>{
<decl_stmt><decl><type><name>USHORT</name></type> <name>Length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>USHORT</name></type> <name>MaximumLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PWSTR</name></type> <name>Buffer</name></decl>;</decl_stmt>
}</block></struct></type> <name>UNICODE_STRING</name><operator>,</operator> *<name>PUNICODE_STRING</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_OBJECT_TYPE_INFORMATION</name> <block>{
<decl_stmt><decl><type><name>UNICODE_STRING</name></type> <name>Name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>TotalNumberOfObjects</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>TotalNumberOfHandles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>TotalPagedPoolUsage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>TotalNonPagedPoolUsage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>TotalNamePoolUsage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>TotalHandleTableUsage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>HighWaterNumberOfObjects</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>HighWaterNumberOfHandles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>HighWaterPagedPoolUsage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>HighWaterNonPagedPoolUsage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>HighWaterNamePoolUsage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>HighWaterHandleTableUsage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>InvalidAttributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GENERIC_MAPPING</name></type> <name>GenericMapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>ValidAccess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOLEAN</name></type> <name>SecurityRequired</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOLEAN</name></type> <name>MaintainHandleCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>USHORT</name></type> <name>MaintainTypeList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POOL_TYPE</name></type> <name>PoolType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>PagedPoolUsage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>NonPagedPoolUsage</name></decl>;</decl_stmt>
}</block></struct></type> <name>OBJECT_TYPE_INFORMATION</name><operator>,</operator> *<name>POBJECT_TYPE_INFORMATION</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>bFinished</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>bSuspended</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hThread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPVOID</name></type> <name>lpThreadLocalBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPVOID</name></type> <name>lpStartAddress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PVOID</name></type> <name>lpThreadEntryPoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwExitCode</name></decl>;</decl_stmt>
}</block></struct></type> <name>THREAD_ITEM</name><operator>,</operator> *<name>PTHREAD_ITEM</name>;</typedef>

<typedef>typedef <type><struct>struct<block>{
<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>BaseOfDll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>Path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>Name</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>LIB_ITEM</name><operator>,</operator> *<name>PLIB_ITEM</name>;</typedef>

<function_decl><type><name>DWORD</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_GetModuleBaseName</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>HMODULE</name></type></decl></parameter>, <parameter><decl><type><name>LPTSTR</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_GetModuleInformation</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>HMODULE</name></type></decl></parameter>, <parameter><decl><type><name>LPMODULEINFO</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_DebugActiveProcessStop</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>HANDLE</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_OpenThread</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>BOOL</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_DebugBreakProcess</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DWORD</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_GetThreadId</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>DWORD</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_GetProcessId</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>HANDLE</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_OpenProcess</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>BOOL</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_QueryFullProcessImageName</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>LPTSTR</name></type></decl></parameter>, <parameter><decl><type><name>PDWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DWORD</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_GetMappedFileName</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type></decl></parameter>, <parameter><decl><type><name>LPTSTR</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>NTSTATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_NtQuerySystemInformation</name>)<parameter_list>(<parameter><decl><type><name>ULONG</name></type></decl></parameter>, <parameter><decl><type><name>PVOID</name></type></decl></parameter>, <parameter><decl><type><name>ULONG</name></type></decl></parameter>, <parameter><decl><type><name>PULONG</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>NTSTATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_NtQueryInformationThread</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>ULONG</name></type></decl></parameter>, <parameter><decl><type><name>PVOID</name></type></decl></parameter>, <parameter><decl><type><name>ULONG</name></type></decl></parameter>, <parameter><decl><type><name>PULONG</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>NTSTATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_NtDuplicateObject</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>PHANDLE</name></type></decl></parameter>, <parameter><decl><type><name>ACCESS_MASK</name></type></decl></parameter>, <parameter><decl><type><name>ULONG</name></type></decl></parameter>, <parameter><decl><type><name>ULONG</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>NTSTATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_NtQueryObject</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>ULONG</name></type></decl></parameter>, <parameter><decl><type><name>PVOID</name></type></decl></parameter>, <parameter><decl><type><name>ULONG</name></type></decl></parameter>, <parameter><decl><type><name>PULONG</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ut64</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_GetEnabledXStateFeatures</name>)<parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_InitializeContext</name>)<parameter_list>(<parameter><decl><type><name>PVOID</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>PCONTEXT</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PDWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_GetXStateFeaturesMask</name>)<parameter_list>(<parameter><decl><type><name>PCONTEXT</name></type> <name>Context</name></decl></parameter>, <parameter><decl><type><name>PDWORD64</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PVOID</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_LocateXStateFeature</name>)<parameter_list>(<parameter><decl><type><name>PCONTEXT</name></type> <name>Context</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>PDWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_SetXStateFeaturesMask</name>)<parameter_list>(<parameter><decl><type><name>PCONTEXT</name></type> <name>Context</name></decl></parameter>, <parameter><decl><type><name>DWORD64</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DWORD</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_GetModuleFileNameEx</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>HMODULE</name></type></decl></parameter>, <parameter><decl><type><name>LPTSTR</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>HANDLE</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>w32_CreateToolhelp32Snapshot</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>w32_init</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>w32_reg_read</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>w32_reg_write</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>w32_attach</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>w32_detach</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>w32_attach_new_process</name><parameter_list>(<parameter><decl><type><name>RDebug</name><modifier>*</modifier></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>w32_select</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>w32_kill</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>w32_break_process</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>w32_dbg_wait</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>w32_step</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>w32_continue</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>w32_map_alloc</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>w32_map_dealloc</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>w32_map_protect</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perms</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RList</name> <modifier>*</modifier></type><name>w32_thread_list</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RDebugInfo</name> <modifier>*</modifier></type><name>w32_info</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RList</name> <modifier>*</modifier></type><name>w32_pid_list</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RList</name> <modifier>*</modifier></type><name>w32_desc_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></unit>
