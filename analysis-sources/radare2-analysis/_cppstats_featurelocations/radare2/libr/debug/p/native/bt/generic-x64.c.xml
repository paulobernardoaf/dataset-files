<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\debug\p\native\bt\generic-x64.c">
<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>backtrace_x86_64</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>ptr</name></decl>, <decl><type ref="prev"/><name>ebp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>_rip</name></decl>, <decl><type ref="prev"/><name>_rsp</name></decl>, <decl><type ref="prev"/><name>_rbp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOBind</name> <modifier>*</modifier></type><name>bio</name> <init>= <expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>iob</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>_rip</name> <operator>=</operator> <call><name>r_reg_get_value</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"rip"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>_rsp</name> <operator>=</operator> <call><name>r_reg_get_value</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"rsp"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_rbp</name> <operator>=</operator> <call><name>r_reg_get_value</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"rbp"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>_rsp</name> <operator>=</operator> <name>_rbp</name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>bio</name><operator>-&gt;</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>bio</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>_rip</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\x55\x89\xe5"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\x89\xe5\x57"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>bio</name><operator>-&gt;</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>bio</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>_rsp</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"read error at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>_rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDebugFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_rbp</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>dbg</name><operator>-&gt;</operator><name>btdepth</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>bio</name><operator>-&gt;</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>bio</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>_rbp</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ebp2</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ebp2</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>bio</name><operator>-&gt;</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>bio</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>_rbp</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name> <operator>||</operator> <operator>!</operator><name>_rbp</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDebugFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_rbp</name> <operator>=</operator> <name>ebp2</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>backtrace_x86_64_anal</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>ptr</name></decl>, <decl><type ref="prev"/><name>ebp2</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>_rip</name></decl>, <decl><type ref="prev"/><name>_rbp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOBind</name> <modifier>*</modifier></type><name>bio</name> <init>= <expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>iob</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>_rip</name> <operator>=</operator> <call><name>r_reg_get_value</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"rip"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>_rbp</name> <operator>=</operator> <call><name>r_reg_get_value</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"rbp"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>_rbp</name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>bio</name><operator>-&gt;</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>bio</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>_rip</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>fcn</name> <operator>=</operator> <call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>_rip</name></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDebugFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>_rip</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>sp</name></name> <operator>=</operator> <name>_rbp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name>_rbp</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>dbg</name><operator>-&gt;</operator><name>btdepth</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>bio</name><operator>-&gt;</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>bio</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>_rbp</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ebp2</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ebp2</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>bio</name><operator>-&gt;</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>bio</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>_rbp</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name> <operator>||</operator> <operator>!</operator><name>_rbp</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDebugFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>sp</name></name> <operator>=</operator> <name>_rbp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name>_rbp</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_rbp</name> <operator>=</operator> <name>ebp2</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

</unit>
