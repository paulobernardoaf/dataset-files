<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\debug\p\native\windows\windows_message.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_debug.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windows_message.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>msg_types_arr</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"WM_NULL=0x0000"</literal></expr>,
<expr><literal type="string">"WM_CREATE=0x0001"</literal></expr>,
<expr><literal type="string">"WM_DESTROY=0x0002"</literal></expr>,
<expr><literal type="string">"WM_MOVE=0x0003"</literal></expr>,
<expr><literal type="string">"WM_SIZE=0x0005"</literal></expr>,
<expr><literal type="string">"WM_ACTIVATE=0x0006"</literal></expr>,
<expr><literal type="string">"WM_SETFOCUS=0x0007"</literal></expr>,
<expr><literal type="string">"WM_KILLFOCUS=0x0008"</literal></expr>,
<expr><literal type="string">"WM_ENABLE=0x000A"</literal></expr>,
<expr><literal type="string">"WM_SETREDRAW=0x000B"</literal></expr>,
<expr><literal type="string">"WM_SETTEXT=0x000C"</literal></expr>,
<expr><literal type="string">"WM_GETTEXT=0x000D"</literal></expr>,
<expr><literal type="string">"WM_GETTEXTLENGTH=0x000E"</literal></expr>,
<expr><literal type="string">"WM_PAINT=0x000F"</literal></expr>,
<expr><literal type="string">"WM_CLOSE=0x0010"</literal></expr>,
<expr><literal type="string">"WM_QUERYENDSESSION=0x0011"</literal></expr>,
<expr><literal type="string">"WM_QUIT=0x0012"</literal></expr>,
<expr><literal type="string">"WM_QUERYOPEN=0x0013"</literal></expr>,
<expr><literal type="string">"WM_ERASEBKGND=0x0014"</literal></expr>,
<expr><literal type="string">"WM_SYSCOLORCHANGE=0x0015"</literal></expr>,
<expr><literal type="string">"WM_ENDSESSION=0x0016"</literal></expr>,
<expr><literal type="string">"WM_SHOWWINDOW=0x0018"</literal></expr>,
<expr><literal type="string">"WM_WININICHANGE=0x001A"</literal></expr>,
<expr><literal type="string">"WM_DEVMODECHANGE=0x001B"</literal></expr>,
<expr><literal type="string">"WM_ACTIVATEAPP=0x001C"</literal></expr>,
<expr><literal type="string">"WM_FONTCHANGE=0x001D"</literal></expr>,
<expr><literal type="string">"WM_TIMECHANGE=0x001E"</literal></expr>,
<expr><literal type="string">"WM_CANCELMODE=0x001F"</literal></expr>,
<expr><literal type="string">"WM_SETCURSOR=0x0020"</literal></expr>,
<expr><literal type="string">"WM_MOUSEACTIVATE=0x0021"</literal></expr>,
<expr><literal type="string">"WM_CHILDACTIVATE=0x0022"</literal></expr>,
<expr><literal type="string">"WM_QUEUESYNC=0x0023"</literal></expr>,
<expr><literal type="string">"WM_GETMINMAXINFO=0x0024"</literal></expr>,
<expr><literal type="string">"WM_PAINTICON=0x0026"</literal></expr>,
<expr><literal type="string">"WM_ICONERASEBKGND=0x0027"</literal></expr>,
<expr><literal type="string">"WM_NEXTDLGCTL=0x0028"</literal></expr>,
<expr><literal type="string">"WM_SPOOLERSTATUS=0x002A"</literal></expr>,
<expr><literal type="string">"WM_DRAWITEM=0x002B"</literal></expr>,
<expr><literal type="string">"WM_MEASUREITEM=0x002C"</literal></expr>,
<expr><literal type="string">"WM_DELETEITEM=0x002D"</literal></expr>,
<expr><literal type="string">"WM_VKEYTOITEM=0x002E"</literal></expr>,
<expr><literal type="string">"WM_CHARTOITEM=0x002F"</literal></expr>,
<expr><literal type="string">"WM_SETFONT=0x0030"</literal></expr>,
<expr><literal type="string">"WM_GETFONT=0x0031"</literal></expr>,
<expr><literal type="string">"WM_SETHOTKEY=0x0032"</literal></expr>,
<expr><literal type="string">"WM_GETHOTKEY=0x0033"</literal></expr>,
<expr><literal type="string">"WM_QUERYDRAGICON=0x0037"</literal></expr>,
<expr><literal type="string">"WM_COMPAREITEM=0x0039"</literal></expr>,
<expr><literal type="string">"WM_GETOBJECT=0x003D"</literal></expr>,
<expr><literal type="string">"WM_COMPACTING=0x0041"</literal></expr>,
<expr><literal type="string">"WM_COMMNOTIFY=0x0044"</literal></expr>,
<expr><literal type="string">"WM_WINDOWPOSCHANGING=0x0046"</literal></expr>,
<expr><literal type="string">"WM_WINDOWPOSCHANGED=0x0047"</literal></expr>,
<expr><literal type="string">"WM_POWER=0x0048"</literal></expr>,
<expr><literal type="string">"WM_COPYDATA=0x004A"</literal></expr>,
<expr><literal type="string">"WM_CANCELJOURNAL=0x004B"</literal></expr>,
<expr><literal type="string">"WM_NOTIFY=0x004E"</literal></expr>,
<expr><literal type="string">"WM_INPUTLANGCHANGEREQUEST=0x0050"</literal></expr>,
<expr><literal type="string">"WM_INPUTLANGCHANGE=0x0051"</literal></expr>,
<expr><literal type="string">"WM_TCARD=0x0052"</literal></expr>,
<expr><literal type="string">"WM_HELP=0x0053"</literal></expr>,
<expr><literal type="string">"WM_USERCHANGED=0x0054"</literal></expr>,
<expr><literal type="string">"WM_NOTIFYFORMAT=0x0055"</literal></expr>,
<expr><literal type="string">"WM_CONTEXTMENU=0x007B"</literal></expr>,
<expr><literal type="string">"WM_STYLECHANGING=0x007C"</literal></expr>,
<expr><literal type="string">"WM_STYLECHANGED=0x007D"</literal></expr>,
<expr><literal type="string">"WM_DISPLAYCHANGE=0x007E"</literal></expr>,
<expr><literal type="string">"WM_GETICON=0x007F"</literal></expr>,
<expr><literal type="string">"WM_SETICON=0x0080"</literal></expr>,
<expr><literal type="string">"WM_NCCREATE=0x0081"</literal></expr>,
<expr><literal type="string">"WM_NCDESTROY=0x0082"</literal></expr>,
<expr><literal type="string">"WM_NCCALCSIZE=0x0083"</literal></expr>,
<expr><literal type="string">"WM_NCHITTEST=0x0084"</literal></expr>,
<expr><literal type="string">"WM_NCPAINT=0x0085"</literal></expr>,
<expr><literal type="string">"WM_NCACTIVATE=0x0086"</literal></expr>,
<expr><literal type="string">"WM_GETDLGCODE=0x0087"</literal></expr>,
<expr><literal type="string">"WM_SYNCPAINT=0x0088"</literal></expr>,
<expr><literal type="string">"WM_NCMOUSEMOVE=0x00A0"</literal></expr>,
<expr><literal type="string">"WM_NCLBUTTONDOWN=0x00A1"</literal></expr>,
<expr><literal type="string">"WM_NCLBUTTONUP=0x00A2"</literal></expr>,
<expr><literal type="string">"WM_NCLBUTTONDBLCLK=0x00A3"</literal></expr>,
<expr><literal type="string">"WM_NCRBUTTONDOWN=0x00A4"</literal></expr>,
<expr><literal type="string">"WM_NCRBUTTONUP=0x00A5"</literal></expr>,
<expr><literal type="string">"WM_NCRBUTTONDBLCLK=0x00A6"</literal></expr>,
<expr><literal type="string">"WM_NCMBUTTONDOWN=0x00A7"</literal></expr>,
<expr><literal type="string">"WM_NCMBUTTONUP=0x00A8"</literal></expr>,
<expr><literal type="string">"WM_NCMBUTTONDBLCLK=0x00A9"</literal></expr>,
<expr><literal type="string">"WM_NCXBUTTONDOWN=0x00AB"</literal></expr>,
<expr><literal type="string">"WM_NCXBUTTONUP=0x00AC"</literal></expr>,
<expr><literal type="string">"WM_NCXBUTTONDBLCLK=0x00AD"</literal></expr>,
<expr><literal type="string">"WM_INPUT=0x00FF"</literal></expr>,
<expr><literal type="string">"WM_KEYFIRST=0x0100"</literal></expr>,
<expr><literal type="string">"WM_KEYDOWN=0x0100"</literal></expr>,
<expr><literal type="string">"WM_KEYUP=0x0101"</literal></expr>,
<expr><literal type="string">"WM_CHAR=0x0102"</literal></expr>,
<expr><literal type="string">"WM_DEADCHAR=0x0103"</literal></expr>,
<expr><literal type="string">"WM_SYSKEYDOWN=0x0104"</literal></expr>,
<expr><literal type="string">"WM_SYSKEYUP=0x0105"</literal></expr>,
<expr><literal type="string">"WM_SYSCHAR=0x0106"</literal></expr>,
<expr><literal type="string">"WM_SYSDEADCHAR=0x0107"</literal></expr>,
<expr><literal type="string">"WM_UNICHAR=0x0109"</literal></expr>,
<expr><literal type="string">"WM_KEYLAST=0x0109"</literal></expr>,
<expr><literal type="string">"WM_KEYLAST=0x0108"</literal></expr>,
<expr><literal type="string">"WM_INITDIALOG=0x0110"</literal></expr>,
<expr><literal type="string">"WM_COMMAND=0x0111"</literal></expr>,
<expr><literal type="string">"WM_SYSCOMMAND=0x0112"</literal></expr>,
<expr><literal type="string">"WM_TIMER=0x0113"</literal></expr>,
<expr><literal type="string">"WM_HSCROLL=0x0114"</literal></expr>,
<expr><literal type="string">"WM_VSCROLL=0x0115"</literal></expr>,
<expr><literal type="string">"WM_INITMENU=0x0116"</literal></expr>,
<expr><literal type="string">"WM_INITMENUPOPUP=0x0117"</literal></expr>,
<expr><literal type="string">"WM_GESTURE=0x0119"</literal></expr>,
<expr><literal type="string">"WM_GESTURENOTIFY=0x011A"</literal></expr>,
<expr><literal type="string">"WM_MENUSELECT=0x011F"</literal></expr>,
<expr><literal type="string">"WM_MENUCHAR=0x0120"</literal></expr>,
<expr><literal type="string">"WM_ENTERIDLE=0x0121"</literal></expr>,
<expr><literal type="string">"WM_MENURBUTTONUP=0x0122"</literal></expr>,
<expr><literal type="string">"WM_MENUDRAG=0x0123"</literal></expr>,
<expr><literal type="string">"WM_MENUGETOBJECT=0x0124"</literal></expr>,
<expr><literal type="string">"WM_UNINITMENUPOPUP=0x0125"</literal></expr>,
<expr><literal type="string">"WM_MENUCOMMAND=0x0126"</literal></expr>,
<expr><literal type="string">"WM_CHANGEUISTATE=0x0127"</literal></expr>,
<expr><literal type="string">"WM_UPDATEUISTATE=0x0128"</literal></expr>,
<expr><literal type="string">"WM_QUERYUISTATE=0x0129"</literal></expr>,
<expr><literal type="string">"WM_CTLCOLORMSGBOX=0x0132"</literal></expr>,
<expr><literal type="string">"WM_CTLCOLOREDIT=0x0133"</literal></expr>,
<expr><literal type="string">"WM_CTLCOLORLISTBOX=0x0134"</literal></expr>,
<expr><literal type="string">"WM_CTLCOLORBTN=0x0135"</literal></expr>,
<expr><literal type="string">"WM_CTLCOLORDLG=0x0136"</literal></expr>,
<expr><literal type="string">"WM_CTLCOLORSCROLLBAR=0x0137"</literal></expr>,
<expr><literal type="string">"WM_CTLCOLORSTATIC=0x0138"</literal></expr>,
<expr><literal type="string">"WM_MOUSEFIRST=0x0200"</literal></expr>,
<expr><literal type="string">"WM_MOUSEMOVE=0x0200"</literal></expr>,
<expr><literal type="string">"WM_LBUTTONDOWN=0x0201"</literal></expr>,
<expr><literal type="string">"WM_LBUTTONUP=0x0202"</literal></expr>,
<expr><literal type="string">"WM_LBUTTONDBLCLK=0x0203"</literal></expr>,
<expr><literal type="string">"WM_RBUTTONDOWN=0x0204"</literal></expr>,
<expr><literal type="string">"WM_RBUTTONUP=0x0205"</literal></expr>,
<expr><literal type="string">"WM_RBUTTONDBLCLK=0x0206"</literal></expr>,
<expr><literal type="string">"WM_MBUTTONDOWN=0x0207"</literal></expr>,
<expr><literal type="string">"WM_MBUTTONUP=0x0208"</literal></expr>,
<expr><literal type="string">"WM_MBUTTONDBLCLK=0x0209"</literal></expr>,
<expr><literal type="string">"WM_MOUSEWHEEL=0x020A"</literal></expr>,
<expr><literal type="string">"WM_XBUTTONDOWN=0x020B"</literal></expr>,
<expr><literal type="string">"WM_XBUTTONUP=0x020C"</literal></expr>,
<expr><literal type="string">"WM_XBUTTONDBLCLK=0x020D"</literal></expr>,
<expr><literal type="string">"WM_MOUSEHWHEEL=0x020E"</literal></expr>,
<expr><literal type="string">"WM_MOUSELAST=0x020E"</literal></expr>,
<expr><literal type="string">"WM_MOUSELAST=0x020D"</literal></expr>,
<expr><literal type="string">"WM_MOUSELAST=0x020A"</literal></expr>,
<expr><literal type="string">"WM_MOUSELAST=0x0209"</literal></expr>,
<expr><literal type="string">"WM_PARENTNOTIFY=0x0210"</literal></expr>,
<expr><literal type="string">"WM_ENTERMENULOOP=0x0211"</literal></expr>,
<expr><literal type="string">"WM_EXITMENULOOP=0x0212"</literal></expr>,
<expr><literal type="string">"WM_NEXTMENU=0x0213"</literal></expr>,
<expr><literal type="string">"WM_SIZING=0x0214"</literal></expr>,
<expr><literal type="string">"WM_CAPTURECHANGED=0x0215"</literal></expr>,
<expr><literal type="string">"WM_MOVING=0x0216"</literal></expr>,
<expr><literal type="string">"WM_POWERBROADCAST=0x0218"</literal></expr>,
<expr><literal type="string">"WM_DEVICECHANGE=0x0219"</literal></expr>,
<expr><literal type="string">"WM_MDICREATE=0x0220"</literal></expr>,
<expr><literal type="string">"WM_MDIDESTROY=0x0221"</literal></expr>,
<expr><literal type="string">"WM_MDIACTIVATE=0x0222"</literal></expr>,
<expr><literal type="string">"WM_MDIRESTORE=0x0223"</literal></expr>,
<expr><literal type="string">"WM_MDINEXT=0x0224"</literal></expr>,
<expr><literal type="string">"WM_MDIMAXIMIZE=0x0225"</literal></expr>,
<expr><literal type="string">"WM_MDITILE=0x0226"</literal></expr>,
<expr><literal type="string">"WM_MDICASCADE=0x0227"</literal></expr>,
<expr><literal type="string">"WM_MDIICONARRANGE=0x0228"</literal></expr>,
<expr><literal type="string">"WM_MDIGETACTIVE=0x0229"</literal></expr>,
<expr><literal type="string">"WM_MDISETMENU=0x0230"</literal></expr>,
<expr><literal type="string">"WM_ENTERSIZEMOVE=0x0231"</literal></expr>,
<expr><literal type="string">"WM_EXITSIZEMOVE=0x0232"</literal></expr>,
<expr><literal type="string">"WM_DROPFILES=0x0233"</literal></expr>,
<expr><literal type="string">"WM_MDIREFRESHMENU=0x0234"</literal></expr>,
<expr><literal type="string">"WM_POINTERDEVICECHANGE=0x238"</literal></expr>,
<expr><literal type="string">"WM_POINTERDEVICEINRANGE=0x239"</literal></expr>,
<expr><literal type="string">"WM_POINTERDEVICEOUTOFRANGE=0x23A"</literal></expr>,
<expr><literal type="string">"WM_TOUCH=0x0240"</literal></expr>,
<expr><literal type="string">"WM_NCPOINTERUPDATE=0x0241"</literal></expr>,
<expr><literal type="string">"WM_NCPOINTERDOWN=0x0242"</literal></expr>,
<expr><literal type="string">"WM_NCPOINTERUP=0x0243"</literal></expr>,
<expr><literal type="string">"WM_POINTERUPDATE=0x0245"</literal></expr>,
<expr><literal type="string">"WM_POINTERDOWN=0x0246"</literal></expr>,
<expr><literal type="string">"WM_POINTERUP=0x0247"</literal></expr>,
<expr><literal type="string">"WM_POINTERENTER=0x0249"</literal></expr>,
<expr><literal type="string">"WM_POINTERLEAVE=0x024A"</literal></expr>,
<expr><literal type="string">"WM_POINTERACTIVATE=0x024B"</literal></expr>,
<expr><literal type="string">"WM_POINTERCAPTURECHANGED=0x024C"</literal></expr>,
<expr><literal type="string">"WM_TOUCHHITTESTING=0x024D"</literal></expr>,
<expr><literal type="string">"WM_POINTERWHEEL=0x024E"</literal></expr>,
<expr><literal type="string">"WM_POINTERHWHEEL=0x024F"</literal></expr>,
<expr><literal type="string">"WM_POINTERROUTEDTO=0x0251"</literal></expr>,
<expr><literal type="string">"WM_POINTERROUTEDAWAY=0x0252"</literal></expr>,
<expr><literal type="string">"WM_POINTERROUTEDRELEASED=0x0253"</literal></expr>,
<expr><literal type="string">"WM_MOUSEHOVER=0x02A1"</literal></expr>,
<expr><literal type="string">"WM_MOUSELEAVE=0x02A3"</literal></expr>,
<expr><literal type="string">"WM_NCMOUSEHOVER=0x02A0"</literal></expr>,
<expr><literal type="string">"WM_NCMOUSELEAVE=0x02A2"</literal></expr>,
<expr><literal type="string">"WM_DPICHANGED=0x02E0"</literal></expr>,
<expr><literal type="string">"WM_GETDPISCALEDSIZE=0x02E4"</literal></expr>,
<expr><literal type="string">"WM_CUT=0x0300"</literal></expr>,
<expr><literal type="string">"WM_COPY=0x0301"</literal></expr>,
<expr><literal type="string">"WM_PASTE=0x0302"</literal></expr>,
<expr><literal type="string">"WM_CLEAR=0x0303"</literal></expr>,
<expr><literal type="string">"WM_UNDO=0x0304"</literal></expr>,
<expr><literal type="string">"WM_RENDERFORMAT=0x0305"</literal></expr>,
<expr><literal type="string">"WM_RENDERALLFORMATS=0x0306"</literal></expr>,
<expr><literal type="string">"WM_DESTROYCLIPBOARD=0x0307"</literal></expr>,
<expr><literal type="string">"WM_DRAWCLIPBOARD=0x0308"</literal></expr>,
<expr><literal type="string">"WM_PAINTCLIPBOARD=0x0309"</literal></expr>,
<expr><literal type="string">"WM_VSCROLLCLIPBOARD=0x030A"</literal></expr>,
<expr><literal type="string">"WM_SIZECLIPBOARD=0x030B"</literal></expr>,
<expr><literal type="string">"WM_ASKCBFORMATNAME=0x030C"</literal></expr>,
<expr><literal type="string">"WM_CHANGECBCHAIN=0x030D"</literal></expr>,
<expr><literal type="string">"WM_HSCROLLCLIPBOARD=0x030E"</literal></expr>,
<expr><literal type="string">"WM_QUERYNEWPALETTE=0x030F"</literal></expr>,
<expr><literal type="string">"WM_PALETTEISCHANGING=0x0310"</literal></expr>,
<expr><literal type="string">"WM_PALETTECHANGED=0x0311"</literal></expr>,
<expr><literal type="string">"WM_HOTKEY=0x0312"</literal></expr>,
<expr><literal type="string">"WM_PRINT=0x0317"</literal></expr>,
<expr><literal type="string">"WM_PRINTCLIENT=0x0318"</literal></expr>,
<expr><literal type="string">"WM_APPCOMMAND=0x0319"</literal></expr>,
<expr><literal type="string">"WM_THEMECHANGED=0x031A"</literal></expr>,
<expr><literal type="string">"WM_CLIPBOARDUPDATE=0x031D"</literal></expr>,
<expr><literal type="string">"WM_DWMCOMPOSITIONCHANGED=0x031E"</literal></expr>,
<expr><literal type="string">"WM_DWMNCRENDERINGCHANGED=0x031F"</literal></expr>,
<expr><literal type="string">"WM_DWMCOLORIZATIONCOLORCHANGED=0x0320"</literal></expr>,
<expr><literal type="string">"WM_DWMWINDOWMAXIMIZEDCHANGE=0x0321"</literal></expr>,
<expr><literal type="string">"WM_DWMSENDICONICTHUMBNAIL=0x0323"</literal></expr>,
<expr><literal type="string">"WM_DWMSENDICONICLIVEPREVIEWBITMAP=0x0326"</literal></expr>,
<expr><literal type="string">"WM_GETTITLEBARINFOEX=0x033F"</literal></expr>,
<expr><literal type="string">"WM_HANDHELDFIRST=0x0358"</literal></expr>,
<expr><literal type="string">"WM_HANDHELDLAST=0x035F"</literal></expr>,
<expr><literal type="string">"WM_AFXFIRST=0x0360"</literal></expr>,
<expr><literal type="string">"WM_AFXLAST=0x037F"</literal></expr>,
<expr><literal type="string">"WM_PENWINFIRST=0x0380"</literal></expr>,
<expr><literal type="string">"WM_PENWINLAST=0x038F"</literal></expr>,
<expr><literal type="string">"WM_APP=0x8000"</literal></expr>,
<expr><literal type="string">"WM_USER=0x0400"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>__free_window</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>window</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>window</name> <modifier>*</modifier></type><name>__window_from_handle</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>hwnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>window</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>hwnd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>GetWindowThreadProcessId</name> <argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>win</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <call><name>GetClassLongPtrW</name> <argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>GCLP_WNDPROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>sz</name> <init>= <expr><name>MAX_CLASS_NAME</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GetClassNameW</name> <argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>MAX_CLASS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_utf16_to_utf8</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>win</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>win</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RTable</name> <modifier>*</modifier></type><name>__create_window_table</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTable</name> <modifier>*</modifier></type><name>tbl</name> <init>= <expr><call><name>r_table_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tbl</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_table_add_column</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><call><name>r_table_type</name> <argument_list>(<argument><expr><literal type="string">"number"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Handle"</literal></expr></argument>, <argument><expr><name>ST32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_add_column</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><call><name>r_table_type</name> <argument_list>(<argument><expr><literal type="string">"number"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"PID"</literal></expr></argument>, <argument><expr><name>ST32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_add_column</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><call><name>r_table_type</name> <argument_list>(<argument><expr><literal type="string">"number"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TID"</literal></expr></argument>, <argument><expr><name>ST32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_add_column</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><call><name>r_table_type</name> <argument_list>(<argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Class Name"</literal></expr></argument>, <argument><expr><name>ST32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tbl</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__add_window_to_table</name><parameter_list>(<parameter><decl><type><name>RTable</name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>, <parameter><decl><type><name>window</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>tbl</name> <operator>&amp;&amp;</operator> <name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>win</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pid</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name><name>win</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tid</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name><name>win</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_table_add_row</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name><name>win</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_w32_identify_window</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><operator>!</operator><call><name>r_cons_yesno</name> <argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>, <argument><expr><literal type="string">"Move cursor to the window to be identified. Ready?"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<decl_stmt><decl><type><name>POINT</name></type> <name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetCursorPos</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hwnd</name> <init>= <expr><call><name>WindowFromPoint</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>window</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hwnd</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_yesno</name> <argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>, <argument><expr><literal type="string">"Try to get the child?"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>child</name> <init>= <expr><call><name>ChildWindowFromPoint</name> <argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hwnd</name> <operator>=</operator> <ternary><condition><expr><name>child</name></expr> ?</condition><then> <expr><name>child</name></expr> </then><else>: <expr><name>hwnd</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>win</name> <operator>=</operator> <call><name>__window_from_handle</name> <argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No window found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error trying to get information from 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RTable</name> <modifier>*</modifier></type><name>tbl</name> <init>= <expr><call><name>__create_window_table</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tbl</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>__add_window_to_table</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tbl_str</name> <init>= <expr><call><name>r_table_tofancystring</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><name>tbl_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tbl_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_free</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type> <name>__enum_childs</name><parameter_list>(
<parameter><decl><type><name>_In_</name> <name>HWND</name></type> <name>hwnd</name></decl></parameter>,
<parameter><decl><type><name>_In_</name> <name>LPARAM</name></type> <name>lParam</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>windows</name> <init>= <expr><operator>(</operator><name>RList</name> <operator>*</operator><operator>)</operator><name>lParam</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>window</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>__window_from_handle</name> <argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>windows</name></expr></argument>, <argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>__get_windows</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>windows</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>__free_window</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>hCurWnd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>hCurWnd</name> <operator>=</operator> <call><name>FindWindowEx</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hCurWnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwProcessID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetWindowThreadProcessId</name> <argument_list>(<argument><expr><name>hCurWnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwProcessID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <name>dwProcessID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EnumChildWindows</name> <argument_list>(<argument><expr><name>hCurWnd</name></expr></argument>, <argument><expr><name>__enum_childs</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><name>windows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>window</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>__window_from_handle</name> <argument_list>(<argument><expr><name>hCurWnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>windows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>windows</name></expr></argument>, <argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>hCurWnd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
<return>return <expr><name>windows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>__get_dispatchmessage_offset</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>modlist</name> <init>= <expr><call><name>r_debug_modules_list</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>mod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>modlist</argument>, <argument>it</argument>, <argument>mod</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strnicmp</name> <argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"user32.dll"</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><literal type="string">"user32.dll"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>cmdstr</name></name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>core</name></name></expr></argument>, <argument><expr><literal type="string">"f~DispatchMessageW"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>strtok</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>strrchr</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sym</name> <operator>&amp;&amp;</operator> <call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>sym</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"sym.imp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>;</do>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__init_msg_types</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg_types</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>msg_types</name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur_type</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>cur_type</name> <operator>=</operator> <name><name>msg_types_arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_query</name> <argument_list>(<argument><expr><operator>*</operator><name>msg_types</name></expr></argument>, <argument><expr><name>cur_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DWORD</name></type> <name>__get_msg_type</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>Sdb</name> <modifier>*</modifier></type><name>msg_types</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg_types</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__init_msg_types</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>msg_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type_str</name> <init>= <expr><call><name>sdb_const_get</name> <argument_list>(<argument><expr><name>msg_types</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>type_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__print_windows</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>windows</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTable</name> <modifier>*</modifier></type><name>tbl</name> <init>= <expr><call><name>__create_window_table</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tbl</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>window</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>windows</argument>, <argument>it</argument>, <argument>win</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>__add_window_to_table</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>r_table_tofancystring</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_free</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_w32_print_windows</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>windows</name> <init>= <expr><call><name>__get_windows</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>windows</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>windows</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"No windows for this process.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>__print_windows</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>windows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>windows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_w32_add_winmsg_breakpoint</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>dbg</name> <operator>&amp;&amp;</operator> <name>input</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>window_id</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>window_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>window_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>window_id</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>type</name> <init>= <expr><call><name>__get_msg_type</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>window_id</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>windows</name> <init>= <expr><call><name>__get_windows</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>windows</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>windows</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"No windows for this process.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>win_h</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>window_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>window</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>windows</argument>, <argument>it</argument>, <argument>win</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>win</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <name>win_h</name> <operator>||</operator> <operator>!</operator><call><name>strnicmp</name> <argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>window_id</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>window_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>win</name><operator>-&gt;</operator><name>proc</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Window not found, try these:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__print_windows</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>windows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>windows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__get_dispatchmessage_offset</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_debug_bp_add</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cond</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>window_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cond</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"?= `ae %d,edx,-`"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reg</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <name>R_SYS_BITS_64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <literal type="string">"rcx"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <literal type="string">"ecx"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>cond</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"?= `ae %d,%s,%d,+,[4],-`"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>cmdf</name></name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>core</name></name></expr></argument>, <argument><expr><literal type="string">"\"dbC 0x%"</literal><name>PFMT64x</name><literal type="string">" %s\""</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
