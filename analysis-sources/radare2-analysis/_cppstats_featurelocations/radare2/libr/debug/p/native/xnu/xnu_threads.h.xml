<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\debug\p\native\xnu\xnu_threads.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_INCLUDE_XNU_THREADS_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_INCLUDE_XNU_THREADS_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__POWERPC__</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_T</name></cpp:macro> <cpp:value>ppc_thread_state_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_STATE_T</name></cpp:macro> <cpp:value>PPC_THREAD_STATE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_STATE_SZ</name></cpp:macro> <cpp:value>PPC_THREAD_STATE_SZ</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm</name> <operator>||</operator> <name>__arm64</name> <operator>||</operator> <name>__aarch64</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/arm/thread_status.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARM_THREAD_STATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARM_THREAD_STATE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARM_THREAD_STATE64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARM_THREAD_STATE64</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_T</name></cpp:macro> <cpp:value>arm_unified_thread_state_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_STATE_T</name></cpp:macro> <cpp:value>MACHINE_THREAD_STATE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_STATE_SZ</name></cpp:macro> <cpp:value>MACHINE_THREAD_STATE_COUNT</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__x86_64__</name> <operator>||</operator> <name>__i386__</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_T</name></cpp:macro> <cpp:value>x86_thread_state_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_STATE_T</name></cpp:macro> <cpp:value>MACHINE_THREAD_STATE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_STATE_SZ</name></cpp:macro> <cpp:value>MACHINE_THREAD_STATE_COUNT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN_ON_MACH_ERROR</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>, <parameter><type><name>retval</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>if (kr != KERN_SUCCESS) {mach_error (msg, kr); return ((retval));}</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>_exception_info</name> <block>{
<decl_stmt><decl><type><name>exception_mask_t</name></type> <name><name>masks</name><index>[<expr><name>EXC_TYPES_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_port_t</name></type> <name><name>ports</name><index>[<expr><name>EXC_TYPES_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>exception_behavior_t</name></type> <name><name>behaviors</name><index>[<expr><name>EXC_TYPES_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>thread_state_flavor_t</name></type> <name><name>flavors</name><index>[<expr><name>EXC_TYPES_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_msg_type_number_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_port_t</name></type> <name>exception_port</name></decl>;</decl_stmt>
}</block></struct></type> <name>xnu_exception_info</name>;</typedef>



<typedef>typedef <type><struct>struct <name>_xnu_thread</name> <block>{
<decl_stmt><decl><type><name>thread_t</name></type> <name>port</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>thread_basic_info_data_t</name></type> <name>basic_info</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name></type> <name>stepping</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>R_REG_T</name></type> <name>gpr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>state_size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__arm64</name> <operator>||</operator> <name>__aarch64</name> <operator>||</operator> <name>__arm64__</name> <operator>||</operator> <name>__aarch64__</name></expr></cpp:if>
<union>union <block>{
<decl_stmt><decl><type><name>arm_debug_state32_t</name></type> <name>drx32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arm_debug_state64_t</name></type> <name>drx64</name></decl>;</decl_stmt>
}</block> <decl><name>debug</name></decl>;</union>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm__</name> <operator>||</operator> <name>__arm</name> <operator>||</operator> <name>__armv7__</name></expr></cpp:elif>
<union>union <block>{
<decl_stmt><decl><type><name>arm_debug_state_t</name></type> <name>drx</name></decl>;</decl_stmt>
}</block> <decl><name>debug</name></decl>;</union>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__x86_64__</name> <operator>||</operator> <name>__i386__</name></expr></cpp:elif>
<decl_stmt><decl><type><name>x86_debug_state_t</name></type> <name>drx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>ut16</name></type> <name>flavor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>count</name></decl>;</decl_stmt>
}</block></struct></type> <name>xnu_thread_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_exc_msg</name> <block>{
<decl_stmt><decl><type><name>mach_msg_header_t</name></type> <name>hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach_msg_body_t</name></type> <name>msg_body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_msg_port_descriptor_t</name></type> <name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_msg_port_descriptor_t</name></type> <name>task</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NDR_record_t</name></type> <name>NDR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>exception_type_t</name></type> <name>exception</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_msg_type_number_t</name></type> <name>code_cnt</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>__POWERPC__</name></expr></cpp:if>
<decl_stmt><decl><type><name>mach_exception_data_t</name></type> <name>code</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name></type> <name><name>pad</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>exc_msg</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_rep_msg</name> <block>{
<decl_stmt><decl><type><name>mach_msg_header_t</name></type> <name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NDR_record_t</name></type> <name>NDR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>kern_return_t</name></type> <name>ret_code</name></decl>;</decl_stmt>
}</block></struct></type> <name>rep_msg</name>;</typedef>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
