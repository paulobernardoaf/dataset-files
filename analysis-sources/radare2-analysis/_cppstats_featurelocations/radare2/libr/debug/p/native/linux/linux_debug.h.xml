<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\debug\p\native\linux\linux_debug.h">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ptrace.h&gt;</cpp:file></cpp:include>

<struct>struct <name>user_regs_struct_x86_64</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>r15</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>r14</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>r13</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>r12</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>rbp</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>rbx</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>r11</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>r10</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>r9</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>r8</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>rax</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>rcx</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>rdx</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>rsi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>rdi</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>orig_rax</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>rip</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>cs</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>eflags</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>rsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>ss</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>fs_base</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>gs_base</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>ds</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>es</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>fs</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut64</name></type> <name>gs</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>user_regs_struct_x86_32</name> <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>ebx</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut32</name></type> <name>ecx</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut32</name></type> <name>edx</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut32</name></type> <name>esi</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut32</name></type> <name>edi</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut32</name></type> <name>ebp</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut32</name></type> <name>eax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>xds</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut32</name></type> <name>xes</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut32</name></type> <name>xfs</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut32</name></type> <name>xgs</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut32</name></type> <name>orig_eax</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut32</name></type> <name>eip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>xcs</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut32</name></type> <name>eflags</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut32</name></type> <name>esp</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ut32</name></type> <name>xss</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ANDROID__</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__arm64__</name> <operator>||</operator> <name>__aarch64__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEBUG_REG_T</name></cpp:macro> <cpp:value>struct user_pt_regs</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NT_PRSTATUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_PRSTATUS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEBUG_REG_T</name></cpp:macro> <cpp:value>struct pt_regs</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/user.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name> <operator>||</operator> <name>__x86_64__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEBUG_REG_T</name></cpp:macro> <cpp:value>struct user_regs_struct</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__s390x__</name> <operator>||</operator> <name>__s390__</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEBUG_REG_T</name></cpp:macro> <cpp:value>struct _user_regs_struct</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

50 struct _user_regs_struct
51 {
52 struct _user_psw_struct psw; 
53 unsigned long gprs[16]; 
54 unsigned int acrs[16]; 
55 unsigned long orig_gpr2; 
56 struct _user_fpregs_struct fp_regs; 
57 struct _user_per_struct per_info; 
58 unsigned long ieee_instruction_pointer; 
59 };
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm64__</name> <operator>||</operator> <name>__aarch64__</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;asm/ptrace.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NT_PRSTATUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_PRSTATUS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEBUG_REG_T</name></cpp:macro> <cpp:value>struct user_pt_regs</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm__</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEBUG_REG_T</name></cpp:macro> <cpp:value>struct user_regs</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__POWERPC__</name></expr></cpp:elif>
<struct>struct <name>powerpc_regs_t</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>gpr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>nip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>msr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>orig_gpr3</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ctr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>link</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>xer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ccr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>softe</name></decl>;</decl_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mq</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>trap</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>dar</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>dsisr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>result</name></decl>;</decl_stmt> 
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEBUG_REG_T</name></cpp:macro> <cpp:value>struct powerpc_regs_t</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__riscv</name> <operator>||</operator> <name>__riscv__</name> <operator>||</operator> <name>__riscv64__</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ucontext.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;asm/ptrace.h&gt;</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEBUG_REG_T</name></cpp:macro> <cpp:value>struct user_regs_struct</cpp:value></cpp:define> 


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__mips__</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ucontext.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>ut64</name></type> <name><name>mips64_regs_t</name> <index>[<expr><literal type="number">274</literal></expr>]</index></name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEBUG_REG_T</name></cpp:macro> <cpp:value>mips64_regs_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><name>bool</name></type> <name>linux_set_options</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>linux_step</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RDebugReasonType</name></type> <name>linux_ptrace_event</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>linux_attach</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>linux_attach_new_process</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RDebugInfo</name> <modifier>*</modifier></type><name>linux_info</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RList</name> <modifier>*</modifier></type><name>linux_pid_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RList</name> <modifier>*</modifier></type><name>linux_thread_list</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>linux_select</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>fill_pid_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>linux_reg_read</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>linux_reg_write</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RList</name> <modifier>*</modifier></type><name>linux_desc_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>linux_stop_threads</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>except</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>linux_handle_signals</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>linux_dbg_wait</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>linux_reg_profile</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>match_pid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pid_o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>th_o</name></decl></parameter>)</parameter_list>;</function_decl>
</unit>
