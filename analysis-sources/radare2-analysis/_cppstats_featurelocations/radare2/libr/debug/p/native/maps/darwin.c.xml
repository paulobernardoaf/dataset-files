<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\debug\p\native\maps\darwin.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>

<function_decl><type><name>kern_return_t</name></type> <name>mach_vm_region_recurse</name> <parameter_list>(
<parameter><decl><type><name>vm_map_t</name></type> <name>target_task</name></decl></parameter>,
<parameter><decl><type><name>mach_vm_address_t</name> <modifier>*</modifier></type><name>address</name></decl></parameter>,
<parameter><decl><type><name>mach_vm_size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>,
<parameter><decl><type><name>natural_t</name> <modifier>*</modifier></type><name>nesting_depth</name></decl></parameter>,
<parameter><decl><type><name>vm_region_recurse_info_t</name></type> <name>info</name></decl></parameter>,
<parameter><decl><type><name>mach_msg_type_number_t</name> <modifier>*</modifier></type><name>infoCnt</name></decl></parameter>
)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>unparse_inheritance</name> <parameter_list>(<parameter><decl><type><name>vm_inherit_t</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VM_INHERIT_SHARE</name></expr>:</case> <return>return <expr><literal type="string">"share"</literal></expr>;</return>
<case>case <expr><name>VM_INHERIT_COPY</name></expr>:</case> <return>return <expr><literal type="string">"copy"</literal></expr>;</return>
<case>case <expr><name>VM_INHERIT_NONE</name></expr>:</case> <return>return <expr><literal type="string">"none"</literal></expr>;</return>
<default>default:</default> <return>return <expr><literal type="string">"???"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__LP64__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR</name></cpp:macro> <cpp:value>"%16lx"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_SIZE</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_OFFSET</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KERNEL_LOWER</name></cpp:macro> <cpp:value>0xffffff8000000000</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR</name></cpp:macro> <cpp:value>"%8x"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_SIZE</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_OFFSET</name></cpp:macro> <cpp:value>0x201000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KERNEL_LOWER</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>vm_address_t</name></type> <name>get_kernel_base</name><parameter_list>(<parameter><decl><type><name>task_t</name></type> <name>___task</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>kern_return_t</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>task_t</name></type> <name>task</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vm_region_submap_info_data_64_t</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_msg_type_number_t</name></type> <name>info_count</name> <init>= <expr><name>VM_REGION_SUBMAP_INFO_COUNT_64</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name>KERNEL_LOWER</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>task_for_pid</name><argument_list>(<argument><expr><call><name>mach_task_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>naddr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%d vs %d\n"</literal></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>___task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>count</name><operator>=</operator><literal type="number">128</literal></expr>;</init> <condition><expr><name>count</name></expr>;</condition> <incr><expr><name>count</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>naddr</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vm_region_recurse_64</name> <argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><operator>(</operator><name>vm_address_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>naddr</name></expr></argument>, <argument><expr><operator>(</operator><name>vm_size_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>size</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>depth</name></expr></argument>, <argument><expr><operator>(</operator><name>vm_region_info_t</name><operator>)</operator><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name><operator>&lt;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>naddr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" size 0x%08"</literal><name>PFMT64x</name><literal type="string">" perm 0x%x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>max_protection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>addr</name> <operator>+</operator> <name>IMAGE_OFFSET</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>vm_address_t</name><operator>)</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>proc_regionfilename</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>buffersize</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>ios_dbg_maps</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>contiguous</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>oldprot</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_vm_address_t</name></type> <name>address</name> <init>= <expr><name>MACH_VM_MIN_ADDRESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_vm_size_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>mach_vm_size_t</name><operator>)</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_vm_size_t</name></type> <name>osize</name> <init>= <expr><operator>(</operator><name>mach_vm_size_t</name><operator>)</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>natural_t</name></type> <name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>task_t</name></type> <name>task</name> <init>= <expr><call><name>pid_to_task</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>mr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__arm64__</name> <operator>||</operator> <name>__aarch64__</name></expr></cpp:if>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>osize</name> <operator>=</operator> <literal type="number">16384</literal></expr>;</expr_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>osize</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (dbg-&gt;pid == 0) {
vm_address_t base = get_kernel_base (task);
eprintf ("Kernel Base Address: 0x%"PFMT64x"\n", (ut64)base);
return NULL;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>kern_return_t</name></type> <name>kr</name></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vm_region_submap_info_64</name></name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_msg_type_number_t</name></type> <name>info_count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <name>VM_REGION_BASIC_INFO_64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>info_count</name> <operator>=</operator> <name>VM_REGION_SUBMAP_INFO_COUNT_64</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>mach_vm_region_recurse</name> <argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>depth</name></expr></argument>,
<argument><expr><operator>(</operator><name>vm_region_recurse_info_t</name><operator>)</operator> <operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>address</name> <operator>==</operator> <name><name>mr</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>mr</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>oldprot</name> <operator>!=</operator> <name>UT32_MAX</name> <operator>&amp;&amp;</operator> <name>oldprot</name> <operator>==</operator> <name><name>info</name><operator>.</operator><name>protection</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mr</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>contiguous</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>contiguous</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>contiguous</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>contiguous</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>oldprot</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>protection</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>max_protection</name></name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>contiguous</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>module_name</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>module_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__POWERPC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>proc_regionfilename</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>,
<argument><expr><name>module_name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>module_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:warning>#<cpp:directive>warning</cpp:directive> TODO: support proc_regionfilename on old OSX (ppc)</cpp:warning>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>module_name</name><index>[<expr><name>ret</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xwr2rwx</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x&amp;1)&lt;&lt;2) | (x&amp;2) | ((x&amp;4)&gt;&gt;2)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s %02x %s%s%s%s%s %s depth=%d"</literal></expr></argument>,
<argument><expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><call><name>xwr2rwx</name> <argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>max_protection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><call><name>unparse_inheritance</name> <argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>inheritance</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>info</name><operator>.</operator><name>user_tag</name></name></expr>?</condition><then> <expr><literal type="string">" user"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>info</name><operator>.</operator><name>is_submap</name></name></expr>?</condition><then> <expr><literal type="string">" sub"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>info</name><operator>.</operator><name>inheritance</name></name></expr>?</condition><then> <expr><literal type="string">" inherit"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>info</name><operator>.</operator><name>is_submap</name></name></expr> ?</condition><then> <expr><literal type="string">" submap"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>module_name</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>mr</name> <operator>=</operator> <call><name>r_debug_map_new</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>address</name><operator>+</operator><name>size</name></expr></argument>,
<argument><expr><call><name>xwr2rwx</name> <argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>protection</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot create r_debug_map_new\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mr</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>module_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name><operator>&lt;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>=</operator> <name>osize</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>address</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static RList *osx_dbg_maps (RDebug *dbg) {
RDebugMap *mr;
char buf[1024];
int i, print;
kern_return_t kret;
vm_region_basic_info_data_64_t info, prev_info;
mach_vm_address_t prev_address;
mach_vm_size_t size, prev_size;
mach_port_t object_name;
mach_msg_type_number_t count;
int nsubregions = 0;
int num_printed = 0;
size_t address = 0;
task_t task = pid_to_task (dbg-&gt;pid);
RList *list = r_list_new ();











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__arm64__</name> <operator>||</operator> <name>__aarch64__</name></expr></cpp:if>
size = 16384; 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
size = 4096;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
memset (&amp;prev_info, 0, sizeof (prev_info));
prev_address = address;
prev_size = size;
nsubregions = 1;

for (i=0; ; i++) {
int done = 0;

address = prev_address + prev_size;
print = 0;

if (prev_size==0)
break;

if (address == 0)
done = 1;

if (!done) {
count = VM_REGION_BASIC_INFO_COUNT_64;
kret = mach_vm_region (task, (mach_vm_address_t *)&amp;address,
&amp;size, VM_REGION_BASIC_INFO_64,
(vm_region_info_t) &amp;info, &amp;count, &amp;object_name);
if (kret != KERN_SUCCESS) {
size = 0;
print = done = 1;
}
}

if (address != prev_address + prev_size)
print = 1;

if ((info.protection != prev_info.protection)
|| (info.max_protection != prev_info.max_protection)
|| (info.inheritance != prev_info.inheritance)
|| (info.shared != prev_info.reserved)
|| (info.reserved != prev_info.reserved))
print = 1;


{
char module_name[1024];
module_name[0] = 0;
int ret = proc_regionfilename (dbg-&gt;pid, address, module_name, sizeof (module_name));
module_name[ret] = 0;

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xwr2rwx</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x&amp;1)&lt;&lt;2) | (x&amp;2) | ((x&amp;4)&gt;&gt;2)</cpp:value></cpp:define>
if (print &amp;&amp; size&gt;0 &amp;&amp; prev_info.inheritance != VM_INHERIT_SHARE) {
snprintf (buf, sizeof (buf), "%s %02x %s/%s/%s %s",
r_str_rwx_i (xwr2rwx (prev_info.max_protection)), i,
unparse_inheritance (prev_info.inheritance),
prev_info.shared ? "shar" : "priv",
prev_info.reserved ? "reserved" : "not-reserved",
module_name);


mr = r_debug_map_new (buf, prev_address, prev_address+prev_size,
xwr2rwx (prev_info.protection), 0);
if (!mr) {
eprintf ("Cannot create r_debug_map_new\n");
break;
}
mr-&gt;file = strdup (module_name);
r_list_append (list, mr);
}
}
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (1==0 &amp;&amp; rest) { 
addr = 0LL;
addr = (ut64) (ut32) prev_address;
if (num_printed == 0)
fprintf(stderr, "Region ");
else fprintf(stderr, " ... ");
fprintf(stderr, " 0x%08llx - 0x%08llx %s (%s) %s, %s, %s",
addr, addr + prev_size,
unparse_protection (prev_info.protection),
unparse_protection (prev_info.max_protection),
unparse_inheritance (prev_info.inheritance),
prev_info.shared ? "shared" : " private",
prev_info.reserved ? "reserved" : "not-reserved");

if (nsubregions &gt; 1)
fprintf(stderr, " (%d sub-regions)", nsubregions);

fprintf(stderr, "\n");

prev_address = address;
prev_size = size;
memcpy (&amp;prev_info, &amp;info, sizeof (vm_region_basic_info_data_64_t));
nsubregions = 1;

num_printed++;
} else {
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
prev_size += size;
nsubregions++;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
prev_address = address;
prev_size = size;
memcpy (&amp;prev_info, &amp;info, sizeof (vm_region_basic_info_data_64_t));
nsubregions = 1;

num_printed++;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}
return list;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>darwin_dbg_maps</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ios_dbg_maps</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
const char *osname = dbg-&gt;anal-&gt;syscall-&gt;os;
if (osname &amp;&amp; !strcmp (osname, "ios")) {
return ios_dbg_maps (dbg);
} 
return osx_dbg_maps (dbg);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
