<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\debug\p\debug_native.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_userconf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_debug.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_drx.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_reg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGER</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"native/drx.c"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_cons.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_native_continue</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_native_reg_read</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_native_reg_write</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"native/bt.c"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__HAIKU__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ptrace.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"native/windows/windows_debug.h"</cpp:file></cpp:include>

<function_decl><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_w32_dbg_modules</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_w32_dbg_maps</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEBUG_REG_T</name></cpp:macro> <cpp:value>CONTEXT</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NTSTATUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NTSTATUS</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NTSTATUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTSTATUS</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__BSD__</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"native/bsd/bsd_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"native/procfs.h"</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"native/xnu/xnu_debug.h"</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__sun</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEBUG_REG_T</name></cpp:macro> <cpp:value>gregset_t</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEBUGGER</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUGGER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:warning>#<cpp:directive>warning</cpp:directive> No debugger support for SunOS yet</cpp:warning>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"native/linux/linux_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"native/procfs.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAIT_ANY</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIFCONTINUED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIFCONTINUED</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s) == 0xffff)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__x86_64__</name> <operator>||</operator> <name>__i386__</name> <operator>||</operator> <name>__arm__</name> <operator>||</operator> <name>__arm64__</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"native/linux/linux_coredump.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:warning>#<cpp:directive>warning</cpp:directive> Unsupported debugging platform</cpp:warning>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEBUGGER</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUGGER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAITPID_FLAGS</name></cpp:macro> <cpp:value>__WALL</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAITPID_FLAGS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGER</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>__WINDOWS__</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>__linux__</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WAIT_ON_ALL_CHILDREN</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_handle_signals</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__KFBSD__</name></expr></cpp:if>
<return>return <expr><call><name>bsd_handle_signals</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name> <operator>||</operator> <name>__linux__</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>r_debug_native_reg_profile</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<return>return <expr><call><name>xnu_reg_profile</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name></expr></cpp:elif>
<return>return <expr><call><name>linux_reg_profile</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"native/reg.c"</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_native_step</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<return>return <expr><call><name>xnu_step</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<return>return <expr><call><name>w32_step</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__BSD__</name></expr></cpp:elif>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ptrace</name> <argument_list>(<argument><expr><name>PT_STEP</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"native-singlestep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<return>return <expr><call><name>linux_step</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_native_attach</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (!dbg || pid == dbg-&gt;pid)
return dbg-&gt;tid;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<return>return <expr><call><name>xnu_attach</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<return>return <expr><call><name>w32_attach</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name> <operator>||</operator> <name>__ANDROID__</name></expr></cpp:elif>
<return>return <expr><call><name>linux_attach</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__KFBSD__</name></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><call><name>ptrace</name> <argument_list>(<argument><expr><name>PT_ATTACH</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"ptrace (PT_ATTACH)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>pid</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ptrace</name> <argument_list>(<argument><expr><name>PTRACE_ATTACH</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Trying to attach to %d\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"ptrace (PT_ATTACH)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>pid</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_native_detach</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<return>return <expr><call><name>xnu_detach</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<return>return <expr><call><name>w32_detach</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__BSD__</name></expr></cpp:elif>
<return>return <expr><call><name>ptrace</name> <argument_list>(<argument><expr><name>PT_DETACH</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>r_debug_ptrace</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>PTRACE_DETACH</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>r_ptrace_data_t</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_native_select</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<return>return <expr><call><name>w32_select</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name></expr></cpp:elif>
<return>return <expr><call><name>linux_select</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_native_continue_syscall</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name></expr></cpp:if>
<expr_stmt><expr><call><name>linux_set_options</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>r_debug_ptrace</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>PTRACE_SYSCALL</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__BSD__</name></expr></cpp:elif>
<decl_stmt><decl><type><name>ut64</name></type> <name>pc</name> <init>= <expr><call><name>r_debug_reg_get</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">"PC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>ptrace</name> <argument_list>(<argument><expr><name>PTRACE_SYSCALL</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>pc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"TODO: continue syscall not implemented yet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>__WINDOWS__</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>__APPLE__</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>__BSD__</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>interrupt_process</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_debug_kill</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_native_stop</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name></expr></cpp:if>
<return>return <expr><call><name>linux_stop_threads</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_native_continue</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>xnu_continue</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>tid</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<return>return <expr><call><name>w32_continue</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__BSD__</name></expr></cpp:elif>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>sig</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>sig</name></expr> </then><else>: <expr><name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>signum</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>pc</name> <init>= <expr><call><name>r_debug_reg_get</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">"PC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ptrace</name> <argument_list>(<argument><expr><name>PTRACE_CONT</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>pc</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>contsig</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>signum</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sig</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>contsig</name> <operator>=</operator> <name>sig</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>consbreak</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><operator>(</operator><name>RConsBreak</name><operator>)</operator><name>interrupt_process</name></expr></argument>, <argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>continue_all_threads</name></name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>n_threads</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>it</argument>, <argument>th</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>pid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_debug_ptrace</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>PTRACE_CONT</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>r_ptrace_data_t</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>contsig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"PTRACE_CONT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_debug_ptrace</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>PTRACE_CONT</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>r_ptrace_data_t</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>contsig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"PTRACE_CONT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>tid</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RDebugInfo</name><modifier>*</modifier></type> <name>r_debug_native_info</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<return>return <expr><call><name>xnu_info</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<return>return <expr><call><name>w32_info</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name></expr></cpp:elif>
<return>return <expr><call><name>linux_info</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__KFBSD__</name> <operator>||</operator> <name>__OpenBSD__</name> <operator>||</operator> <name>__NetBSD__</name></expr></cpp:elif>
<return>return <expr><call><name>bsd_info</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>tracelib</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>, <parameter><decl><type><name>PLIB_ITEM</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>needle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'l'</literal></expr>:</case> <expr_stmt><expr><name>needle</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>glob_libs</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case> <expr_stmt><expr><name>needle</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>glob_unlibs</name></name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"(%d) %sing library at %p (%s) %s\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>BaseOfDll</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>Path</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>needle</name> <operator>&amp;&amp;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>needle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>r_str_glob</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>Name</name></name></expr></argument>, <argument><expr><name>needle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>!</operator><name>mode</name> <operator>||</operator> <operator>!</operator><name>needle</name> <operator>||</operator> <name>tmp</name></expr> ;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>RDebugReasonType</name></type> <name>r_debug_native_wait</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugReasonType</name></type> <name>reason</name> <init>= <expr><name>R_DEBUG_REASON_UNKNOWN</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>orig_tid</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>restore_thread</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>rio</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ERROR: r_debug_native_wait called with pid -1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_DEBUG_REASON_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>reason</name> <operator>=</operator> <call><name>w32_dbg_wait</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reason</name> <operator>==</operator> <name>R_DEBUG_REASON_NEW_LIB</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugInfo</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_debug_native_info</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>lib</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>tracelib</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">"load"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <name>R_DEBUG_REASON_TRAP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>core</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>autoload_pdb</name> <init>= <expr><call><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>cfggeti</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"pdb.autoload"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>autoload_pdb</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PLIB_ITEM</name></type> <name>lib</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>lib</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>cmdf</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"\"o \\\"%s\\\" 0x%p\""</literal></expr></argument>, <argument><expr><name><name>lib</name><operator>-&gt;</operator><name>Path</name></name></expr></argument>, <argument><expr><name><name>lib</name><operator>-&gt;</operator><name>BaseOfDll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>o_res</name> <init>= <expr><call><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>cmdstrf</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"o~+%s"</literal></expr></argument>, <argument><expr><name><name>lib</name><operator>-&gt;</operator><name>Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><name>o_res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>o_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pdb_file</name> <init>= <expr><call><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>cmdstr</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"i~dbg_file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pdb_file</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>pdb_file</name></expr></argument>)</argument_list></call><operator>,</operator> <operator>*</operator><name>pdb_file</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>pdb_file</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>cmdf</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"idpd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>cmdf</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"idp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>cmdf</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"o-%d"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_debug_info_free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Loading unknown library.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>restore_thread</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reason</name> <operator>==</operator> <name>R_DEBUG_REASON_EXIT_LIB</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugInfo</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_debug_native_info</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>lib</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>tracelib</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">"unload"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <name>R_DEBUG_REASON_TRAP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_debug_info_free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Unloading unknown library.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>restore_thread</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reason</name> <operator>==</operator> <name>R_DEBUG_REASON_NEW_TID</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugInfo</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_debug_native_info</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>thread</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PTHREAD_ITEM</name></type> <name>item</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>thread</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"(%d) Created thread %d (start @ %p)\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>lpStartAddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_debug_info_free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>restore_thread</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reason</name> <operator>==</operator> <name>R_DEBUG_REASON_EXIT_TID</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugInfo</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_debug_native_info</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>thread</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PTHREAD_ITEM</name></type> <name>item</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>thread</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"(%d) Finished thread %d Exit code %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>dwExitCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_debug_info_free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name> <operator>!=</operator> <name>orig_tid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>restore_thread</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reason</name> <operator>==</operator> <name>R_DEBUG_REASON_DEAD</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugInfo</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_debug_native_info</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>thread</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PTHREAD_ITEM</name></type> <name>item</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>thread</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"(%d) Finished process with exit code %d\n"</literal></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>main_pid</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>dwExitCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_debug_info_free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reason</name> <operator>==</operator> <name>R_DEBUG_REASON_USERSUSP</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name> <operator>!=</operator> <name>orig_tid</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugInfo</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_debug_native_info</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>thread</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PTHREAD_ITEM</name></type> <name>item</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>thread</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"(%d) Created DebugBreak thread %d (start @ %p)\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>lpStartAddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_debug_info_free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>break_tid</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>restore_thread</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reason</name> <operator>==</operator> <name>R_DEBUG_REASON_BREAKPOINT</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name> <operator>==</operator> <name><name>rio</name><operator>-&gt;</operator><name>break_tid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>break_tid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <name>R_DEBUG_REASON_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>restore_thread</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>restore_thread</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>w32_select</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>orig_tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <name>R_DEBUG_REASON_DEAD</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_io_system</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"pid %d"</literal></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name> <operator>!=</operator> <name>orig_tid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <name>R_DEBUG_REASON_UNKNOWN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>tid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>reason</name></expr>;</expr_stmt>
<return>return <expr><name>reason</name></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WAIT_ON_ALL_CHILDREN</name></expr></argument>)</argument_list></call></expr></cpp:elif> 
<function><type><specifier>static</specifier> <name>RDebugReasonType</name></type> <name>r_debug_native_wait</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugReasonType</name></type> <name>reason</name> <init>= <expr><name>R_DEBUG_REASON_UNKNOWN</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ERROR: r_debug_native_wait called with pid -1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_DEBUG_REASON_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>reason</name> <operator>=</operator> <call><name>linux_dbg_wait</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reason</name> <operator>==</operator> <name>R_DEBUG_REASON_EXIT_TID</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugInfo</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_debug_native_info</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"(%d) Finished thread %d Exit code\n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_debug_info_free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>reason</name></expr>;</expr_stmt>
<return>return <expr><name>reason</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<function><type><specifier>static</specifier> <name>RDebugReasonType</name></type> <name>r_debug_native_wait</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugReasonType</name></type> <name>reason</name> <init>= <expr><name>R_DEBUG_REASON_UNKNOWN</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ERROR: r_debug_native_wait called with pid -1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_DEBUG_REASON_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <call><name>xnu_wait</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reason</name> <operator>==</operator> <name>R_DEBUG_REASON_MACH_RCV_INTERRUPTED</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>reason</name> <operator>=</operator> <ternary><condition><expr><call><name>xnu_stop</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name>R_DEBUG_REASON_USERSUSP</name></expr>
</then><else>: <expr><name>R_DEBUG_REASON_UNKNOWN</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block> while <condition>(<expr><name>true</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WAIT_ON_ALL_CHILDREN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>waitpid</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>WAITPID_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>waitpid</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <name>R_DEBUG_REASON_TRAP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"waitpid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_DEBUG_REASON_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WAIT_ON_ALL_CHILDREN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>pid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <name>R_DEBUG_REASON_NEW_PID</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"switching to pid %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_debug_select</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PT_GETEVENTMSG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <call><name>linux_ptrace_event</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<if_stmt><if>if <condition>(<expr><name>reason</name> <operator>==</operator> <name>R_DEBUG_REASON_ERROR</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>reason</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__FreeBSD__</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>reason</name> <operator>==</operator> <name>R_DEBUG_REASON_TRAP</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>reason</name> <operator>==</operator> <name>R_DEBUG_REASON_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>WIFEXITED</name> <argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"child exited with status %d\n"</literal></expr></argument>, <argument><expr><call><name>WEXITSTATUS</name> <argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <name>R_DEBUG_REASON_DEAD</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>WIFSIGNALED</name> <argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"child received signal %d\n"</literal></expr></argument>, <argument><expr><call><name>WTERMSIG</name> <argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <name>R_DEBUG_REASON_SIGNAL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>WIFSTOPPED</name> <argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>WSTOPSIG</name> <argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SIGTRAP</name> <operator>&amp;&amp;</operator>
<call><name>WSTOPSIG</name> <argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SIGSTOP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Child stopped with signal %d\n"</literal></expr></argument>, <argument><expr><call><name>WSTOPSIG</name> <argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__OpenBSD__</name> <operator>||</operator> <name>__NetBSD__</name></expr></cpp:if>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <name>R_DEBUG_REASON_BREAKPOINT</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_debug_handle_signals</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_DEBUG_REASON_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIFCONTINUED</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>WIFCONTINUED</name> <argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"child continued...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <name>R_DEBUG_REASON_NONE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"EEK DEAD DEBUGEE!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <name>R_DEBUG_REASON_DEAD</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"STATUS=0?!?!?!?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <name>R_DEBUG_REASON_DEAD</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>pid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <name>R_DEBUG_REASON_NEW_PID</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"CRAP. returning from wait without knowing why...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reason</name> <operator>==</operator> <name>R_DEBUG_REASON_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: no idea what happened... wtf?!?!\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <name>R_DEBUG_REASON_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>tid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>reason</name></expr>;</expr_stmt>
<return>return <expr><name>reason</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAXPID</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXPID</name></cpp:macro> <cpp:value>99999</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_debug_native_tids</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"TODO: Threads: \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_debug_native_pids</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>pid</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>xnu_get_pid</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAXPID</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>xnu_get_pid</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<return>return <expr><call><name>w32_pid_list</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name></expr></cpp:elif>
<return>return <expr><call><name>linux_pid_list</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<return>return <expr><call><name>bsd_pid_list</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_debug_native_threads</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No list?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<return>return <expr><call><name>xnu_thread_list</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<return>return <expr><call><name>w32_thread_list</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name></expr></cpp:elif>
<return>return <expr><call><name>linux_thread_list</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>bsd_thread_list</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__sun</name> <operator>||</operator> <name>__NetBSD__</name> <operator>||</operator> <name>__KFBSD__</name> <operator>||</operator> <name>__OpenBSD__</name> <operator>||</operator> <name>__DragonFly__</name></expr></cpp:if>


<function><type><specifier>static</specifier> <name>int</name></type> <name>bsd_reg_read</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>showfpu</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>showfpu</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>-</operator><name>type</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_REG_TYPE_DRX</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name> <operator>||</operator> <name>__x86_64__</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__KFBSD__</name></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dbreg</name></name></type> <name>dbr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ptrace</name> <argument_list>(<argument><expr><name>PT_GETDBREGS</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><operator>&amp;</operator><name>dbr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>true</name></expr>;</return>
<break>break;</break>
<case>case <expr><name>R_REG_TYPE_FPU</name></expr>:</case>
<case>case <expr><name>R_REG_TYPE_MMX</name></expr>:</case>
<case>case <expr><name>R_REG_TYPE_XMM</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>R_REG_TYPE_SEG</name></expr>:</case>
<case>case <expr><name>R_REG_TYPE_FLG</name></expr>:</case>
<case>case <expr><name>R_REG_TYPE_GPR</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>R_DEBUG_REG_T</name></type> <name>regs</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>regs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__NetBSD__</name> <operator>||</operator> <name>__OpenBSD__</name></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ptrace</name> <argument_list>(<argument><expr><name>PTRACE_GETREGS</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><operator>&amp;</operator><name>regs</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__KFBSD__</name></expr></cpp:elif>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ptrace</name><argument_list>(<argument><expr><name>PT_GETREGS</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><operator>&amp;</operator><name>regs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:warning>#<cpp:directive>warning</cpp:directive> not implemented for this platform</cpp:warning>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regs</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 





<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_native_reg_read</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<return>return <expr><call><name>xnu_reg_read</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<return>return <expr><call><name>w32_reg_read</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name></expr></cpp:elif>
<return>return <expr><call><name>linux_reg_read</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__sun</name> <operator>||</operator> <name>__NetBSD__</name> <operator>||</operator> <name>__KFBSD__</name> <operator>||</operator> <name>__OpenBSD__</name> <operator>||</operator> <name>__DragonFly__</name></expr></cpp:elif>
<return>return <expr><call><name>bsd_reg_read</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:warning>#<cpp:directive>warning</cpp:directive> dbg-native not supported for this platform</cpp:warning>
<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_native_reg_write</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>R_REG_TYPE_DRX</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name> <operator>||</operator> <name>__x86_64__</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<return>return <expr><call><name>xnu_reg_write</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<return>return <expr><call><name>w32_reg_write</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name></expr></cpp:elif>
<return>return <expr><call><name>linux_reg_write</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>bsd_reg_write</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>R_REG_TYPE_GPR</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<return>return <expr><call><name>xnu_reg_write</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<return>return <expr><call><name>w32_reg_write</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name></expr></cpp:elif>
<return>return <expr><call><name>linux_reg_write</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__sun</name></expr></cpp:elif>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ptrace</name> <argument_list>(<argument><expr><name>PTRACE_SETREGS</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>R_DEBUG_REG_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof <argument_list>(<argument><expr><name>R_DEBUG_REG_T</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>R_DEBUG_REG_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>bsd_reg_write</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>R_REG_TYPE_FPU</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name></expr></cpp:if>
<return>return <expr><call><name>linux_reg_write</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:elif>
<return>return <expr><name>false</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<return>return <expr><name>false</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>bsd_reg_write</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt> 
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>io_perms_to_prot</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>io_perms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prot_perms</name> <init>= <expr><name>PROT_NONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>io_perms</name> <operator>&amp;</operator> <name>R_PERM_R</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prot_perms</name> <operator>|=</operator> <name>PROT_READ</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>io_perms</name> <operator>&amp;</operator> <name>R_PERM_W</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prot_perms</name> <operator>|=</operator> <name>PROT_WRITE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>io_perms</name> <operator>&amp;</operator> <name>R_PERM_X</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prot_perms</name> <operator>|=</operator> <name>PROT_EXEC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>prot_perms</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>linux_map_thp</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MADV_HUGEPAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>code</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>asm_list</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"x86"</literal></expr>, <expr><literal type="string">"x86.as"</literal></expr>,
<expr><literal type="string">"x64"</literal></expr>, <expr><literal type="string">"x86.as"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>thpsize</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">21</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name><operator>%</operator><name>thpsize</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"size not a power of huge pages size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>r_sys_thp_mode</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"transparent huge page mode is not in madvise mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name>r_syscall_get_num</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>syscall</name></name></expr></argument>, <argument><expr><literal type="string">"madvise"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"sc_madvise@syscall(%d);\n"</literal>
<literal type="string">"main@naked(0) { .rarg0 = sc_madvise(0x%08"</literal> <name>PFMT64x</name> <literal type="string">",%d, %d);break;\n"</literal>
<literal type="string">"}\n"</literal></expr></argument>,
<argument><expr><name>num</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>MADV_HUGEPAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_reset</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_setup</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_load</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_egg_compile</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot compile.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err_linux_map_thp</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_egg_assemble_asm</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>, <argument><expr><name>asm_list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_egg_assemble: invalid assembly\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err_linux_map_thp</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_egg_get_bin</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_reg_arena_push</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>tmpsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_buf_data</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_debug_execute</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmpsz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_reg_arena_pop</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>err_linux_map_thp</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RDebugMap</name><modifier>*</modifier></type> <name>linux_map_alloc</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>thp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugMap</name><modifier>*</modifier></type> <name>map</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>code</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sc_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>asm_list</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"x86"</literal></expr>, <expr><literal type="string">"x86.as"</literal></expr>,
<expr><literal type="string">"x64"</literal></expr>, <expr><literal type="string">"x86.as"</literal></expr>,
<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><literal type="string">"x86"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sc_name</name> <operator>=</operator> <literal type="string">"mmap2"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sc_name</name> <operator>=</operator> <literal type="string">"mmap"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>r_syscall_get_num</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>syscall</name></name></expr></argument>, <argument><expr><name>sc_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAP_ANONYMOUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_ANONYMOUS</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"sc_mmap@syscall(%d);\n"</literal>
<literal type="string">"main@naked(0) { .rarg0 = sc_mmap(0x%08"</literal><name>PFMT64x</name><literal type="string">",%d,%d,%d,%d,%d);break;\n"</literal>
<literal type="string">"}\n"</literal></expr></argument>,
<argument><expr><name>num</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>PROT_READ</name><operator>|</operator><name>PROT_WRITE</name><operator>|</operator><name>PROT_EXEC</name></expr></argument>, <argument><expr><name>MAP_ANONYMOUS</name> <operator>|</operator> <name>MAP_PRIVATE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_reset</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_setup</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_load</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_egg_compile</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot compile.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err_linux_map_alloc</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_egg_assemble_asm</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>, <argument><expr><name>asm_list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_egg_assemble: invalid assembly\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err_linux_map_alloc</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_egg_get_bin</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>map_addr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_reg_arena_push</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>tmpsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_buf_data</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>map_addr</name> <operator>=</operator> <call><name>r_debug_execute</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmpsz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_reg_arena_pop</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>map_addr</name> <operator>!=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>thp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>linux_map_thp</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>map_addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"map promotion to huge page failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_debug_map_sync</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>r_debug_map_get</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>map_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<label><name>err_linux_map_alloc</name>:</label>
<return>return <expr><name>map</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>linux_map_dealloc</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>code</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>asm_list</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"x86"</literal></expr>, <expr><literal type="string">"x86.as"</literal></expr>,
<expr><literal type="string">"x64"</literal></expr>, <expr><literal type="string">"x86.as"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name>r_syscall_get_num</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>syscall</name></name></expr></argument>, <argument><expr><literal type="string">"munmap"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"sc_munmap@syscall(%d);\n"</literal>
<literal type="string">"main@naked(0) { .rarg0 = sc_munmap(0x%08"</literal> <name>PFMT64x</name> <literal type="string">",%d);break;\n"</literal>
<literal type="string">"}\n"</literal></expr></argument>,
<argument><expr><name>num</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_reset</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_setup</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_load</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_egg_compile</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot compile.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err_linux_map_dealloc</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_egg_assemble_asm</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>, <argument><expr><name>asm_list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_egg_assemble: invalid assembly\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err_linux_map_dealloc</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_egg_get_bin</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_reg_arena_push</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>tmpsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_buf_data</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_debug_execute</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmpsz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_reg_arena_pop</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>err_linux_map_dealloc</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>RDebugMap</name><modifier>*</modifier></type> <name>r_debug_native_map_alloc</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>thp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>thp</name></expr>;</expr_stmt>
<return>return <expr><call><name>xnu_map_alloc</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>thp</name></expr>;</expr_stmt>
<return>return <expr><call><name>w32_map_alloc</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name></expr></cpp:elif>
<return>return <expr><call><name>linux_map_alloc</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>thp</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_native_map_dealloc</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<return>return <expr><call><name>xnu_map_dealloc</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<return>return <expr><call><name>w32_map_dealloc</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name></expr></cpp:elif>
<return>return <expr><call><name>linux_map_dealloc</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>__WINDOWS__</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>__APPLE__</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_map_free</name><parameter_list>(<parameter><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_debug_native_map_get</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__KFBSD__</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>unkstr</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>xnu_dbg_maps</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>r_w32_dbg_maps</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__sun</name></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"pmap %d &gt;&amp;2"</literal></expr></argument>, <argument><expr><name><name>ps</name><operator>.</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>system</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>perm</name></decl>, <decl><type ref="prev"/><name>unk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pos_c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>name</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>region</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>region2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>perms</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>region</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>region2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>region2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__OpenBSD__</name></expr></cpp:if>

<return>return <expr><call><name>bsd_native_sysctl_map</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__KFBSD__</name></expr></cpp:if>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>bsd_native_sysctl_map</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/proc/%d/map"</literal></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/proc/%d/maps"</literal></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>r_sandbox_fopen</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"Cannot open '%s'"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator><name>_map_free</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>feof</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>line_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>map_is_shared</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>map_start</name></decl>, <decl><type ref="prev"/><name>map_end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fgets</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line_len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>line_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>line_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>line_len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__KFBSD__</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%s %s %d %d 0x%s %3s %d %d"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>region</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>region2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ign</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ign</name></expr></argument>,
<argument><expr><name>unkstr</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ign</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ign</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: Unable to parse \"%s\"\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>pos_c</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos_c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>pos_c</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>sscanf</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%s %s %08"</literal><name>PFMT64x</name><literal type="string">" %*s %*s %[^\n]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>region</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: Unable to parse \"%s\"\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: problematic line: %s\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>pos_c</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>region</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pos_c</name></expr>)</condition> <block>{<block_content> 
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>region2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pos_c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>region2</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"unk%d"</literal></expr></argument>, <argument><expr><name>unk</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>perm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name><name>perms</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>perms</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_R</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case> <expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_W</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case> <expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_X</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case> <expr_stmt><expr><name>map_is_shared</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name>map_is_shared</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

<expr_stmt><expr><name>map_start</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>map_end</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>region2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>map_start</name> <operator>==</operator> <name>map_end</name> <operator>||</operator> <name>map_end</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: ignoring invalid map size: %s - %s\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>region</name></expr></argument>, <argument><expr><name>region2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>r_debug_map_new</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>map_start</name></expr></argument>, <argument><expr><name>map_end</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name></expr></cpp:if>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>shared</name></name> <operator>=</operator> <name>map_is_shared</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_debug_native_modules_get</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lastname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>must_delete</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>xnu_dbg_maps</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>r_w32_dbg_modules</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>list</name> <operator>=</operator> <call><name>r_debug_native_map_get</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>last</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_debug_map_free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>iter2</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>file</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>map</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>must_delete</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>file</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lastname</name> <operator>||</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>lastname</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>must_delete</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>must_delete</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lastname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lastname</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lastname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>last</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_debug_native_kill</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>w32_kill</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (thread) {

if (dbg-&gt;tid&gt;0 &amp;&amp; (ret = tgkill (dbg-&gt;pid, dbg-&gt;tid, sig))) {
if (ret != -1)
ret = true;
}
} else {
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>sig</name> <operator>==</operator> <name>SIGKILL</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_sandbox_kill</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>r_debug_desc_plugin_t</name></name></type> <name>r_debug_desc_plugin_native</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_native_init</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <name>r_debug_desc_plugin_native</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<return>return <expr><call><name>w32_init</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sync_drx_regs</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>drxt</name> <modifier>*</modifier></type><name>regs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num_regs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name> <operator>||</operator> <name>__x86_64__</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>num_regs</name> <operator>!=</operator> <name>NUM_DRX_REGISTERS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"drx: Unsupported number of registers for get_debug_regs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name></cpp:macro> <cpp:value>dbg-&gt;reg</cpp:value></cpp:define>
<expr_stmt><expr><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="string">"dr0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="string">"dr1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="string">"dr2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="string">"dr3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>regs</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="string">"dr6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regs</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="string">"dr7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"drx sync_drx_regs: Unsupported platform\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_drx_regs</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>drxt</name> <modifier>*</modifier></type><name>regs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num_regs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name> <operator>||</operator> <name>__x86_64__</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>num_regs</name> <operator>!=</operator> <name>NUM_DRX_REGISTERS</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"drx: Unsupported number of registers for get_debug_regs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name></cpp:macro> <cpp:value>dbg-&gt;reg</cpp:value></cpp:define>
<expr_stmt><expr><call><name>r_reg_setv</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="string">"dr0"</literal></expr></argument>, <argument><expr><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_reg_setv</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="string">"dr1"</literal></expr></argument>, <argument><expr><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_reg_setv</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="string">"dr2"</literal></expr></argument>, <argument><expr><name><name>regs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_reg_setv</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="string">"dr3"</literal></expr></argument>, <argument><expr><name><name>regs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_reg_setv</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="string">"dr6"</literal></expr></argument>, <argument><expr><name><name>regs</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_reg_setv</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="string">"dr7"</literal></expr></argument>, <argument><expr><name><name>regs</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"drx set_drx_regs: Unsupported platform\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_native_drx</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rwx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>api_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name> <operator>||</operator> <name>__x86_64__</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>drxt</name></type> <name><name>regs</name><index>[<expr><name>NUM_DRX_REGISTERS</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sync_drx_regs</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>regs</name></expr></argument>, <argument><expr><name>NUM_DRX_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>api_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DRX_API_LIST</name></expr>:</case>
<expr_stmt><expr><call><name>drx_list</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DRX_API_GET_BP</name></expr>:</case>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>drx_get_at</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DRX_API_REMOVE_BP</name></expr>:</case>

<expr_stmt><expr><call><name>drx_set</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DRX_API_SET_BP</name></expr>:</case>

<expr_stmt><expr><call><name>drx_set</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>rwx</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"drx: Unsupported api type in r_debug_native_drx\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>set_drx_regs</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>regs</name></expr></argument>, <argument><expr><name>NUM_DRX_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"drx: Unsupported platform\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__arm__</name> <operator>||</operator> <name>__arm64__</name> <operator>||</operator> <name>__aarch64__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/prctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_ARM_VFP</name></cpp:macro> <cpp:value>0x400</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_ARM_TLS</name></cpp:macro> <cpp:value>0x401</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_ARM_HW_BREAK</name></cpp:macro> <cpp:value>0x402</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_ARM_HW_WATCH</name></cpp:macro> <cpp:value>0x403</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_ARM_SYSTEM_CALL</name></cpp:macro> <cpp:value>0x404</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PTRACE_GETHBPREGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTRACE_GETHBPREGS</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTRACE_SETHBPREGS</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__arm__</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ll_arm32_hwbp_set</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>byte_mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>size</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>enable</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>control</name> <init>= <expr><name>byte_mask</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal> <operator>|</operator> <name>type</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name>enable</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ptrace</name> <argument_list>(<argument><expr><name>PTRACE_SETHBPREGS</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ptrace</name> <argument_list>(<argument><expr><name>PTRACE_SETHBPREGS</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>control</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>arm32_hwbp_add</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RBreakpoint</name><modifier>*</modifier></type> <name>bp</name></decl></parameter>, <parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ll_arm32_hwbp_set</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <literal type="number">2</literal> <operator>|</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>arm32_hwbp_del</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return> 
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>ll_arm32_hwbp_set</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>arm32_hwbp_add</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RBreakpoint</name><modifier>*</modifier></type> <name>bp</name></decl></parameter>, <parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>arm32_hwbp_del</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__arm64__</name> <operator>||</operator> <name>__aarch64__</name></expr></cpp:if>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>ll_arm64_hwbp_set</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>_addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wp</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>_addr</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr</name> <operator>%</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>byte_mask</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>size</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>enable</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>control</name> <init>= <expr><name>byte_mask</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal> <operator>|</operator> <name>type</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name>enable</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>user_hwdebug_state</name></name></type> <name>dreg_state</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>iov</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <operator>&amp;</operator><name>dreg_state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dreg_state</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ptrace</name> <argument_list>(<argument><expr><name>PTRACE_GETREGSET</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>NT_ARM_HW_WATCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iov</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dreg_state</name></expr></argument>, <argument><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dreg_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dreg_state</name><operator>.</operator><name>dbg_regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>addr</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name>addr</name> <operator>-</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dreg_state</name><operator>.</operator><name>dbg_regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ctrl</name> <operator>=</operator> <name>control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <operator>&amp;</operator><name>dreg_state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <call><name>r_offsetof</name> <argument_list>(<argument><expr>struct <name>user_hwdebug_state</name></expr></argument>, <argument><expr><name>dbg_regs</name></expr></argument>)</argument_list></call> <operator>+</operator>
<sizeof>sizeof <argument_list>(<argument><expr><name><name>dreg_state</name><operator>.</operator><name>dbg_regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ptrace</name> <argument_list>(<argument><expr><name>PTRACE_SETREGSET</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>NT_ARM_HW_WATCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iov</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EIO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ptrace(PTRACE_SETREGSET, NT_ARM_HW_WATCH) not supported on this hardware: %s\n"</literal></expr></argument>,
<argument><expr><call><name>strerror</name> <argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ptrace(PTRACE_SETREGSET, NT_ARM_HW_WATCH) failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name> <argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ll_arm64_hwbp_del</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>_addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wp</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name><name>struct</name> <name>user_hwdebug_state</name></name></type> <name>dreg_state</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>iov</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <operator>&amp;</operator><name>dreg_state</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <call><name>r_offsetof</name> <argument_list>(<argument><expr>struct <name>user_hwdebug_state</name></expr></argument>, <argument><expr><name>dbg_regs</name></expr></argument>)</argument_list></call> <operator>+</operator>
<sizeof>sizeof <argument_list>(<argument><expr><name><name>dreg_state</name><operator>.</operator><name>dbg_regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ptrace</name> <argument_list>(<argument><expr><name>PTRACE_SETREGSET</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>NT_ARM_HW_WATCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iov</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EIO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ptrace(PTRACE_SETREGSET, NT_ARM_HW_WATCH) not supported on this hardware: %s\n"</literal></expr></argument>,
<argument><expr><call><name>strerror</name> <argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ptrace(PTRACE_SETREGSET, NT_ARM_HW_WATCH) failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name> <argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>arm64_hwbp_add</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RBreakpoint</name><modifier>*</modifier></type> <name>bp</name></decl></parameter>, <parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ll_arm64_hwbp_set</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <literal type="number">2</literal> <operator>|</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>arm64_hwbp_del</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ll_arm64_hwbp_del</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <literal type="number">2</literal> <operator>|</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 







<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_native_bp</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name> <init>= <expr><name><name>bp</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>hw</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><name>__i386__</name> <operator>||</operator> <name>__x86_64__</name></expr></condition></ternary></expr></cpp:if>
<return>return <expr><ternary><condition><expr><name>set</name></expr>
?</condition><then> <expr><call><name>drx_add</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>drx_del</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><ternary><condition><expr><name>__arm64__</name> <operator>||</operator> <name>__aarch64__</name></expr></condition></ternary></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><name>__linux__</name></expr></condition></ternary></expr></cpp:if>
<return>return <expr><ternary><condition><expr><name>set</name></expr>
?</condition><then> <expr><call><name>arm64_hwbp_add</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>arm64_hwbp_del</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><ternary><condition><expr><name>__arm__</name></expr></condition></ternary></expr></cpp:elif>
<return>return <expr><ternary><condition><expr><name>set</name></expr>
?</condition><then> <expr><call><name>arm32_hwbp_add</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>arm32_hwbp_del</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getMaxFiles</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rlimit</name></name></type> <name>limit</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getrlimit</name> <argument_list>(<argument><expr><name>RLIMIT_NOFILE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1024</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>limit</name><operator>.</operator><name>rlim_cur</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>xnu_desc_list</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_IPHONE</name> <operator>||</operator> <name>__POWERPC__</name></expr></cpp:if>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xwr2rwx</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x&amp;1)&lt;&lt;2) | (x&amp;2) | ((x&amp;4)&gt;&gt;2)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>RDebugDesc</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vnode_fdinfowithpath</name></name></type> <name>vi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nb</name></decl>, <decl><type ref="prev"/><name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxfd</name> <init>= <expr><call><name>getMaxFiles</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>maxfd</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>proc_pidfdinfo</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>PROC_PIDFDVNODEPATHINFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vi</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>vi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nb</name><operator>&lt;</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nb</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>vi</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"too few bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>r_debug_desc_new</name> <argument_list>(<argument><expr><name>i</name></expr></argument>,
<argument><expr><name><name>vi</name><operator>.</operator><name>pvip</name><operator>.</operator><name>vip_path</name></name></expr></argument>,
<argument><expr><call><name>xwr2rwx</name><argument_list>(<argument><expr><name><name>vi</name><operator>.</operator><name>pfi</name><operator>.</operator><name>fi_openflags</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_debug_desc_native_list</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<return>return <expr><call><name>xnu_desc_list</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>
<return>return <expr><call><name>w32_desc_list</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__KFBSD__</name></expr></cpp:elif>
<return>return <expr><call><name>bsd_desc_list</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name></expr></cpp:elif>
<return>return <expr><call><name>linux_desc_list</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:warning>#<cpp:directive>warning</cpp:directive> list filedescriptors not supported for this platform</cpp:warning>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_native_map_protect</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>
<return>return <expr><call><name>w32_map_protect</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:elif>
<return>return <expr><call><name>xnu_map_protect</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name></expr></cpp:elif>
<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>code</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>r_syscall_get_num</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>syscall</name></name></expr></argument>, <argument><expr><literal type="string">"mprotect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"sc@syscall(%d);\n"</literal>
<literal type="string">"main@global(0) { sc(%p,%d,%d);\n"</literal>
<literal type="string">":int3\n"</literal>
<literal type="string">"}\n"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>io_perms_to_prot</name> <argument_list>(<argument><expr><name>perms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_egg_reset</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_setup</name><argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_load</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_egg_compile</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot compile.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_egg_assemble</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_egg_assemble: invalid assembly\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_egg_get_bin</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_reg_arena_push</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>tmpsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_buf_data</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_debug_execute</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmpsz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_reg_arena_pop</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_desc_native_open</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int r_debug_setup_ownership (int fd, RDebug *dbg) {
RDebugInfo *info = r_debug_info (dbg, NULL);

if (!info) {
eprintf ("Error while getting debug info.\n");
return -1;
}
fchown (fd, info-&gt;uid, info-&gt;gid);
r_debug_info_free (info);
return 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_debug_gcore</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<return>return <expr><call><name>xnu_generate_corefile</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>__x86_64__</name> <operator>||</operator> <name>__i386__</name> <operator>||</operator> <name>__arm__</name> <operator>||</operator> <name>__arm64__</name><operator>)</operator></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ANDROID__</name></expr></cpp:if>
<return>return <expr><name>false</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>linux_generate_corefile</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>r_debug_desc_plugin_t</name></name></type> <name>r_debug_desc_plugin_native</name> <init>= <expr><block>{
<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>r_debug_desc_native_open</name></expr>,
<expr><operator>.</operator><name>list</name> <operator>=</operator> <name>r_debug_desc_native_list</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDebugPlugin</name></type> <name>r_debug_plugin_native</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"native"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name></expr></cpp:if>
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <name>R_SYS_BITS_32</name></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"x86"</literal></expr>,
<expr><operator>.</operator><name>canstep</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__x86_64__</name></expr></cpp:elif>
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <name>R_SYS_BITS_32</name> <operator>|</operator> <name>R_SYS_BITS_64</name></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"x86"</literal></expr>,
<expr><operator>.</operator><name>canstep</name> <operator>=</operator> <literal type="number">1</literal></expr>, 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__aarch64__</name> <operator>||</operator> <name>__arm64__</name></expr></cpp:elif>
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <name>R_SYS_BITS_16</name> <operator>|</operator> <name>R_SYS_BITS_32</name> <operator>|</operator> <name>R_SYS_BITS_64</name></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"arm"</literal></expr>,
<expr><operator>.</operator><name>canstep</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm__</name></expr></cpp:elif>
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <name>R_SYS_BITS_16</name> <operator>|</operator> <name>R_SYS_BITS_32</name> <operator>|</operator> <name>R_SYS_BITS_64</name></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"arm"</literal></expr>,
<expr><operator>.</operator><name>canstep</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__mips__</name></expr></cpp:elif>
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <name>R_SYS_BITS_32</name> <operator>|</operator> <name>R_SYS_BITS_64</name></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"mips"</literal></expr>,
<expr><operator>.</operator><name>canstep</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__powerpc__</name></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__powerpc64__</name></expr></cpp:if>
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <name>R_SYS_BITS_32</name> <operator>|</operator> <name>R_SYS_BITS_64</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <name>R_SYS_BITS_32</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"ppc"</literal></expr>,
<expr><operator>.</operator><name>canstep</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>canstep</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>"Unsupported architecture"</cpp:literal><name>)</name></cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:warning>#<cpp:directive>warning</cpp:directive> Unsupported architecture</cpp:warning>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_native_init</name></expr>,
<expr><operator>.</operator><name>step</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_native_step</name></expr>,
<expr><operator>.</operator><name>cont</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_native_continue</name></expr>,
<expr><operator>.</operator><name>stop</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_native_stop</name></expr>,
<expr><operator>.</operator><name>contsc</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_native_continue_syscall</name></expr>,
<expr><operator>.</operator><name>attach</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_native_attach</name></expr>,
<expr><operator>.</operator><name>detach</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_native_detach</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name> <operator>||</operator> <name>__linux__</name></expr></cpp:if>
<expr><operator>.</operator><name>select</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_native_select</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>.</operator><name>pids</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_native_pids</name></expr>,
<expr><operator>.</operator><name>tids</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_native_tids</name></expr>,
<expr><operator>.</operator><name>threads</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_native_threads</name></expr>,
<expr><operator>.</operator><name>wait</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_native_wait</name></expr>,
<expr><operator>.</operator><name>kill</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_native_kill</name></expr>,
<expr><operator>.</operator><name>frames</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_native_frames</name></expr>, 
<expr><operator>.</operator><name>reg_profile</name> <operator>=</operator> <name>r_debug_native_reg_profile</name></expr>,
<expr><operator>.</operator><name>reg_read</name> <operator>=</operator> <name>r_debug_native_reg_read</name></expr>,
<expr><operator>.</operator><name>info</name> <operator>=</operator> <name>r_debug_native_info</name></expr>,
<expr><operator>.</operator><name>reg_write</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>r_debug_native_reg_write</name></expr>,
<expr><operator>.</operator><name>map_alloc</name> <operator>=</operator> <name>r_debug_native_map_alloc</name></expr>,
<expr><operator>.</operator><name>map_dealloc</name> <operator>=</operator> <name>r_debug_native_map_dealloc</name></expr>,
<expr><operator>.</operator><name>map_get</name> <operator>=</operator> <name>r_debug_native_map_get</name></expr>,
<expr><operator>.</operator><name>modules_get</name> <operator>=</operator> <name>r_debug_native_modules_get</name></expr>,
<expr><operator>.</operator><name>map_protect</name> <operator>=</operator> <name>r_debug_native_map_protect</name></expr>,
<expr><operator>.</operator><name>breakpoint</name> <operator>=</operator> <name>r_debug_native_bp</name></expr>,
<expr><operator>.</operator><name>drx</name> <operator>=</operator> <name>r_debug_native_drx</name></expr>,
<expr><operator>.</operator><name>gcore</name> <operator>=</operator> <name>r_debug_gcore</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_DBG</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_plugin_native</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<decl_stmt><decl><type><name>RDebugPlugin</name></type> <name>r_debug_plugin_native</name> <init>= <expr><block>{
<expr><name>NULL</name></expr> 
}</block></expr></init></decl>;</decl_stmt></block_content></block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
