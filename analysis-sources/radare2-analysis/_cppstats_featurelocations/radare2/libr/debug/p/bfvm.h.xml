<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\debug\p\bfvm.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_R_BFVM_INCLUDE_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_R_BFVM_INCLUDE_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BFVM_SCREEN_ADDR</name></cpp:macro> <cpp:value>0x50000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BFVM_SCREEN_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BFVM_INPUT_ADDR</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BFVM_INPUT_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BFVM_DATA_ADDR</name></cpp:macro> <cpp:value>0xd00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BFVM_DATA_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BFVM_CODE_ADDR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BFVM_CODE_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <name>bfvm_cpu_t</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>eip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>esp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>trace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>breaked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>screen_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>screen_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>screen_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>input_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>input_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>input_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>circular</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RIOBind</name></type> <name>iob</name></decl>;</decl_stmt>
}</block></struct></type> <name>BfvmCPU</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>R_API</name> <name>BfvmCPU</name> <modifier>*</modifier></type><name>bfvm_new</name><parameter_list>(<parameter><decl><type><name>RIOBind</name> <modifier>*</modifier></type><name>iob</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>BfvmCPU</name> <modifier>*</modifier></type><name>bfvm_free</name><parameter_list>(<parameter><decl><type><name>BfvmCPU</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>int</name></type> <name>bfvm_step</name><parameter_list>(<parameter><decl><type><name>BfvmCPU</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>over</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
