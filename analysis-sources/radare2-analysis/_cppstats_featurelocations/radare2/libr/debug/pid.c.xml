<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\debug\pid.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_debug.h&gt;</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>RDebugPid</name> <modifier>*</modifier></type><name>r_debug_pid_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDebugPid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>runnable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RDebugPid</name> <modifier>*</modifier></type><name>r_debug_pid_free</name><parameter_list>(<parameter><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>pid</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_debug_pids</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>pids</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>pids</name></name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>int</name></type> <name>r_debug_pid_list</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>fmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>pids</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>pids</name></name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><call><name>R_MAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>pj_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>p</argument>)</argument_list></macro> <block>{<block_content>
<switch>switch <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_kb</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"current"</literal></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ki</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"ppid"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ppid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ki</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ki</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"uid"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"status"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" %c %d ppid:%d uid:%d %c %s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>pid</name></name></expr>?</condition><then> <expr><literal type="char">'*'</literal></expr></then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ppid</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><call><name>pj_string</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pj_free</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_debug_thread_list</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>fmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>threads</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>threads</name></name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>pj_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>p</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>r_debug_map_get</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>map</name> <operator>&amp;&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"(0x%"</literal> <name>PFMT64x</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fcn</name> <operator>=</operator> <call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">" in %s+0x%"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pc</name></name> <operator>-</operator> <name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_kb</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"current"</literal></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ki</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"status"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" %c %d %c %s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>pid</name></name></expr>?</condition><then> <expr><literal type="char">'*'</literal></expr></then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><call><name>pj_string</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pj_free</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>int</name></type> <name>r_debug_pid_parent</name><parameter_list>(<parameter><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
R_API int r_debug_pid_del(struct r_debug_t *dbg) {

return true;
}


R_API int r_debug_pid_add_thread(struct r_debug_t *dbg) {

return true;
}

R_API int r_debug_pid_del_thread(struct r_debug_t *dbg) {

return true;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>R_API</name> <name>int</name></type> <name>r_debug_pid_set_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_debug_t</name></name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name><name>struct</name> <name>r_debug_pid_t</name></name> <modifier>*</modifier></type><name>r_debug_pid_get_status</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_debug_t</name></name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
