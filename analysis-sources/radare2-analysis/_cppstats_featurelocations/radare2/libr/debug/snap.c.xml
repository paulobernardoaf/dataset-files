<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\debug\snap.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_debug.h&gt;</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>RDebugSnap</name> <modifier>*</modifier></type><name>r_debug_snap_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugSnap</name> <modifier>*</modifier></type><name>snap</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDebugSnap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>algobit</name> <init>= <expr><call><name>r_hash_name_to_bits</name> <argument_list>(<argument><expr><literal type="string">"sha256"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>snap</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>snap</name><operator>-&gt;</operator><name>history</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_debug_diff_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snap</name><operator>-&gt;</operator><name>hash_ctx</name></name> <operator>=</operator> <call><name>r_hash_new</name> <argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>algobit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>snap</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_debug_snap_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugSnap</name> <modifier>*</modifier></type><name>snap</name> <init>= <expr><operator>(</operator><name>RDebugSnap</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>snap</name><operator>-&gt;</operator><name>history</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>snap</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>snap</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>snap</name><operator>-&gt;</operator><name>hashes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>snap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_debug_snap_delete</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>snaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>snaps</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_debug_snap_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach_iter</name> <argument_list>(<argument>dbg-&gt;snaps</argument>, <argument>iter</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>snaps</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_debug_snap_list</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comment</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>comma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugSnap</name> <modifier>*</modifier></type><name>snap</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>dbg-&gt;snaps</argument>, <argument>iter</argument>, <argument>snap</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>comment</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>comma</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>n</name></name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">","</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>snap</name><operator>-&gt;</operator><name>comment</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>snap</name><operator>-&gt;</operator><name>comment</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>comment</name> <operator>=</operator> <name><name>snap</name><operator>-&gt;</operator><name>comment</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"{\"count\":%d,\"addr\":%"</literal><name>PFMT64d</name> <literal type="string">",\"size\":%d,\"history\":%d,\"comment\":\"%s\"}%s"</literal></expr></argument>,
<argument><expr><name>count</name></expr></argument>, <argument><expr><name><name>snap</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>snap</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>snap</name><operator>-&gt;</operator><name>history</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"dms 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>snap</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%d 0x%08"</literal><name>PFMT64x</name> <literal type="string">" - 0x%08"</literal><name>PFMT64x</name> <literal type="string">" history: %d size: %d -- %s\n"</literal></expr></argument>,
<argument><expr><name>count</name></expr></argument>, <argument><expr><name><name>snap</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>snap</name><operator>-&gt;</operator><name>addr_end</name></name></expr></argument>, <argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>snap</name><operator>-&gt;</operator><name>history</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>snap</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RDebugSnap</name> <modifier>*</modifier></type><name>r_debug_snap_get_map</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugSnap</name> <modifier>*</modifier></type><name>snap</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>&amp;&amp;</operator> <name>map</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>dbg-&gt;snaps</argument>, <argument>iter</argument>, <argument>snap</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>snap</name><operator>-&gt;</operator><name>addr</name></name> <operator>&lt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name> <operator>&lt;=</operator> <name><name>snap</name><operator>-&gt;</operator><name>addr_end</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>snap</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RDebugSnap</name> <modifier>*</modifier></type><name>r_debug_snap_get</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><call><name>r_debug_map_get</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>r_debug_snap_get_map</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_page_data_set</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RPageData</name> <modifier>*</modifier></type><name>page</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugSnapDiff</name> <modifier>*</modifier></type><name>diff</name> <init>= <expr><name><name>page</name><operator>-&gt;</operator><name>diff</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>diff</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>page</name><operator>-&gt;</operator><name>page_off</name></name> <operator>*</operator> <name>SNAP_PAGE_SIZE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>write_at</name></name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>SNAP_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>void</name></type> <name>r_debug_diff_set</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RDebugSnapDiff</name> <modifier>*</modifier></type><name>diff</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RPageData</name> <modifier>*</modifier></type><name>prev_page</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last_page</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugSnap</name> <modifier>*</modifier></type><name>snap</name> <init>= <expr><name><name>diff</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>cur_map</name> <init>= <expr><call><name>r_debug_map_get</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>snap</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugSnapDiff</name> <modifier>*</modifier></type><name>latest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>page_off</name></decl>;</decl_stmt>


<expr_stmt><expr><name>latest</name> <operator>=</operator> <call><name>r_debug_snap_map</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>cur_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>latest</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><expr><name>addr</name> <operator>=</operator> <name><name>snap</name><operator>-&gt;</operator><name>addr</name></name></expr>;</init> <condition><expr><name>addr</name> <operator>&lt;</operator> <name><name>snap</name><operator>-&gt;</operator><name>addr_end</name></name></expr>;</condition> <incr><expr><name>addr</name> <operator>+=</operator> <name>SNAP_PAGE_SIZE</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>page_off</name> <operator>=</operator> <operator>(</operator><name>addr</name> <operator>-</operator> <name><name>snap</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator> <operator>/</operator> <name>SNAP_PAGE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_page</name> <operator>=</operator> <name><name>diff</name><operator>-&gt;</operator><name>last_changes</name><index>[<expr><name>page_off</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>last_page</name> <operator>=</operator> <name><name>latest</name><operator>-&gt;</operator><name>last_changes</name><index>[<expr><name>page_off</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>prev_page</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>last_page</name><operator>-&gt;</operator><name>page_off</name></name> <operator>*</operator> <name>SNAP_PAGE_SIZE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>write_at</name></name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>snap</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>SNAP_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>addr</name> <operator>=</operator> <name><name>snap</name><operator>-&gt;</operator><name>addr</name></name></expr>;</init> <condition><expr><name>addr</name> <operator>&lt;</operator> <name><name>snap</name><operator>-&gt;</operator><name>addr_end</name></name></expr>;</condition> <incr><expr><name>addr</name> <operator>+=</operator> <name>SNAP_PAGE_SIZE</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>page_off</name> <operator>=</operator> <operator>(</operator><name>addr</name> <operator>-</operator> <name><name>snap</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator> <operator>/</operator> <name>SNAP_PAGE_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prev_page</name> <operator>=</operator> <name><name>diff</name><operator>-&gt;</operator><name>last_changes</name><index>[<expr><name>page_off</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_page_data_set</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>prev_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_list_pop</name> <argument_list>(<argument><expr><name><name>snap</name><operator>-&gt;</operator><name>history</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_debug_diff_free</name> <argument_list>(<argument><expr><name>latest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>void</name></type> <name>r_debug_diff_set_base</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RDebugSnap</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RPageData</name> <modifier>*</modifier></type><name>last_page</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>cur_map</name> <init>= <expr><call><name>r_debug_map_get</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDebugSnapDiff</name> <modifier>*</modifier></type><name>latest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>page_off</name></decl>;</decl_stmt>


<expr_stmt><expr><name>latest</name> <operator>=</operator> <call><name>r_debug_snap_map</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>cur_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>latest</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>addr</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>addr</name></name></expr>;</init> <condition><expr><name>addr</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>addr_end</name></name></expr>;</condition> <incr><expr><name>addr</name> <operator>+=</operator> <name>SNAP_PAGE_SIZE</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>page_off</name> <operator>=</operator> <operator>(</operator><name>addr</name> <operator>-</operator> <name><name>base</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator> <operator>/</operator> <name>SNAP_PAGE_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>last_page</name> <operator>=</operator> <name><name>latest</name><operator>-&gt;</operator><name>last_changes</name><index>[<expr><name>page_off</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>last_page</name><operator>-&gt;</operator><name>page_off</name></name> <operator>*</operator> <name>SNAP_PAGE_SIZE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>write_at</name></name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>SNAP_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>r_list_pop</name> <argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>history</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_debug_diff_free</name> <argument_list>(<argument><expr><name>latest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>int</name></type> <name>r_debug_snap_set</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RDebugSnap</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_debug_snap_set_idx</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugSnap</name> <modifier>*</modifier></type><name>snap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbg</name> <operator>||</operator> <name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>dbg-&gt;snaps</argument>, <argument>iter</argument>, <argument>snap</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_debug_snap_set</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>snap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void print_hash(ut8 *hash, int digest_size) {
int i = 0;
for (i = 0; i &lt; digest_size; i++) {
eprintf ("%02"PFMT32x, hash[i]);
}
eprintf ("\n");
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>R_API</name> <name>RDebugSnapDiff</name> <modifier>*</modifier></type><name>r_debug_snap_map</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbg</name> <operator>||</operator> <operator>!</operator><name>map</name> <operator>||</operator> <name><name>map</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid map size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>algobit</name> <init>= <expr><call><name>r_hash_name_to_bits</name> <argument_list>(<argument><expr><literal type="string">"sha256"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>page_num</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name>SNAP_PAGE_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>digest_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDebugSnap</name> <modifier>*</modifier></type><name>snap</name> <init>= <expr><call><name>r_debug_snap_get_map</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>snap</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>snap</name> <operator>=</operator> <call><name>r_debug_snap_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>snap</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <call><name>sdb_now</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snap</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snap</name><operator>-&gt;</operator><name>addr_end</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snap</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snap</name><operator>-&gt;</operator><name>page_num</name></name> <operator>=</operator> <name>page_num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snap</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snap</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>perm</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>snap</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>snap</name><operator>-&gt;</operator><name>hashes</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>ut8</name> <operator>*</operator></expr></argument>, <argument><expr><name>page_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>snap</name><operator>-&gt;</operator><name>hashes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>snap</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Reading %d byte(s) from 0x%08"</literal><name>PFMT64x</name> <literal type="string">"...\n"</literal></expr></argument>, <argument><expr><name><name>snap</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>snap</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>snap</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>snap</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>snap</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>clust_page</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>SNAP_PAGE_SIZE</name></expr></argument>, <argument><expr><name><name>snap</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>addr</name> <operator>=</operator> <name><name>snap</name><operator>-&gt;</operator><name>addr</name></name></expr>;</init> <condition><expr><name>addr</name> <operator>&lt;</operator> <name><name>snap</name><operator>-&gt;</operator><name>addr_end</name></name></expr>;</condition> <incr><expr><name>addr</name> <operator>+=</operator> <name>SNAP_PAGE_SIZE</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>page_off</name> <init>= <expr><operator>(</operator><name>addr</name> <operator>-</operator> <name><name>snap</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator> <operator>/</operator> <name>SNAP_PAGE_SIZE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>digest_size</name> <operator>=</operator> <call><name>r_hash_calculate</name> <argument_list>(<argument><expr><name><name>snap</name><operator>-&gt;</operator><name>hash_ctx</name></name></expr></argument>, <argument><expr><name>algobit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>snap</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>addr</name> <operator>-</operator> <name><name>snap</name><operator>-&gt;</operator><name>addr</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>clust_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>snap</name><operator>-&gt;</operator><name>hash_ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>digest_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snap</name><operator>-&gt;</operator><name>hashes</name><index>[<expr><name>page_off</name></expr>]</index></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>


</block_content>}</block></for>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>snaps</name></name></expr></argument>, <argument><expr><name>snap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>okay</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>


<return>return <expr><call><name>r_debug_diff_add</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>snap</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>snap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>okay</name>:</label>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_debug_snap_all</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_debug_map_sync</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>dbg-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>perms</name> <operator>||</operator> <operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>perms</name><operator>)</operator> <operator>==</operator> <name>perms</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_debug_snap_map</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_debug_snap</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><call><name>r_debug_map_get</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot find map at 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_debug_snap_map</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_debug_snap_comment</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugSnap</name> <modifier>*</modifier></type><name>snap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbg</name> <operator>||</operator> <name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>msg</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>msg</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>dbg-&gt;snaps</argument>, <argument>iter</argument>, <argument>snap</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>snap</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snap</name><operator>-&gt;</operator><name>comment</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_page_data_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RPageData</name> <modifier>*</modifier></type><name>page</name> <init>= <expr><operator>(</operator><name>RPageData</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>page</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_debug_diff_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugSnapDiff</name> <modifier>*</modifier></type><name>diff</name> <init>= <expr><operator>(</operator><name>RDebugSnapDiff</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>diff</name><operator>-&gt;</operator><name>pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>diff</name><operator>-&gt;</operator><name>last_changes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RDebugSnapDiff</name> <modifier>*</modifier></type><name>r_debug_diff_add</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RDebugSnap</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebugSnapDiff</name> <modifier>*</modifier></type><name>prev_diff</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new_diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPageData</name> <modifier>*</modifier></type><name>new_page</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last_page</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>digest_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>page_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>algobit</name> <init>= <expr><call><name>r_hash_name_to_bits</name> <argument_list>(<argument><expr><literal type="string">"sha256"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>clust_page</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>SNAP_PAGE_SIZE</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>new_diff</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDebugSnapDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_diff</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>new_diff</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_diff</name><operator>-&gt;</operator><name>pages</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_page_data_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_diff</name><operator>-&gt;</operator><name>last_changes</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>RPageData</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>page_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>history</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><call><name>r_list_tail</name> <argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>history</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev_diff</name> <operator>=</operator> <operator>(</operator><name>RDebugSnapDiff</name> <operator>*</operator><operator>)</operator> <name><name>tail</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>new_diff</name><operator>-&gt;</operator><name>last_changes</name></name></expr></argument>, <argument><expr><name><name>prev_diff</name><operator>-&gt;</operator><name>last_changes</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPageData</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>base</name><operator>-&gt;</operator><name>page_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>addr</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>addr</name></name></expr>;</init> <condition><expr><name>addr</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>addr_end</name></name></expr>;</condition> <incr><expr><name>addr</name> <operator>+=</operator> <name>SNAP_PAGE_SIZE</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>prev_hash</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>clust_page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>clust_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>digest_size</name> <operator>=</operator> <call><name>r_hash_calculate</name> <argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>hash_ctx</name></name></expr></argument>, <argument><expr><name>algobit</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>clust_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_hash</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>hash_ctx</name><operator>-&gt;</operator><name>digest</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>page_off</name> <operator>=</operator> <operator>(</operator><name>addr</name> <operator>-</operator> <name><name>base</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator> <operator>/</operator> <name>SNAP_PAGE_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_diff</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>last_page</name> <operator>=</operator> <name><name>prev_diff</name><operator>-&gt;</operator><name>last_changes</name><index>[<expr><name>page_off</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>prev_hash</name> <operator>=</operator> <name><name>last_page</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>prev_hash</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>hashes</name><index>[<expr><name>page_off</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>cur_hash</name></expr></argument>, <argument><expr><name>prev_hash</name></expr></argument>, <argument><expr><name>digest_size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>new_page</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RPageData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_page</name><operator>-&gt;</operator><name>diff</name></name> <operator>=</operator> <name>new_diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_page</name><operator>-&gt;</operator><name>page_off</name></name> <operator>=</operator> <name>page_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_page</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>new_page</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>cur_hash</name></expr></argument>, <argument><expr><name>digest_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_diff</name><operator>-&gt;</operator><name>last_changes</name><index>[<expr><name>page_off</name></expr>]</index></name> <operator>=</operator> <name>new_page</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>new_diff</name><operator>-&gt;</operator><name>pages</name></name></expr></argument>, <argument><expr><name>new_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>new_diff</name><operator>-&gt;</operator><name>pages</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
RPageData *page;
RListIter *iter;
eprintf ("saved: 0x%08"PFMT64x "(page: ", base-&gt;addr);
r_list_foreach (new_diff-&gt;pages, iter, page) {
eprintf ("%d ", page-&gt;page_off);
}
eprintf (")\n");
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>history</name></name></expr></argument>, <argument><expr><name>new_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new_diff</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_debug_diff_free</name> <argument_list>(<argument><expr><name>new_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>new_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
