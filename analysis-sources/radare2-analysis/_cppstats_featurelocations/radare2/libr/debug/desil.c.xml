<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\debug\desil.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_debug.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

ESIL conditionals can be used to detect when a specific address is
accessed, or a register. Those esil conditionals must be evaluated
every iteration to ensure the register values are updated. Think
in DebugESIL as software-watchpoints.

[read|write|exec]-[reg|mem] [expression]

de rw reg eax
de-*

<cpp:empty>#expression can be a number or a range (if .. is found)</cpp:empty>
<cpp:empty>#The &lt;=, &gt;=, ==, &lt;, &gt; comparisons are also supported</cpp:empty>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rwx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>
}</block></struct></type> <name>EsilBreak</name>;</typedef>


<decl_stmt><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>has_match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prestep</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>opc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>esil_watchpoints</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EWPS</name></cpp:macro> <cpp:value>esil_watchpoints</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESIL</name></cpp:macro> <cpp:value>dbg-&gt;anal-&gt;esil</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exprmatch</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name>a</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;=</operator> <name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name>b</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;=</operator> <name>a</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>a</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>has_match</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>esilbreak_check_pc</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>EsilBreak</name> <modifier>*</modifier></type><name>ew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>r_debug_reg_get</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>R_REG_NAME_PC</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>EWPS</argument>, <argument>iter</argument>, <argument>ew</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ew</name><operator>-&gt;</operator><name>rwx</name></name> <operator>&amp;</operator> <name>R_PERM_X</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>exprmatch</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name><name>ew</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>esilbreak_mem_read</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>EsilBreak</name> <modifier>*</modifier></type><name>ew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><name>Color_GREEN</name><literal type="string">"MEM READ 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>EWPS</argument>, <argument>iter</argument>, <argument>ew</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ew</name><operator>-&gt;</operator><name>rwx</name></name> <operator>&amp;</operator> <name>R_PERM_R</name> <operator>&amp;&amp;</operator> <name><name>ew</name><operator>-&gt;</operator><name>dev</name></name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>exprmatch</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>ew</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>esilbreak_mem_write</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>EsilBreak</name> <modifier>*</modifier></type><name>ew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><name>Color_RED</name><literal type="string">"MEM WRTE 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>EWPS</argument>, <argument>iter</argument>, <argument>ew</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ew</name><operator>-&gt;</operator><name>rwx</name></name> <operator>&amp;</operator> <name>R_PERM_W</name> <operator>&amp;&amp;</operator> <name><name>ew</name><operator>-&gt;</operator><name>dev</name></name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>exprmatch</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>ew</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>esilbreak_reg_read</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>regname</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>EsilBreak</name> <modifier>*</modifier></type><name>ew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>regname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>regname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><name>Color_YELLOW</name><literal type="string">"REG READ %s\n"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name>regname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>EWPS</argument>, <argument>iter</argument>, <argument>ew</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ew</name><operator>-&gt;</operator><name>rwx</name></name> <operator>&amp;</operator> <name>R_PERM_R</name> <operator>&amp;&amp;</operator> <name><name>ew</name><operator>-&gt;</operator><name>dev</name></name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name><name>ew</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exprtoken</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exprmatchreg</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>regname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURVAL</name></cpp:macro> <cpp:value>0){}r_str_trim (s);if (!strcmp(regname,s) &amp;&amp; regval</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ut64</name></type> <name>regval</name> <init>= <expr><call><name>r_debug_reg_get_err</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>regname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>exprtoken</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&gt;="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>CURVAL</name> <operator>&gt;=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>exprtoken</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>CURVAL</name> <operator>&lt;=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>exprtoken</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"=="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>CURVAL</name> <operator>&lt;=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>exprtoken</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>CURVAL</name> <operator>&lt;</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>exprtoken</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>CURVAL</name> <operator>&gt;</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>exprtoken</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>num</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>exprmatch</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>esilbreak_reg_write</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>regname</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>EsilBreak</name> <modifier>*</modifier></type><name>ew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>regname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>regname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><name>Color_MAGENTA</name><literal type="string">"REG WRTE %s 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name>regname</name></expr></argument>, <argument><expr><operator>*</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>EWPS</argument>, <argument>iter</argument>, <argument>ew</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ew</name><operator>-&gt;</operator><name>rwx</name></name> <operator>&amp;</operator> <name>R_PERM_W</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ew</name><operator>-&gt;</operator><name>dev</name></name> <operator>==</operator> <literal type="char">'r'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>exprmatchreg</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>regname</name></expr></argument>, <argument><expr><name><name>ew</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_debug_esil_prestep</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>prestep</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_debug_esil_stepi</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalOp</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>obuf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>dbg</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ESIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ESIL</name> <operator>=</operator> <call><name>r_anal_esil_new</name> <argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ESIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_debug_reg_sync</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>opc</name> <operator>=</operator> <call><name>r_debug_reg_get</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>R_REG_NAME_PC</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>opc</name></expr></argument>, <argument><expr><name>obuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>obuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>ESIL</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_mem_read</name></name> <operator>=</operator> <operator>&amp;</operator><name>esilbreak_mem_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ESIL</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_mem_write</name></name> <operator>=</operator> <operator>&amp;</operator><name>esilbreak_mem_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ESIL</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_reg_read</name></name> <operator>=</operator> <operator>&amp;</operator><name>esilbreak_reg_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ESIL</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_reg_write</name></name> <operator>=</operator> <operator>&amp;</operator><name>esilbreak_reg_write</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prestep</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>r_debug_step</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Step failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_debug_reg_sync</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><name>opc</name></expr></argument>, <argument><expr><name>obuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>obuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_ESIL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>esilbreak_check_pc</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>opc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"STOP AT 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>opc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_esil_set_pc</name> <argument_list>(<argument><expr><name>ESIL</name></expr></argument>, <argument><expr><name>opc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>opc</name></expr></argument>, <argument><expr><call><name>R_STRBUF_SAFEGET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_anal_esil_parse</name> <argument_list>(<argument><expr><name>ESIL</name></expr></argument>, <argument><expr><call><name>R_STRBUF_SAFEGET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_stack_free</name> <argument_list>(<argument><expr><name>ESIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prestep</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>has_match</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_debug_step</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Step failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_debug_reg_sync</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_debug_esil_step</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>has_match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_match</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"EsilBreak match at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>opc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><call><name>r_debug_esil_stepi</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>opc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_debug_esil_continue</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_debug_esil_step</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>UT32_MAX</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ewps_free</name><parameter_list>(<parameter><decl><type><name>EsilBreak</name> <modifier>*</modifier></type><name>ew</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ew</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_debug_esil_watch_empty</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>EWPS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_debug_esil_watch</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rwx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>EWPS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>EWPS</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>EWPS</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>EWPS</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator><name>ewps_free</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>EsilBreak</name> <modifier>*</modifier></type><name>ew</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>EsilBreak</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ew</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>EWPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>rwx</name></name> <operator>=</operator> <name>rwx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>dev</name></name> <operator>=</operator> <name>dev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>EWPS</name></expr></argument>, <argument><expr><name>ew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_debug_esil_watch_reset</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>EWPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>EWPS</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_debug_esil_watch_list</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>EsilBreak</name> <modifier>*</modifier></type><name>ew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>EWPS</argument>, <argument>iter</argument>, <argument>ew</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"de %s %c %s\n"</literal></expr></argument>, <argument><expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name><name>ew</name><operator>-&gt;</operator><name>rwx</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ew</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>, <argument><expr><name><name>ew</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>
</unit>
