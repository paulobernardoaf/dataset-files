<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\labels.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB</name></cpp:macro> <cpp:value>anal-&gt;sdb_fcns</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LABELS</name></cpp:macro> <cpp:value>sdb_fmt ("fcn.%"PFMT64x".labels", fcn-&gt;addr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRLABEL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sdb_fmt ("0x%"PFMT64x"/%s", x,y)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LABEL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sdb_fmt ("fcn.%"PFMT64x".label.%s", fcn-&gt;addr, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sdb_fmt ("fcn.%"PFMT64x".label.0x%"PFMT64x, fcn-&gt;addr,x)</cpp:value></cpp:define>


<function><type><name>R_API</name> <name>ut64</name></type> <name>r_anal_fcn_label_get</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>anal</name> <operator>&amp;&amp;</operator> <name>fcn</name><operator>)</operator></expr>?</condition><then> <expr><call><name>sdb_num_get</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>LABEL</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>UT64_MAX</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_anal_fcn_label_at</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>anal</name> <operator>&amp;&amp;</operator> <name>fcn</name><operator>)</operator></expr>?</condition><then> <expr><call><name>sdb_const_get</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>ADDR</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_fcn_label_set</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anal</name> <operator>||</operator> <operator>!</operator><name>fcn</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdb_add</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>ADDR</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sdb_num_add</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>LABEL</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_array_add</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>LABELS</name></expr></argument>, <argument><expr><call><name>ADDRLABEL</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>sdb_unset</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>ADDR</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot add\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_fcn_label_del</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anal</name> <operator>||</operator> <operator>!</operator><name>fcn</name> <operator>||</operator> <operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdb_array_remove</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>LABELS</name></expr></argument>, <argument><expr><call><name>ADDRLABEL</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_unset</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>LABEL</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_unset</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>ADDR</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_fcn_labels</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rad</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anal</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>LABELS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>sdb_aforeach</name> <argument_list>(<argument>cur</argument>, <argument>str</argument>)</argument_list></macro> <block>{<block_content>
<struct>struct <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block> <decl><name>loc</name></decl>;</struct>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>token</name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_fmt_tobin</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="string">"qz"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>rad</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"f.%s@0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>loc</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>loc</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"TODO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" %s [%s + %"</literal><name>PFMT64d</name><literal type="string">"]\n"</literal></expr></argument>,
<argument><expr><name><name>loc</name><operator>.</operator><name>addr</name></name></expr></argument>,
<argument><expr><name><name>loc</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>loc</name><operator>.</operator><name>addr</name></name> <operator>-</operator> <name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>loc</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>token</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_fmt_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>, <argument><expr><literal type="string">"qz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_aforeach_next</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>anal-&gt;fcns</argument>, <argument>iter</argument>, <argument>f</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_fcn_labels</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>rad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
