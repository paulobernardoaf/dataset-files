<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\anal.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_list.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>R_LIB_VERSION</name><argument_list>(<argument><expr><name>r_anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RAnalPlugin</name> <modifier>*</modifier></type><name><name>anal_static_plugins</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>R_ANAL_STATIC_PLUGINS</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_set_limits</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>limit</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>limit</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_unset_limits</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>meta_unset_for</name><parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>RSpaces</name> <operator>*</operator><operator>)</operator><name><name>ev</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>container_of</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RAnal</name></expr></argument>, <argument><expr><name>meta_spaces</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSpaceEvent</name> <modifier>*</modifier></type><name>se</name> <init>= <expr><operator>(</operator><name>RSpaceEvent</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_meta_space_unset_for</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>se</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>unset</name><operator>.</operator><name>space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>meta_count_for</name><parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>RSpaces</name> <operator>*</operator><operator>)</operator><name><name>ev</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>container_of</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RAnal</name></expr></argument>, <argument><expr><name>meta_spaces</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSpaceEvent</name> <modifier>*</modifier></type><name>se</name> <init>= <expr><operator>(</operator><name>RSpaceEvent</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <call><name>r_meta_space_count_for</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>se</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>count</name><operator>.</operator><name>space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>zign_unset_for</name><parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>RSpaces</name> <operator>*</operator><operator>)</operator><name><name>ev</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>container_of</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RAnal</name></expr></argument>, <argument><expr><name>zign_spaces</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSpaceEvent</name> <modifier>*</modifier></type><name>se</name> <init>= <expr><operator>(</operator><name>RSpaceEvent</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_sign_space_unset_for</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>se</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>unset</name><operator>.</operator><name>space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>zign_count_for</name><parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>RSpaces</name> <operator>*</operator><operator>)</operator><name><name>ev</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>container_of</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RAnal</name></expr></argument>, <argument><expr><name>zign_spaces</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSpaceEvent</name> <modifier>*</modifier></type><name>se</name> <init>= <expr><operator>(</operator><name>RSpaceEvent</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <call><name>r_sign_space_count_for</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>se</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>count</name><operator>.</operator><name>space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>zign_rename_for</name><parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>RSpaces</name> <operator>*</operator><operator>)</operator><name><name>ev</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>container_of</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RAnal</name></expr></argument>, <argument><expr><name>zign_spaces</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSpaceEvent</name> <modifier>*</modifier></type><name>se</name> <init>= <expr><operator>(</operator><name>RSpaceEvent</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_sign_space_rename_for</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>se</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>rename</name><operator>.</operator><name>space</name></name></expr></argument>,
<argument><expr><name><name>se</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>rename</name><operator>.</operator><name>oldname</name></name></expr></argument>, <argument><expr><name><name>se</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>rename</name><operator>.</operator><name>newname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>r_anal_hint_storage_init</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>r_anal_hint_storage_fini</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>R_API</name> <name>RAnal</name> <modifier>*</modifier></type><name>r_anal_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anal</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_constpool_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>anal</name><operator>-&gt;</operator><name>constpool</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>bb_tree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>ht_addr_fun</name></name> <operator>=</operator> <call><name>ht_up_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>ht_name_fun</name></name> <operator>=</operator> <call><name>ht_pp_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>R_SYS_OS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>esil_goto_limit</name></name> <operator>=</operator> <name>R_ANAL_ESIL_GOTO_LIMIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>nopskip</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>hpskip</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>gp</name></name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb</name></name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>cpp_abi</name></name> <operator>=</operator> <name>R_ANAL_CPP_ABI_ITANIUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>noncode</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_spaces_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>anal</name><operator>-&gt;</operator><name>meta_spaces</name></name></expr></argument>, <argument><expr><literal type="string">"CS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_event_hook</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>meta_spaces</name><operator>.</operator><name>event</name></name></expr></argument>, <argument><expr><name>R_SPACE_EVENT_UNSET</name></expr></argument>, <argument><expr><name>meta_unset_for</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_event_hook</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>meta_spaces</name><operator>.</operator><name>event</name></name></expr></argument>, <argument><expr><name>R_SPACE_EVENT_COUNT</name></expr></argument>, <argument><expr><name>meta_count_for</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_spaces_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>anal</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>, <argument><expr><literal type="string">"zs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_event_hook</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>zign_spaces</name><operator>.</operator><name>event</name></name></expr></argument>, <argument><expr><name>R_SPACE_EVENT_UNSET</name></expr></argument>, <argument><expr><name>zign_unset_for</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_event_hook</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>zign_spaces</name><operator>.</operator><name>event</name></name></expr></argument>, <argument><expr><name>R_SPACE_EVENT_COUNT</name></expr></argument>, <argument><expr><name>zign_count_for</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_event_hook</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>zign_spaces</name><operator>.</operator><name>event</name></name></expr></argument>, <argument><expr><name>R_SPACE_EVENT_RENAME</name></expr></argument>, <argument><expr><name>zign_rename_for</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_fcns</name></name> <operator>=</operator> <call><name>sdb_ns</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><literal type="string">"fcns"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_meta</name></name> <operator>=</operator> <call><name>sdb_ns</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><literal type="string">"meta"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_hint_storage_init</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name> <operator>=</operator> <call><name>sdb_ns</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><literal type="string">"types"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_fmts</name></name> <operator>=</operator> <call><name>sdb_ns</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><literal type="string">"spec"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_cc</name></name> <operator>=</operator> <call><name>sdb_ns</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><literal type="string">"cc"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_zigns</name></name> <operator>=</operator> <call><name>sdb_ns</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><literal type="string">"zigns"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes</name></name> <operator>=</operator> <call><name>sdb_ns</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><literal type="string">"classes"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name> <operator>=</operator> <call><name>sdb_ns</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes</name></name></expr></argument>, <argument><expr><literal type="string">"attrs"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>zign_path</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <operator>=</operator> <operator>(</operator><name>PrintfCallback</name><operator>)</operator> <name>printf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_anal_pin_init</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_anal_xrefs_init</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>diff_thbb</name></name> <operator>=</operator> <name>R_ANAL_THRESHOLDBB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>diff_thfcn</name></name> <operator>=</operator> <name>R_ANAL_THRESHOLDFCN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>syscall</name></name> <operator>=</operator> <call><name>r_syscall_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_io_bind_init</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>iob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_flag_bind_init</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>flb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>last_disasm_reg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>lineswidth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>fcns</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_anal_function_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <call><name>r_anal_ref_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>leaddrs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_set_bits</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>plugins</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>r_anal_plugin_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>plugins</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>anal_static_plugins</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_add</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>anal_static_plugins</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>anal</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_plugin_free</name> <parameter_list>(<parameter><decl><type><name>RAnalPlugin</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>fini</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>fini</name></name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>__block_free_rb</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>R_API</name> <name>RAnal</name> <modifier>*</modifier></type><name>r_anal_free</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_up_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>ht_addr_fun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_pp_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>ht_name_fun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_u_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>visited</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_hint_storage_fini</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>os</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>zign_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>plugins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_rbtree_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>bb_tree</name></name></expr></argument>, <argument><expr><name>__block_free_rb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_spaces_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>meta_spaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_spaces_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_pin_fini</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_syscall_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>syscall</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_reg_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_op_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>queued</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_up_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>dict_refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_up_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>dict_xrefs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>leaddrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_esil_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>esil</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>last_disasm_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_constpool_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>constpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_set_user_ptr</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_add</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalPlugin</name> <modifier>*</modifier></type><name>foo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>foo</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>foo</name><operator>-&gt;</operator><name>init</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>plugins</name></name></expr></argument>, <argument><expr><name>foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_use</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalPlugin</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>anal</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>change</name> <init>= <expr><name><name>anal</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>anal-&gt;plugins</argument>, <argument>it</argument>, <argument>h</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>name</name></name> <operator>||</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (anal-&gt;cur &amp;&amp; anal-&gt;cur == h) {
return true;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_set_reg_profile</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>change</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_set_fcnsign</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_anal_get_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>anal</name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>get_reg_profile</name></name><operator>)</operator></expr>
?</condition><then> <expr><call><name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>get_reg_profile</name></name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_set_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>anal</name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>set_reg_profile</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>set_reg_profile</name></name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_anal_get_reg_profile</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_set_fcnsign</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirPrefix</name> <init>= <expr><call><name>r_sys_prefix</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arch</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>anal</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>arch</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>arch</name></name></expr> </then><else>: <expr><name>R_SYS_ARCH</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><call><name>R_JOIN_3_PATHS</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>R2_SDB_FCNSIGN</name></expr></argument>, <argument><expr><literal type="string">"%s.sdb"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dirPrefix</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><call><name>R_JOIN_3_PATHS</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>R2_SDB_FCNSIGN</name></expr></argument>, <argument><expr><literal type="string">"%s-%s-%d.sdb"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dirPrefix</name></expr></argument>,
<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><name>arch</name></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_close</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_fcnsign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_fcnsign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_fcnsign</name></name> <operator>=</operator> <call><name>sdb_new</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_ns_set</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><literal type="string">"fcnsign"</literal></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_fcnsign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>anal</name><operator>-&gt;</operator><name>sdb_fcnsign</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_anal_get_fcnsign</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sdb_const_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_fcnsign</name></name></expr></argument>, <argument><expr><name>sym</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_set_triplet</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>os</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>os</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>os</name> <operator>=</operator> <name>R_SYS_OS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arch</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>arch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arch</name> <operator>=</operator> <ternary><condition><expr><name><name>anal</name><operator>-&gt;</operator><name>cur</name></name></expr>?</condition><then> <expr><name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>arch</name></name></expr></then><else>: <expr><name>R_SYS_ARCH</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>os</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_set_bits</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>r_anal_use</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>sdb_concat_by_path</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>sdb_new</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_merge</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_close</name> <argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_set_os</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>os</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>types</name> <init>= <expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir_prefix</name> <init>= <expr><call><name>r_sys_prefix</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbpath</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><call><name>R_JOIN_3_PATHS</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>R2_SDB_FCNSIGN</name></expr></argument>, <argument><expr><literal type="string">"types-%s.sdb"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>dir_prefix</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>dbpath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_concat_by_path</name> <argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>dbpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_anal_set_triplet</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_set_bits</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>bits</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<case>case <expr><literal type="number">27</literal></expr>:</case>
<case>case <expr><literal type="number">32</literal></expr>:</case>
<case>case <expr><literal type="number">64</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <name>bits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_set_fcnsign</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_set_reg_profile</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_set_cpu</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cpu</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name> <operator>=</operator> <ternary><condition><expr><name>cpu</name></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>r_anal_archinfo</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>R_ANAL_ARCHINFO_ALIGN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>pcalign</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_set_big_endian</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bigend</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name> <operator>=</operator> <name>bigend</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>big_endian</name></name> <operator>=</operator> <name>bigend</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_anal_mask</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oplen</name></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>anal_mask</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>anal_mask</name></name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>op</name> <operator>=</operator> <call><name>r_anal_op_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_op_free</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oplen</name> <operator>=</operator> <call><name>r_anal_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>idx</name></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_BASIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>UT64_MAX</name> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>!=</operator> <name>UT64_MAX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>nopcode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <name>idx</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>nopcode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>oplen</name> <operator>-</operator> <name><name>op</name><operator>-&gt;</operator><name>nopcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>oplen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> <operator>+=</operator> <name>oplen</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>r_anal_op_free</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_trace_bb</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bbi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcni</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fcni</name> <operator>=</operator> <call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fcni</name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>fcni-&gt;bbs</argument>, <argument>iter2</argument>, <argument>bbi</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>bbi</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <operator>(</operator><name><name>bbi</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>bbi</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bbi</name><operator>-&gt;</operator><name>traced</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_colorize_bb</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bbi</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bbi</name> <operator>=</operator> <call><name>r_anal_bb_from_offset</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bbi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bbi</name><operator>-&gt;</operator><name>colorize</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name><modifier>*</modifier></type> <name>r_anal_get_fcns</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>fcns</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name><name>anal</name><operator>-&gt;</operator><name>fcns</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalOp</name> <modifier>*</modifier></type><name>r_anal_op_hexstr</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_hex_str2bin</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_BASIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>op</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_op_is_eob</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_RJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_IJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_IRJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_RET</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_TRAP</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_purge</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_reset</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_fcns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_reset</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_meta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_hint_clear</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_reset</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_reset</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_reset</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_reset</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>fcns</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_anal_function_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <call><name>r_anal_ref_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_archinfo</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_ARCHINFO_MIN_OP_SIZE</name></expr>:</case>
<case>case <expr><name>R_ANAL_ARCHINFO_MAX_OP_SIZE</name></expr>:</case>
<case>case <expr><name>R_ANAL_ARCHINFO_ALIGN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>archinfo</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>archinfo</name></name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__nonreturn_print_commands</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><operator>(</operator><name>RAnal</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"func"</literal></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"func"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"func.%s.noreturn"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdb_bool_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"tnn %s\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="string">"addr."</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"tna 0x%s %s\n"</literal></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__nonreturn_print</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><operator>(</operator><name>RAnal</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="string">"func."</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="string">".noreturn"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>k</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="string">"addr."</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>off</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>off</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>k</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="string">".noreturn"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"0x%s\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_noreturn_list</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><name>__nonreturn_print_commands</name></expr></argument>, <argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><name>__nonreturn_print</name></expr></argument>, <argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K_NORET_ADDR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sdb_fmt ("addr.%"PFMT64x".noreturn", x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K_NORET_FUNC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sdb_fmt ("func.%s.noreturn", x)</cpp:value></cpp:define>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_noreturn_add</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmp_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>TDB</name> <init>= <expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fnl_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sdb_bool_set</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><call><name>K_NORET_ADDR</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_get_function_at</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>is_noreturn</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp_name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>get_at</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fcn</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>fi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Can't find Function at given address\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp_name</name> <operator>=</operator> <ternary><condition><expr><name>fcn</name></expr> ?</condition><then> <expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></then><else>: <expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>is_noreturn</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_type_func_exist</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><name>tmp_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fnl_name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>tmp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>fnl_name</name> <operator>=</operator> <call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tmp_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_bool_set</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><call><name>K_NORET_FUNC</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Can't find prototype for: %s\n"</literal></expr></argument>, <argument><expr><name>tmp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Can't find prototype for: %s\n"</literal></expr></argument>, <argument><expr><name>tmp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fnl_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_bool_set</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><call><name>K_NORET_FUNC</name> <argument_list>(<argument><expr><name>fnl_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fnl_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_noreturn_drop</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>TDB</name> <init>= <expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fcnname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><literal type="string">"0x"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>n</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_unset</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><call><name>K_NORET_ADDR</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fcn</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fcnname</name> <operator>=</operator> <name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fcnname</name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>sdb_unset</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><call><name>K_NORET_FUNC</name> <argument_list>(<argument><expr><name>fcnname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
char *tmp;

if (r_type_func_exist (TDB, fcnname)) {
sdb_unset (TDB, K_NORET_FUNC (fcnname), 0);
return true;
} else if ((tmp = r_type_func_guess (TDB, (char *)fcnname))) {
sdb_unset (TDB, K_NORET_FUNC (fcnname), 0);
free (tmp);
return true;
}
eprintf ("Can't find prototype for %s in types database", fcnname);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_anal_noreturn_at_name</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sdb_bool_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><call><name>K_NORET_FUNC</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sdb_bool_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><call><name>K_NORET_FUNC</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"reloc."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_anal_noreturn_at_name</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_noreturn_at_addr</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sdb_bool_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><call><name>K_NORET_ADDR</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>noreturn_recurse</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalOp</name></type> <name>op</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>bbuf</name><index>[<expr><literal type="number">0x10</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>recurse_addr</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>bbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Couldn't read buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>bbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_BASIC</name> <operator>|</operator> <name>R_ANAL_OP_MASK_VAL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>op</name><operator>.</operator><name>type</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_TYPE_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>.</operator><name>jump</name></name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>recurse_addr</name> <operator>=</operator> <name><name>op</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>recurse_addr</name> <operator>=</operator> <name><name>op</name><operator>.</operator><name>jump</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_UCALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_RCALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_ICALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_IRCALL</name></expr>:</case>
<expr_stmt><expr><name>recurse_addr</name> <operator>=</operator> <name><name>op</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_CCALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>:</case>
<expr_stmt><expr><name>recurse_addr</name> <operator>=</operator> <name><name>op</name><operator>.</operator><name>jump</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>recurse_addr</name> <operator>==</operator> <name>UT64_MAX</name> <operator>||</operator> <name>recurse_addr</name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_anal_noreturn_at</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>recurse_addr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_noreturn_at</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>addr</name> <operator>||</operator> <name>addr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_anal_noreturn_at_addr</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>r_anal_get_function_at</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_anal_noreturn_at_name</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name><name>anal</name><operator>-&gt;</operator><name>flag_get</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fi</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_anal_noreturn_at_name</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>fi</name><operator>-&gt;</operator><name>realname</name></name></expr> ?</condition><then> <expr><name><name>fi</name><operator>-&gt;</operator><name>realname</name></name></expr> </then><else>: <expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>recursive_noreturn</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>noreturn_recurse</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_bind</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalBind</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>anal</name></name> <operator>=</operator> <name>anal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>get_fcn_in</name></name> <operator>=</operator> <name>r_anal_get_fcn_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>get_hint</name></name> <operator>=</operator> <name>r_anal_hint_get</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_anal_preludes</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>preludes</name></name></expr> )</condition> <block>{<block_content>
<return>return <expr><call><name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>preludes</name></name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_is_prelude</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>r_anal_preludes</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RSearchKeyword</name> <modifier>*</modifier></type><name>kw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>l</argument>, <argument>iter</argument>, <argument>kw</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ks</name> <init>= <expr><name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>ks</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>kw</name><operator>-&gt;</operator><name>bin_keyword</name></name></expr></argument>, <argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
