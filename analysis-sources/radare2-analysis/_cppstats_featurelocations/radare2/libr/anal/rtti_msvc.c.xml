<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\rtti_msvc.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_anal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_BUF_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_CLASSES_MAX</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>rtti_complete_object_locator_t</name> <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>signature</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>vtable_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>cd_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>type_descriptor_addr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>class_descriptor_addr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>object_base</name></decl>;</decl_stmt> 
}</block></struct></type> <name>rtti_complete_object_locator</name>;</typedef>


<typedef>typedef <type><struct>struct <name>rtti_class_hierarchy_descriptor_t</name> <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>signature</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>attributes</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>num_base_classes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>base_class_array_addr</name></decl>;</decl_stmt> 
}</block></struct></type> <name>rtti_class_hierarchy_descriptor</name>;</typedef>

<typedef>typedef <type><struct>struct <name>rtti_base_class_descriptor_t</name> <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>type_descriptor_addr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>num_contained_bases</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>st32</name></type> <name>mdisp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>st32</name></type> <name>pdisp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>st32</name></type> <name>vdisp</name></decl>;</decl_stmt> 
}</block> <decl><name>where</name></decl>;</struct>
<decl_stmt><decl><type><name>ut32</name></type> <name>attributes</name></decl>;</decl_stmt>
}</block></struct></type> <name>rtti_base_class_descriptor</name>;</typedef>

<typedef>typedef <type><struct>struct <name>rtti_type_descriptor_t</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>vtable_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>spare</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>rtti_type_descriptor</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtti_type_descriptor_fini</name><parameter_list>(<parameter><decl><type><name>rtti_type_descriptor</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>rtti_msvc_addr</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>col_addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>col_base</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>word_size</name></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>addr</name> <operator>+</operator> <operator>(</operator><name>col_addr</name> <operator>-</operator> <name>col_base</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>rtti_msvc_read_complete_object_locator</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>rtti_complete_object_locator</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>colSize</name> <init>= <expr><literal type="number">5</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>word_size</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>colSize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>colSize</name> <operator>&gt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>colSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function_decl><type><name>ut32</name></type> (<modifier>*</modifier><name>read_at_32</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr> ?</condition><then> <expr><name>r_read_at_be32</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>r_read_at_le32</name></expr></init>;</function_decl>
<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>signature</name></name> <operator>=</operator> <call><name>read_at_32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>vtable_offset</name></name> <operator>=</operator> <call><name>read_at_32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>cd_offset</name></name> <operator>=</operator> <call><name>read_at_32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offsetSize</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>type_descriptor_addr</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>, <argument><expr><name>offsetSize</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>class_descriptor_addr</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">12</literal> <operator>+</operator> <name>offsetSize</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>, <argument><expr><name>offsetSize</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>word_size</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>object_base</name></name> <operator>=</operator> <call><name>read_at_32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>object_base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>rtti_msvc_read_class_hierarchy_descriptor</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>rtti_class_hierarchy_descriptor</name> <modifier>*</modifier></type><name>chd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chdSize</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>chdSize</name> <operator>&gt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>chdSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function_decl><type><name>ut32</name></type> (<modifier>*</modifier><name>read_at_32</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr> ?</condition><then> <expr><name>r_read_at_be32</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>r_read_at_le32</name></expr></init>;</function_decl>
<expr_stmt><expr><name><name>chd</name><operator>-&gt;</operator><name>signature</name></name> <operator>=</operator> <call><name>read_at_32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chd</name><operator>-&gt;</operator><name>attributes</name></name> <operator>=</operator> <call><name>read_at_32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chd</name><operator>-&gt;</operator><name>num_base_classes</name></name> <operator>=</operator> <call><name>read_at_32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>word_size</name></name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>chd</name><operator>-&gt;</operator><name>base_class_array_addr</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>word_size</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name><name>chd</name><operator>-&gt;</operator><name>base_class_array_addr</name></name> <operator>=</operator> <call><name>read_at_32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>rtti_msvc_base_class_descriptor_size</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>context</name><operator>-&gt;</operator><name>word_size</name></name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>rtti_msvc_read_base_class_descriptor</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>rtti_base_class_descriptor</name> <modifier>*</modifier></type><name>bcd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bcdSize</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>rtti_msvc_base_class_descriptor_size</name> <argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bcdSize</name> <operator>&gt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bcdSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function_decl><type><name>ut32</name></type> (<modifier>*</modifier><name>read_at_32</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr> ?</condition><then> <expr><name>r_read_at_be32</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>r_read_at_le32</name></expr></init>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>typeDescriptorAddrSize</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bcd</name><operator>-&gt;</operator><name>type_descriptor_addr</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>, <argument><expr><name>typeDescriptorAddrSize</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>typeDescriptorAddrSize</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bcd</name><operator>-&gt;</operator><name>num_contained_bases</name></name> <operator>=</operator> <call><name>read_at_32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bcd</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>mdisp</name></name> <operator>=</operator> <call><name>read_at_32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bcd</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>pdisp</name></name> <operator>=</operator> <call><name>read_at_32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bcd</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>vdisp</name></name> <operator>=</operator> <call><name>read_at_32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bcd</name><operator>-&gt;</operator><name>attributes</name></name> <operator>=</operator> <call><name>read_at_32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>rtti_msvc_read_base_class_array</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>num_base_classes</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>UT64_MAX</name> <operator>||</operator> <name>offset</name> <operator>==</operator> <name>UT32_MAX</name> <operator>||</operator> <name>num_base_classes</name> <operator>==</operator> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name>base</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>stride</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_base_classes</name> <operator>&gt;</operator> <name>BASE_CLASSES_MAX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"WARNING: Length of base class array at 0x%08"</literal><name>PFMT64x</name><literal type="string">" exceeds %d.\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>BASE_CLASSES_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num_base_classes</name> <operator>=</operator> <name>BASE_CLASSES_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>num_base_classes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>bcdAddr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>word_size</name></name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bcdAddr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bcdAddr</name> <operator>==</operator> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>tmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<function_decl><type><name>ut32</name></type> (<modifier>*</modifier><name>read_32</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr> ?</condition><then> <expr><name>r_read_be32</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>r_read_le32</name></expr></init>;</function_decl>
<decl_stmt><decl><type><name>ut32</name></type> <name>bcdOffset</name> <init>= <expr><call><name>read_32</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bcdOffset</name> <operator>==</operator> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bcdAddr</name> <operator>=</operator> <name>base</name> <operator>+</operator> <name>bcdOffset</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>rtti_base_class_descriptor</name> <modifier>*</modifier></type><name>bcd</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>rtti_base_class_descriptor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bcd</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rtti_msvc_read_base_class_descriptor</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>bcdAddr</name></expr></argument>, <argument><expr><name>bcd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>bcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_base_classes</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_base_classes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>rtti_msvc_read_type_descriptor</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>rtti_type_descriptor</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>vtable_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>spare</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>nameAddr</name> <init>= <expr><name>addr</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><name>NAME_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>bufOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nameLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>endFound</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>endInvalid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>nameAddr</name> <operator>+</operator> <name>bufOffset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>endFound</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>endInvalid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nameLen</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>endFound</name> <operator>||</operator> <name>endInvalid</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bufOffset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>endInvalid</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>nameLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bufOffset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nameLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>nameAddr</name></expr></argument>,
<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>td</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>nameLen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtti_msvc_print_complete_object_locator</name><parameter_list>(<parameter><decl><type><name>rtti_complete_object_locator</name> <modifier>*</modifier></type><name>col</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%sComplete Object Locator at 0x%08"</literal><name>PFMT64x</name><literal type="string">":\n"</literal>
<literal type="string">"%s\tsignature: %#x\n"</literal>
<literal type="string">"%s\tvftableOffset: %#x\n"</literal>
<literal type="string">"%s\tcdOffset: %#x\n"</literal>
<literal type="string">"%s\ttypeDescriptorAddr: 0x%08"</literal><name>PFMT32x</name><literal type="string">"\n"</literal>
<literal type="string">"%s\tclassDescriptorAddr: 0x%08"</literal><name>PFMT32x</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>vtable_offset</name></name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>cd_offset</name></name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>type_descriptor_addr</name></name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>class_descriptor_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s\tobjectBase: 0x%08"</literal><name>PFMT32x</name><literal type="string">"\n\n"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>object_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtti_msvc_print_complete_object_locator_json</name><parameter_list>(<parameter><decl><type><name>rtti_complete_object_locator</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"{\"signature\":%"</literal><name>PFMT32u</name><literal type="string">",\"vftable_offset\":%"</literal><name>PFMT32u</name><literal type="string">",\"cd_offset\":%"</literal><name>PFMT32u</name><literal type="string">","</literal>
<literal type="string">"\"type_desc_addr\":%"</literal><name>PFMT32u</name><literal type="string">",\"class_desc_addr\":%"</literal><name>PFMT32u</name><literal type="string">",\"object_base\":%"</literal><name>PFMT32u</name><literal type="string">"}"</literal></expr></argument>,
<argument><expr><name><name>col</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>vtable_offset</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>cd_offset</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>type_descriptor_addr</name></name></expr></argument>,
<argument><expr><name><name>col</name><operator>-&gt;</operator><name>class_descriptor_addr</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>object_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtti_msvc_print_type_descriptor</name><parameter_list>(<parameter><decl><type><name>rtti_type_descriptor</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%sType Descriptor at 0x%08"</literal><name>PFMT64x</name><literal type="string">":\n"</literal>
<literal type="string">"%s\tvtableAddr: 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal>
<literal type="string">"%s\tspare: 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal>
<literal type="string">"%s\tname: %s\n\n"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>vtable_addr</name></name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>spare</name></name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtti_msvc_print_type_descriptor_json</name><parameter_list>(<parameter><decl><type><name>rtti_type_descriptor</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"{\"vtable_addr\":%"</literal><name>PFMT32u</name><literal type="string">",\"spare\":%"</literal><name>PFMT32u</name><literal type="string">",\"name\":\"%s\"}"</literal></expr></argument>,
<argument><expr><name><name>td</name><operator>-&gt;</operator><name>vtable_addr</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>spare</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtti_msvc_print_class_hierarchy_descriptor</name><parameter_list>(<parameter><decl><type><name>rtti_class_hierarchy_descriptor</name> <modifier>*</modifier></type><name>chd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%sClass Hierarchy Descriptor at 0x%08"</literal><name>PFMT64x</name><literal type="string">":\n"</literal>
<literal type="string">"%s\tsignature: %#x\n"</literal>
<literal type="string">"%s\tattributes: %#x\n"</literal>
<literal type="string">"%s\tnumBaseClasses: %#x\n"</literal>
<literal type="string">"%s\tbaseClassArrayAddr: 0x%08"</literal><name>PFMT32x</name><literal type="string">"\n\n"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>chd</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>chd</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>chd</name><operator>-&gt;</operator><name>num_base_classes</name></name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>chd</name><operator>-&gt;</operator><name>base_class_array_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtti_msvc_print_class_hierarchy_descriptor_json</name><parameter_list>(<parameter><decl><type><name>rtti_class_hierarchy_descriptor</name> <modifier>*</modifier></type><name>chd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"{\"signature\":%"</literal><name>PFMT32u</name><literal type="string">",\"attributes\":%"</literal><name>PFMT32u</name><literal type="string">",\"num_base_classes\":%"</literal><name>PFMT32u</name><literal type="string">","</literal>
<literal type="string">"\"base_class_array_addr\":%"</literal><name>PFMT32u</name><literal type="string">"}"</literal></expr></argument>,
<argument><expr><name><name>chd</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>, <argument><expr><name><name>chd</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>, <argument><expr><name><name>chd</name><operator>-&gt;</operator><name>num_base_classes</name></name></expr></argument>, <argument><expr><name><name>chd</name><operator>-&gt;</operator><name>base_class_array_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtti_msvc_print_base_class_descriptor</name><parameter_list>(<parameter><decl><type><name>rtti_base_class_descriptor</name> <modifier>*</modifier></type><name>bcd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%sBase Class Descriptor:\n"</literal>
<literal type="string">"%s\ttypeDescriptorAddr: 0x%08"</literal><name>PFMT32x</name><literal type="string">"\n"</literal>
<literal type="string">"%s\tnumContainedBases: %#x\n"</literal>
<literal type="string">"%s\twhere:\n"</literal>
<literal type="string">"%s\t\tmdisp: %d\n"</literal>
<literal type="string">"%s\t\tpdisp: %d\n"</literal>
<literal type="string">"%s\t\tvdisp: %d\n"</literal>
<literal type="string">"%s\tattributes: %#x\n\n"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>bcd</name><operator>-&gt;</operator><name>type_descriptor_addr</name></name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>bcd</name><operator>-&gt;</operator><name>num_contained_bases</name></name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>bcd</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>mdisp</name></name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>bcd</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>pdisp</name></name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>bcd</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>vdisp</name></name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>bcd</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtti_msvc_print_base_class_descriptor_json</name><parameter_list>(<parameter><decl><type><name>rtti_base_class_descriptor</name> <modifier>*</modifier></type><name>bcd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"{\"type_desc_addr\":%"</literal><name>PFMT32u</name><literal type="string">",\"num_contained_bases\":%"</literal><name>PFMT32u</name><literal type="string">","</literal>
<literal type="string">"\"where\":{\"mdisp\":%"</literal><name>PFMT32d</name><literal type="string">",\"pdisp\":%"</literal><name>PFMT32d</name><literal type="string">",\"vdisp\":%"</literal><name>PFMT32d</name><literal type="string">"},"</literal>
<literal type="string">"\"attributes\":%"</literal><name>PFMT32u</name><literal type="string">"}"</literal></expr></argument>,
<argument><expr><name><name>bcd</name><operator>-&gt;</operator><name>type_descriptor_addr</name></name></expr></argument>, <argument><expr><name><name>bcd</name><operator>-&gt;</operator><name>num_contained_bases</name></name></expr></argument>,
<argument><expr><name><name>bcd</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>mdisp</name></name></expr></argument>, <argument><expr><name><name>bcd</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>pdisp</name></name></expr></argument>, <argument><expr><name><name>bcd</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>vdisp</name></name></expr></argument>, <argument><expr><name><name>bcd</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_anal_rtti_msvc_demangle_class_name</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>original_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>original_len</name> <operator>&lt;</operator> <literal type="number">7</literal>
<operator>||</operator> <operator>(</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">".?AV"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">".?AU"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>
<operator>||</operator> <call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name> <operator>+</operator> <name>original_len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"@@"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>binb</name><operator>.</operator><name>demangle</name></name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"msvc"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>n</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_rtti_msvc_print_complete_object_locator</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>rtti_complete_object_locator</name></type> <name>col</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rtti_msvc_read_complete_object_locator</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to parse Complete Object Locator at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rtti_msvc_print_complete_object_locator_json</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rtti_msvc_print_complete_object_locator</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_rtti_msvc_print_type_descriptor</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>rtti_type_descriptor</name></type> <name>td</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rtti_msvc_read_type_descriptor</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to parse Type Descriptor at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rtti_msvc_print_type_descriptor_json</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rtti_msvc_print_type_descriptor</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>rtti_type_descriptor_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_rtti_msvc_print_class_hierarchy_descriptor</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>rtti_class_hierarchy_descriptor</name></type> <name>chd</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rtti_msvc_read_class_hierarchy_descriptor</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to parse Class Hierarchy Descriptor at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rtti_msvc_print_class_hierarchy_descriptor_json</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>chd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rtti_msvc_print_class_hierarchy_descriptor</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>chd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_rtti_msvc_print_base_class_descriptor</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>rtti_base_class_descriptor</name></type> <name>bcd</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rtti_msvc_read_base_class_descriptor</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bcd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to parse Base Class Descriptor at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rtti_msvc_print_base_class_descriptor_json</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>bcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rtti_msvc_print_base_class_descriptor</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>bcd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>rtti_msvc_print_complete_object_locator_recurse</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>atAddress</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>strict</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>use_json</name> <init>= <expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>colRefAddr</name> <init>= <expr><name>atAddress</name> <operator>-</operator> <name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>colAddr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>colRefAddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colAddr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>rtti_complete_object_locator</name></type> <name>col</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rtti_msvc_read_complete_object_locator</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strict</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to parse Complete Object Locator at 0x%08"</literal><name>PFMT64x</name><literal type="string">" (referenced from 0x%08"</literal><name>PFMT64x</name><literal type="string">")\n"</literal></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>, <argument><expr><name>colRefAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>ut64</name></type> <name>typeDescriptorAddr</name> <init>= <expr><call><name>rtti_msvc_addr</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>, <argument><expr><name><name>col</name><operator>.</operator><name>object_base</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>.</operator><name>type_descriptor_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtti_type_descriptor</name></type> <name>td</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rtti_msvc_read_type_descriptor</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>typeDescriptorAddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strict</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to parse Type Descriptor at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>typeDescriptorAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>ut64</name></type> <name>classHierarchyDescriptorAddr</name> <init>= <expr><call><name>rtti_msvc_addr</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>, <argument><expr><name><name>col</name><operator>.</operator><name>object_base</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>.</operator><name>class_descriptor_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtti_class_hierarchy_descriptor</name></type> <name>chd</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rtti_msvc_read_class_hierarchy_descriptor</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>classHierarchyDescriptorAddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strict</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to parse Class Hierarchy Descriptor at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>classHierarchyDescriptorAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rtti_type_descriptor_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>base</name> <init>= <expr><name><name>chd</name><operator>.</operator><name>base_class_array_addr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>baseClassArrayOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>word_size</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>colAddr</name> <operator>-</operator> <name><name>col</name><operator>.</operator><name>object_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>baseClassArrayOffset</name> <operator>=</operator> <name><name>chd</name><operator>.</operator><name>base_class_array_addr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>baseClassArray</name> <init>= <expr><call><name>rtti_msvc_read_base_class_array</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>chd</name><operator>.</operator><name>num_base_classes</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>baseClassArrayOffset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>baseClassArray</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strict</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to parse Base Class Array starting at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>base</name> <operator>+</operator> <name>baseClassArrayOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rtti_type_descriptor_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>use_json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"{\"complete_object_locator\":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtti_msvc_print_complete_object_locator_json</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">",\"type_desc\":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtti_msvc_print_type_descriptor_json</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">",\"class_hierarchy_desc\":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtti_msvc_print_class_hierarchy_descriptor_json</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>chd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">",\"base_classes\":["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rtti_msvc_print_complete_object_locator</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtti_msvc_print_type_descriptor</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>typeDescriptorAddr</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtti_msvc_print_class_hierarchy_descriptor</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>chd</name></expr></argument>, <argument><expr><name>classHierarchyDescriptorAddr</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>json_first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>bcdIter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtti_base_class_descriptor</name> <modifier>*</modifier></type><name>bcd</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>baseClassArray</argument>, <argument>bcdIter</argument>, <argument>bcd</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>use_json</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>json_first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"{\"desc\":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>json_first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">",{\"desc\":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rtti_msvc_print_base_class_descriptor_json</name> <argument_list>(<argument><expr><name>bcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rtti_msvc_print_base_class_descriptor</name> <argument_list>(<argument><expr><name>bcd</name></expr></argument>, <argument><expr><literal type="string">"\t\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>baseTypeDescriptorAddr</name> <init>= <expr><call><name>rtti_msvc_addr</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>, <argument><expr><name><name>col</name><operator>.</operator><name>object_base</name></name></expr></argument>, <argument><expr><name><name>bcd</name><operator>-&gt;</operator><name>type_descriptor_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtti_type_descriptor</name></type> <name>btd</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rtti_msvc_read_type_descriptor</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>baseTypeDescriptorAddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>btd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>use_json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">",\"type_desc\":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtti_msvc_print_type_descriptor_json</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>btd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rtti_msvc_print_type_descriptor</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>btd</name></expr></argument>, <argument><expr><name>baseTypeDescriptorAddr</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rtti_type_descriptor_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>btd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strict</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to parse Type Descriptor at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>baseTypeDescriptorAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>use_json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>use_json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_json</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rtti_type_descriptor_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_rtti_msvc_print_at_vtable</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>strict</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rtti_msvc_print_complete_object_locator_recurse</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><name><name>struct</name> <name>recovery_type_descriptor_t</name></name></type> <name>RecoveryTypeDescriptor</name>;</typedef>

<typedef>typedef <type><struct>struct <name>recovery_base_descriptor_t</name> <block>{
<decl_stmt><decl><type><name>rtti_base_class_descriptor</name> <modifier>*</modifier></type><name>bcd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RecoveryTypeDescriptor</name> <modifier>*</modifier></type><name>td</name></decl>;</decl_stmt>
}</block></struct></type> <name>RecoveryBaseDescriptor</name>;</typedef>

<typedef>typedef <type><struct>struct <name>recovery_complete_object_locator_t</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RVTableInfo</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtti_complete_object_locator</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RecoveryTypeDescriptor</name> <modifier>*</modifier></type><name>td</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtti_class_hierarchy_descriptor</name></type> <name>chd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>bcd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RVector</name></type> <name>base_td</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RecoveryCompleteObjectLocator</name>;</typedef>

<function><type><name>RecoveryCompleteObjectLocator</name> <modifier>*</modifier></type><name>recovery_complete_object_locator_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RecoveryCompleteObjectLocator</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RecoveryCompleteObjectLocator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>col</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_vector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>col</name><operator>-&gt;</operator><name>base_td</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RecoveryBaseDescriptor</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>col</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>recovery_complete_object_locator_free</name><parameter_list>(<parameter><decl><type><name>RecoveryCompleteObjectLocator</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>col</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>bcd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>col</name><operator>-&gt;</operator><name>base_td</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<struct>struct <name>recovery_type_descriptor_t</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtti_type_descriptor</name></type> <name>td</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RecoveryCompleteObjectLocator</name> <modifier>*</modifier></type><name>col</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>RecoveryTypeDescriptor</name> <modifier>*</modifier></type><name>recovery_type_descriptor_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RecoveryTypeDescriptor</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RecoveryTypeDescriptor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>td</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>td</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>td</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>td</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>recovery_type_descriptor_free</name><parameter_list>(<parameter><decl><type><name>RecoveryTypeDescriptor</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>td</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rtti_type_descriptor_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>td</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<typedef>typedef <type><struct>struct <name>rtti_msvc_anal_context_t</name> <block>{
<decl_stmt><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>vt_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPVector</name></type> <name>vtables</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RPVector</name></type> <name>complete_object_locators</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HtUP</name> <modifier>*</modifier></type><name>addr_col</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RPVector</name></type> <name>type_descriptors</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HtUP</name> <modifier>*</modifier></type><name>addr_td</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HtUP</name> <modifier>*</modifier></type><name>col_td_classes</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RRTTIMSVCAnalContext</name>;</typedef>


<function_decl><type><name>RecoveryTypeDescriptor</name> <modifier>*</modifier></type><name>recovery_anal_type_descriptor</name><parameter_list>(<parameter><decl><type><name>RRTTIMSVCAnalContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>RecoveryCompleteObjectLocator</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>RecoveryCompleteObjectLocator</name> <modifier>*</modifier></type><name>recovery_anal_complete_object_locator</name><parameter_list>(<parameter><decl><type><name>RRTTIMSVCAnalContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>RVTableInfo</name> <modifier>*</modifier></type><name>vtable</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RecoveryCompleteObjectLocator</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>addr_col</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>col</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>recovery_complete_object_locator_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>col</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>complete_object_locators</name></name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_up_insert</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>addr_col</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <call><name>rtti_msvc_read_complete_object_locator</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>col</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>col</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>col</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <name>vtable</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ut64</name></type> <name>td_addr</name> <init>= <expr><call><name>rtti_msvc_addr</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>col</name><operator>.</operator><name>object_base</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>col</name><operator>.</operator><name>type_descriptor_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>td</name></name> <operator>=</operator> <call><name>recovery_anal_type_descriptor</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>td_addr</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>col</name><operator>-&gt;</operator><name>td</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>col</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>td</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ut64</name></type> <name>chd_addr</name> <init>= <expr><call><name>rtti_msvc_addr</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>col</name><operator>.</operator><name>object_base</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>col</name><operator>.</operator><name>class_descriptor_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>valid</name></name> <operator>&amp;=</operator> <call><name>rtti_msvc_read_class_hierarchy_descriptor</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name></name></expr></argument>, <argument><expr><name>chd_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>col</name><operator>-&gt;</operator><name>chd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>col</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>col</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>ut64</name></type> <name>base</name> <init>= <expr><name><name>col</name><operator>-&gt;</operator><name>chd</name><operator>.</operator><name>base_class_array_addr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>baseClassArrayOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name><operator>-&gt;</operator><name>word_size</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name><name>col</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <name><name>col</name><operator>-&gt;</operator><name>col</name><operator>.</operator><name>object_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>baseClassArrayOffset</name> <operator>=</operator> <name><name>col</name><operator>-&gt;</operator><name>chd</name><operator>.</operator><name>base_class_array_addr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>bcd</name></name> <operator>=</operator> <call><name>rtti_msvc_read_base_class_array</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>chd</name><operator>.</operator><name>num_base_classes</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>baseClassArrayOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>col</name><operator>-&gt;</operator><name>bcd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>col</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>r_vector_reserve</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>col</name><operator>-&gt;</operator><name>base_td</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>col</name><operator>-&gt;</operator><name>bcd</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>bcdIter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtti_base_class_descriptor</name> <modifier>*</modifier></type><name>bcd</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>col-&gt;bcd</argument>, <argument>bcdIter</argument>, <argument>bcd</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>base_td_addr</name> <init>= <expr><call><name>rtti_msvc_addr</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>col</name><operator>.</operator><name>object_base</name></name></expr></argument>, <argument><expr><name><name>bcd</name><operator>-&gt;</operator><name>type_descriptor_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RecoveryTypeDescriptor</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><call><name>recovery_anal_type_descriptor</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>base_td_addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>td</name> <operator>==</operator> <name><name>col</name><operator>-&gt;</operator><name>td</name></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: type descriptor of base is invalid.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RecoveryBaseDescriptor</name> <modifier>*</modifier></type><name>base_desc</name> <init>= <expr><call><name>r_vector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>col</name><operator>-&gt;</operator><name>base_td</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>base_desc</name><operator>-&gt;</operator><name>bcd</name></name> <operator>=</operator> <name>bcd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base_desc</name><operator>-&gt;</operator><name>td</name></name> <operator>=</operator> <name>td</name></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><name>col</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RecoveryTypeDescriptor</name> <modifier>*</modifier></type><name>recovery_anal_type_descriptor</name><parameter_list>(<parameter><decl><type><name>RRTTIMSVCAnalContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>RecoveryCompleteObjectLocator</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RecoveryTypeDescriptor</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>addr_td</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>td</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>td</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>td</name> <operator>=</operator> <call><name>recovery_type_descriptor_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>td</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>type_descriptors</name></name></expr></argument>, <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_up_insert</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>addr_td</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <call><name>rtti_msvc_read_type_descriptor</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>td</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>td</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<return>return <expr><name>td</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>unique_class_name</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>original_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_anal_class_exists</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>original_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>original_name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: class name %s already taken!\n"</literal></expr></argument>, <argument><expr><name>original_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%d"</literal></expr></argument>, <argument><expr><name>original_name</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><call><name>r_anal_class_exists</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>recovery_apply_vtable</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RVTableInfo</name> <modifier>*</modifier></type><name>vtable_info</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vtable_info</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalVTable</name></type> <name>vtable</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>vtable</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtable</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtable</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name><name>vtable_info</name><operator>-&gt;</operator><name>saddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_class_vtable_set</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_class_vtable_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>vtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RVTableMethodInfo</name> <modifier>*</modifier></type><name>vmeth</name></decl>;</decl_stmt>
<macro><name>r_vector_foreach</name> <argument_list>(<argument>&amp;vtable_info-&gt;methods</argument>, <argument>vmeth</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalMethod</name></type> <name>meth</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>meth</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name><name>vmeth</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>meth</name><operator>.</operator><name>vtable_offset</name></name> <operator>=</operator> <name><name>vmeth</name><operator>-&gt;</operator><name>vtable_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>meth</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"virtual_%d"</literal></expr></argument>, <argument><expr><name><name>meth</name><operator>.</operator><name>vtable_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_class_method_set</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_class_method_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>meth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>recovery_apply_complete_object_locator</name><parameter_list>(<parameter><decl><type><name>RRTTIMSVCAnalContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>RecoveryCompleteObjectLocator</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>recovery_apply_type_descriptor</name><parameter_list>(<parameter><decl><type><name>RRTTIMSVCAnalContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>RecoveryTypeDescriptor</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>recovery_apply_bases</name><parameter_list>(<parameter><decl><type><name>RRTTIMSVCAnalContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>base_descs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RecoveryBaseDescriptor</name> <modifier>*</modifier></type><name>base_desc</name></decl>;</decl_stmt>
<macro><name>r_vector_foreach</name> <argument_list>(<argument>base_descs</argument>, <argument>base_desc</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RecoveryTypeDescriptor</name> <modifier>*</modifier></type><name>base_td</name> <init>= <expr><name><name>base_desc</name><operator>-&gt;</operator><name>td</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base_td</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning Base td is invalid!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_class_name</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base_td</name><operator>-&gt;</operator><name>col</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Base td %s has no col. Falling back to recovery from td only.\n"</literal></expr></argument>, <argument><expr><name><name>base_td</name><operator>-&gt;</operator><name>td</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>base_class_name</name> <operator>=</operator> <call><name>recovery_apply_type_descriptor</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>base_td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>base_class_name</name> <operator>=</operator> <call><name>recovery_apply_complete_object_locator</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>base_td</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base_class_name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to convert !base td-&gt;col or td to a class\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalBaseClass</name></type> <name>base</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>base</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name><name>base_desc</name><operator>-&gt;</operator><name>bcd</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>mdisp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>.</operator><name>class_name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>base_class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_class_base_set</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_class_base_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>recovery_apply_complete_object_locator</name><parameter_list>(<parameter><decl><type><name>RRTTIMSVCAnalContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>RecoveryCompleteObjectLocator</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>col</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>col</name><operator>-&gt;</operator><name>td</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: no td for col at 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name><operator>-&gt;</operator><name>anal</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>existing</name> <init>= <expr><call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>col_td_classes</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>existing</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>existing</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>r_anal_rtti_msvc_demangle_class_name</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>td</name><operator>-&gt;</operator><name>td</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to demangle a class name: \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>td</name><operator>-&gt;</operator><name>td</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>td</name><operator>-&gt;</operator><name>td</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>unique_class_name</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_class_create</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_up_insert</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>col_td_classes</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>recovery_apply_vtable</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>recovery_apply_bases</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>col</name><operator>-&gt;</operator><name>base_td</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>recovery_apply_type_descriptor</name><parameter_list>(<parameter><decl><type><name>RRTTIMSVCAnalContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>RecoveryTypeDescriptor</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name><operator>-&gt;</operator><name>anal</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>existing</name> <init>= <expr><call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>col_td_classes</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>existing</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>existing</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>r_anal_rtti_msvc_demangle_class_name</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>td</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>vt_context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Failed to demangle a class name: \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>td</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>td</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_class_create</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_up_insert</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>col_td_classes</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>col</name></name> <operator>||</operator> <operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>col</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>recovery_apply_vtable</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>col</name><operator>-&gt;</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>recovery_apply_bases</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>col</name><operator>-&gt;</operator><name>base_td</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>str_value_free</name><parameter_list>(<parameter><decl><type><name>HtPPKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_rtti_msvc_recover_all</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>vt_context</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>vtables</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RRTTIMSVCAnalContext</name></type> <name>context</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>context</name><operator>.</operator><name>vt_context</name></name> <operator>=</operator> <name>vt_context</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>vtables</name></name></expr></argument>, <argument><expr><operator>(</operator><name>RPVectorFree</name><operator>)</operator><name>r_anal_vtable_info_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>complete_object_locators</name></name></expr></argument>, <argument><expr><operator>(</operator><name>RPVectorFree</name><operator>)</operator> <name>recovery_complete_object_locator_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name><operator>.</operator><name>addr_col</name></name> <operator>=</operator> <call><name>ht_up_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>type_descriptors</name></name></expr></argument>, <argument><expr><operator>(</operator><name>RPVectorFree</name><operator>)</operator> <name>recovery_type_descriptor_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name><operator>.</operator><name>addr_td</name></name> <operator>=</operator> <call><name>ht_up_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>.</operator><name>col_td_classes</name></name> <operator>=</operator> <call><name>ht_up_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>HtUPKvFreeFunc</name><operator>)</operator><name>str_value_free</name></expr></argument>, <argument><expr><operator>(</operator><name>HtUPCalcSizeV</name><operator>)</operator><name>strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>vtableIter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RVTableInfo</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>vtables</argument>, <argument>vtableIter</argument>, <argument>table</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>colRefAddr</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>saddr</name></name> <operator>-</operator> <name><name>vt_context</name><operator>-&gt;</operator><name>word_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>colAddr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>vt_context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>vt_context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>colRefAddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colAddr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>recovery_anal_complete_object_locator</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_TD_RECOVERY</name></expr></cpp:if>
<macro><name>r_pvector_foreach</name> <argument_list>(<argument>&amp;context.type_descriptors</argument>, <argument>it</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RecoveryTypeDescriptor</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>recovery_apply_type_descriptor</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>r_pvector_foreach</name> <argument_list>(<argument>&amp;context.complete_object_locators</argument>, <argument>it</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RecoveryCompleteObjectLocator</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>col</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>recovery_apply_complete_object_locator</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>vtables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>complete_object_locators</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_up_free</name> <argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>addr_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>type_descriptors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_up_free</name> <argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>addr_td</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_up_free</name> <argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>col_td_classes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
