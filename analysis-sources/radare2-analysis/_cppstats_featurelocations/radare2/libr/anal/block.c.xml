<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\block.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unwrap</name><parameter_list>(<parameter><type><name>rbnode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of (rbnode, RAnalBlock, _rb)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__max_end</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>unwrap</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>_max_end</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>end</name> <init>= <expr><call><name>unwrap</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>_max_end</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name><name>block</name><operator>-&gt;</operator><name>_max_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>_max_end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__bb_addr_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBNode</name> <modifier>*</modifier></type><name>in_tree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>incoming_addr</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ut64</name> <operator>*</operator><operator>)</operator><name>incoming</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>RAnalBlock</name> <modifier>*</modifier></type><name>in_tree_block</name> <init>= <expr><call><name>container_of</name> <argument_list>(<argument><expr><name>in_tree</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>RAnalBlock</name></expr></argument>, <argument><expr><name>_rb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>incoming_addr</name> <operator>&lt;</operator> <name><name>in_tree_block</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>incoming_addr</name> <operator>&gt;</operator> <name><name>in_tree_block</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>if (anal &amp;&amp; anal-&gt;verbose)</cpp:value></cpp:define>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_block_ref</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>ref</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>ref</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_NINSTR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>RAnalBlock</name> <modifier>*</modifier></type><name>block_new</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>anal</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>op_pos</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>ut16</name></expr></argument>, <argument><expr><name>DFLT_NINSTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>op_pos_size</name></name> <operator>=</operator> <name>DFLT_NINSTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>parent_stackptr</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>cmpval</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>fcns</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>block</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>block_free</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_anal_cond_free</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_diff_free</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>diff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>op_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_switch_op_free</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>switch_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>op_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>parent_reg_arena</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__block_free_rb</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>unwrap</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>block_free</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalBlock</name> <modifier>*</modifier></type><name>r_anal_get_block_at</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_rbtree_find</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>bb_tree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>__bb_addr_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>node</name></expr>?</condition><then> <expr><call><name>unwrap</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>all_in</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>RAnalBlockCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>unwrap</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>_rb</name><operator>.</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>_max_end</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cb</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>all_in</name> <argument_list>(<argument><expr><call><name>unwrap</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>_rb</name><operator>.</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>all_in</name> <argument_list>(<argument><expr><call><name>unwrap</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>_rb</name><operator>.</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_blocks_foreach_in</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>RAnalBlockCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>all_in</name> <argument_list>(<argument><expr><ternary><condition><expr><name><name>anal</name><operator>-&gt;</operator><name>bb_tree</name></name></expr> ?</condition><then> <expr><call><name>unwrap</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>bb_tree</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>block_list_cb</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_block_ref</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_anal_get_blocks_in</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_anal_block_unref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_blocks_foreach_in</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>block_list_cb</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>all_intersect</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>RAnalBlockCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>end</name> <init>= <expr><name>addr</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <name>end</name> <operator>&lt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>unwrap</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>_rb</name><operator>.</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>_max_end</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cb</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>all_intersect</name> <argument_list>(<argument><expr><call><name>unwrap</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>_rb</name><operator>.</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>all_intersect</name> <argument_list>(<argument><expr><call><name>unwrap</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>_rb</name><operator>.</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_blocks_foreach_intersect</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>RAnalBlockCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>all_intersect</name> <argument_list>(<argument><expr><ternary><condition><expr><name><name>anal</name><operator>-&gt;</operator><name>bb_tree</name></name></expr> ?</condition><then> <expr><call><name>unwrap</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>bb_tree</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_anal_get_blocks_intersect</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_anal_block_unref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_anal_blocks_foreach_intersect</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>block_list_cb</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalBlock</name> <modifier>*</modifier></type><name>r_anal_create_block</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_anal_get_block_at</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_new</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_rbtree_aug_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>anal</name><operator>-&gt;</operator><name>bb_tree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>_rb</name></name></expr></argument>, <argument><expr><name>__bb_addr_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>__max_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>block</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_delete_block</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_block_ref</name> <argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_function_remove_block</name> <argument_list>(<argument><expr><call><name>r_list_first</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_block_set_size</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>block-&gt;fcns</argument>, <argument>iter</argument>, <argument>fcn</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name> <operator>!=</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_max</name></name> <operator>==</operator> <name><name>block</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_max</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>


<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_rbtree_aug_update_sum</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bb_tree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>_rb</name></name></expr></argument>, <argument><expr><name>__bb_addr_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>__max_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_block_relocate</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_block_set_size</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_anal_get_block_at</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>block-&gt;fcns</argument>, <argument>iter</argument>, <argument>fcn</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_max</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_max</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_max</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>+</operator> <name>size</name> <operator>!=</operator> <name><name>block</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>addr</name></name> <operator>&lt;</operator> <name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>!=</operator> <name><name>block</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>r_rbtree_aug_delete</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bb_tree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>__bb_addr_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>__max_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_rbtree_aug_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bb_tree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>_rb</name></name></expr></argument>, <argument><expr><name>__bb_addr_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>__max_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalBlock</name> <modifier>*</modifier></type><name>r_anal_block_split</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bbi</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><name><name>bbi</name><operator>-&gt;</operator><name>anal</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bbi</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&gt;=</operator> <name><name>bbi</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name><name>bbi</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>bbi</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>!=</operator> <name>UT64_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name><name>bbi</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_block_ref</name> <argument_list>(<argument><expr><name>bbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><name>bbi</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_anal_get_block_at</name> <argument_list>(<argument><expr><name><name>bbi</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name> <init>= <expr><call><name>block_new</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>bbi</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>bbi</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bb</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>bbi</name><operator>-&gt;</operator><name>jump</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name><name>bbi</name><operator>-&gt;</operator><name>fail</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>parent_stackptr</name></name> <operator>=</operator> <name><name>bbi</name><operator>-&gt;</operator><name>stackptr</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>r_anal_block_set_size</name> <argument_list>(<argument><expr><name>bbi</name></expr></argument>, <argument><expr><name>addr</name> <operator>-</operator> <name><name>bbi</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bbi</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bbi</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>r_rbtree_aug_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>anal</name><operator>-&gt;</operator><name>bb_tree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bb</name><operator>-&gt;</operator><name>_rb</name></name></expr></argument>, <argument><expr><name>__bb_addr_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>__max_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bbi-&gt;fcns</argument>, <argument>iter</argument>, <argument>fcn</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_function_add_block</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>bbi</name><operator>-&gt;</operator><name>ninstr</name></name> <operator>&amp;&amp;</operator> <call><name>r_anal_bb_offset_inst</name> <argument_list>(<argument><expr><name>bbi</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>bbi</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<decl_stmt><decl><type><name>int</name></type> <name>new_bbi_instr</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bb</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <name><name>bbi</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <call><name>r_anal_bb_offset_inst</name> <argument_list>(<argument><expr><name>bbi</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>ninstr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>bbi</name><operator>-&gt;</operator><name>ninstr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>off_op</name> <init>= <expr><call><name>r_anal_bb_offset_inst</name> <argument_list>(<argument><expr><name>bbi</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>off_op</name> <operator>&gt;=</operator> <name><name>bbi</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name><name>bb</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_anal_bb_set_offset</name> <argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>bb</name><operator>-&gt;</operator><name>ninstr</name></name></expr></argument>, <argument><expr><name>off_op</name> <operator>-</operator> <name><name>bbi</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>ninstr</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bbi</name><operator>-&gt;</operator><name>ninstr</name></name> <operator>=</operator> <name>new_bbi_instr</name></expr>;</expr_stmt>
<return>return <expr><name>bb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_block_merge</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>a</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>a-&gt;fcns</argument>, <argument>iter</argument>, <argument>fcn</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_contains</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>


<expr_stmt><expr><call><name>r_anal_block_ref</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_function_remove_block</name> <argument_list>(<argument><expr><call><name>r_list_first</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>ninstr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_bb_set_offset</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>ninstr</name></name><operator>++</operator></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <call><name>r_anal_bb_offset_inst</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>jump</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>fail</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>r_rbtree_aug_delete</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bb_tree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>__bb_addr_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>__block_free_rb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>__max_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>r_list_foreach</name> <argument_list>(<argument>a-&gt;fcns</argument>, <argument>iter</argument>, <argument>fcn</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_block_unref</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bb</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>ref</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>ref</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>ref</name></name> <operator>&gt;=</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>bb</name><operator>-&gt;</operator><name>ref</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><name><name>bb</name><operator>-&gt;</operator><name>anal</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>!</operator><name><name>bb</name><operator>-&gt;</operator><name>fcns</name></name> <operator>||</operator> <call><name>r_list_empty</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_rbtree_aug_delete</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>anal</name><operator>-&gt;</operator><name>bb_tree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>__bb_addr_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>__block_free_rb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>__max_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>RAnalBlockCb</name>)<parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>RAnalAddrCb</name>)<parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_block_successor_addrs_foreach</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>RAnalAddrCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CB_ADDR</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (addr == UT64_MAX) { break; } if (!cb (addr, user)) { return false; } } while(0);</cpp:value></cpp:define>








<expr_stmt><expr><call><name>CB_ADDR</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CB_ADDR</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>fail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>switch_op</name></name> <operator>&amp;&amp;</operator> <name><name>block</name><operator>-&gt;</operator><name>switch_op</name><operator>-&gt;</operator><name>cases</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalCaseOp</name> <modifier>*</modifier></type><name>caseop</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>block-&gt;switch_op-&gt;cases</argument>, <argument>iter</argument>, <argument>caseop</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>CB_ADDR</name> <argument_list>(<argument><expr><name><name>caseop</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CB_ADDR</name></cpp:undef>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>r_anal_block_recurse_context_t</name> <block>{
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPVector</name></type> <name>to_visit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HtUP</name> <modifier>*</modifier></type><name>visited</name></decl>;</decl_stmt>
}</block></struct></type> <name>RAnalBlockRecurseContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>block_recurse_successor_cb</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalBlockRecurseContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ht_up_find_kv</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>visited</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ht_up_insert</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>visited</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>r_anal_get_block_at</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>to_visit</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_block_recurse</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>RAnalBlockCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>breaked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalBlockRecurseContext</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>anal</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>anal</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>to_visit</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>visited</name></name> <operator>=</operator> <call><name>ht_up_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>.</operator><name>visited</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ht_up_insert</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>visited</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>to_visit</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>r_pvector_empty</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>to_visit</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>r_pvector_pop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>to_visit</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>breaked</name> <operator>=</operator> <operator>!</operator><call><name>cb</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>breaked</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_anal_block_successor_addrs_foreach</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>block_recurse_successor_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<label><name>beach</name>:</label>
<expr_stmt><expr><call><name>ht_up_free</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>visited</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>to_visit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><name>breaked</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>recurse_list_cb</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_block_ref</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_anal_block_recurse_list</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_anal_block_unref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_block_recurse</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>recurse_list_cb</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_block_add_switch_case</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>switch_addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>case_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>switch_op</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>switch_op</name></name> <operator>=</operator> <call><name>r_anal_switch_op_new</name> <argument_list>(<argument><expr><name>switch_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_anal_switch_op_add_case</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>switch_op</name></name></expr></argument>, <argument><expr><name>case_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>case_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>cur_parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>next_visit</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HtUP</name> <modifier>*</modifier></type><name>visited</name></decl>;</decl_stmt> 
}</block></struct></type> <name>PathContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>shortest_path_successor_cb</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>PathContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ht_up_find_kv</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>visited</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ht_up_insert</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>visited</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>r_anal_get_block_at</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>block</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>next_visit</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>addr</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dst</name></name></expr>;</return> 
</block_content>}</block></function>


<function><type><name>R_API</name> <name>R_NULLABLE</name> <name>RList</name> <modifier>*</modifier></type><name>r_anal_block_shortest_path</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PathContext</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>anal</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>anal</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>dst</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>RPVector</name></type> <name>visit_a</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>visit_a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RPVector</name></type> <name>visit_b</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>visit_b</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>next_visit</name></name> <operator>=</operator> <operator>&amp;</operator><name>visit_a</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>cur_visit</name> <init>= <expr><operator>&amp;</operator><name>visit_b</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>visited</name></name> <operator>=</operator> <call><name>ht_up_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>.</operator><name>visited</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ht_up_insert</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>visited</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><name>cur_visit</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>!</operator><call><name>r_pvector_empty</name> <argument_list>(<argument><expr><name>cur_visit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<macro><name>r_pvector_foreach</name> <argument_list>(<argument>cur_visit</argument>, <argument>it</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>cur_parent</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_block_successor_addrs_foreach</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>shortest_path_successor_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<decl_stmt><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>cur_visit</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cur_visit</name> <operator>=</operator> <name><name>ctx</name><operator>.</operator><name>next_visit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>next_visit</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>next_visit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>visited</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>dst_block</name> <init>= <expr><call><name>r_anal_get_block_at</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>&amp;&amp;</operator> <name>dst_block</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_anal_block_unref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_block_ref</name> <argument_list>(<argument><expr><name>dst_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_prepend</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>dst_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>prev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_block_ref</name> <argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_prepend</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>visited</name></name></expr></argument>, <argument><expr><name><name>prev</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<label><name>beach</name>:</label>
<expr_stmt><expr><call><name>ht_up_free</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>visited</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>visit_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>visit_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

</unit>
