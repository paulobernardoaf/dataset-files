<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\esil_cfg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>



<typedef>typedef <type><struct>struct <name>esil_cfg_generator_t</name> <block>{
<decl_stmt><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>RStack</name> <modifier>*</modifier></type><name>ifelse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStack</name> <modifier>*</modifier></type><name>vals</name></decl>;</decl_stmt>
}</block>;</union>

<decl_stmt><decl><type><name>RContRBTree</name> <modifier>*</modifier></type><name>blocks</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>RAnalEsilCFG</name> <modifier>*</modifier></type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIDStorage</name> <modifier>*</modifier></type><name>atoms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name></decl>;</decl_stmt>

}</block></struct></type> <name>EsilCfgGen</name>;</typedef>






<typedef>typedef <type><struct>struct <name>esil_cfg_scope_cookie_t</name> <block>{
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>if_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>else_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_else</name></decl>;</decl_stmt>
}</block></struct></type> <name>EsilCfgScopeCookie</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>ESIL_VAL_CONST</name></decl>,
<decl><name>ESIL_VAL_REG</name></decl>,
<decl><name>ESIL_VAL_RESULT</name></decl>
}</block></enum></type> <name>EsilValType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>esil_value_t</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>val</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>EsilValType</name></type> <name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>EsilVal</name>;</typedef>



<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>condrets_strtok</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>tok</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>tok</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>str</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RAnalEsilOp</name> <modifier>*</modifier></type><name>esil_get_op</name> <parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>op</name> <operator>&amp;&amp;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>esil</name> <operator>&amp;&amp;</operator> <name><name>esil</name><operator>-&gt;</operator><name>ops</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>t</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>sdb_itoa</name> <argument_list>(<argument><expr><call><name>sdb_hash</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>RAnalEsilOp</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><call><name>sdb_num_get</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>ops</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_expr_atomize</name><parameter_list>(<parameter><decl><type><name>RIDStorage</name> <modifier>*</modifier></type><name>atoms</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>forget_me</name></decl>;</decl_stmt>
<for>for <control>(
<init>;</init> <condition><expr><operator>!</operator><operator>!</operator><name>expr</name> <operator>&amp;&amp;</operator> <call><name>r_id_storage_add</name> <argument_list>(<argument><expr><name>atoms</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>forget_me</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>expr</name> <operator>=</operator> <call><name>condrets_strtok</name> <argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_free_bb_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>bb</name> <init>= <expr><operator>(</operator><name>RAnalEsilBB</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>_graphnode_esilbb_insert_cmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>incoming_gnode</name> <init>= <expr><operator>(</operator><name>RGraphNode</name> <operator>*</operator><operator>)</operator><name>incoming</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>in_gnode</name> <init>= <expr><operator>(</operator><name>RGraphNode</name> <operator>*</operator><operator>)</operator><name>in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>incoming_bb</name> <init>= <expr><operator>(</operator><name>RAnalEsilBB</name> <operator>*</operator><operator>)</operator><name><name>incoming_gnode</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>in_bb</name> <init>= <expr><operator>(</operator><name>RAnalEsilBB</name> <operator>*</operator><operator>)</operator><name><name>in_gnode</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
return incoming_bb-&gt;first - in_bb-&gt;first;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name><name>incoming_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>off</name></name> <operator>&lt;</operator> <name><name>in_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>incoming_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>off</name></name> <operator>&gt;</operator> <name><name>in_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>incoming_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>idx</name></name> <operator>-</operator> <name><name>in_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>idx</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_graphnode_esilbb_find_cmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalEsilEOffset</name> <modifier>*</modifier></type><name>find_me</name> <init>= <expr><operator>(</operator><name>RAnalEsilEOffset</name> <operator>*</operator><operator>)</operator><name>incoming</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>in_gnode</name> <init>= <expr><operator>(</operator><name>RGraphNode</name> <operator>*</operator><operator>)</operator><name>in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>in_bb</name> <init>= <expr><operator>(</operator><name>RAnalEsilBB</name> <operator>*</operator><operator>)</operator><name><name>in_gnode</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>find_me</name><operator>-&gt;</operator><name>off</name></name> <operator>&lt;</operator> <name><name>in_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>find_me</name><operator>-&gt;</operator><name>off</name></name> <operator>&gt;</operator> <name><name>in_bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>find_me</name><operator>-&gt;</operator><name>idx</name></name> <operator>&lt;</operator> <name><name>in_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>idx</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>find_me</name><operator>-&gt;</operator><name>idx</name></name> <operator>&gt;</operator> <name><name>in_bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>idx</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_graphnode_delete_always_0_cmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>EsilCfgGen</name> <modifier>*</modifier></type><name>gen</name> <init>= <expr><operator>(</operator><name>EsilCfgGen</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>delete_me</name> <init>= <expr><operator>(</operator><name>RGraphNode</name> <operator>*</operator><operator>)</operator><name>in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>delete_me_bb</name> <init>= <expr><operator>(</operator><name>RAnalEsilBB</name> <operator>*</operator><operator>)</operator><name><name>delete_me</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_graph_del_node</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>delete_me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>id</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>id</name> <operator>=</operator> <name><name>delete_me_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>idx</name></name></expr>;</init> <condition><expr><name>id</name> <operator>&lt;=</operator> <name><name>delete_me_bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>idx</name></name></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_id_storage_delete</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>atoms</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_handle_if_enter</name> <parameter_list>(<parameter><decl><type><name>EsilCfgGen</name> <modifier>*</modifier></type><name>gen</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>has_next</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_next</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>EsilCfgScopeCookie</name> <modifier>*</modifier></type><name>cookie</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>EsilCfgScopeCookie</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>entered_bb</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalEsilBB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>entered_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name><name>entered_bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name><name>gen</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entered_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name><name>entered_bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name>id</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entered_bb</name><operator>-&gt;</operator><name>enter</name></name> <operator>=</operator> <name>R_ANAL_ESIL_BLOCK_ENTER_TRUE</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>entered_node</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>entered_bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>entered_node</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>_free_bb_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_rbtree_cont_insert</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><name>entered_node</name></expr></argument>, <argument><expr><name>_graphnode_esilbb_insert_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>entered_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>if_block</name></name> <operator>=</operator> <name>entered_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>else_block</name></name> <operator>=</operator> <name><name>gen</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_stack_push</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>ifelse</name></name></expr></argument>, <argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gen</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>entered_node</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_handle_else_enter</name> <parameter_list>(<parameter><decl><type><name>EsilCfgGen</name> <modifier>*</modifier></type><name>gen</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>has_next</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_next</name> <operator>||</operator> <call><name>r_stack_is_empty</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>ifelse</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>EsilCfgScopeCookie</name> <modifier>*</modifier></type><name>cookie</name> <init>= <expr><operator>(</operator><name>EsilCfgScopeCookie</name> <operator>*</operator><operator>)</operator><call><name>r_stack_peek</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>ifelse</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>entered_bb</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalEsilBB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>entered_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name><name>entered_bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name><name>gen</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entered_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name><name>entered_bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name>id</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>entered_node</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>entered_bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>entered_node</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>_free_bb_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_rbtree_cont_insert</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><name>entered_node</name></expr></argument>, <argument><expr><name>_graphnode_esilbb_insert_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cookie</name><operator>-&gt;</operator><name>is_else</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>entered_bb</name><operator>-&gt;</operator><name>enter</name></name> <operator>=</operator> <name>R_ANAL_ESIL_BLOCK_ENTER_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>if_block</name></name></expr></argument>, <argument><expr><name>entered_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>if_block</name></name> <operator>=</operator> <name>entered_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>else_block</name></name> <operator>=</operator> <name><name>gen</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>is_else</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>entered_bb</name><operator>-&gt;</operator><name>enter</name></name> <operator>=</operator> <name>R_ANAL_ESIL_BLOCK_ENTER_FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>else_block</name></name></expr></argument>, <argument><expr><name>entered_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>else_block</name></name> <operator>=</operator> <name>entered_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>if_block</name></name> <operator>=</operator> <name><name>gen</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>is_else</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>gen</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>entered_node</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_handle_fi_leave</name> <parameter_list>(<parameter><decl><type><name>EsilCfgGen</name> <modifier>*</modifier></type><name>gen</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>has_next</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>EsilCfgScopeCookie</name> <modifier>*</modifier></type><name>cookie</name> <init>= <expr><call><name>r_stack_pop</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>ifelse</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cookie</name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>cur_bb</name> <init>= <expr><operator>(</operator><name>RAnalEsilBB</name> <operator>*</operator><operator>)</operator><name><name>gen</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_bb</name><operator>-&gt;</operator><name>first</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur_bb</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalEsilEOffset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur_bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>idx</name></name><operator>--</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>leaving_bb</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalEsilBB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>leaving_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name><name>leaving_bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name><name>gen</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leaving_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name><name>leaving_bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>leaving_node</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>leaving_bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>leaving_node</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>_free_bb_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>leaving_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_rbtree_cont_insert</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><name>leaving_node</name></expr></argument>, <argument><expr><name>_graphnode_esilbb_insert_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gen</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>leaving_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_bb</name> <operator>=</operator> <name>leaving_bb</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>cookie</name><operator>-&gt;</operator><name>is_else</name></name></expr> ?</condition><then> <expr><name><name>cookie</name><operator>-&gt;</operator><name>if_block</name></name></expr> </then><else>: <expr><name><name>cookie</name><operator>-&gt;</operator><name>else_block</name></name></expr></else></ternary></expr></argument>, <argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_handle_control_flow_ifelsefi</name> <parameter_list>(<parameter><decl><type><name>EsilCfgGen</name> <modifier>*</modifier></type><name>gen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>atom</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>atom</name></expr></argument>, <argument><expr><literal type="string">"?{"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_handle_if_enter</name> <argument_list>(<argument><expr><name>gen</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><call><name>r_id_storage_get</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>atoms</name></name></expr></argument>, <argument><expr><name>id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>atom</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_handle_fi_leave</name> <argument_list>(<argument><expr><name>gen</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><call><name>r_id_storage_get</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>atoms</name></name></expr></argument>, <argument><expr><name>id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>atom</name></expr></argument>, <argument><expr><literal type="string">"}{"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_handle_else_enter</name> <argument_list>(<argument><expr><name>gen</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><call><name>r_id_storage_get</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>atoms</name></name></expr></argument>, <argument><expr><name>id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>_round_0_cb</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>EsilCfgGen</name> <modifier>*</modifier></type><name>gen</name> <init>= <expr><operator>(</operator><name>EsilCfgGen</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>atom</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>bb</name> <init>= <expr><operator>(</operator><name>RAnalEsilBB</name> <operator>*</operator><operator>)</operator><name><name>gen</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalEsilOp</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>esil_get_op</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>)</operator><name>id</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_ESIL_OP_TYPE_CONTROL_FLOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_handle_control_flow_ifelsefi</name> <argument_list>(<argument><expr><name>gen</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RGraphNode</name> <modifier>*</modifier></type><name>_common_break_goto</name> <parameter_list>(<parameter><decl><type><name>EsilCfgGen</name> <modifier>*</modifier></type><name>gen</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalEsilEOffset</name></type> <name>off</name> <init>= <expr><block>{ <expr><name><name>gen</name><operator>-&gt;</operator><name>off</name></name></expr>, <expr><operator>(</operator><name>ut16</name><operator>)</operator><name>id</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>gnode</name> <init>= <expr><call><name>r_rbtree_cont_find</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><name>_graphnode_esilbb_find_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>bb</name> <init>= <expr><operator>(</operator><name>RAnalEsilBB</name> <operator>*</operator><operator>)</operator><name><name>gnode</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name><name>bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>idx</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>next_bb</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalEsilBB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>next_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name><name>gen</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name>id</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next_bb</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>bb</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>next_gnode</name> <init>= <expr><call><name>r_graph_node_split_forward</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>gnode</name></expr></argument>, <argument><expr><name>next_bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_rbtree_cont_insert</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><name>next_gnode</name></expr></argument>, <argument><expr><name>_graphnode_esilbb_insert_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>gnode-&gt;out_nodes</argument>, <argument>iter</argument>, <argument>ator</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_graph_del_edge</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>gnode</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>gnode</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_handle_break</name> <parameter_list>(<parameter><decl><type><name>EsilCfgGen</name> <modifier>*</modifier></type><name>gen</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><call><name>_common_break_goto</name> <argument_list>(<argument><expr><name>gen</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_handle_goto</name> <parameter_list>(<parameter><decl><type><name>EsilCfgGen</name> <modifier>*</modifier></type><name>gen</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>gnode</name> <init>= <expr><call><name>_common_break_goto</name> <argument_list>(<argument><expr><name>gen</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>bb</name> <init>= <expr><operator>(</operator><name>RAnalEsilBB</name> <operator>*</operator><operator>)</operator><name><name>gnode</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>











<decl_stmt><decl><type><name>ut16</name></type> <name>id</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>id</name> <operator>=</operator> <name><name>bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>idx</name></name></expr>;</init> <condition><expr><name>id</name> <operator>&lt;</operator> <name><name>bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>idx</name></name></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>atom</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_id_storage_get</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>atoms</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalEsilOp</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>esil_get_op</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>pop</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>r_stack_pop</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>vals</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>push</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>EsilVal</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>EsilVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ESIL_VAL_RESULT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_stack_push</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>vals</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>EsilVal</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>EsilVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ESIL_VAL_REG</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ESIL_VAL_CONST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_stack_push</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>vals</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>EsilVal</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>r_stack_pop</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>vals</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ESIL_VAL_CONST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot resolve GOTO dst :(\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>RAnalEsilEOffset</name></type> <name>dst_off</name> <init>= <expr><block>{ <expr><name><name>gen</name><operator>-&gt;</operator><name>off</name></name></expr>, <expr><operator>(</operator><name>ut16</name><operator>)</operator><name><name>v</name><operator>-&gt;</operator><name>val</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>dst_node</name> <init>= <expr><call><name>r_rbtree_cont_find</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_off</name></expr></argument>, <argument><expr><name>_graphnode_esilbb_find_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_node</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>dst_node</name> <operator>=</operator> <name><name>gen</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>dst_bb</name> <init>= <expr><operator>(</operator><name>RAnalEsilBB</name> <operator>*</operator><operator>)</operator><name><name>dst_node</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>idx</name></name> <operator>!=</operator> <name><name>v</name><operator>-&gt;</operator><name>val</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>split_bb</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalEsilBB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>split_bb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dst_bb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>val</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>split_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>split</name> <init>= <expr><call><name>r_graph_node_split_forward</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>dst_node</name></expr></argument>, <argument><expr><name>split_bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>dst_node</name></expr></argument>, <argument><expr><name>split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_node</name> <operator>=</operator> <name>split</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>gnode</name></expr></argument>, <argument><expr><name>dst_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>beach</name>:</label>
<while>while <condition>(<expr><operator>!</operator><call><name>r_stack_is_empty</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>vals</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>r_stack_pop</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>vals</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_round_1_cb</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>EsilCfgGen</name> <modifier>*</modifier></type><name>gen</name> <init>= <expr><operator>(</operator><name>EsilCfgGen</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>atom</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalEsilOp</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>esil_get_op</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_ESIL_OP_TYPE_CONTROL_FLOW</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><literal type="string">"BREAK"</literal></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_handle_break</name> <argument_list>(<argument><expr><name>gen</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><literal type="string">"GOTO"</literal></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_handle_goto</name> <argument_list>(<argument><expr><name>gen</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_round_2_cb</name> <parameter_list>(<parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>RGraphVisitor</name> <modifier>*</modifier></type><name>vi</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>bb</name> <init>= <expr><operator>(</operator><name>RAnalEsilBB</name> <operator>*</operator><operator>)</operator><name><name>n</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EsilCfgGen</name> <modifier>*</modifier></type><name>gen</name> <init>= <expr><operator>(</operator><name>EsilCfgGen</name> <operator>*</operator><operator>)</operator><name><name>vi</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_id_storage_get</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>atoms</name></name></expr></argument>, <argument><expr><name><name>bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>id</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>id</name> <operator>=</operator> <name><name>bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>idx</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>id</name> <operator>&lt;=</operator> <name><name>bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>idx</name></name></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s,"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_id_storage_take</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>atoms</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_rbtree_cont_delete</name> <argument_list>(<argument><expr><name><name>gen</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>_graphnode_esilbb_insert_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>RAnalEsilCFG</name> <modifier>*</modifier></type><name>esil_cfg_gen</name><parameter_list>(<parameter><decl><type><name>RAnalEsilCFG</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RIDStorage</name> <modifier>*</modifier></type><name>atoms</name></decl></parameter>, <parameter><decl><type><name>RContRBTree</name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>, <parameter><decl><type><name>RStack</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list> <block>{<block_content>





<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_expr</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_expr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>cfg</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>end_bb</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalEsilBB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end_bb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cfg</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>end_bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>end_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cfg</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>end</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>_free_bb_cb</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esil_expr_atomize</name> <argument_list>(<argument><expr><name>atoms</name></expr></argument>, <argument><expr><name>_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>bb</name> <init>= <expr><operator>(</operator><name>RAnalEsilBB</name> <operator>*</operator><operator>)</operator><name><name>cfg</name><operator>-&gt;</operator><name>end</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>end_bb</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <name><name>bb</name><operator>-&gt;</operator><name>expr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name><name>bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name><name>bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>EsilCfgGen</name></type> <name>gen</name> <init>= <expr><block>{ <expr><name><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>, <expr><block>{ <expr><name>stack</name></expr> }</block></expr>, <expr><name>blocks</name></expr>, <expr><name>cfg</name></expr>, <expr><name>start</name></expr>, <expr><name>atoms</name></expr>, <expr><name>off</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>








<expr_stmt><expr><call><name>r_rbtree_cont_insert</name> <argument_list>(<argument><expr><name>blocks</name></expr></argument>, <argument><expr><name><name>gen</name><operator>.</operator><name>cur</name></name></expr></argument>, <argument><expr><name>_graphnode_esilbb_insert_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>r_id_storage_foreach</name> <argument_list>(<argument><expr><name>atoms</name></expr></argument>, <argument><expr><name>_round_0_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>gen</name><operator>.</operator><name>cur</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>

<decl_stmt><decl><type><name>EsilCfgScopeCookie</name> <modifier>*</modifier></type><name>cookie</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>cookie</name> <operator>=</operator> <call><name>r_stack_pop</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>cookie</name><operator>-&gt;</operator><name>is_else</name></name></expr> ?</condition><then> <expr><name><name>cookie</name><operator>-&gt;</operator><name>if_block</name></name></expr> </then><else>: <expr><name><name>cookie</name><operator>-&gt;</operator><name>else_block</name></name></expr></else></ternary></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>


<expr_stmt><expr><call><name>r_id_storage_foreach</name> <argument_list>(<argument><expr><name>atoms</name></expr></argument>, <argument><expr><name>_round_1_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<block>{<block_content>

<decl_stmt><decl><type><name>RGraphVisitor</name></type> <name>vi</name> <init>= <expr><block>{ <expr><name>_round_2_cb</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>gen</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_graph_dfs_node</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<do>do <block>{<block_content>
</block_content>}</block> while <condition>(<expr><name><name>blocks</name><operator>-&gt;</operator><name>root</name></name> <operator>&amp;&amp;</operator> <call><name>r_rbtree_cont_delete</name> <argument_list>(<argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>_graphnode_delete_always_0_cmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gen</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cfg</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalEsilCFG</name> <modifier>*</modifier></type><name>r_anal_esil_cfg_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalEsilCFG</name> <modifier>*</modifier></type><name>cf</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalEsilCFG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cf</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalEsilBB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>expr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <call><name>r_graph_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cf</name><operator>-&gt;</operator><name>g</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cf</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_graph_free</name> <argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cf</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nodes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>end</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>_free_bb_cb</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>cf</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>R_API</name> <name>RAnalEsilCFG</name> <modifier>*</modifier></type><name>r_anal_esil_cfg_expr</name><parameter_list>(<parameter><decl><type><name>RAnalEsilCFG</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anal</name> <operator>||</operator> <operator>!</operator><name><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RStack</name> <modifier>*</modifier></type><name>stack</name> <init>= <expr><call><name>r_stack_new</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stack</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RContRBTree</name> <modifier>*</modifier></type><name>blocks</name> <init>= <expr><call><name>r_rbtree_cont_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>blocks</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_stack_free</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RIDStorage</name> <modifier>*</modifier></type><name>atoms</name> <init>= <expr><call><name>r_id_storage_new</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0xfffe</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>atoms</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_stack_free</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_rbtree_cont_free</name> <argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RAnalEsilCFG</name> <modifier>*</modifier></type><name>cf</name> <init>= <expr><ternary><condition><expr><name>cfg</name></expr> ?</condition><then> <expr><name>cfg</name></expr> </then><else>: <expr><call><name>r_anal_esil_cfg_new</name> <argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_stack_free</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_id_storage_free</name> <argument_list>(<argument><expr><name>atoms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_rbtree_cont_free</name> <argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RAnalEsilCFG</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>esil_cfg_gen</name> <argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>anal</name></expr></argument>, <argument><expr><name>atoms</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_stack_free</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_id_storage_free</name> <argument_list>(<argument><expr><name>atoms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_rbtree_cont_free</name> <argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalEsilCFG</name> <modifier>*</modifier></type><name>r_anal_esil_cfg_op</name><parameter_list>(<parameter><decl><type><name>RAnalEsilCFG</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name> <operator>||</operator> <operator>!</operator><name>anal</name> <operator>||</operator> <operator>!</operator><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name> <operator>||</operator> <operator>!</operator><name><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>glue_bb</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalEsilBB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>glue_bb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Couldn't allocate glue_bb\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>glue</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>glue</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>glue_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Couldn't allocate glue\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><call><name>r_reg_get_name</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>R_REG_NAME_PC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>glue</name></expr></argument>, <argument><expr><literal type="string">"0x%"</literal> <name>PFMT64x</name> <literal type="string">",%s,:=,"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glue_bb</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>glue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>glue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>glue_bb</name><operator>-&gt;</operator><name>expr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>glue_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Couldn't strdup\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>glue_bb</name><operator>-&gt;</operator><name>enter</name></name> <operator>=</operator> <name>R_ANAL_ESIL_BLOCK_ENTER_GLUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glue_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name><name>glue_bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glue_bb</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name><name>glue_bb</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalEsilCFG</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cfg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_anal_esil_cfg_expr</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>glue_node</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>glue_bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>glue_node</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>_free_bb_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>glue_node</name></expr></argument>, <argument><expr><name><name>ret</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>glue_node</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>glue_node</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>glue_bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>glue_node</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>_free_bb_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>glue_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>foo</name> <init>= <expr><name><name>cfg</name><operator>-&gt;</operator><name>end</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>end</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>glue_node</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glue_node</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>foo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>glue_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_anal_esil_cfg_expr</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>merge_2_blocks</name><parameter_list>(<parameter><decl><type><name>RAnalEsilCFG</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name><name>cfg</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>block-&gt;in_nodes</argument>, <argument>iter</argument>, <argument>n</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>block_bb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>node_bb</name> <init>= <expr><operator>(</operator><name>RAnalEsilBB</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>block_bb</name> <operator>=</operator> <operator>(</operator><name>RAnalEsilBB</name> <operator>*</operator><operator>)</operator><name><name>block</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>block_bb</name><operator>-&gt;</operator><name>enter</name></name> <operator>==</operator> <name>R_ANAL_ESIL_BLOCK_ENTER_TRUE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>block_bb</name><operator>-&gt;</operator><name>enter</name></name> <operator>==</operator> <name>R_ANAL_ESIL_BLOCK_ENTER_FALSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node_bb</name><operator>-&gt;</operator><name>enter</name></name> <operator>=</operator> <name><name>block_bb</name><operator>-&gt;</operator><name>enter</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>node_bb</name><operator>-&gt;</operator><name>enter</name></name> <operator>=</operator> <name>R_ANAL_ESIL_BLOCK_ENTER_NORMAL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name><name>block_bb</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>node_bb</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>block_bb</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_graph_del_node</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n%s"</literal></expr></argument>, <argument><expr><name><name>node_bb</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>node_bb</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node_bb</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name><name>cfg</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_esil_cfg_merge_blocks</name><parameter_list>(<parameter><decl><type><name>RAnalEsilCFG</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cfg</name> <operator>||</operator> <operator>!</operator><name><name>cfg</name><operator>-&gt;</operator><name>g</name></name> <operator>||</operator> <operator>!</operator><name><name>cfg</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nodes</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>cfg-&gt;g-&gt;nodes</argument>, <argument>iter</argument>, <argument>ator</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>in_nodes</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalEsilBB</name> <modifier>*</modifier></type><name>bb</name> <init>= <expr><operator>(</operator><name>RAnalEsilBB</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><name>RGraphNode</name> <operator>*</operator><operator>)</operator><call><name>r_list_get_top</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>out_nodes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>top</name> <operator>&amp;&amp;</operator> <name><name>bb</name><operator>-&gt;</operator><name>enter</name></name> <operator>==</operator> <name>R_ANAL_ESIL_BLOCK_ENTER_GLUE</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>top</name><operator>-&gt;</operator><name>in_nodes</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><name>RGraphNode</name> <operator>*</operator><operator>)</operator><call><name>r_list_get_top</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>in_nodes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>out_nodes</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>merge_2_blocks</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_esil_cfg_free</name><parameter_list>(<parameter><decl><type><name>RAnalEsilCFG</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cfg</name> <operator>&amp;&amp;</operator> <name><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_graph_free</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
