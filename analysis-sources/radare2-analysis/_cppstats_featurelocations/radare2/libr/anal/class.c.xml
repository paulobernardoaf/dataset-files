<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\class.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_vector.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../include/r_anal.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_base_delete_class</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_method_delete_class</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_vtable_delete_class</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_base_rename_class</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name_old</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name_new</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_method_rename_class</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_class_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_class_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_vtable_rename_class</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_class_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_class_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_class</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>key_attr_types</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"attrtypes.%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>key_attr_type_attrs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"attr.%s.%s"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>attr_type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>key_attr_content</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"attr.%s.%s.%s"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>attr_type</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>key_attr_content_specific</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"attr.%s.%s.%s.specific"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>attr_type</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><enum>enum <block>{
<decl><name>R_ANAL_CLASS_ATTR_TYPE_METHOD</name></decl>,
<decl><name>R_ANAL_CLASS_ATTR_TYPE_VTABLE</name></decl>,
<decl><name>R_ANAL_CLASS_ATTR_TYPE_BASE</name></decl>
}</block></enum></type> <name>RAnalClassAttrType</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_type_id</name><parameter_list>(<parameter><decl><type><name>RAnalClassAttrType</name></type> <name>attr_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>attr_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_CLASS_ATTR_TYPE_METHOD</name></expr>:</case>
<return>return <expr><literal type="string">"method"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_CLASS_ATTR_TYPE_VTABLE</name></expr>:</case>
<return>return <expr><literal type="string">"vtable"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_CLASS_ATTR_TYPE_BASE</name></expr>:</case>
<return>return <expr><literal type="string">"base"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_class_create</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name_sanitized</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>key_class</name> <argument_list>(<argument><expr><name>name_sanitized</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sdb_exists</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>REventClass</name></type> <name>event</name> <init>= <expr><block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <name>name_sanitized</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_event_send</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name>R_EVENT_CLASS_NEW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_class_delete</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name_sanitized</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_class_base_delete_class</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_class_method_delete_class</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_class_vtable_delete_class</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sdb_remove</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes</name></name></expr></argument>, <argument><expr><call><name>key_class</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>key_attr_types</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attr_type_array</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attr_type</name></decl>;</decl_stmt>
<macro><name>sdb_aforeach</name> <argument_list>(<argument>attr_type</argument>, <argument>attr_type_array</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>key_attr_type_attrs</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>, <argument><expr><name>attr_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attr_id_array</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_remove</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr_id_array</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attr_id</name></decl>;</decl_stmt>
<macro><name>sdb_aforeach</name> <argument_list>(<argument>attr_id</argument>, <argument>attr_id_array</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>key_attr_content</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>, <argument><expr><name>attr_type</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_remove</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>key_attr_content_specific</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>, <argument><expr><name>attr_type</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_remove</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_aforeach_next</name> <argument_list>(<argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr_id_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdb_aforeach_next</name> <argument_list>(<argument><expr><name>attr_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr_type_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_remove</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><call><name>key_attr_types</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>REventClass</name></type> <name>event</name> <init>= <expr><block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <name>class_name_sanitized</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_event_send</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name>R_EVENT_CLASS_DEL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_anal_class_exists_raw</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sdb_exists</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes</name></name></expr></argument>, <argument><expr><call><name>key_class</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_class_exists</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name_sanitized</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>r</name> <init>= <expr><call><name>r_anal_class_exists_raw</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>SdbList</name> <modifier>*</modifier></type><name>r_anal_class_get_all</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sorted</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sdb_foreach_list</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes</name></name></expr></argument>, <argument><expr><name>sorted</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_class_foreach</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>SdbForeachCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes</name></name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>rename_key</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_old</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_new</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>key_old</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>content</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdb_remove</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>key_old</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>key_new</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalClassErr</name></type> <name>r_anal_class_rename</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_anal_class_exists</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_ANAL_CLASS_ERR_CLASH</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>old_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_name_sanitized</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_name_sanitized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>old_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalClassErr</name></type> <name>err</name> <init>= <expr><name>R_ANAL_CLASS_ERR_SUCCESS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_anal_class_base_rename_class</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>old_name</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_class_method_rename_class</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>old_name</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_class_vtable_rename_class</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>old_name</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rename_key</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes</name></name></expr></argument>, <argument><expr><call><name>key_class</name> <argument_list>(<argument><expr><name>old_name_sanitized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>key_class</name> <argument_list>(<argument><expr><name>new_name_sanitized</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>R_ANAL_CLASS_ERR_NONEXISTENT_CLASS</name></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attr_types</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><call><name>key_attr_types</name> <argument_list>(<argument><expr><name>old_name_sanitized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attr_type_cur</name></decl>;</decl_stmt>
<macro><name>sdb_aforeach</name> <argument_list>(<argument>attr_type_cur</argument>, <argument>attr_types</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attr_ids</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><call><name>key_attr_type_attrs</name> <argument_list>(<argument><expr><name>old_name</name></expr></argument>, <argument><expr><name>attr_type_cur</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attr_id_cur</name></decl>;</decl_stmt>
<macro><name>sdb_aforeach</name> <argument_list>(<argument>attr_id_cur</argument>, <argument>attr_ids</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>rename_key</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>,
<argument><expr><call><name>key_attr_content</name> <argument_list>(<argument><expr><name>old_name</name></expr></argument>, <argument><expr><name>attr_type_cur</name></expr></argument>, <argument><expr><name>attr_id_cur</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>key_attr_content</name> <argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>attr_type_cur</name></expr></argument>, <argument><expr><name>attr_id_cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_aforeach_next</name> <argument_list>(<argument><expr><name>attr_id_cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rename_key</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>,
<argument><expr><call><name>key_attr_type_attrs</name> <argument_list>(<argument><expr><name>old_name</name></expr></argument>, <argument><expr><name>attr_type_cur</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>key_attr_type_attrs</name> <argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>attr_type_cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_aforeach_next</name> <argument_list>(<argument><expr><name>attr_type_cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rename_key</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><call><name>key_attr_types</name> <argument_list>(<argument><expr><name>old_name_sanitized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>key_attr_types</name> <argument_list>(<argument><expr><name>new_name_sanitized</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>REventClassRename</name></type> <name>event</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name_old</name> <operator>=</operator> <name>old_name_sanitized</name></expr>,
<expr><operator>.</operator><name>name_new</name> <operator>=</operator> <name>new_name_sanitized</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_event_send</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name>R_EVENT_CLASS_RENAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>beach</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>old_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>new_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>r_anal_class_get_attr_raw</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RAnalClassAttrType</name></type> <name>attr_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>specific</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_type_str</name> <init>= <expr><call><name>attr_type_id</name> <argument_list>(<argument><expr><name>attr_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><ternary><condition><expr><name>specific</name></expr>
?</condition><then> <expr><call><name>key_attr_content_specific</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>attr_type_str</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>key_attr_content</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>attr_type_str</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>r_anal_class_get_attr</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RAnalClassAttrType</name></type> <name>attr_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>specific</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name_sanitized</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attr_id_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr_id_sanitized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_anal_class_get_attr_raw</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name_sanitized</name></expr></argument>, <argument><expr><name>attr_type</name></expr></argument>, <argument><expr><name>attr_id_sanitized</name></expr></argument>, <argument><expr><name>specific</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr_id_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>RAnalClassErr</name></type> <name>r_anal_class_set_attr_raw</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RAnalClassAttrType</name></type> <name>attr_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_type_str</name> <init>= <expr><call><name>attr_type_id</name> <argument_list>(<argument><expr><name>attr_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_anal_class_exists_raw</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_ANAL_CLASS_ERR_NONEXISTENT_CLASS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_array_add</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><call><name>key_attr_types</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr_type_str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_array_add</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><call><name>key_attr_type_attrs</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>attr_type_str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><call><name>key_attr_content</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>attr_type_str</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>REventClassAttrSet</name></type> <name>event</name> <init>= <expr><block>{
<expr><operator>.</operator><name>attr</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <name>class_name</name></expr>,
<expr><operator>.</operator><name>attr_type</name> <operator>=</operator> <name>attr_type</name></expr>,
<expr><operator>.</operator><name>attr_id</name> <operator>=</operator> <name>attr_id</name></expr>
}</block></expr>,
<expr><operator>.</operator><name>content</name> <operator>=</operator> <name>content</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_event_send</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name>R_EVENT_CLASS_ATTR_SET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>RAnalClassErr</name></type> <name>r_anal_class_set_attr</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RAnalClassAttrType</name></type> <name>attr_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name_sanitized</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attr_id_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr_id_sanitized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalClassErr</name></type> <name>err</name> <init>= <expr><call><name>r_anal_class_set_attr_raw</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name_sanitized</name></expr></argument>, <argument><expr><name>attr_type</name></expr></argument>, <argument><expr><name>attr_id_sanitized</name></expr></argument>, <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr_id_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RAnalClassErr</name></type> <name>r_anal_class_delete_attr_raw</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RAnalClassAttrType</name></type> <name>attr_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_type_str</name> <init>= <expr><call><name>attr_type_id</name> <argument_list>(<argument><expr><name>attr_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>key_attr_content</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>attr_type_str</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_remove</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>key_attr_content_specific</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>attr_type_str</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_remove</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>key_attr_type_attrs</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>attr_type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_array_remove</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sdb_exists</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_array_remove</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><call><name>key_attr_types</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr_type_str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>REventClassAttr</name></type> <name>event</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <name>class_name</name></expr>,
<expr><operator>.</operator><name>attr_type</name> <operator>=</operator> <name>attr_type</name></expr>,
<expr><operator>.</operator><name>attr_id</name> <operator>=</operator> <name>attr_id</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_event_send</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name>R_EVENT_CLASS_ATTR_DEL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RAnalClassErr</name></type> <name>r_anal_class_delete_attr</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RAnalClassAttrType</name></type> <name>attr_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name_sanitized</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attr_id_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr_id_sanitized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalClassErr</name></type> <name>err</name> <init>= <expr><call><name>r_anal_class_delete_attr_raw</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name_sanitized</name></expr></argument>, <argument><expr><name>attr_type</name></expr></argument>, <argument><expr><name>attr_id_sanitized</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr_id_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RAnalClassErr</name></type> <name>r_anal_class_rename_attr_raw</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RAnalClassAttrType</name></type> <name>attr_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_id_old</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_id_new</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_type_str</name> <init>= <expr><call><name>attr_type_id</name> <argument_list>(<argument><expr><name>attr_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>key_attr_type_attrs</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>attr_type_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sdb_array_contains</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>attr_id_new</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_ANAL_CLASS_ERR_CLASH</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sdb_array_remove</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>attr_id_old</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_ANAL_CLASS_ERR_NONEXISTENT_ATTR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_array_add</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>attr_id_new</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>key_attr_content</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>attr_type_str</name></expr></argument>, <argument><expr><name>attr_id_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>content</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_remove</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>key_attr_content</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>attr_type_str</name></expr></argument>, <argument><expr><name>attr_id_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>key_attr_content_specific</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>attr_type_str</name></expr></argument>, <argument><expr><name>attr_id_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>content</name> <operator>=</operator> <call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>content</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdb_remove</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>key_attr_content_specific</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>attr_type_str</name></expr></argument>, <argument><expr><name>attr_id_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>REventClassAttrRename</name></type> <name>event</name> <init>= <expr><block>{
<expr><operator>.</operator><name>attr</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <name>class_name</name></expr>,
<expr><operator>.</operator><name>attr_type</name> <operator>=</operator> <name>attr_type</name></expr>,
<expr><operator>.</operator><name>attr_id</name> <operator>=</operator> <name>attr_id_old</name></expr>
}</block></expr>,
<expr><operator>.</operator><name>attr_id_new</name> <operator>=</operator> <name>attr_id_new</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_event_send</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name>R_EVENT_CLASS_ATTR_RENAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RAnalClassErr</name></type> <name>r_anal_class_rename_attr</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RAnalClassAttrType</name></type> <name>attr_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_id_old</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_id_new</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name_sanitized</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attr_id_old_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>attr_id_old</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr_id_old_sanitized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attr_id_new_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>attr_id_new</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr_id_new_sanitized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr_id_old_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RAnalClassErr</name></type> <name>ret</name> <init>= <expr><call><name>r_anal_class_rename_attr_raw</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name_sanitized</name></expr></argument>, <argument><expr><name>attr_type</name></expr></argument>, <argument><expr><name>attr_id_old_sanitized</name></expr></argument>, <argument><expr><name>attr_id_new_sanitized</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr_id_old_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr_id_new_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_unique_attr_id_raw</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RAnalClassAttrType</name></type> <name>attr_type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>key_attr_type_attrs</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><call><name>attr_type_id</name> <argument_list>(<argument><expr><name>attr_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64u</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>sdb_array_contains</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>flagname_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name_sanitized</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attr_id_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr_id_sanitized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s.%s.%s"</literal></expr></argument>, <argument><expr><name>attr_type</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attr_id_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_set_flag</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><name><name>anal</name><operator>-&gt;</operator><name>flg_class_set</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>flg_class_set</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_unset_flag</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>unset_name</name></name> <operator>||</operator> <operator>!</operator><name><name>anal</name><operator>-&gt;</operator><name>flg_class_get</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>anal</name><operator>-&gt;</operator><name>flg_class_get</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>unset_name</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_rename_flag</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_name</name> <operator>||</operator> <operator>!</operator><name>new_name</name> <operator>||</operator> <operator>!</operator><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>unset</name></name> <operator>||</operator> <operator>!</operator><name><name>anal</name><operator>-&gt;</operator><name>flg_class_get</name></name> <operator>||</operator> <operator>!</operator><name><name>anal</name><operator>-&gt;</operator><name>flg_class_set</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>flag</name> <init>= <expr><call><name><name>anal</name><operator>-&gt;</operator><name>flg_class_get</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name>old_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>flag</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>unset</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>flg_class_set</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RAnalClassErr</name></type> <name>r_anal_class_add_attr_unique_raw</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RAnalClassAttrType</name></type> <name>attr_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>attr_id_out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>attr_id_out_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>attr_id</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_class_unique_attr_id_raw</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>attr_type</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>attr_id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalClassErr</name></type> <name>err</name> <init>= <expr><call><name>r_anal_class_set_attr</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>attr_type</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>, <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr_id_out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>attr_id_out</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>, <argument><expr><name>attr_id_out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RAnalClassErr</name></type> <name>r_anal_class_add_attr_unique</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RAnalClassAttrType</name></type> <name>attr_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>attr_id_out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>attr_id_out_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name_sanitized</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalClassErr</name></type> <name>err</name> <init>= <expr><call><name>r_anal_class_add_attr_unique_raw</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name_sanitized</name></expr></argument>, <argument><expr><name>attr_type</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>attr_id_out</name></expr></argument>, <argument><expr><name>attr_id_out_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>flagname_method</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>meth_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>flagname_attr</name> <argument_list>(<argument><expr><literal type="string">"method"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>meth_name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_class_method_fini</name><parameter_list>(<parameter><decl><type><name>RAnalMethod</name> <modifier>*</modifier></type><name>meth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>meth</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>R_API</name> <name>RAnalClassErr</name></type> <name>r_anal_class_method_get</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>meth_name</name></decl></parameter>, <parameter><decl><type><name>RAnalMethod</name> <modifier>*</modifier></type><name>meth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><call><name>r_anal_class_get_attr</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_METHOD</name></expr></argument>, <argument><expr><name>meth_name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>content</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_ANAL_CLASS_ERR_NONEXISTENT_ATTR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>content</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_anext</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>meth</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdb_anext</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>meth</name><operator>-&gt;</operator><name>vtable_offset</name></name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>meth</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>meth_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>meth</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_method_fini_proxy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RAnalMethod</name> <modifier>*</modifier></type><name>meth</name> <init>= <expr><name>e</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_class_method_fini</name> <argument_list>(<argument><expr><name>meth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RVector</name> <modifier>*</modifier></type><name>r_anal_class_method_get_all</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><call><name>r_vector_new</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RAnalMethod</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>r_anal_class_method_fini_proxy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vec</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name_sanitized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><call><name>key_attr_type_attrs</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>, <argument><expr><call><name>attr_type_id</name> <argument_list>(<argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_METHOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_reserve</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>sdb_alen</name> <argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<macro><name>sdb_aforeach</name> <argument_list>(<argument>cur</argument>, <argument>array</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalMethod</name></type> <name>meth</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_anal_class_method_get</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meth</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_vector_push</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdb_aforeach_next</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>vec</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalClassErr</name></type> <name>r_anal_class_method_set</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RAnalMethod</name> <modifier>*</modifier></type><name>meth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64u</name><literal type="string">"%c%d"</literal></expr></argument>, <argument><expr><name><name>meth</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>SDB_RS</name></expr></argument>, <argument><expr><name><name>meth</name><operator>-&gt;</operator><name>vtable_offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalClassErr</name></type> <name>err</name> <init>= <expr><call><name>r_anal_class_set_attr</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_METHOD</name></expr></argument>, <argument><expr><name><name>meth</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_anal_class_set_flag</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>flagname_method</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name><name>meth</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>meth</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalClassErr</name></type> <name>r_anal_class_method_rename</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_meth_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_meth_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalClassErr</name></type> <name>err</name> <init>= <expr><call><name>r_anal_class_rename_attr</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_METHOD</name></expr></argument>, <argument><expr><name>old_meth_name</name></expr></argument>, <argument><expr><name>new_meth_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_anal_class_rename_flag</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>,
<argument><expr><call><name>flagname_method</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>old_meth_name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>flagname_method</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>new_meth_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_method_rename_class</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_class_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_class_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><call><name>key_attr_type_attrs</name> <argument_list>(<argument><expr><name>old_class_name</name></expr></argument>, <argument><expr><call><name>attr_type_id</name> <argument_list>(<argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_METHOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>array</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<macro><name>sdb_aforeach</name> <argument_list>(<argument>cur</argument>, <argument>array</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_class_rename_flag</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>,
<argument><expr><call><name>flagname_method</name> <argument_list>(<argument><expr><name>old_class_name</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>flagname_method</name> <argument_list>(<argument><expr><name>new_class_name</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_aforeach_next</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_method_delete_class</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><call><name>key_attr_type_attrs</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><call><name>attr_type_id</name> <argument_list>(<argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_METHOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>array</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<macro><name>sdb_aforeach</name> <argument_list>(<argument>cur</argument>, <argument>array</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_class_unset_flag</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>flagname_method</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_aforeach_next</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalClassErr</name></type> <name>r_anal_class_method_delete</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>meth_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name_sanitized</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>meth_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>meth_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>meth_name_sanitized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RAnalClassErr</name></type> <name>err</name> <init>= <expr><call><name>r_anal_class_delete_attr_raw</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name_sanitized</name></expr></argument>, <argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_METHOD</name></expr></argument>, <argument><expr><name>meth_name_sanitized</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_class_unset_flag</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>flagname_method</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>, <argument><expr><name>meth_name_sanitized</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>meth_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_class_base_fini</name><parameter_list>(<parameter><decl><type><name>RAnalBaseClass</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalClassErr</name></type> <name>r_anal_class_base_get</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_id</name></decl></parameter>, <parameter><decl><type><name>RAnalBaseClass</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><call><name>r_anal_class_get_attr</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_BASE</name></expr></argument>, <argument><expr><name>base_id</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>content</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_ANAL_CLASS_ERR_NONEXISTENT_ATTR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>content</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_anext</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>class_name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>class_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdb_anext</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>base_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_base_fini_proxy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RAnalBaseClass</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>e</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_class_base_fini</name> <argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RVector</name> <modifier>*</modifier></type><name>r_anal_class_base_get_all</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><call><name>r_vector_new</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RAnalBaseClass</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>r_anal_class_base_fini_proxy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vec</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name_sanitized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><call><name>key_attr_type_attrs</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>, <argument><expr><call><name>attr_type_id</name> <argument_list>(<argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_BASE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_reserve</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>sdb_alen</name> <argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<macro><name>sdb_aforeach</name> <argument_list>(<argument>cur</argument>, <argument>array</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalBaseClass</name></type> <name>base</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_anal_class_base_get</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_vector_push</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdb_aforeach_next</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>vec</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RAnalClassErr</name></type> <name>r_anal_class_base_set_raw</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RAnalBaseClass</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_class_name_sanitized</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal> <name>SDB_SS</name> <literal type="string">"%"</literal><name>PFMT64u</name></expr></argument>, <argument><expr><name>base_class_name_sanitized</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalClassErr</name></type> <name>err</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>r_anal_class_set_attr</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_BASE</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>r_anal_class_add_attr_unique</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_BASE</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalClassErr</name></type> <name>r_anal_class_base_set</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RAnalBaseClass</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base_class_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base_class_name_sanitized</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_anal_class_exists_raw</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>base_class_name_sanitized</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>base_class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_ANAL_CLASS_ERR_NONEXISTENT_CLASS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RAnalClassErr</name></type> <name>err</name> <init>= <expr><call><name>r_anal_class_base_set_raw</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>base_class_name_sanitized</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>base_class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalClassErr</name></type> <name>r_anal_class_base_delete</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_anal_class_delete_attr</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_BASE</name></expr></argument>, <argument><expr><name>base_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl>;</decl_stmt>
}</block></struct></type> <name>DeleteClassCtx</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_anal_class_base_delete_class_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>v</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>DeleteClassCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>bases</name> <init>= <expr><call><name>r_anal_class_base_get_all</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalBaseClass</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<macro><name>r_vector_foreach</name> <argument_list>(<argument>bases</argument>, <argument>base</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>class_name</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_class_base_delete</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>bases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_base_delete_class</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DeleteClassCtx</name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>anal</name></expr>, <expr><name>class_name</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_class_foreach</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>r_anal_class_base_delete_class_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name_old</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name_new</name></decl>;</decl_stmt>
}</block></struct></type> <name>RenameClassCtx</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_anal_class_base_rename_class_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>v</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RenameClassCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>bases</name> <init>= <expr><call><name>r_anal_class_base_get_all</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalBaseClass</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<macro><name>r_vector_foreach</name> <argument_list>(<argument>bases</argument>, <argument>base</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>class_name</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>class_name_old</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_class_base_set_raw</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>class_name_new</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>bases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_base_rename_class</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name_old</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name_new</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RenameClassCtx</name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>anal</name></expr>, <expr><name>class_name_old</name></expr>, <expr><name>class_name_new</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_class_foreach</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>r_anal_class_base_rename_class_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>flagname_vtable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vtable_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>flagname_attr</name> <argument_list>(<argument><expr><literal type="string">"vtable"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>vtable_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_class_vtable_fini</name><parameter_list>(<parameter><decl><type><name>RAnalVTable</name> <modifier>*</modifier></type><name>vtable</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalClassErr</name></type> <name>r_anal_class_vtable_get</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vtable_id</name></decl></parameter>, <parameter><decl><type><name>RAnalVTable</name> <modifier>*</modifier></type><name>vtable</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><call><name>r_anal_class_get_attr</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_VTABLE</name></expr></argument>, <argument><expr><name>vtable_id</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>content</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_ANAL_CLASS_ERR_NONEXISTENT_ATTR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>content</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_anext</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtable</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdb_anext</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtable</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_anext</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtable</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtable</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>vtable_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vtable</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_vtable_fini_proxy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RAnalVTable</name> <modifier>*</modifier></type><name>vtable</name> <init>= <expr><name>e</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_class_vtable_fini</name> <argument_list>(<argument><expr><name>vtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RVector</name> <modifier>*</modifier></type><name>r_anal_class_vtable_get_all</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><call><name>r_vector_new</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RAnalVTable</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>r_anal_class_vtable_fini_proxy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vec</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name_sanitized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><call><name>key_attr_type_attrs</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>, <argument><expr><call><name>attr_type_id</name> <argument_list>(<argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_VTABLE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_reserve</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>sdb_alen</name> <argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<macro><name>sdb_aforeach</name> <argument_list>(<argument>cur</argument>, <argument>array</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalVTable</name></type> <name>vtable</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_anal_class_vtable_get</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtable</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_vector_push</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdb_aforeach_next</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>vec</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalClassErr</name></type> <name>r_anal_class_vtable_set</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RAnalVTable</name> <modifier>*</modifier></type><name>vtable</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <macro><name>sdb_fmt</name> <argument_list>(<argument><literal type="string">"0x%"</literal>PFMT64x SDB_SS <literal type="string">"%"</literal>PFMT64u SDB_SS <literal type="string">"%"</literal>PFMT64u</argument>, <argument>vtable-&gt;addr</argument>, <argument>vtable-&gt;offset</argument>, <argument>vtable-&gt;size</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vtable</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_anal_class_set_attr</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_VTABLE</name></expr></argument>, <argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vtable</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vtable</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RAnalClassErr</name></type> <name>err</name> <init>= <expr><call><name>r_anal_class_add_attr_unique</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_VTABLE</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_class_set_flag</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>flagname_vtable</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_vtable_rename_class</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_class_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_class_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><call><name>key_attr_type_attrs</name> <argument_list>(<argument><expr><name>old_class_name</name></expr></argument>, <argument><expr><call><name>attr_type_id</name> <argument_list>(<argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_VTABLE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>array</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<macro><name>sdb_aforeach</name> <argument_list>(<argument>cur</argument>, <argument>array</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_class_rename_flag</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>,
<argument><expr><call><name>flagname_vtable</name> <argument_list>(<argument><expr><name>old_class_name</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>flagname_vtable</name> <argument_list>(<argument><expr><name>new_class_name</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_aforeach_next</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_vtable_delete_class</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_classes_attrs</name></name></expr></argument>, <argument><expr><call><name>key_attr_type_attrs</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><call><name>attr_type_id</name> <argument_list>(<argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_VTABLE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>array</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<macro><name>sdb_aforeach</name> <argument_list>(<argument>cur</argument>, <argument>array</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_class_unset_flag</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>flagname_vtable</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_aforeach_next</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalClassErr</name></type> <name>r_anal_class_vtable_delete</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vtable_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name_sanitized</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vtable_id_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>vtable_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vtable_id_sanitized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R_ANAL_CLASS_ERR_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RAnalClassErr</name></type> <name>err</name> <init>= <expr><call><name>r_anal_class_delete_attr_raw</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name_sanitized</name></expr></argument>, <argument><expr><name>R_ANAL_CLASS_ATTR_TYPE_VTABLE</name></expr></argument>, <argument><expr><name>vtable_id_sanitized</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>R_ANAL_CLASS_ERR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_class_unset_flag</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>flagname_vtable</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>, <argument><expr><name>vtable_id_sanitized</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>vtable_id_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_print</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lng</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>bases</name> <init>= <expr><call><name>r_anal_class_base_get_all</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bases</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalBaseClass</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<macro><name>r_vector_foreach</name> <argument_list>(<argument>bases</argument>, <argument>base</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>bases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>lng</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vtables</name> <init>= <expr><call><name>r_anal_class_vtable_get_all</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>vtables</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalVTable</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<macro><name>r_vector_foreach</name> <argument_list>(<argument>vtables</argument>, <argument>vtable</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" (vtable at 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vtable</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" in class at +0x%"</literal><name>PFMT64x</name><literal type="string">")\n"</literal></expr></argument>, <argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>vtables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>methods</name> <init>= <expr><call><name>r_anal_class_method_get_all</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>methods</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalMethod</name> <modifier>*</modifier></type><name>meth</name></decl>;</decl_stmt>
<macro><name>r_vector_foreach</name> <argument_list>(<argument>methods</argument>, <argument>meth</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" %s @ 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>meth</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>meth</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>meth</name><operator>-&gt;</operator><name>vtable_offset</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" (vtable + 0x%"</literal><name>PFMT64x</name><literal type="string">")\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>meth</name><operator>-&gt;</operator><name>vtable_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_print_cmd</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>bases</name> <init>= <expr><call><name>r_anal_class_base_get_all</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bases</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalBaseClass</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<macro><name>r_vector_foreach</name> <argument_list>(<argument>bases</argument>, <argument>base</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"acb %s %s %"</literal><name>PFMT64u</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>bases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vtables</name> <init>= <expr><call><name>r_anal_class_vtable_get_all</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>vtables</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalVTable</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<macro><name>r_vector_foreach</name> <argument_list>(<argument>vtables</argument>, <argument>vtable</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"acv %s 0x%"</literal><name>PFMT64x</name><literal type="string">" %"</literal><name>PFMT64u</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>vtables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>methods</name> <init>= <expr><call><name>r_anal_class_method_get_all</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>methods</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalMethod</name> <modifier>*</modifier></type><name>meth</name></decl>;</decl_stmt>
<macro><name>r_vector_foreach</name> <argument_list>(<argument>methods</argument>, <argument>meth</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"acm %s %s 0x%"</literal><name>PFMT64x</name><literal type="string">" %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name><name>meth</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>meth</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>meth</name><operator>-&gt;</operator><name>vtable_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_json</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"bases"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>bases</name> <init>= <expr><call><name>r_anal_class_base_get_all</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bases</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalBaseClass</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<macro><name>r_vector_foreach</name> <argument_list>(<argument>bases</argument>, <argument>base</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>bases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"vtables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vtables</name> <init>= <expr><call><name>r_anal_class_vtable_get_all</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>vtables</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalVTable</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<macro><name>r_vector_foreach</name> <argument_list>(<argument>vtables</argument>, <argument>vtable</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>, <argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"methods"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>methods</name> <init>= <expr><call><name>r_anal_class_method_get_all</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>methods</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalMethod</name> <modifier>*</modifier></type><name>meth</name></decl>;</decl_stmt>
<macro><name>r_vector_foreach</name> <argument_list>(<argument>methods</argument>, <argument>meth</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name><name>meth</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>, <argument><expr><name><name>meth</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>meth</name><operator>-&gt;</operator><name>vtable_offset</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"vtable_offset"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>meth</name><operator>-&gt;</operator><name>vtable_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl>;</decl_stmt>
}</block></struct></type> <name>ListJsonCtx</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_anal_class_list_json_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ListJsonCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_class_json</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>j</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_anal_class_list_json</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>pj_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>j</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ListJsonCtx</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>anal</name></name> <operator>=</operator> <name>anal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>j</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_class_foreach</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>r_anal_class_list_json_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>pj_string</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pj_free</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_class_list</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_class_list_json</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>classes</name> <init>= <expr><call><name>r_anal_class_get_all</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>mode</name> <operator>!=</operator> <literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<macro><name>ls_foreach</name> <argument_list>(<argument>classes</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"ac %s\n"</literal></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ls_foreach</name> <argument_list>(<argument>classes</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_class_print_cmd</name><argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>ls_foreach</name> <argument_list>(<argument>classes</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_class_print</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mode</name> <operator>==</operator> <literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>classes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_class_list_bases</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name_sanitized</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_anal_class_exists_raw</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s:\n"</literal></expr></argument>, <argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>bases</name> <init>= <expr><call><name>r_anal_class_base_get_all</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalBaseClass</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<macro><name>r_vector_foreach</name> <argument_list>(<argument>bases</argument>, <argument>base</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" %4s %s @ +0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>bases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_class_list_vtables</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name_sanitized</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_anal_class_exists_raw</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s:\n"</literal></expr></argument>, <argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vtables</name> <init>= <expr><call><name>r_anal_class_vtable_get_all</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>vtables</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalVTable</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<macro><name>r_vector_foreach</name> <argument_list>(<argument>vtables</argument>, <argument>vtable</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" %4s vtable 0x%"</literal><name>PFMT64x</name><literal type="string">" @ +0x%"</literal><name>PFMT64x</name><literal type="string">" size:+0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>vtables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>list_all_functions_at_vtable_offset</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RVTableContext</name></type> <name>vtableContext</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_vtable_begin</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtableContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>function_ptr_size</name> <init>= <expr><name><name>vtableContext</name><operator>.</operator><name>word_size</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut64</name></type> <name>func_address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vtables</name> <init>= <expr><call><name>r_anal_class_vtable_get_all</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalVTable</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vtables</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<macro><name>r_vector_foreach</name> <argument_list>(<argument>vtables</argument>, <argument>vtable</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vtable</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>function_ptr_size</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>vtableContext</name><operator>.</operator><name>read_addr</name></name><argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>addr</name></name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>func_address</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Function address: 0x%08"</literal><name>PFMT64x</name><literal type="string">", in %s vtable %s\n"</literal></expr></argument>, <argument><expr><name>func_address</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name><name>vtable</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name>vtables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_class_list_vtable_offset_functions</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>class_name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name_sanitized</name> <init>= <expr><call><name>r_str_sanitize_sdb_key</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name_sanitized</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_anal_class_exists_raw</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name_sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_all_functions_at_vtable_offset</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>classes</name> <init>= <expr><call><name>r_anal_class_get_all</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>
<macro><name>ls_foreach</name> <argument_list>(<argument>classes</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>list_all_functions_at_vtable_offset</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>classes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
