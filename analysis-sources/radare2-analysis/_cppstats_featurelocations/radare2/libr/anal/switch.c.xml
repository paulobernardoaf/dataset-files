<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\switch.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>RAnalSwitchOp</name> <modifier>*</modifier></type><name>__switch_op_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalSwitchOp</name> <modifier>*</modifier></type> <name>swop</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalSwitchOp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>swop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>swop</name><operator>-&gt;</operator><name>cases</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>swop</name><operator>-&gt;</operator><name>cases</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>swop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>swop</name><operator>-&gt;</operator><name>cases</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>swop</name><operator>-&gt;</operator><name>min_val</name></name> <operator>=</operator> <name><name>swop</name><operator>-&gt;</operator><name>def_val</name></name> <operator>=</operator> <name><name>swop</name><operator>-&gt;</operator><name>max_val</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>swop</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalSwitchOp</name> <modifier>*</modifier></type><name>r_anal_switch_op_new</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>min_val</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max_val</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>def_val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalSwitchOp</name> <modifier>*</modifier></type><name>swop</name> <init>= <expr><call><name>__switch_op_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>swop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>swop</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>swop</name><operator>-&gt;</operator><name>min_val</name></name> <operator>=</operator> <name>min_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>swop</name><operator>-&gt;</operator><name>def_val</name></name> <operator>=</operator> <name>def_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>swop</name><operator>-&gt;</operator><name>max_val</name></name> <operator>=</operator> <name>max_val</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>swop</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalCaseOp</name> <modifier>*</modifier></type> <name>r_anal_case_op_new</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>jump</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalCaseOp</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalCaseOp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>jump</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_switch_op_free</name><parameter_list>(<parameter><decl><type><name>RAnalSwitchOp</name> <modifier>*</modifier></type> <name>swop</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>swop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>swop</name><operator>-&gt;</operator><name>cases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>swop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalCaseOp</name><modifier>*</modifier></type> <name>r_anal_switch_op_add_case</name><parameter_list>(<parameter><decl><type><name>RAnalSwitchOp</name> <modifier>*</modifier></type> <name>swop</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>jump</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>swop</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>!=</operator> <name>UT64_MAX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RAnalCaseOp</name> <modifier>*</modifier></type> <name>caseop</name> <init>= <expr><call><name>r_anal_case_op_new</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>jump</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>caseop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>swop</name><operator>-&gt;</operator><name>cases</name></name></expr></argument>, <argument><expr><name>caseop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>caseop</name></expr>;</return>
</block_content>}</block></function>
</unit>
