<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\vtable.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_anal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTABLE_BUFF_SIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTABLE_READ_ADDR_FUNC</name><parameter_list>(<parameter><type><name>fname</name></type></parameter>, <parameter><type><name>read_fname</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static bool fname(RAnal *anal, ut64 addr, ut64 *buf) { ut8 tmp[sz]; if(!anal-&gt;iob.read_at(anal-&gt;iob.io, addr, tmp, sz)) { return false; } *buf = read_fname(tmp); return true; }</cpp:value></cpp:define>








<macro><name>VTABLE_READ_ADDR_FUNC</name> <argument_list>(<argument>vtable_read_addr_le8</argument>, <argument>r_read_le8</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>VTABLE_READ_ADDR_FUNC</name> <argument_list>(<argument>vtable_read_addr_le16</argument>, <argument>r_read_le16</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>VTABLE_READ_ADDR_FUNC</name> <argument_list>(<argument>vtable_read_addr_le32</argument>, <argument>r_read_le32</argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>VTABLE_READ_ADDR_FUNC</name> <argument_list>(<argument>vtable_read_addr_le64</argument>, <argument>r_read_le64</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>VTABLE_READ_ADDR_FUNC</name> <argument_list>(<argument>vtable_read_addr_be8</argument>, <argument>r_read_be8</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>VTABLE_READ_ADDR_FUNC</name> <argument_list>(<argument>vtable_read_addr_be16</argument>, <argument>r_read_be16</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>VTABLE_READ_ADDR_FUNC</name> <argument_list>(<argument>vtable_read_addr_be32</argument>, <argument>r_read_be32</argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>VTABLE_READ_ADDR_FUNC</name> <argument_list>(<argument>vtable_read_addr_be64</argument>, <argument>r_read_be64</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>




<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_vtable_info_free</name><parameter_list>(<parameter><decl><type><name>RVTableInfo</name> <modifier>*</modifier></type><name>vtable</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vtable</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtable</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>vtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_anal_vtable_info_get_size</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>RVTableInfo</name> <modifier>*</modifier></type><name>vtable</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>vtable</name><operator>-&gt;</operator><name>methods</name><operator>.</operator><name>len</name></name> <operator>*</operator> <name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_vtable_begin</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name> <operator>=</operator> <name>anal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>abi</name></name> <operator>=</operator> <name><name>anal</name><operator>-&gt;</operator><name>cpp_abi</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>word_size</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <operator>=</operator> <ternary><condition><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr> ?</condition><then> <expr><name>vtable_read_addr_be8</name></expr> </then><else>: <expr><name>vtable_read_addr_le8</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <operator>=</operator> <ternary><condition><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr> ?</condition><then> <expr><name>vtable_read_addr_be16</name></expr> </then><else>: <expr><name>vtable_read_addr_le16</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">32</literal></expr>:</case>
<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <operator>=</operator> <ternary><condition><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr> ?</condition><then> <expr><name>vtable_read_addr_be32</name></expr> </then><else>: <expr><name>vtable_read_addr_le32</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">64</literal></expr>:</case>
<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <operator>=</operator> <ternary><condition><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr> ?</condition><then> <expr><name>vtable_read_addr_be64</name></expr> </then><else>: <expr><name>vtable_read_addr_le64</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>vtable_addr_in_text_section</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>curAddress</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinSection</name><modifier>*</modifier></type> <name>value</name> <init>= <expr><call><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>binb</name><operator>.</operator><name>get_vsect_at</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>binb</name><operator>.</operator><name>bin</name></name></expr></argument>, <argument><expr><name>curAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">".text"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>vtable_is_value_in_text_section</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>curAddress</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>curAddressValue</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>curAddress</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curAddressValue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>vtable_addr_in_text_section</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>curAddressValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>curAddressValue</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>vtable_section_can_contain_vtables</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>section</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>is_segment</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">".rodata"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">".rdata"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">".data.rel.ro"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>r_str_endswith</name> <argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"__const"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vtable_is_addr_vtable_start</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>curAddress</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalRef</name> <modifier>*</modifier></type><name>xref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>xrefIter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>curAddress</name> <operator>||</operator> <name>curAddress</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>curAddress</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vtable_is_value_in_text_section</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>curAddress</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>xrefs</name> <init>= <expr><call><name>r_anal_xrefs_get</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>curAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>xrefs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>xrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>xrefs</argument>, <argument>xrefIter</argument>, <argument>xref</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vtable_addr_in_text_section</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>xref</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><name>VTABLE_BUFF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>xref</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalOp</name></type> <name>analop</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>analop</name></expr></argument>, <argument><expr><name><name>xref</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_BASIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>analop</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_MOV</name>
<operator>||</operator> <name><name>analop</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_LEA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>xrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>analop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>analop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>xrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RVTableInfo</name> <modifier>*</modifier></type><name>r_anal_vtable_parse_at</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RVTableInfo</name> <modifier>*</modifier></type><name>vtable</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RVTableInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vtable</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vtable</name><operator>-&gt;</operator><name>saddr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_vector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtable</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RVTableMethodInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RVTableMethodInfo</name></type> <name>meth</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>vtable_is_value_in_text_section</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>meth</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>meth</name><operator>.</operator><name>vtable_offset</name></name> <operator>=</operator> <name>addr</name> <operator>-</operator> <name><name>vtable</name><operator>-&gt;</operator><name>saddr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_vector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtable</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ll</name> <init>= <expr><call><name>r_anal_xrefs_get</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>vtable</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_anal_vtable_search</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anal</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>vtables</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_anal_vtable_info_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vtables</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><call><name><name>anal</name><operator>-&gt;</operator><name>binb</name><operator>.</operator><name>get_sections</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>binb</name><operator>.</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sections</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>vtables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>section</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>sections</argument>, <argument>iter</argument>, <argument>section</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vtable_section_can_contain_vtables</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<decl_stmt><decl><type><name>ut64</name></type> <name>startAddress</name> <init>= <expr><name><name>section</name><operator>-&gt;</operator><name>vaddr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>endAddress</name> <init>= <expr><name>startAddress</name> <operator>+</operator> <operator>(</operator><name><name>section</name><operator>-&gt;</operator><name>vsize</name></name><operator>)</operator> <operator>-</operator> <name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>startAddress</name> <operator>&lt;=</operator> <name>endAddress</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vtable_is_addr_vtable_start</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>startAddress</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RVTableInfo</name> <modifier>*</modifier></type><name>vtable</name> <init>= <expr><call><name>r_anal_vtable_parse_at</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>startAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>vtable</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>vtables</name></expr></argument>, <argument><expr><name>vtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><call><name>r_anal_vtable_info_get_size</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>vtable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>startAddress</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>startAddress</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>

<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>vtables</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>vtables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>vtables</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_list_vtables</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rad</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RVTableContext</name></type> <name>context</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_vtable_begin</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>noMethodName</name> <init>= <expr><literal type="string">"No Name found"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RVTableMethodInfo</name> <modifier>*</modifier></type><name>curMethod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name><modifier>*</modifier></type> <name>vtableIter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RVTableInfo</name><modifier>*</modifier></type> <name>table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>vtables</name> <init>= <expr><call><name>r_anal_vtable_search</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rad</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>isFirstElement</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>vtables</argument>, <argument>vtableIter</argument>, <argument>table</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isFirstElement</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isFirstMethod</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"{\"offset\":%"</literal><name>PFMT64d</name><literal type="string">",\"methods\":["</literal></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>saddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_vector_foreach</name> <argument_list>(<argument>&amp;table-&gt;methods</argument>, <argument>curMethod</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isFirstMethod</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>curMethod</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>name</name> <init>= <expr><ternary><condition><expr><name>fcn</name></expr> ?</condition><then> <expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"{\"offset\":%"</literal><name>PFMT64d</name><literal type="string">",\"name\":\"%s\"}"</literal></expr></argument>,
<argument><expr><name><name>curMethod</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><name>noMethodName</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>isFirstMethod</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"]}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>isFirstElement</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rad</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>vtables</argument>, <argument>vtableIter</argument>, <argument>table</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"f vtable.0x%08"</literal><name>PFMT64x</name><literal type="string">" %"</literal><name>PFMT64d</name><literal type="string">" @ 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>table</name><operator>-&gt;</operator><name>saddr</name></name></expr></argument>,
<argument><expr><call><name>r_anal_vtable_info_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>table</name><operator>-&gt;</operator><name>saddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_vector_foreach</name> <argument_list>(<argument>&amp;table-&gt;methods</argument>, <argument>curMethod</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Cd %d @ 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>word_size</name></name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>saddr</name></name> <operator>+</operator> <name><name>curMethod</name><operator>-&gt;</operator><name>vtable_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>curMethod</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name> <init>= <expr><ternary><condition><expr><name>fcn</name></expr> ?</condition><then> <expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"f %s=0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>curMethod</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"f method.virtual.0x%08"</literal><name>PFMT64x</name><literal type="string">"=0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>curMethod</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>curMethod</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>vtables</argument>, <argument>vtableIter</argument>, <argument>table</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>vtableStartAddress</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>saddr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\nVtable Found at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>vtableStartAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_vector_foreach</name> <argument_list>(<argument>&amp;table-&gt;methods</argument>, <argument>curMethod</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>curMethod</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>name</name> <init>= <expr><ternary><condition><expr><name>fcn</name></expr> ?</condition><then> <expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" : %s\n"</literal></expr></argument>, <argument><expr><name>vtableStartAddress</name></expr></argument>, <argument><expr><ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><name>noMethodName</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vtableStartAddress</name> <operator>+=</operator> <name><name>context</name><operator>.</operator><name>word_size</name></name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>vtables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


</unit>
