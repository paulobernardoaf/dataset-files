<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\p\anal_m68k_cs.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;capstone/capstone.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAPSTONE_M68K_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAPSTONE_HAS_M68K</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAPSTONE_HAS_M68K</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name> <name>(</name><cpp:literal>"Cannot find capstone-m68k support"</cpp:literal><name>)</name></cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:warning>#<cpp:directive>warning</cpp:directive> Cannot find capstone-m68k support</cpp:warning>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CAPSTONE_HAS_M68K</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;capstone/m68k.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPERAND</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;m68k.operands[x]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cs_reg_name (*handle, insn-&gt;detail-&gt;m68k.operands[x].reg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;m68k.operands[x].imm</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMBASE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cs_reg_name(*handle, insn-&gt;detail-&gt;m68k.operands[x].mem.base)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMINDEX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;m68k.operands[x].mem.index</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMDISP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;m68k.operands[x].mem.disp</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>make_64bits_address</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>UT32_MAX</name> <operator>&amp;</operator> <name>address</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>handle_branch_instruction</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>cs_m68k</name> <modifier>*</modifier></type><name>m68k</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>m68k</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>M68K_OP_BR_DISP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>make_64bits_address</name> <argument_list>(<argument><expr><name>addr</name> <operator>+</operator> <name><name>m68k</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>br_disp</name><operator>.</operator><name>disp</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <call><name>make_64bits_address</name> <argument_list>(<argument><expr><name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>make_64bits_address</name> <argument_list>(<argument><expr><name>addr</name> <operator>+</operator> <name><name>m68k</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>br_disp</name><operator>.</operator><name>disp</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <call><name>make_64bits_address</name> <argument_list>(<argument><expr><name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>handle_jump_instruction</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>cs_m68k</name> <modifier>*</modifier></type><name>m68k</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>m68k</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>address_mode</name> <operator>==</operator> <name>M68K_AM_PCI_DISP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>make_64bits_address</name> <argument_list>(<argument><expr><name>addr</name> <operator>+</operator> <name><name>m68k</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>make_64bits_address</name> <argument_list>(<argument><expr><name><name>m68k</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <call><name>make_64bits_address</name> <argument_list>(<argument><expr><name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opex</name><parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>csh</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>cs_m68k</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>&amp;</operator><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>m68k</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"operands\":["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>op_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>cs_m68k_op</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>M68K_OP_REG</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"reg\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_OP_IMM</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"imm\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_OP_MEM</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"mem\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>base_reg</name></name> <operator>!=</operator> <name>M68K_REG_INVALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"base_reg\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>base_reg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>index_reg</name></name> <operator>!=</operator> <name>M68K_REG_INVALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"base_reg\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>index_reg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>in_base_reg</name></name> <operator>!=</operator> <name>M68K_REG_INVALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"base_reg\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>in_base_reg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"in_disp\":%"</literal><name>PFMT64d</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>in_disp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"out_disp\":%"</literal><name>PFMT64d</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>out_disp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"disp\":%"</literal><name>PFMT64d</name><literal type="string">""</literal></expr></argument>, <argument><expr><operator>(</operator><name>st64</name><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>disp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"scale\":%"</literal><name>PFMT64d</name><literal type="string">""</literal></expr></argument>, <argument><expr><operator>(</operator><name>st64</name><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"bitfield\":%"</literal><name>PFMT64d</name><literal type="string">""</literal></expr></argument>, <argument><expr><operator>(</operator><name>st64</name><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>bitfield</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"width\":%"</literal><name>PFMT64d</name><literal type="string">""</literal></expr></argument>, <argument><expr><operator>(</operator><name>st64</name><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"offset\":%"</literal><name>PFMT64d</name><literal type="string">""</literal></expr></argument>, <argument><expr><operator>(</operator><name>st64</name><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"index_size\":%"</literal><name>PFMT64d</name><literal type="string">""</literal></expr></argument>, <argument><expr><operator>(</operator><name>st64</name><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>index_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"invalid\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"]}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_reg_name</name><parameter_list>(<parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>csh</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg_num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>OPERAND</name> <argument_list>(<argument><expr><name>reg_num</name></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>M68K_OP_REG</name></expr>:</case>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><call><name>OPERAND</name> <argument_list>(<argument><expr><name>reg_num</name></expr></argument>)</argument_list></call><operator>.</operator><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_OP_MEM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OPERAND</name> <argument_list>(<argument><expr><name>reg_num</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base_reg</name></name> <operator>!=</operator> <name>M68K_REG_INVALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><call><name>OPERAND</name> <argument_list>(<argument><expr><name>reg_num</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>op_fillval</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>csh</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>RRegItem</name></type> <name>reg</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_TYPE_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>:</case>
<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>M68K_OP_MEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <operator>&amp;</operator><name>reg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_reg_name</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>delta</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>M68K_OP_MEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <operator>&amp;</operator><name>reg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_reg_name</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_LEA</name></expr>:</case>
<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>M68K_OP_MEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <operator>&amp;</operator><name>reg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_reg_name</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>analop</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>opsize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>csh</name></type> <name>handle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>omode</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>obits</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cs_insn</name><modifier>*</modifier></type> <name>insn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cs_m68k</name> <modifier>*</modifier></type><name>m68k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cs_detail</name> <modifier>*</modifier></type><name>detail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>big_endian</name></name></expr>?</condition><then> <expr><name>CS_MODE_BIG_ENDIAN</name></expr></then><else>: <expr><name>CS_MODE_LITTLE_ENDIAN</name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>omode</name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <name>obits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cs_close</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>omode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>obits</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"68000"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CS_MODE_M68K_000</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"68010"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CS_MODE_M68K_010</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"68020"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CS_MODE_M68K_020</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"68030"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CS_MODE_M68K_030</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"68040"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CS_MODE_M68K_040</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"68060"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CS_MODE_M68K_060</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cs_open</name> <argument_list>(<argument><expr><name>CS_ARCH_M68K</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>CS_ERR_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fin</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cs_option</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CS_OPT_DETAIL</name></expr></argument>, <argument><expr><name>CS_OPT_ON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>cs_disasm</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>opsize</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\xff\xff"</literal></expr></argument>, <argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>opsize</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>detail</name> <operator>=</operator> <name><name>insn</name><operator>-&gt;</operator><name>detail</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>m68k</name> <operator>=</operator> <operator>&amp;</operator><name><name>detail</name><operator>-&gt;</operator><name>m68k</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>opsize</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_OPEX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>opex</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>opex</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>M68K_INS_INVALID</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_ADD</name></expr>:</case>
<case>case <expr><name>M68K_INS_ADDA</name></expr>:</case>
<case>case <expr><name>M68K_INS_ADDI</name></expr>:</case>
<case>case <expr><name>M68K_INS_ADDQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_ADDX</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_AND</name></expr>:</case>
<case>case <expr><name>M68K_INS_ANDI</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_ASL</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_ASR</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_ABCD</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>M68K_INS_BHS</name></expr>:</case>
<case>case <expr><name>M68K_INS_BLO</name></expr>:</case>
<case>case <expr><name>M68K_INS_BHI</name></expr>:</case>
<case>case <expr><name>M68K_INS_BLS</name></expr>:</case>
<case>case <expr><name>M68K_INS_BCC</name></expr>:</case>
<case>case <expr><name>M68K_INS_BCS</name></expr>:</case>
<case>case <expr><name>M68K_INS_BNE</name></expr>:</case>
<case>case <expr><name>M68K_INS_BEQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_BVC</name></expr>:</case>
<case>case <expr><name>M68K_INS_BVS</name></expr>:</case>
<case>case <expr><name>M68K_INS_BPL</name></expr>:</case>
<case>case <expr><name>M68K_INS_BMI</name></expr>:</case>
<case>case <expr><name>M68K_INS_BGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_BLT</name></expr>:</case>
<case>case <expr><name>M68K_INS_BGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_BLE</name></expr>:</case>
<expr_stmt><expr><call><name>handle_branch_instruction</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>m68k</name></expr></argument>, <argument><expr><name>R_ANAL_OP_TYPE_CJMP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_BRA</name></expr>:</case>
<expr_stmt><expr><call><name>handle_branch_instruction</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>m68k</name></expr></argument>, <argument><expr><name>R_ANAL_OP_TYPE_JMP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_BSR</name></expr>:</case>
<expr_stmt><expr><call><name>handle_branch_instruction</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>m68k</name></expr></argument>, <argument><expr><name>R_ANAL_OP_TYPE_CALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_BCHG</name></expr>:</case>
<case>case <expr><name>M68K_INS_BCLR</name></expr>:</case>
<case>case <expr><name>M68K_INS_BSET</name></expr>:</case>
<case>case <expr><name>M68K_INS_BTST</name></expr>:</case>
<case>case <expr><name>M68K_INS_BFCHG</name></expr>:</case>
<case>case <expr><name>M68K_INS_BFCLR</name></expr>:</case>
<case>case <expr><name>M68K_INS_BFEXTS</name></expr>:</case>
<case>case <expr><name>M68K_INS_BFEXTU</name></expr>:</case>
<case>case <expr><name>M68K_INS_BFFFO</name></expr>:</case>
<case>case <expr><name>M68K_INS_BFINS</name></expr>:</case>
<case>case <expr><name>M68K_INS_BFSET</name></expr>:</case>
<case>case <expr><name>M68K_INS_BFTST</name></expr>:</case>
<case>case <expr><name>M68K_INS_BKPT</name></expr>:</case>
<case>case <expr><name>M68K_INS_CALLM</name></expr>:</case>
<case>case <expr><name>M68K_INS_CAS</name></expr>:</case>
<case>case <expr><name>M68K_INS_CAS2</name></expr>:</case>
<case>case <expr><name>M68K_INS_CHK</name></expr>:</case>
<case>case <expr><name>M68K_INS_CHK2</name></expr>:</case>
<case>case <expr><name>M68K_INS_CLR</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>M68K_INS_CMP</name></expr>:</case>
<case>case <expr><name>M68K_INS_CMPA</name></expr>:</case>
<case>case <expr><name>M68K_INS_CMPI</name></expr>:</case>
<case>case <expr><name>M68K_INS_CMPM</name></expr>:</case>
<case>case <expr><name>M68K_INS_CMP2</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_CINVL</name></expr>:</case>
<case>case <expr><name>M68K_INS_CINVP</name></expr>:</case>
<case>case <expr><name>M68K_INS_CINVA</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_CPUSHL</name></expr>:</case>
<case>case <expr><name>M68K_INS_CPUSHP</name></expr>:</case>
<case>case <expr><name>M68K_INS_CPUSHA</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>M68K_INS_DBT</name></expr>:</case>
<case>case <expr><name>M68K_INS_DBF</name></expr>:</case>
<case>case <expr><name>M68K_INS_DBHI</name></expr>:</case>
<case>case <expr><name>M68K_INS_DBLS</name></expr>:</case>
<case>case <expr><name>M68K_INS_DBCC</name></expr>:</case>
<case>case <expr><name>M68K_INS_DBCS</name></expr>:</case>
<case>case <expr><name>M68K_INS_DBNE</name></expr>:</case>
<case>case <expr><name>M68K_INS_DBEQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_DBVC</name></expr>:</case>
<case>case <expr><name>M68K_INS_DBVS</name></expr>:</case>
<case>case <expr><name>M68K_INS_DBPL</name></expr>:</case>
<case>case <expr><name>M68K_INS_DBMI</name></expr>:</case>
<case>case <expr><name>M68K_INS_DBGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_DBLT</name></expr>:</case>
<case>case <expr><name>M68K_INS_DBGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_DBLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_DBRA</name></expr>:</case>
<expr_stmt><expr><call><name>handle_branch_instruction</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>m68k</name></expr></argument>, <argument><expr><name>R_ANAL_OP_TYPE_CJMP</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_DIVS</name></expr>:</case>
<case>case <expr><name>M68K_INS_DIVSL</name></expr>:</case>
<case>case <expr><name>M68K_INS_DIVU</name></expr>:</case>
<case>case <expr><name>M68K_INS_DIVUL</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_DIV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_EOR</name></expr>:</case>
<case>case <expr><name>M68K_INS_EORI</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_EXG</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_EXT</name></expr>:</case>
<case>case <expr><name>M68K_INS_EXTB</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>M68K_INS_FABS</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSABS</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDABS</name></expr>:</case>
<case>case <expr><name>M68K_INS_FACOS</name></expr>:</case>
<case>case <expr><name>M68K_INS_FADD</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSADD</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDADD</name></expr>:</case>
<case>case <expr><name>M68K_INS_FASIN</name></expr>:</case>
<case>case <expr><name>M68K_INS_FATAN</name></expr>:</case>
<case>case <expr><name>M68K_INS_FATANH</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBF</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBEQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBOGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBOGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBOLT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBOLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBOGL</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBOR</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBUN</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBUEQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBUGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBUGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBULT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBULE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBNE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBSF</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBSEQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBLT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBGL</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBGLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBNGLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBNGL</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBNLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBNLT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBNGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBNGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBSNE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FBST</name></expr>:</case>
<case>case <expr><name>M68K_INS_FCMP</name></expr>:</case>
<case>case <expr><name>M68K_INS_FCOS</name></expr>:</case>
<case>case <expr><name>M68K_INS_FCOSH</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBF</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBEQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBOGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBOGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBOLT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBOLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBOGL</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBOR</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBUN</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBUEQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBUGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBUGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBULT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBULE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBNE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBSF</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBSEQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBLT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBGL</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBGLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBNGLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBNGL</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBNLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBNLT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBNGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBNGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBSNE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDBST</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDIV</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSDIV</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDDIV</name></expr>:</case>
<case>case <expr><name>M68K_INS_FETOX</name></expr>:</case>
<case>case <expr><name>M68K_INS_FETOXM1</name></expr>:</case>
<case>case <expr><name>M68K_INS_FGETEXP</name></expr>:</case>
<case>case <expr><name>M68K_INS_FGETMAN</name></expr>:</case>
<case>case <expr><name>M68K_INS_FINT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FINTRZ</name></expr>:</case>
<case>case <expr><name>M68K_INS_FLOG10</name></expr>:</case>
<case>case <expr><name>M68K_INS_FLOG2</name></expr>:</case>
<case>case <expr><name>M68K_INS_FLOGN</name></expr>:</case>
<case>case <expr><name>M68K_INS_FLOGNP1</name></expr>:</case>
<case>case <expr><name>M68K_INS_FMOD</name></expr>:</case>
<case>case <expr><name>M68K_INS_FMOVE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSMOVE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDMOVE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FMOVECR</name></expr>:</case>
<case>case <expr><name>M68K_INS_FMOVEM</name></expr>:</case>
<case>case <expr><name>M68K_INS_FMUL</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSMUL</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDMUL</name></expr>:</case>
<case>case <expr><name>M68K_INS_FNEG</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSNEG</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDNEG</name></expr>:</case>
<case>case <expr><name>M68K_INS_FNOP</name></expr>:</case>
<case>case <expr><name>M68K_INS_FREM</name></expr>:</case>
<case>case <expr><name>M68K_INS_FRESTORE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSAVE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSCALE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSGLDIV</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSGLMUL</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSIN</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSINCOS</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSINH</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSQRT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSSQRT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDSQRT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSF</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSBEQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSOGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSOGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSOLT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSOLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSOGL</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSOR</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSUN</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSUEQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSUGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSUGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSULT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSULE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSNE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FST</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSSF</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSSEQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSLT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSGL</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSGLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSNGLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSNGL</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSNLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSNLT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSNGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSNGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSSNE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSST</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSUB</name></expr>:</case>
<case>case <expr><name>M68K_INS_FSSUB</name></expr>:</case>
<case>case <expr><name>M68K_INS_FDSUB</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTAN</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTANH</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTENTOX</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPF</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPEQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPOGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPOGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPOLT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPOLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPOGL</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPOR</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPUN</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPUEQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPUGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPUGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPULT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPULE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPNE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPSF</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPSEQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPLT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPGL</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPGLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPNGLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPNGL</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPNLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPNLT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPNGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPNGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPSNE</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTRAPST</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTST</name></expr>:</case>
<case>case <expr><name>M68K_INS_FTWOTOX</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_HALT</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_ILLEGAL</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_JMP</name></expr>:</case>
<expr_stmt><expr><call><name>handle_jump_instruction</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>m68k</name></expr></argument>, <argument><expr><name>R_ANAL_OP_TYPE_JMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_JSR</name></expr>:</case>
<expr_stmt><expr><call><name>handle_jump_instruction</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>m68k</name></expr></argument>, <argument><expr><name>R_ANAL_OP_TYPE_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_LPSTOP</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_LSL</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_LINK</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>st16</name><operator>)</operator><call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_LSR</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_PEA</name></expr>:</case>
<case>case <expr><name>M68K_INS_LEA</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LEA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_MOVE</name></expr>:</case>
<case>case <expr><name>M68K_INS_MOVEA</name></expr>:</case>
<case>case <expr><name>M68K_INS_MOVEC</name></expr>:</case>
<case>case <expr><name>M68K_INS_MOVEM</name></expr>:</case>
<case>case <expr><name>M68K_INS_MOVEP</name></expr>:</case>
<case>case <expr><name>M68K_INS_MOVEQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_MOVES</name></expr>:</case>
<case>case <expr><name>M68K_INS_MOVE16</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_MULS</name></expr>:</case>
<case>case <expr><name>M68K_INS_MULU</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_NBCD</name></expr>:</case>
<case>case <expr><name>M68K_INS_NEG</name></expr>:</case>
<case>case <expr><name>M68K_INS_NEGX</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>M68K_INS_NOP</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_NOT</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_OR</name></expr>:</case>
<case>case <expr><name>M68K_INS_ORI</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_PACK</name></expr>:</case>
<case>case <expr><name>M68K_INS_PFLUSH</name></expr>:</case>
<case>case <expr><name>M68K_INS_PFLUSHA</name></expr>:</case>
<case>case <expr><name>M68K_INS_PFLUSHAN</name></expr>:</case>
<case>case <expr><name>M68K_INS_PFLUSHN</name></expr>:</case>
<case>case <expr><name>M68K_INS_PLOADR</name></expr>:</case>
<case>case <expr><name>M68K_INS_PLOADW</name></expr>:</case>
<case>case <expr><name>M68K_INS_PLPAR</name></expr>:</case>
<case>case <expr><name>M68K_INS_PLPAW</name></expr>:</case>
<case>case <expr><name>M68K_INS_PMOVE</name></expr>:</case>
<case>case <expr><name>M68K_INS_PMOVEFD</name></expr>:</case>
<case>case <expr><name>M68K_INS_PTESTR</name></expr>:</case>
<case>case <expr><name>M68K_INS_PTESTW</name></expr>:</case>
<case>case <expr><name>M68K_INS_PULSE</name></expr>:</case>
<case>case <expr><name>M68K_INS_REMS</name></expr>:</case>
<case>case <expr><name>M68K_INS_REMU</name></expr>:</case>
<case>case <expr><name>M68K_INS_RESET</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>M68K_INS_ROL</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_ROR</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_ROXL</name></expr>:</case>
<case>case <expr><name>M68K_INS_ROXR</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>M68K_INS_RTD</name></expr>:</case>
<case>case <expr><name>M68K_INS_RTE</name></expr>:</case>
<case>case <expr><name>M68K_INS_RTM</name></expr>:</case>
<case>case <expr><name>M68K_INS_RTR</name></expr>:</case>
<case>case <expr><name>M68K_INS_RTS</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_SBCD</name></expr>:</case>
<case>case <expr><name>M68K_INS_ST</name></expr>:</case>
<case>case <expr><name>M68K_INS_SF</name></expr>:</case>
<case>case <expr><name>M68K_INS_SHI</name></expr>:</case>
<case>case <expr><name>M68K_INS_SLS</name></expr>:</case>
<case>case <expr><name>M68K_INS_SCC</name></expr>:</case>
<case>case <expr><name>M68K_INS_SHS</name></expr>:</case>
<case>case <expr><name>M68K_INS_SCS</name></expr>:</case>
<case>case <expr><name>M68K_INS_SLO</name></expr>:</case>
<case>case <expr><name>M68K_INS_SNE</name></expr>:</case>
<case>case <expr><name>M68K_INS_SEQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_SVC</name></expr>:</case>
<case>case <expr><name>M68K_INS_SVS</name></expr>:</case>
<case>case <expr><name>M68K_INS_SPL</name></expr>:</case>
<case>case <expr><name>M68K_INS_SMI</name></expr>:</case>
<case>case <expr><name>M68K_INS_SGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_SLT</name></expr>:</case>
<case>case <expr><name>M68K_INS_SGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_SLE</name></expr>:</case>
<case>case <expr><name>M68K_INS_STOP</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>M68K_INS_SUB</name></expr>:</case>
<case>case <expr><name>M68K_INS_SUBA</name></expr>:</case>
<case>case <expr><name>M68K_INS_SUBI</name></expr>:</case>
<case>case <expr><name>M68K_INS_SUBQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_SUBX</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_SWAP</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_TAS</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>M68K_INS_TRAP</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPV</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPT</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPF</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPHI</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPLS</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPCC</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPHS</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPCS</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPLO</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPNE</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPEQ</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPVC</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPVS</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPPL</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPMI</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPGE</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPLT</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPGT</name></expr>:</case>
<case>case <expr><name>M68K_INS_TRAPLE</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_TST</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_UNPK</name></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M68K_INS_UNLK</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_SET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_VAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>op_fillval</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>beach</name>:</label>
<expr_stmt><expr><call><name>cs_free</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fin</name>:</label>
<return>return <expr><name>opsize</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= \
<expr><literal type="string">"=PC pc\n"</literal>
<literal type="string">"=SP a7\n"</literal>
<literal type="string">"=BP a6\n"</literal>
<literal type="string">"=A0 a0\n"</literal>
<literal type="string">"=A1 a1\n"</literal>
<literal type="string">"=A2 a2\n"</literal>
<literal type="string">"=A3 a3\n"</literal>
<literal type="string">"gpr d0 .32 0 0\n"</literal>
<literal type="string">"gpr d1 .32 4 0\n"</literal>
<literal type="string">"gpr d2 .32 8 0\n"</literal>
<literal type="string">"gpr d3 .32 12 0\n"</literal>
<literal type="string">"gpr d4 .32 16 0\n"</literal>
<literal type="string">"gpr d5 .32 20 0\n"</literal>
<literal type="string">"gpr d6 .32 24 0\n"</literal>
<literal type="string">"gpr d7 .32 28 0\n"</literal>
<literal type="string">"gpr a0 .32 32 0\n"</literal>
<literal type="string">"gpr a1 .32 36 0\n"</literal>
<literal type="string">"gpr a2 .32 40 0\n"</literal>
<literal type="string">"gpr a3 .32 44 0\n"</literal>
<literal type="string">"gpr a4 .32 48 0\n"</literal>
<literal type="string">"gpr a5 .32 52 0\n"</literal>
<literal type="string">"gpr a6 .32 56 0\n"</literal>
<literal type="string">"gpr a7 .32 60 0\n"</literal>
<literal type="string">"gpr fp0 .32 64 0\n"</literal> 
<literal type="string">"gpr fp1 .32 68 0\n"</literal> 
<literal type="string">"gpr fp2 .32 72 0\n"</literal> 
<literal type="string">"gpr fp3 .32 76 0\n"</literal> 
<literal type="string">"gpr fp4 .32 80 0\n"</literal> 
<literal type="string">"gpr fp5 .32 84 0\n"</literal> 
<literal type="string">"gpr fp6 .32 88 0\n"</literal> 
<literal type="string">"gpr fp7 .32 92 0\n"</literal> 
<literal type="string">"gpr pc .32 96 0\n"</literal>
<literal type="string">"gpr sr .32 100 0\n"</literal> 
<literal type="string">"gpr ccr .32 104 0\n"</literal> 
<literal type="string">"gpr sfc .32 108 0\n"</literal> 
<literal type="string">"gpr dfc .32 112 0\n"</literal> 
<literal type="string">"gpr usp .32 116 0\n"</literal> 
<literal type="string">"gpr vbr .32 120 0\n"</literal> 
<literal type="string">"gpr cacr .32 124 0\n"</literal> 
<literal type="string">"gpr caar .32 128 0\n"</literal> 
<literal type="string">"gpr msp .32 132 0\n"</literal> 
<literal type="string">"gpr isp .32 136 0\n"</literal> 
<literal type="string">"gpr tc .32 140 0\n"</literal>
<literal type="string">"gpr itt0 .32 144 0\n"</literal> 
<literal type="string">"gpr itt1 .32 148 0\n"</literal> 
<literal type="string">"gpr dtt0 .32 156 0\n"</literal> 
<literal type="string">"gpr dtt1 .32 160 0\n"</literal> 
<literal type="string">"gpr mmusr .32 164 0\n"</literal>
<literal type="string">"gpr urp .32 168 0\n"</literal>
<literal type="string">"gpr srp .32 172 0\n"</literal>
<literal type="string">"gpr fpcr .32 176 0\n"</literal>
<literal type="string">"gpr fpsr .32 180 0\n"</literal>
<literal type="string">"gpr fpiar .32 184 0\n"</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_m68k_cs</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"m68k"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Capstone M68K analyzer"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"BSD"</literal></expr>,
<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"m68k"</literal></expr>,
<expr><operator>.</operator><name>set_reg_profile</name> <operator>=</operator> <operator>&amp;</operator><name>set_reg_profile</name></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,
<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>analop</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_m68k_cs</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"m68k (unsupported)"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Capstone M68K analyzer (unsupported)"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"BSD"</literal></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"m68k"</literal></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_m68k_cs</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
