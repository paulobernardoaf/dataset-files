<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\p\anal_avr.c">

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
http:
https:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_crypto.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>RDESContext</name></type> <name>desctx</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>_cpu_const_tag</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>CPU_CONST</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPU_CONST_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPU_CONST_PARAM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPU_CONST_REG</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_cpu_model_tag</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>model</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>inherit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_cpu_model_tag</name></name> <modifier>*</modifier></type><name>inherit_cpu_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPU_CONST</name> <modifier>*</modifier></type><name><name>consts</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>CPU_MODEL</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>inst_handler_t</name>) <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fail</name></decl></parameter>, <parameter><decl><type><name>CPU_MODEL</name> <modifier>*</modifier></type><name>cpu</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>_opcodes_tag_</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>selector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>inst_handler_t</name></type> <name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cycles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>OPCODE_DESC</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>OPCODE_DESC</name><modifier>*</modifier></type> <name>avr_op_analyze</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CPU_MODEL</name> <modifier>*</modifier></type><name>cpu</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPU_MODEL_DECL</name><parameter_list>(<parameter><type><name>model</name></type></parameter>, <parameter><type><name>pc</name></type></parameter>, <parameter><type><name>consts</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ model, pc, consts }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bits) == 32 ? 0xffffffff : (~((~((ut32) 0)) &lt;&lt; (bits))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPU_PC_MASK</name><parameter_list>(<parameter><type><name>cpu</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MASK((cpu)-&gt;pc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPU_PC_SIZE</name><parameter_list>(<parameter><type><name>cpu</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((cpu)-&gt;pc) &gt;&gt; 3) + ((((cpu)-&gt;pc) &amp; 0x07) ? 1 : 0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_HANDLER</name><parameter_list>(<parameter><type><name>OPCODE_NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void _inst__ ##OPCODE_NAME (RAnal *anal, RAnalOp *op, const ut8 *buf, int len, int *fail, CPU_MODEL *cpu)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_DECL</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>, <parameter><type><name>M</name></type></parameter>, <parameter><type><name>SL</name></type></parameter>, <parameter><type><name>C</name></type></parameter>, <parameter><type><name>SZ</name></type></parameter>, <parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #OP, (M), (SL), _inst__ ##OP, (C), (SZ), R_ANAL_OP_TYPE_ ##T }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_LAST</name></cpp:macro> <cpp:value>{ "unknown", 0, 0, (void *) 0, 2, 1, R_ANAL_OP_TYPE_UNK }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_CALL</name><parameter_list>(<parameter><type><name>OPCODE_NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_inst__ ##OPCODE_NAME (anal, op, buf, len, fail, cpu)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_INVALID</name></cpp:macro> <cpp:value>{ *fail = 1; return; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_ASSERT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (!(x)) { INST_INVALID; } }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESIL_A</name><parameter_list>(<parameter><type><name>e</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_strbuf_appendf (&amp;op-&gt;esil, e, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR_BEGINS</name><parameter_list>(<parameter><type><name>in</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_str_ncasecmp (in, s, strlen (s))</cpp:value></cpp:define>




<decl_stmt><decl><type><name>CPU_CONST</name></type> <name><name>cpu_reg_common</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"spl"</literal></expr>, <expr><name>CPU_CONST_REG</name></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr>sizeof <operator>(</operator><name>ut8</name><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sph"</literal></expr>, <expr><name>CPU_CONST_REG</name></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr>sizeof <operator>(</operator><name>ut8</name><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sreg"</literal></expr>, <expr><name>CPU_CONST_REG</name></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr>sizeof <operator>(</operator><name>ut8</name><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"spmcsr"</literal></expr>, <expr><name>CPU_CONST_REG</name></expr>, <expr><literal type="number">0x37</literal></expr>, <expr>sizeof <operator>(</operator><name>ut8</name><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CPU_CONST</name></type> <name><name>cpu_memsize_common</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"eeprom_size"</literal></expr>, <expr><name>CPU_CONST_PARAM</name></expr>, <expr><literal type="number">512</literal></expr>, <expr>sizeof <operator>(</operator><name>ut32</name><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"io_size"</literal></expr>, <expr><name>CPU_CONST_PARAM</name></expr>, <expr><literal type="number">0x40</literal></expr>, <expr>sizeof <operator>(</operator><name>ut32</name><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sram_start"</literal></expr>, <expr><name>CPU_CONST_PARAM</name></expr>, <expr><literal type="number">0x60</literal></expr>, <expr>sizeof <operator>(</operator><name>ut32</name><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sram_size"</literal></expr>, <expr><name>CPU_CONST_PARAM</name></expr>, <expr><literal type="number">1024</literal></expr>, <expr>sizeof <operator>(</operator><name>ut32</name><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CPU_CONST</name></type> <name><name>cpu_memsize_m640_m1280m_m1281_m2560_m2561</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"eeprom_size"</literal></expr>, <expr><name>CPU_CONST_PARAM</name></expr>, <expr><literal type="number">512</literal></expr>, <expr>sizeof <operator>(</operator><name>ut32</name><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"io_size"</literal></expr>, <expr><name>CPU_CONST_PARAM</name></expr>, <expr><literal type="number">0x1ff</literal></expr>, <expr>sizeof <operator>(</operator><name>ut32</name><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sram_start"</literal></expr>, <expr><name>CPU_CONST_PARAM</name></expr>, <expr><literal type="number">0x200</literal></expr>, <expr>sizeof <operator>(</operator><name>ut32</name><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sram_size"</literal></expr>, <expr><name>CPU_CONST_PARAM</name></expr>, <expr><literal type="number">0x2000</literal></expr>, <expr>sizeof <operator>(</operator><name>ut32</name><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CPU_CONST</name></type> <name><name>cpu_memsize_xmega128a4u</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"eeprom_size"</literal></expr>, <expr><name>CPU_CONST_PARAM</name></expr>, <expr><literal type="number">0x800</literal></expr>, <expr>sizeof <operator>(</operator><name>ut32</name><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"io_size"</literal></expr>, <expr><name>CPU_CONST_PARAM</name></expr>, <expr><literal type="number">0x1000</literal></expr>, <expr>sizeof <operator>(</operator><name>ut32</name><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sram_start"</literal></expr>, <expr><name>CPU_CONST_PARAM</name></expr>, <expr><literal type="number">0x800</literal></expr>, <expr>sizeof <operator>(</operator><name>ut32</name><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sram_size"</literal></expr>, <expr><name>CPU_CONST_PARAM</name></expr>, <expr><literal type="number">0x2000</literal></expr>, <expr>sizeof <operator>(</operator><name>ut32</name><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CPU_CONST</name></type> <name><name>cpu_pagesize_5_bits</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"page_size"</literal></expr>, <expr><name>CPU_CONST_PARAM</name></expr>, <expr><literal type="number">5</literal></expr>, <expr>sizeof <operator>(</operator><name>ut8</name><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CPU_CONST</name></type> <name><name>cpu_pagesize_7_bits</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"page_size"</literal></expr>, <expr><name>CPU_CONST_PARAM</name></expr>, <expr><literal type="number">7</literal></expr>, <expr>sizeof <operator>(</operator><name>ut8</name><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CPU_MODEL</name></type> <name><name>cpu_models</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><operator>.</operator><name>model</name> <operator>=</operator> <literal type="string">"ATmega640"</literal></expr>, <expr><operator>.</operator><name>pc</name> <operator>=</operator> <literal type="number">15</literal></expr>,
<expr><operator>.</operator><name>consts</name> <operator>=</operator> <block>{
<expr><name>cpu_reg_common</name></expr>,
<expr><name>cpu_memsize_m640_m1280m_m1281_m2560_m2561</name></expr>,
<expr><name>cpu_pagesize_7_bits</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr>,
}</block></expr>,
<expr><block>{
<expr><operator>.</operator><name>model</name> <operator>=</operator> <literal type="string">"ATxmega128a4u"</literal></expr>, <expr><operator>.</operator><name>pc</name> <operator>=</operator> <literal type="number">17</literal></expr>,
<expr><operator>.</operator><name>consts</name> <operator>=</operator> <block>{
<expr><name>cpu_reg_common</name></expr>,
<expr><name>cpu_memsize_xmega128a4u</name></expr>,
<expr><name>cpu_pagesize_7_bits</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><operator>.</operator><name>model</name> <operator>=</operator> <literal type="string">"ATmega1280"</literal></expr>, <expr><operator>.</operator><name>pc</name> <operator>=</operator> <literal type="number">16</literal></expr>, <expr><operator>.</operator><name>inherit</name> <operator>=</operator> <literal type="string">"ATmega640"</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>.</operator><name>model</name> <operator>=</operator> <literal type="string">"ATmega1281"</literal></expr>, <expr><operator>.</operator><name>pc</name> <operator>=</operator> <literal type="number">16</literal></expr>, <expr><operator>.</operator><name>inherit</name> <operator>=</operator> <literal type="string">"ATmega640"</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>.</operator><name>model</name> <operator>=</operator> <literal type="string">"ATmega2560"</literal></expr>, <expr><operator>.</operator><name>pc</name> <operator>=</operator> <literal type="number">17</literal></expr>, <expr><operator>.</operator><name>inherit</name> <operator>=</operator> <literal type="string">"ATmega640"</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>.</operator><name>model</name> <operator>=</operator> <literal type="string">"ATmega2561"</literal></expr>, <expr><operator>.</operator><name>pc</name> <operator>=</operator> <literal type="number">17</literal></expr>, <expr><operator>.</operator><name>inherit</name> <operator>=</operator> <literal type="string">"ATmega640"</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>.</operator><name>model</name> <operator>=</operator> <literal type="string">"ATmega88"</literal></expr>, <expr><operator>.</operator><name>pc</name> <operator>=</operator> <literal type="number">8</literal></expr>, <expr><operator>.</operator><name>inherit</name> <operator>=</operator> <literal type="string">"ATmega8"</literal></expr> }</block></expr>,


<expr><block>{
<expr><operator>.</operator><name>model</name> <operator>=</operator> <literal type="string">"ATmega8"</literal></expr>, <expr><operator>.</operator><name>pc</name> <operator>=</operator> <literal type="number">13</literal></expr>,
<expr><operator>.</operator><name>consts</name> <operator>=</operator> <block>{
<expr><name>cpu_reg_common</name></expr>,
<expr><name>cpu_memsize_common</name></expr>,
<expr><name>cpu_pagesize_5_bits</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>CPU_MODEL</name> <modifier>*</modifier></type><name>get_cpu_model</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>model</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>CPU_MODEL</name> <modifier>*</modifier></type><name>__get_cpu_model_recursive</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>model</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CPU_MODEL</name> <modifier>*</modifier></type><name>cpu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cpu</name> <operator>=</operator> <name>cpu_models</name></expr>;</init> <condition><expr><name>cpu</name> <operator>&lt;</operator> <name>cpu_models</name> <operator>+</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>cpu_models</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>CPU_MODEL</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>cpu</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name><name>cpu</name><operator>-&gt;</operator><name>model</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>cpu</name><operator>-&gt;</operator><name>inherit</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cpu</name><operator>-&gt;</operator><name>inherit_cpu_p</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cpu</name><operator>-&gt;</operator><name>inherit_cpu_p</name></name> <operator>=</operator> <call><name>get_cpu_model</name> <argument_list>(<argument><expr><name><name>cpu</name><operator>-&gt;</operator><name>inherit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cpu</name><operator>-&gt;</operator><name>inherit_cpu_p</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ERROR: Cannot inherit from unknown CPU model '%s'.\n"</literal></expr></argument>, <argument><expr><name><name>cpu</name><operator>-&gt;</operator><name>inherit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>cpu</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CPU_MODEL</name> <modifier>*</modifier></type><name>get_cpu_model</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>model</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>CPU_MODEL</name> <modifier>*</modifier></type><name>cpu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cpu</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name><name>cpu</name><operator>-&gt;</operator><name>model</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>cpu</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cpu</name> <operator>=</operator> <call><name>__get_cpu_model_recursive</name> <argument_list>(<argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cpu</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>const_get_value</name><parameter_list>(<parameter><decl><type><name>CPU_CONST</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>c</name></expr> ?</condition><then> <expr><call><name>MASK</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>value</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CPU_CONST</name> <modifier>*</modifier></type><name>const_by_name</name><parameter_list>(<parameter><decl><type><name>CPU_MODEL</name> <modifier>*</modifier></type><name>cpu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CPU_CONST</name> <modifier>*</modifier><modifier>*</modifier></type><name>clist</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>citem</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>clist</name> <operator>=</operator> <name><name>cpu</name><operator>-&gt;</operator><name>consts</name></name></expr>;</init> <condition><expr><operator>*</operator><name>clist</name></expr>;</condition> <incr><expr><name>clist</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>citem</name> <operator>=</operator> <operator>*</operator><name>clist</name></expr>;</init> <condition><expr><name><name>citem</name><operator>-&gt;</operator><name>key</name></name></expr>;</condition> <incr><expr><name>citem</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>citem</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>CPU_CONST_NONE</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name><name>citem</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>citem</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>cpu</name><operator>-&gt;</operator><name>inherit_cpu_p</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>const_by_name</name> <argument_list>(<argument><expr><name><name>cpu</name><operator>-&gt;</operator><name>inherit_cpu_p</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ERROR: CONSTANT key[%s] NOT FOUND.\n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__esil_pop_argument</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>r_anal_esil_pop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name> <operator>||</operator> <operator>!</operator><call><name>r_anal_esil_get_parm</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CPU_CONST</name> <modifier>*</modifier></type><name>const_by_value</name><parameter_list>(<parameter><decl><type><name>CPU_MODEL</name> <modifier>*</modifier></type><name>cpu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CPU_CONST</name> <modifier>*</modifier><modifier>*</modifier></type><name>clist</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>citem</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>clist</name> <operator>=</operator> <name><name>cpu</name><operator>-&gt;</operator><name>consts</name></name></expr>;</init> <condition><expr><operator>*</operator><name>clist</name></expr>;</condition> <incr><expr><name>clist</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>citem</name> <operator>=</operator> <operator>*</operator><name>clist</name></expr>;</init> <condition><expr><name>citem</name> <operator>&amp;&amp;</operator> <name><name>citem</name><operator>-&gt;</operator><name>key</name></name></expr>;</condition> <incr><expr><name>citem</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>citem</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <operator>(</operator><call><name>MASK</name> <argument_list>(<argument><expr><name><name>citem</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>v</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>CPU_CONST_NONE</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name><name>citem</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>citem</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>cpu</name><operator>-&gt;</operator><name>inherit_cpu_p</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>const_by_value</name> <argument_list>(<argument><expr><name><name>cpu</name><operator>-&gt;</operator><name>inherit_cpu_p</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RStrBuf</name> <modifier>*</modifier></type><name>__generic_io_dest</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>write</name></decl></parameter>, <parameter><decl><type><name>CPU_MODEL</name> <modifier>*</modifier></type><name>cpu</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPU_CONST</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>const_by_value</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>, <argument><expr><name>CPU_CONST_REG</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>write</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">",="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"_io,%d,+,%s[1]"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><ternary><condition><expr><name>write</name></expr> ?</condition><then> <expr><literal type="string">"="</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__generic_ld_st</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ireg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_ramp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prepostdec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>st</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ireg</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prepostdec</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"1,%c,-,%c,=,"</literal></expr></argument>, <argument><expr><name>ireg</name></expr></argument>, <argument><expr><name>ireg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%c,"</literal></expr></argument>, <argument><expr><name>ireg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%d,+,"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%d,"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_ramp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"16,ramp%c,&lt;&lt;,+,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>ireg</name></expr> ?</condition><then> <expr><name>ireg</name></expr> </then><else>: <expr><literal type="char">'d'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"_%s,+,"</literal></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%s[1],"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>st</name></expr> ?</condition><then> <expr><literal type="string">"="</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ireg</name> <operator>&amp;&amp;</operator> <name>prepostdec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"1,%c,+,%c,=,"</literal></expr></argument>, <argument><expr><name>ireg</name></expr></argument>, <argument><expr><name>ireg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__generic_pop</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"1,sp,+,_ram,+,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"[%d],"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%d,sp,+=,"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"1,sp,+=,"</literal> 
<literal type="string">"sp,_ram,+,[1],"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__generic_push</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"sp,_ram,+,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"-%d,+,"</literal></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"=[%d],"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"-%d,sp,+=,"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>adc</argument>)</argument_list></macro> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,cf,+,r%d,+=,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"3,$c,hf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"7,$c,cf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"7,$o,vf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"0x80,r%d,&amp;,!,!,nf,:="</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>add</argument>)</argument_list></macro> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,r%d,+=,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"3,$c,hf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"7,$c,cf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"7,$o,vf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"0x80,r%d,&amp;,!,!,nf,:=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>adiw</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>k</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x30</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%d,r%d_r%d,+=,"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"7,$o,vf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d_r%d,0x8000,&amp;,!,!,nf,:=,"</literal></expr></argument>, <argument><expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"15,$c,cf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"vf,nf,^,sf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>and</argument>)</argument_list></macro> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,r%d,&amp;=,$z,zf,:=,r%d,0x80,&amp;,!,!,nf,:=,0,vf,:=,nf,sf,:=,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>andi</argument>)</argument_list></macro> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>k</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%d,r%d,&amp;=,$z,zf,:=,r%d,0x80,&amp;,!,!,nf,:=,0,vf,:=,nf,sf,:=,"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>asr</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,0x1,&amp;,cf,:=,0x1,r%d,&gt;&gt;,r%d,0x80,&amp;,|,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,0x80,&amp;,!,!,nf,:=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"nf,cf,^,vf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"nf,vf,^,sf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>bclr</argument>)</argument_list></macro> <block>{<block_content> 









<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"0xff,%d,1,&lt;&lt;,^,sreg,&amp;=,"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>bld</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,%d,1,&lt;&lt;,0xff,^,&amp;,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%d,tf,&lt;&lt;,|,r%d,=,"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>brbx</argument>)</argument_list></macro> <block>{<block_content> 










<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>addr</name></name>
<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x2</literal></expr> ?</condition><then> <expr><operator>~</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">0x7f</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator>
<operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 




<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%d,1,&lt;&lt;,sreg,&amp;,"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><ternary><condition><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x4</literal></expr>
?</condition><then> <expr><literal type="string">"!,"</literal></expr> 
</then><else>: <expr><literal type="string">"!,!,"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"?{,%"</literal><name>PFMT64d</name><literal type="string">",pc,=,},"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>break</argument>)</argument_list></macro> <block>{<block_content> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"BREAK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>bset</argument>)</argument_list></macro> <block>{<block_content> 









<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%d,1,&lt;&lt;,sreg,|=,"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>bst</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,%d,1,&lt;&lt;,&amp;,!,!,tf,=,"</literal></expr></argument>, 
<argument><expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr></argument>, 
<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>call</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">23</literal>
<operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">17</literal>
<operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <ternary><condition><expr><name><name>cpu</name><operator>-&gt;</operator><name>pc</name></name> <operator>&lt;=</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STR_BEGINS</name> <argument_list>(<argument><expr><name><name>cpu</name><operator>-&gt;</operator><name>model</name></name></expr></argument>, <argument><expr><literal type="string">"ATxmega"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name><operator>--</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"pc,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>__generic_push</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>CPU_PC_SIZE</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",pc,=,"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>cbi</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>io_port</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_IO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type2</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>


<expr_stmt><expr><name>io_port</name> <operator>=</operator> <call><name>__generic_io_dest</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"0xff,%d,1,&lt;&lt;,^,%s,&amp;,"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>io_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>io_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>io_port</name> <operator>=</operator> <call><name>__generic_io_dest</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%s,"</literal></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>io_port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>io_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>com</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,0xff,-,r%d,=,$z,zf,:=,0,cf,:=,0,vf,:=,r%d,0x80,&amp;,!,!,nf,:=,vf,nf,^,sf,:="</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>cp</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,r%d,-,0x80,&amp;,!,!,nf,:=,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,r%d,==,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"3,$b,hf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"8,$b,cf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"7,$o,vf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"vf,nf,^,sf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>cpc</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"cf,r%d,+,DUP,r%d,-,0x80,&amp;,!,!,nf,:=,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,==,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"3,$b,hf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"8,$b,cf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"7,$o,vf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"vf,nf,^,sf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>cpi</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>k</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%d,r%d,-,0x80,&amp;,!,!,nf,:=,"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%d,r%d,==,"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"3,$b,hf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"8,$b,cf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"7,$o,vf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"vf,nf,^,sf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>cpse</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalOp</name></type> <name>next_op</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>avr_op_analyze</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>next_op</name></expr></argument>,
<argument><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>next_op</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>next_op</name><operator>.</operator><name>size</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 




<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,r%d,^,!,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"?{,%"</literal><name>PFMT64d</name><literal type="string">",pc,=,},"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>dec</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"0x1,r%d,-=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"7,$o,vf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,0x80,&amp;,!,!,nf,:=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"vf,nf,^,sf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>des</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>desctx</name><operator>.</operator><name>round</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CRYPTO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,des"</literal></expr></argument>, <argument><expr><name><name>desctx</name><operator>.</operator><name>round</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>eijmp</argument>)</argument_list></macro> <block>{<block_content> 
<decl_stmt><decl><type><name>ut64</name></type> <name>z</name></decl>, <decl><type ref="prev"/><name>eind</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_anal_esil_reg_read</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_reg_read</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"eind"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>eind</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>eind</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>z</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"1,z,16,eind,&lt;&lt;,+,&lt;&lt;,pc,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>eicall</argument>)</argument_list></macro> <block>{<block_content> 

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"pc,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>__generic_push</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>CPU_PC_SIZE</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>INST_CALL</name> <argument_list>(<argument><expr><name>eijmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><call><name>STR_BEGINS</name> <argument_list>(<argument><expr><name><name>cpu</name><operator>-&gt;</operator><name>model</name></name></expr></argument>, <argument><expr><literal type="string">"ATxmega"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>elpm</argument>)</argument_list></macro> <block>{<block_content> 


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfe</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x90</literal><operator>)</operator></expr>
?</condition><then> <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr> 
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"16,rampz,&lt;&lt;,z,+,_prog,+,[1],"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfe</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x90</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"16,1,z,+,DUP,z,=,&gt;&gt;,1,&amp;,rampz,+=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>eor</argument>)</argument_list></macro> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,r%d,^=,$z,zf,:=,0,vf,:=,r%d,0x80,&amp;,!,!,nf,:=,nf,sf,:="</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>fmul</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"0xffff,1,r%d,r%d,*,&lt;&lt;,&amp;,r1_r0,=,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r1_r0,0x8000,&amp;,!,!,cf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>fmuls</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"1,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,DUP,0x80,&amp;,?{,0xff00,|,},"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,DUP,0x80,&amp;,?{,0xff00,|,},"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"*,&lt;&lt;,r1_r0,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r1_r0,0x8000,&amp;,!,!,cf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>fmulsu</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"1,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,DUP,0x80,&amp;,?{,0xff00,|,},"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,*,&lt;&lt;,r1_r0,=,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r1_r0,0x8000,&amp;,!,!,cf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>ijmp</argument>)</argument_list></macro> <block>{<block_content> 
<decl_stmt><decl><type><name>ut64</name></type> <name>z</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_anal_esil_reg_read</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>z</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"1,z,&lt;&lt;,pc,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>icall</argument>)</argument_list></macro> <block>{<block_content> 

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"pc,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>__generic_push</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>CPU_PC_SIZE</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>INST_CALL</name> <argument_list>(<argument><expr><name>ijmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STR_BEGINS</name> <argument_list>(<argument><expr><name><name>cpu</name><operator>-&gt;</operator><name>model</name></name></expr></argument>, <argument><expr><literal type="string">"ATxmega"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>in</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x6</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>io_src</name> <init>= <expr><call><name>__generic_io_dest</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_IO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%s,r%d,=,"</literal></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>io_src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>io_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>inc</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"1,r%d,+=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"7,$o,vf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,0x80,&amp;,!,!,nf,:=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"vf,nf,^,sf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>jmp</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">23</literal>
<operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">17</literal>
<operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",pc,=,"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>lac</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>__generic_ld_st</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"ram"</literal></expr></argument>, <argument><expr><literal type="char">'z'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,0xff,^,&amp;,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"DUP,r%d,=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>__generic_ld_st</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"ram"</literal></expr></argument>, <argument><expr><literal type="char">'z'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>las</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>__generic_ld_st</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"ram"</literal></expr></argument>, <argument><expr><literal type="char">'z'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,|,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"DUP,r%d,=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>__generic_ld_st</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"ram"</literal></expr></argument>, <argument><expr><literal type="char">'z'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>lat</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>__generic_ld_st</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"ram"</literal></expr></argument>, <argument><expr><literal type="char">'z'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,^,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"DUP,r%d,=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>__generic_ld_st</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"ram"</literal></expr></argument>, <argument><expr><literal type="char">'z'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>ld</argument>)</argument_list></macro> <block>{<block_content> 


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__generic_ld_st</name> <argument_list>(
<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"ram"</literal></expr></argument>,
<argument><expr><literal type="char">'x'</literal></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xe</literal></expr>
?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> 
</then><else>: <expr><ternary><condition><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xd</literal></expr>
?</condition><then> <expr><literal type="number">1</literal></expr> 
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,=,"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><literal type="number">2</literal></expr> 
</then><else>: <expr><ternary><condition><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>
?</condition><then> <expr><literal type="number">2</literal></expr> 
</then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STR_BEGINS</name> <argument_list>(<argument><expr><name><name>cpu</name><operator>-&gt;</operator><name>model</name></name></expr></argument>, <argument><expr><literal type="string">"ATxmega"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>ldd</argument>)</argument_list></macro> <block>{<block_content> 



<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__generic_ld_st</name> <argument_list>(
<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"ram"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><literal type="char">'y'</literal></expr> </then><else>: <expr><literal type="char">'z'</literal></expr></else></ternary></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">0</literal></expr> 
</then><else>: <expr><ternary><condition><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>
?</condition><then> <expr><literal type="number">1</literal></expr> 
</then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr></argument>, 
<argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr> ?</condition><then> <expr><name>offset</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,=,"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><operator>(</operator><ternary><condition><expr><operator>!</operator><name>offset</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator></expr> 
</then><else>: <expr><ternary><condition><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><literal type="number">1</literal></expr> 
</then><else>: <expr><ternary><condition><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>
?</condition><then> <expr><literal type="number">2</literal></expr> 
</then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STR_BEGINS</name> <argument_list>(<argument><expr><name><name>cpu</name><operator>-&gt;</operator><name>model</name></name></expr></argument>, <argument><expr><literal type="string">"ATxmega"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>ldi</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"0x%x,r%d,=,"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>lds</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>__generic_ld_st</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"ram"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>sts</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__generic_ld_st</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"ram"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
INST_HANDLER (lds16) { 
int d = ((buf[0] &gt;&gt; 4) &amp; 0xf) + 16;
int k = (buf[0] &amp; 0x0f)
| ((buf[1] &lt;&lt; 3) &amp; 0x30)
| ((buf[1] &lt;&lt; 4) &amp; 0x40)
| (~(buf[1] &lt;&lt; 4) &amp; 0x80);
op-&gt;ptr = k;


__generic_ld_st (op, "ram", 0, 0, 0, k, 0);
ESIL_A ("r%d,=,", d);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>lpm</argument>)</argument_list></macro> <block>{<block_content> 


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>ins</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ut16</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ut16</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__generic_ld_st</name> <argument_list>(
<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"prog"</literal></expr></argument>,
<argument><expr><literal type="char">'z'</literal></expr></argument>, 
<argument><expr><literal type="number">1</literal></expr></argument>, 
<argument><expr><ternary><condition><expr><operator>(</operator><name>ins</name> <operator>&amp;</operator> <literal type="number">0xfe0f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x9005</literal></expr>
?</condition><then> <expr><literal type="number">1</literal></expr> 
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,=,"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>ins</name> <operator>==</operator> <literal type="number">0x95c8</literal><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">0</literal></expr> 
</then><else>: <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> 
<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>lsr</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,0x1,&amp;,cf,:=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"1,r%d,&gt;&gt;=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"0,nf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"cf,vf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"cf,sf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>mov</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>r</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,r%d,=,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>movw</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,r%d,=,r%d,r%d,=,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>r</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>mul</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>r</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,r%d,*,r1_r0,=,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r1_r0,0x8000,&amp;,!,!,cf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>muls</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,DUP,0x80,&amp;,?{,0xff00,|,},"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,DUP,0x80,&amp;,?{,0xff00,|,},"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"*,r1_r0,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r1_r0,0x8000,&amp;,!,!,cf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>mulsu</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,DUP,0x80,&amp;,?{,0xff00,|,},"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,*,r1_r0,=,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r1_r0,0x8000,&amp;,!,!,cf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>neg</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,0x00,-,0xff,&amp;,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"DUP,r%d,0xff,^,|,0x08,&amp;,!,!,hf,=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"DUP,0x80,-,!,vf,=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"DUP,0x80,&amp;,!,!,nf,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"DUP,!,zf,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"DUP,!,!,cf,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"vf,nf,^,sf,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>nop</argument>)</argument_list></macro> <block>{<block_content> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">",,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>or</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,r%d,|=,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,&amp;,!,!,nf,:=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"0,vf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"nf,sf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>ori</argument>)</argument_list></macro> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>k</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%d,r%d,|=,"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,0x80,&amp;,!,!,nf,:=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"0,vf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"nf,sf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>out</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x6</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>io_dst</name> <init>= <expr><call><name>__generic_io_dest</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type2</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_IO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,%s,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>io_dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>io_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>pop</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__generic_pop</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>push</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>__generic_push</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><call><name>STR_BEGINS</name> <argument_list>(<argument><expr><name><name>cpu</name><operator>-&gt;</operator><name>model</name></name></expr></argument>, <argument><expr><literal type="string">"ATxmega"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><literal type="number">1</literal></expr> 
</then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>rcall</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>addr</name></name>
<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">0x1fff</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <call><name>CPU_PC_MASK</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"pc,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>__generic_push</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>CPU_PC_SIZE</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",pc,=,"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name><name>cpu</name><operator>-&gt;</operator><name>model</name></name></expr></argument>, <argument><expr><literal type="string">"ATtiny"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <ternary><condition><expr><name><name>cpu</name><operator>-&gt;</operator><name>pc</name></name> <operator>&lt;=</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STR_BEGINS</name> <argument_list>(<argument><expr><name><name>cpu</name><operator>-&gt;</operator><name>model</name></name></expr></argument>, <argument><expr><literal type="string">"ATxmega"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name><operator>--</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>ret</argument>)</argument_list></macro> <block>{<block_content> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__generic_pop</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>CPU_PC_SIZE</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"pc,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>CPU_PC_SIZE</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name><operator>++</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>reti</argument>)</argument_list></macro> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_PRIV</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>INST_CALL</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"1,if,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>rjmp</argument>)</argument_list></macro> <block>{<block_content> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>addr</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name> <name>(</name><cpp:literal>"anal_avr.c: WARNING: Probably broken on windows"</cpp:literal><name>)</name></cpp:pragma>
<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><operator>~</operator><operator>(</operator><literal type="number">0x1fff</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator> <operator>(</operator><call><name>typeof</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><call><name>typeof</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><operator>~</operator><operator>(</operator><operator>(</operator><call><name>typeof</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call><operator>)</operator> <literal type="number">0x1fff</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <call><name>CPU_PC_MASK</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",pc,=,"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>ror</argument>)</argument_list></macro> <block>{<block_content> 
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"cf,nf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,0x1,&amp;,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"1,r%d,&gt;&gt;,7,cf,&lt;&lt;,|,r%d,=,cf,:=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"nf,cf,^,vf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"vf,nf,^,sf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>sbc</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"cf,r%d,+,r%d,-=,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"3,$b,hf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"8,$b,cf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"7,$o,vf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"0x80,r%d,&amp;,!,!,nf,:=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"vf,nf,^,sf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>sbci</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>k</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"cf,%d,+,r%d,-=,"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"3,$b,hf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"8,$b,cf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"7,$o,vf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"0x80,r%d,&amp;,!,!,nf,:=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"vf,nf,^,sf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>sub</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,r%d,-=,"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"3,$b,hf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"8,$b,cf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"7,$o,vf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"0x80,r%d,&amp;,!,!,nf,:=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"vf,nf,^,sf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>subi</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>k</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%d,r%d,-=,"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"3,$b,hf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"8,$b,cf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"7,$o,vf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"0x80,r%d,&amp;,!,!,nf,:=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"vf,nf,^,sf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>sbi</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>io_port</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type2</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_IO</name></expr>;</expr_stmt>


<expr_stmt><expr><name>io_port</name> <operator>=</operator> <call><name>__generic_io_dest</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"0xff,%d,1,&lt;&lt;,|,%s,&amp;,"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>io_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>io_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>io_port</name> <operator>=</operator> <call><name>__generic_io_dest</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%s,"</literal></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>io_port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>io_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>sbix</argument>)</argument_list></macro> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalOp</name></type> <name>next_op</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>io_port</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_IO</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>avr_op_analyze</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>next_op</name></expr></argument>,
<argument><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><name>len</name> <operator>-</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>next_op</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>next_op</name><operator>.</operator><name>size</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 






<expr_stmt><expr><name>io_port</name> <operator>=</operator> <call><name>__generic_io_dest</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%d,1,&lt;&lt;,%s,&amp;,"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>io_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xe</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xc</literal></expr>
?</condition><then> <expr><literal type="string">"!,"</literal></expr> 
</then><else>: <expr><literal type="string">"!,!,"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"?{,%"</literal><name>PFMT64d</name><literal type="string">",pc,=,},"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>io_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>sbiw</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x30</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%d,r%d_r%d,-=,"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"$z,zf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"15,$c,cf,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d_r%d,0x8000,&amp;,!,!,nf,:=,"</literal></expr></argument>, <argument><expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d_r%d,0x8080,&amp;,0x8080,!,vf,:=,"</literal></expr></argument>, <argument><expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"vf,nf,^,sf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>sbrx</argument>)</argument_list></macro> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalOp</name></type> <name>next_op</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>avr_op_analyze</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>next_op</name></expr></argument>,
<argument><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>next_op</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>next_op</name><operator>.</operator><name>size</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 




<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"%d,1,&lt;&lt;,r%d,&amp;,"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xe</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xc</literal></expr>
?</condition><then> <expr><literal type="string">"!,"</literal></expr> 
</then><else>: <expr><literal type="string">"!,!,"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"?{,%"</literal><name>PFMT64d</name><literal type="string">",pc,=,},"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>sleep</argument>)</argument_list></macro> <block>{<block_content> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"BREAK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>spm</argument>)</argument_list></macro> <block>{<block_content> 
<decl_stmt><decl><type><name>ut64</name></type> <name>spmcsr</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>r_anal_esil_reg_read</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"spmcsr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>spmcsr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"0x7c,spmcsr,&amp;=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<switch>switch <condition>(<expr><name>spmcsr</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x03</literal></expr>:</case> 


<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"16,rampz,&lt;&lt;,z,+,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"SPM_PAGE_ERASE,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>

<case>case <expr><literal type="number">0x01</literal></expr>:</case> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r1,r0,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"z,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"SPM_PAGE_FILL,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>

<case>case <expr><literal type="number">0x05</literal></expr>:</case> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"16,rampz,&lt;&lt;,z,+,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"SPM_PAGE_WRITE,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"SPM: I dont know what to do with SPMCSR %02x.\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>spmcsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 




</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>st</argument>)</argument_list></macro> <block>{<block_content> 


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__generic_ld_st</name> <argument_list>(
<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"ram"</literal></expr></argument>,
<argument><expr><literal type="char">'x'</literal></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xe</literal></expr>
?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> 
</then><else>: <expr><ternary><condition><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xd</literal></expr>
?</condition><then> <expr><literal type="number">1</literal></expr> 
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 










</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>std</argument>)</argument_list></macro> <block>{<block_content> 



<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__generic_ld_st</name> <argument_list>(
<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"ram"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr> ?</condition><then> <expr><literal type="char">'y'</literal></expr> </then><else>: <expr><literal type="char">'z'</literal></expr></else></ternary></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">0</literal></expr> 
</then><else>: <expr><ternary><condition><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>
?</condition><then> <expr><literal type="number">1</literal></expr> 
</then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr></argument>, 
<argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr>
?</condition><then> <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> 
<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, 
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 













</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>swap</argument>)</argument_list></macro> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"4,r%d,&gt;&gt;,0x0f,&amp;,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"4,r%d,&lt;&lt;,0xf0,&amp;,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"|,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ESIL_A</name> <argument_list>(<argument><expr><literal type="string">"r%d,=,"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block>

<decl_stmt><decl><type><name>OPCODE_DESC</name></type> <name><name>opcodes</name><index>[]</index></name> <init>= <expr><block>{

<macro><name>INST_DECL</name> <argument_list>(<argument>break</argument>, <argument><literal type="number">0xffff</literal></argument>, <argument><literal type="number">0x9698</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument>TRAP</argument> )</argument_list></macro>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>eicall</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>, <argument><expr><literal type="number">0x9519</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>UCALL</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>eijmp</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>, <argument><expr><literal type="number">0x9419</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>UJMP</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>icall</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>, <argument><expr><literal type="number">0x9509</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>UCALL</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>ijmp</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>, <argument><expr><literal type="number">0x9409</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>UJMP</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>lpm</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>, <argument><expr><literal type="number">0x95c8</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LOAD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>nop</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NOP</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>, <argument><expr><literal type="number">0x9508</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>RET</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>reti</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>, <argument><expr><literal type="number">0x9518</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>RET</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>sleep</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>, <argument><expr><literal type="number">0x9588</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NOP</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>spm</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>, <argument><expr><literal type="number">0x95e8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TRAP</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>bclr</name></expr></argument>, <argument><expr><literal type="number">0xff8f</literal></expr></argument>, <argument><expr><literal type="number">0x9488</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SWI</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>bset</name></expr></argument>, <argument><expr><literal type="number">0xff8f</literal></expr></argument>, <argument><expr><literal type="number">0x9408</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SWI</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>fmul</name></expr></argument>, <argument><expr><literal type="number">0xff88</literal></expr></argument>, <argument><expr><literal type="number">0x0308</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>MUL</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>fmuls</name></expr></argument>, <argument><expr><literal type="number">0xff88</literal></expr></argument>, <argument><expr><literal type="number">0x0380</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>MUL</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>fmulsu</name></expr></argument>, <argument><expr><literal type="number">0xff88</literal></expr></argument>, <argument><expr><literal type="number">0x0388</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>MUL</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>mulsu</name></expr></argument>, <argument><expr><literal type="number">0xff88</literal></expr></argument>, <argument><expr><literal type="number">0x0300</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>AND</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>des</name></expr></argument>, <argument><expr><literal type="number">0xff0f</literal></expr></argument>, <argument><expr><literal type="number">0x940b</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CRYPTO</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>adiw</name></expr></argument>, <argument><expr><literal type="number">0xff00</literal></expr></argument>, <argument><expr><literal type="number">0x9600</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ADD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>sbiw</name></expr></argument>, <argument><expr><literal type="number">0xff00</literal></expr></argument>, <argument><expr><literal type="number">0x9700</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SUB</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>cbi</name></expr></argument>, <argument><expr><literal type="number">0xff00</literal></expr></argument>, <argument><expr><literal type="number">0x9800</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>IO</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>sbi</name></expr></argument>, <argument><expr><literal type="number">0xff00</literal></expr></argument>, <argument><expr><literal type="number">0x9a00</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>IO</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>movw</name></expr></argument>, <argument><expr><literal type="number">0xff00</literal></expr></argument>, <argument><expr><literal type="number">0x0100</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>MOV</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>muls</name></expr></argument>, <argument><expr><literal type="number">0xff00</literal></expr></argument>, <argument><expr><literal type="number">0x0200</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>AND</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>asr</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x9405</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SAR</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>com</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x9400</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SWI</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x940a</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SUB</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>elpm</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x9006</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LOAD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>elpm</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x9007</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LOAD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>inc</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x9403</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ADD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>lac</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x9206</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LOAD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>las</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x9205</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LOAD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>lat</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x9207</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LOAD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x900c</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LOAD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x900d</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LOAD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x900e</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LOAD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>lds</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x9000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>LOAD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>sts</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x9200</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>STORE</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>lpm</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x9004</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LOAD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>lpm</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x9005</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LOAD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>lsr</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x9406</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SHR</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>neg</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x9401</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SUB</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>pop</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x900f</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>POP</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>push</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x920f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>PUSH</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>ror</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x9407</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SAR</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x920c</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>STORE</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x920d</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>STORE</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x920e</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>STORE</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>swap</name></expr></argument>, <argument><expr><literal type="number">0xfe0f</literal></expr></argument>, <argument><expr><literal type="number">0x9402</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SAR</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="number">0xfe0e</literal></expr></argument>, <argument><expr><literal type="number">0x940e</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>CALL</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>jmp</name></expr></argument>, <argument><expr><literal type="number">0xfe0e</literal></expr></argument>, <argument><expr><literal type="number">0x940c</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>JMP</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>bld</name></expr></argument>, <argument><expr><literal type="number">0xfe08</literal></expr></argument>, <argument><expr><literal type="number">0xf800</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SWI</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>bst</name></expr></argument>, <argument><expr><literal type="number">0xfe08</literal></expr></argument>, <argument><expr><literal type="number">0xfa00</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SWI</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>sbix</name></expr></argument>, <argument><expr><literal type="number">0xff00</literal></expr></argument>, <argument><expr><literal type="number">0x9900</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CJMP</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>sbix</name></expr></argument>, <argument><expr><literal type="number">0xff00</literal></expr></argument>, <argument><expr><literal type="number">0x9b00</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CJMP</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>sbrx</name></expr></argument>, <argument><expr><literal type="number">0xfe08</literal></expr></argument>, <argument><expr><literal type="number">0xfc00</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CJMP</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>sbrx</name></expr></argument>, <argument><expr><literal type="number">0xfe08</literal></expr></argument>, <argument><expr><literal type="number">0xfe00</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CJMP</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>ldd</name></expr></argument>, <argument><expr><literal type="number">0xfe07</literal></expr></argument>, <argument><expr><literal type="number">0x9001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LOAD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>ldd</name></expr></argument>, <argument><expr><literal type="number">0xfe07</literal></expr></argument>, <argument><expr><literal type="number">0x9002</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LOAD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>std</name></expr></argument>, <argument><expr><literal type="number">0xfe07</literal></expr></argument>, <argument><expr><literal type="number">0x9201</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>STORE</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>std</name></expr></argument>, <argument><expr><literal type="number">0xfe07</literal></expr></argument>, <argument><expr><literal type="number">0x9202</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>STORE</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>adc</name></expr></argument>, <argument><expr><literal type="number">0xfc00</literal></expr></argument>, <argument><expr><literal type="number">0x1c00</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ADD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><literal type="number">0xfc00</literal></expr></argument>, <argument><expr><literal type="number">0x0c00</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ADD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>and</name></expr></argument>, <argument><expr><literal type="number">0xfc00</literal></expr></argument>, <argument><expr><literal type="number">0x2000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>AND</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>brbx</name></expr></argument>, <argument><expr><literal type="number">0xfc00</literal></expr></argument>, <argument><expr><literal type="number">0xf000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CJMP</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>brbx</name></expr></argument>, <argument><expr><literal type="number">0xfc00</literal></expr></argument>, <argument><expr><literal type="number">0xf400</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CJMP</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0xfc00</literal></expr></argument>, <argument><expr><literal type="number">0x1400</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CMP</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>cpc</name></expr></argument>, <argument><expr><literal type="number">0xfc00</literal></expr></argument>, <argument><expr><literal type="number">0x0400</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CMP</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>cpse</name></expr></argument>, <argument><expr><literal type="number">0xfc00</literal></expr></argument>, <argument><expr><literal type="number">0x1000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CJMP</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>eor</name></expr></argument>, <argument><expr><literal type="number">0xfc00</literal></expr></argument>, <argument><expr><literal type="number">0x2400</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>XOR</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>mov</name></expr></argument>, <argument><expr><literal type="number">0xfc00</literal></expr></argument>, <argument><expr><literal type="number">0x2c00</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>MOV</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><literal type="number">0xfc00</literal></expr></argument>, <argument><expr><literal type="number">0x9c00</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>AND</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>or</name></expr></argument>, <argument><expr><literal type="number">0xfc00</literal></expr></argument>, <argument><expr><literal type="number">0x2800</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OR</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>sbc</name></expr></argument>, <argument><expr><literal type="number">0xfc00</literal></expr></argument>, <argument><expr><literal type="number">0x0800</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SUB</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>sub</name></expr></argument>, <argument><expr><literal type="number">0xfc00</literal></expr></argument>, <argument><expr><literal type="number">0x1800</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SUB</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">0xf800</literal></expr></argument>, <argument><expr><literal type="number">0xb000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>IO</name></expr></argument> )</argument_list></call></expr>, 

<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0xf800</literal></expr></argument>, <argument><expr><literal type="number">0xb800</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>IO</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>andi</name></expr></argument>, <argument><expr><literal type="number">0xf000</literal></expr></argument>, <argument><expr><literal type="number">0x7000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>AND</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>cpi</name></expr></argument>, <argument><expr><literal type="number">0xf000</literal></expr></argument>, <argument><expr><literal type="number">0x3000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CMP</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>ldi</name></expr></argument>, <argument><expr><literal type="number">0xf000</literal></expr></argument>, <argument><expr><literal type="number">0xe000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LOAD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>ori</name></expr></argument>, <argument><expr><literal type="number">0xf000</literal></expr></argument>, <argument><expr><literal type="number">0x6000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OR</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>rcall</name></expr></argument>, <argument><expr><literal type="number">0xf000</literal></expr></argument>, <argument><expr><literal type="number">0xd000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CALL</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>rjmp</name></expr></argument>, <argument><expr><literal type="number">0xf000</literal></expr></argument>, <argument><expr><literal type="number">0xc000</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>JMP</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>sbci</name></expr></argument>, <argument><expr><literal type="number">0xf000</literal></expr></argument>, <argument><expr><literal type="number">0x4000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SUB</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>subi</name></expr></argument>, <argument><expr><literal type="number">0xf000</literal></expr></argument>, <argument><expr><literal type="number">0x5000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SUB</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>ldd</name></expr></argument>, <argument><expr><literal type="number">0xd200</literal></expr></argument>, <argument><expr><literal type="number">0x8000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LOAD</name></expr></argument> )</argument_list></call></expr>, 
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>std</name></expr></argument>, <argument><expr><literal type="number">0xd200</literal></expr></argument>, <argument><expr><literal type="number">0x8200</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>STORE</name></expr></argument> )</argument_list></call></expr>, 

<expr><name>INST_LAST</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>OPCODE_DESC</name><modifier>*</modifier></type> <name>avr_op_analyze</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CPU_MODEL</name> <modifier>*</modifier></type><name>cpu</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>OPCODE_DESC</name> <modifier>*</modifier></type><name>opcode_desc</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>ins</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>opcode_desc</name> <operator>=</operator> <name>opcodes</name></expr>;</init> <condition><expr><name><name>opcode_desc</name><operator>-&gt;</operator><name>handler</name></name></expr>;</condition> <incr><expr><name>opcode_desc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ins</name> <operator>&amp;</operator> <name><name>opcode_desc</name><operator>-&gt;</operator><name>mask</name></name><operator>)</operator> <operator>==</operator> <name><name>opcode_desc</name><operator>-&gt;</operator><name>selector</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <name><name>opcode_desc</name><operator>-&gt;</operator><name>cycles</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>opcode_desc</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>opcode_desc</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>opcode_desc</name><operator>-&gt;</operator><name>handler</name></name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fail</name></expr></argument>, <argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fail</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>INVALID_OP</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>opcode_desc</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>nopcode</name></name> <operator>=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_UNK</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>r_strbuf_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;&amp;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>opcode_desc</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ins</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xff00</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>ins</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>INVALID_OP</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>INVALID_OP</name>:</label>


<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>nopcode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>avr_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CPU_MODEL</name> <modifier>*</modifier></type><name>cpu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>cpu</name> <operator>=</operator> <call><name>get_cpu_model</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_reg_write</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"_prog"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>cpu</name><operator>-&gt;</operator><name>pc</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_reg_write</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"_io"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>const_get_value</name> <argument_list>(<argument><expr><call><name>const_by_name</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>, <argument><expr><name>CPU_CONST_PARAM</name></expr></argument>, <argument><expr><literal type="string">"sram_start"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_reg_write</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"_sram"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>const_get_value</name> <argument_list>(<argument><expr><call><name>const_by_name</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>, <argument><expr><name>CPU_CONST_PARAM</name></expr></argument>, <argument><expr><literal type="string">"sram_size"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_reg_write</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"_eeprom"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>const_get_value</name> <argument_list>(<argument><expr><call><name>const_by_name</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>, <argument><expr><name>CPU_CONST_PARAM</name></expr></argument>, <argument><expr><literal type="string">"eeprom_size"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_reg_write</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"_page"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avr_op_analyze</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>avr_custom_des</name> <parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>encrypt</name></decl>, <decl><type ref="prev"/><name>text</name></decl>,<decl><type ref="prev"/><name>des_round</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>key_lo</name></decl>, <decl><type ref="prev"/><name>key_hi</name></decl>, <decl><type ref="prev"/><name>buf_lo</name></decl>, <decl><type ref="prev"/><name>buf_hi</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>esil</name> <operator>||</operator> <operator>!</operator><name><name>esil</name><operator>-&gt;</operator><name>anal</name></name> <operator>||</operator> <operator>!</operator><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__esil_pop_argument</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>des_round</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_anal_esil_reg_read</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"hf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>encrypt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_reg_read</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"deskey"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_reg_read</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>text</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key_lo</name> <operator>=</operator> <name>key</name> <operator>&amp;</operator> <name>UT32_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key_hi</name> <operator>=</operator> <name>key</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_lo</name> <operator>=</operator> <name>text</name> <operator>&amp;</operator> <name>UT32_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_hi</name> <operator>=</operator> <name>text</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>des_round</name> <operator>!=</operator> <name><name>desctx</name><operator>.</operator><name>round</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>desctx</name><operator>.</operator><name>round</name></name> <operator>=</operator> <name>des_round</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>desctx</name><operator>.</operator><name>round</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_des_permute_key</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>key_lo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_des_round_key</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>desctx</name><operator>.</operator><name>round_key_lo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>desctx</name><operator>.</operator><name>round_key_hi</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_lo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_des_permute_block0</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf_lo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>encrypt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_des_round</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf_lo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_hi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>desctx</name><operator>.</operator><name>round_key_lo</name><index>[<expr><name><name>desctx</name><operator>.</operator><name>round</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>desctx</name><operator>.</operator><name>round_key_hi</name><index>[<expr><name><name>desctx</name><operator>.</operator><name>round</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_des_round</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf_lo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_hi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>desctx</name><operator>.</operator><name>round_key_lo</name><index>[<expr><literal type="number">15</literal> <operator>-</operator> <name><name>desctx</name><operator>.</operator><name>round</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>desctx</name><operator>.</operator><name>round_key_hi</name><index>[<expr><literal type="number">15</literal> <operator>-</operator> <name><name>desctx</name><operator>.</operator><name>round</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desctx</name><operator>.</operator><name>round</name></name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_des_permute_block1</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf_hi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desctx</name><operator>.</operator><name>round</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>desctx</name><operator>.</operator><name>round</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_anal_esil_reg_write</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>avr_custom_spm_page_erase</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CPU_MODEL</name> <modifier>*</modifier></type><name>cpu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>page_size_bits</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>esil</name> <operator>||</operator> <operator>!</operator><name><name>esil</name><operator>-&gt;</operator><name>anal</name></name> <operator>||</operator> <operator>!</operator><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__esil_pop_argument</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>cpu</name> <operator>=</operator> <call><name>get_cpu_model</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>page_size_bits</name> <operator>=</operator> <call><name>const_get_value</name> <argument_list>(<argument><expr><call><name>const_by_name</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>, <argument><expr><name>CPU_CONST_PARAM</name></expr></argument>, <argument><expr><literal type="string">"page_size"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>addr</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><call><name>MASK</name> <argument_list>(<argument><expr><name>page_size_bits</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>page_size_bits</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_esil_mem_write</name> <argument_list>(
<argument><expr><name>esil</name></expr></argument>, <argument><expr><operator>(</operator><name>addr</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <call><name>CPU_PC_MASK</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>avr_custom_spm_page_fill</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CPU_MODEL</name> <modifier>*</modifier></type><name>cpu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>page_size_bits</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>r0</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>esil</name> <operator>||</operator> <operator>!</operator><name><name>esil</name><operator>-&gt;</operator><name>anal</name></name> <operator>||</operator> <operator>!</operator><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__esil_pop_argument</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__esil_pop_argument</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r0</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__esil_pop_argument</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>


<expr_stmt><expr><name>cpu</name> <operator>=</operator> <call><name>get_cpu_model</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>page_size_bits</name> <operator>=</operator> <call><name>const_get_value</name> <argument_list>(<argument><expr><call><name>const_by_name</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>, <argument><expr><name>CPU_CONST_PARAM</name></expr></argument>, <argument><expr><literal type="string">"page_size"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>addr</name> <operator>&amp;=</operator> <operator>(</operator><call><name>MASK</name> <argument_list>(<argument><expr><name>page_size_bits</name></expr></argument>)</argument_list></call> <operator>^</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><call><name>r_anal_esil_mem_write</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>addr</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>r0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_mem_write</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>addr</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>r1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>avr_custom_spm_page_write</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CPU_MODEL</name> <modifier>*</modifier></type><name>cpu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>page_size_bits</name></decl>, <decl><type ref="prev"/><name>tmp_page</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>esil</name> <operator>||</operator> <operator>!</operator><name><name>esil</name><operator>-&gt;</operator><name>anal</name></name> <operator>||</operator> <operator>!</operator><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__esil_pop_argument</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>cpu</name> <operator>=</operator> <call><name>get_cpu_model</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>page_size_bits</name> <operator>=</operator> <call><name>const_get_value</name> <argument_list>(<argument><expr><call><name>const_by_name</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>, <argument><expr><name>CPU_CONST_PARAM</name></expr></argument>, <argument><expr><literal type="string">"page_size"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_reg_read</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"_page"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_page</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>addr</name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><operator>(</operator><call><name>MASK</name> <argument_list>(<argument><expr><name>page_size_bits</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <call><name>CPU_PC_MASK</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>t</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>page_size_bits</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot alloc a buffer for copying the temporary page.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_anal_esil_mem_read</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>tmp_page</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>page_size_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_mem_write</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>page_size_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>esil_avr_hook_reg_write</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CPU_MODEL</name> <modifier>*</modifier></type><name>cpu</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>esil</name> <operator>||</operator> <operator>!</operator><name><name>esil</name><operator>-&gt;</operator><name>anal</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>cpu</name> <operator>=</operator> <call><name>get_cpu_model</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"pc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>&amp;=</operator> <call><name>CPU_PC_MASK</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"pcl"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cpu</name><operator>-&gt;</operator><name>pc</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>&amp;=</operator> <call><name>MASK</name> <argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"pch"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <ternary><condition><expr><name><name>cpu</name><operator>-&gt;</operator><name>pc</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>
?</condition><then> <expr><operator>*</operator><name>val</name> <operator>&amp;</operator> <call><name>MASK</name> <argument_list>(<argument><expr><name><name>cpu</name><operator>-&gt;</operator><name>pc</name></name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>esil_avr_init</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>esil</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>desctx</name><operator>.</operator><name>round</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"des"</literal></expr></argument>, <argument><expr><name>avr_custom_des</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_CUSTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"SPM_PAGE_ERASE"</literal></expr></argument>, <argument><expr><name>avr_custom_spm_page_erase</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_CUSTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"SPM_PAGE_FILL"</literal></expr></argument>, <argument><expr><name>avr_custom_spm_page_fill</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_CUSTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"SPM_PAGE_WRITE"</literal></expr></argument>, <argument><expr><name>avr_custom_spm_page_write</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_CUSTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_reg_write</name></name> <operator>=</operator> <name>esil_avr_hook_reg_write</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>esil_avr_fini</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>=
<expr><literal type="string">"=PC pcl\n"</literal>
<literal type="string">"=SP sp\n"</literal>
<literal type="string">"=BP y\n"</literal>


<literal type="string">"=A0 r25\n"</literal>
<literal type="string">"=A1 r24\n"</literal>
<literal type="string">"=A2 r23\n"</literal>
<literal type="string">"=A3 r22\n"</literal>
<literal type="string">"=R0 r24\n"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
PC: 16- or 22-bit program counter
SP: 8- or 16-bit stack pointer
SREG: 8-bit status register
RAMPX, RAMPY, RAMPZ, RAMPD and EIND:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"gpr r0 .8 0 0\n"</literal>
<literal type="string">"gpr r1 .8 1 0\n"</literal>
<literal type="string">"gpr r2 .8 2 0\n"</literal>
<literal type="string">"gpr r3 .8 3 0\n"</literal>
<literal type="string">"gpr r4 .8 4 0\n"</literal>
<literal type="string">"gpr r5 .8 5 0\n"</literal>
<literal type="string">"gpr r6 .8 6 0\n"</literal>
<literal type="string">"gpr r7 .8 7 0\n"</literal>
<literal type="string">"gpr text .64 0 0\n"</literal>
<literal type="string">"gpr r8 .8 8 0\n"</literal>
<literal type="string">"gpr r9 .8 9 0\n"</literal>
<literal type="string">"gpr r10 .8 10 0\n"</literal>
<literal type="string">"gpr r11 .8 11 0\n"</literal>
<literal type="string">"gpr r12 .8 12 0\n"</literal>
<literal type="string">"gpr r13 .8 13 0\n"</literal>
<literal type="string">"gpr r14 .8 14 0\n"</literal>
<literal type="string">"gpr r15 .8 15 0\n"</literal>
<literal type="string">"gpr deskey .64 8 0\n"</literal>
<literal type="string">"gpr r16 .8 16 0\n"</literal>
<literal type="string">"gpr r17 .8 17 0\n"</literal>
<literal type="string">"gpr r18 .8 18 0\n"</literal>
<literal type="string">"gpr r19 .8 19 0\n"</literal>
<literal type="string">"gpr r20 .8 20 0\n"</literal>
<literal type="string">"gpr r21 .8 21 0\n"</literal>
<literal type="string">"gpr r22 .8 22 0\n"</literal>
<literal type="string">"gpr r23 .8 23 0\n"</literal>
<literal type="string">"gpr r24 .8 24 0\n"</literal>
<literal type="string">"gpr r25 .8 25 0\n"</literal>
<literal type="string">"gpr r26 .8 26 0\n"</literal>
<literal type="string">"gpr r27 .8 27 0\n"</literal>
<literal type="string">"gpr r28 .8 28 0\n"</literal>
<literal type="string">"gpr r29 .8 29 0\n"</literal>
<literal type="string">"gpr r30 .8 30 0\n"</literal>
<literal type="string">"gpr r31 .8 31 0\n"</literal>


<literal type="string">"gpr r1_r0 .16 0 0\n"</literal> 
<literal type="string">"gpr r17_r16 .16 16 0\n"</literal>
<literal type="string">"gpr r19_r18 .16 18 0\n"</literal>
<literal type="string">"gpr r21_r20 .16 20 0\n"</literal>
<literal type="string">"gpr r23_r22 .16 22 0\n"</literal>
<literal type="string">"gpr r25_r24 .16 24 0\n"</literal>
<literal type="string">"gpr r27_r26 .16 26 0\n"</literal>
<literal type="string">"gpr r29_r28 .16 28 0\n"</literal>
<literal type="string">"gpr r31_r30 .16 30 0\n"</literal>


<literal type="string">"gpr x .16 26 0\n"</literal>
<literal type="string">"gpr y .16 28 0\n"</literal>
<literal type="string">"gpr z .16 30 0\n"</literal>



<literal type="string">"gpr pc .32 32 0\n"</literal>
<literal type="string">"gpr pcl .16 32 0\n"</literal>
<literal type="string">"gpr pch .16 34 0\n"</literal>

<literal type="string">"gpr sp .16 36 0\n"</literal>
<literal type="string">"gpr spl .8 36 0\n"</literal>
<literal type="string">"gpr sph .8 37 0\n"</literal>

<literal type="string">"gpr sreg .8 38 0\n"</literal>
<literal type="string">"gpr cf .1 38.0 0\n"</literal> 
<literal type="string">"gpr zf .1 38.1 0\n"</literal> 
<literal type="string">"gpr nf .1 38.2 0\n"</literal> 
<literal type="string">"gpr vf .1 38.3 0\n"</literal> 
<literal type="string">"gpr sf .1 38.4 0\n"</literal> 
<literal type="string">"gpr hf .1 38.5 0\n"</literal> 
<literal type="string">"gpr tf .1 38.6 0\n"</literal> 
<literal type="string">"gpr if .1 38.7 0\n"</literal> 

<literal type="string">"gpr rampx .8 39 0\n"</literal>
<literal type="string">"gpr rampy .8 40 0\n"</literal>
<literal type="string">"gpr rampz .8 41 0\n"</literal>
<literal type="string">"gpr rampd .8 42 0\n"</literal>
<literal type="string">"gpr eind .8 43 0\n"</literal>
















<literal type="string">"gpr _prog .32 44 0\n"</literal>
<literal type="string">"gpr _page .32 48 0\n"</literal>
<literal type="string">"gpr _eeprom .32 52 0\n"</literal>
<literal type="string">"gpr _ram .32 56 0\n"</literal>
<literal type="string">"gpr _io .32 56 0\n"</literal>
<literal type="string">"gpr _sram .32 60 0\n"</literal>



<literal type="string">"gpr spmcsr .8 64 0\n"</literal></expr></init></decl>
;</decl_stmt>

<return>return <expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>archinfo</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>R_ANAL_ARCHINFO_ALIGN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>R_ANAL_ARCHINFO_MAX_OP_SIZE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>R_ANAL_ARCHINFO_MIN_OP_SIZE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name> <modifier>*</modifier></type><name>anal_mask_avr</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>op</name> <operator>=</operator> <call><name>r_anal_op_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_op_free</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CPU_MODEL</name> <modifier>*</modifier></type><name>cpu</name> <init>= <expr><call><name>get_cpu_model</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>idx</name> <operator>+=</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>OPCODE_DESC</name><modifier>*</modifier></type> <name>opcode_desc</name> <init>= <expr><call><name>avr_op_analyze</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>at</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>idx</name></expr></argument>, <argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opcode_desc</name></expr>)</condition> <block>{<block_content> 
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>UT64_MAX</name> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>opcode_desc</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>opcode_desc</name><operator>-&gt;</operator><name>mask</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>r_anal_op_free</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_avr</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"avr"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"AVR code analysis plugin"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"avr"</literal></expr>,
<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>true</name></expr>,
<expr><operator>.</operator><name>archinfo</name> <operator>=</operator> <name>archinfo</name></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">16</literal></expr>, 
<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>avr_op</name></expr>,
<expr><operator>.</operator><name>set_reg_profile</name> <operator>=</operator> <operator>&amp;</operator><name>set_reg_profile</name></expr>,
<expr><operator>.</operator><name>esil_init</name> <operator>=</operator> <name>esil_avr_init</name></expr>,
<expr><operator>.</operator><name>esil_fini</name> <operator>=</operator> <name>esil_avr_fini</name></expr>,
<expr><operator>.</operator><name>anal_mask</name> <operator>=</operator> <name>anal_mask_avr</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_avr</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
