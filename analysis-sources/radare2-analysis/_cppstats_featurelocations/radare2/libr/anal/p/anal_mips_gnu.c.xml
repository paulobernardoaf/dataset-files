<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\p\anal_mips_gnu.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>mips_reg_decode</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>reg_num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>REGISTERS</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"zero"</literal></expr>, <expr><literal type="string">"at"</literal></expr>, <expr><literal type="string">"v0"</literal></expr>, <expr><literal type="string">"v1"</literal></expr>, <expr><literal type="string">"a0"</literal></expr>, <expr><literal type="string">"a1"</literal></expr>, <expr><literal type="string">"a2"</literal></expr>, <expr><literal type="string">"a3"</literal></expr>,
<expr><literal type="string">"t0"</literal></expr>, <expr><literal type="string">"t1"</literal></expr>, <expr><literal type="string">"t2"</literal></expr>, <expr><literal type="string">"t3"</literal></expr>, <expr><literal type="string">"t4"</literal></expr>, <expr><literal type="string">"t5"</literal></expr>, <expr><literal type="string">"t6"</literal></expr>, <expr><literal type="string">"t7"</literal></expr>,
<expr><literal type="string">"s0"</literal></expr>, <expr><literal type="string">"s1"</literal></expr>, <expr><literal type="string">"s2"</literal></expr>, <expr><literal type="string">"s3"</literal></expr>, <expr><literal type="string">"s4"</literal></expr>, <expr><literal type="string">"s5"</literal></expr>, <expr><literal type="string">"s6"</literal></expr>, <expr><literal type="string">"s7"</literal></expr>,
<expr><literal type="string">"t8"</literal></expr>, <expr><literal type="string">"t9"</literal></expr>, <expr><literal type="string">"k0"</literal></expr>, <expr><literal type="string">"k1"</literal></expr>, <expr><literal type="string">"gp"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>, <expr><literal type="string">"fp"</literal></expr>, <expr><literal type="string">"ra"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_num</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>REGISTERS</name><index>[<expr><name>reg_num</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mips_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>opcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>optype</name></decl>, <decl><type ref="prev"/><name>oplen</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">16</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">2</literal></expr></then><else>:<expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>oplen</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>oplen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>
<return>return <expr><name>oplen</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>optype</name> <operator>=</operator> <operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>optype</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIP</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>rs</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rt</name> <init>= <expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">31</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rd</name> <init>= <expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sa</name> <init>= <expr><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator><operator>+</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>fun</name> <init>= <expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">63</literal></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>fun</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case> 


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator> <operator>==</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCALL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SWI</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">13</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case> 
<case>case <expr><literal type="number">18</literal></expr>:</case> 

<case>case <expr><literal type="number">17</literal></expr>:</case> 
<case>case <expr><literal type="number">19</literal></expr>:</case> 

<case>case <expr><literal type="number">24</literal></expr>:</case> 
<case>case <expr><literal type="number">25</literal></expr>:</case> 

<case>case <expr><literal type="number">26</literal></expr>:</case> 
<case>case <expr><literal type="number">27</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_DIV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">32</literal></expr>:</case> 
<case>case <expr><literal type="number">33</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">34</literal></expr>:</case> 
<case>case <expr><literal type="number">35</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">36</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">37</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">38</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">39</literal></expr>:</case> 
<case>case <expr><literal type="number">42</literal></expr>:</case> 
<case>case <expr><literal type="number">43</literal></expr>:</case> 

<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else
if <condition>(<expr><operator>(</operator><name>optype</name> <operator>&amp;</operator> <literal type="number">0x3e</literal><operator>)</operator> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>


























<decl_stmt><decl><type><name>int</name></type> <name>address</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>+</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>+</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>+</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>page_hack</name> <init>= <expr><name>addr</name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>optype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>page_hack</name> <operator>+</operator> <name>address</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%08x,pc,="</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>page_hack</name> <operator>+</operator> <name>address</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"pc,lr,=,0x%08x,pc,="</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>optype</name> <operator>&amp;</operator> <literal type="number">0x1c</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x1c</literal></expr>)</condition> <block>{<block_content>













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIP</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>fmt</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ft</name> <init>= <expr><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">31</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fs</name> <init>= <expr><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator><operator>+</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>fun</name> <init>= <expr><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">63</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>fun</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> 
<break>break;</break>

</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>














<decl_stmt><decl><type><name>int</name></type> <name>rs</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rt</name> <init>= <expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">31</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>imm</name> <init>= <expr><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>+</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>optype</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>^</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">0</literal> <operator>-</operator> <operator>(</operator><literal type="number">0x10000</literal> <operator>-</operator> <name>imm</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>optype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> 
<case>case <expr><literal type="number">4</literal></expr>:</case> 
<case>case <expr><literal type="number">5</literal></expr>:</case> 
<case>case <expr><literal type="number">6</literal></expr>:</case> 
<case>case <expr><literal type="number">7</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><operator>(</operator><name>imm</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
















<case>case <expr><literal type="number">15</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><call><name>mips_reg_decode</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>imm</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><call><name>mips_reg_decode</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><call><name>mips_reg_decode</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>imm</name></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case> 
<case>case <expr><literal type="number">10</literal></expr>:</case> 
<case>case <expr><literal type="number">11</literal></expr>:</case> 
<case>case <expr><literal type="number">12</literal></expr>:</case> 
<case>case <expr><literal type="number">13</literal></expr>:</case> 
<case>case <expr><literal type="number">14</literal></expr>:</case> 
<case>case <expr><literal type="number">32</literal></expr>:</case> 
<case>case <expr><literal type="number">33</literal></expr>:</case> 
<case>case <expr><literal type="number">35</literal></expr>:</case> 
<case>case <expr><literal type="number">36</literal></expr>:</case> 
<case>case <expr><literal type="number">37</literal></expr>:</case> 
<case>case <expr><literal type="number">40</literal></expr>:</case> 
<case>case <expr><literal type="number">41</literal></expr>:</case> 
<case>case <expr><literal type="number">43</literal></expr>:</case> 
<case>case <expr><literal type="number">49</literal></expr>:</case> 
<case>case <expr><literal type="number">57</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><literal type="number">29</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal> <operator>|</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
switch (optype) {
case 'R': 
op-&gt;type = R_ANAL_OP_TYPE_ADD;
break;
case 'I': 
op-&gt;type = R_ANAL_OP_TYPE_JMP;
break;
case 'J': 
op-&gt;type = R_ANAL_OP_TYPE_CALL;
break;
case 'C': 
op-&gt;type = R_ANAL_OP_TYPE_RET;
break;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>oplen</name></expr>;</return>


























































































<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>mips_set_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
"=PC pc\n"
"=SP sp\n"
"=A0 a0\n"
"=A1 a1\n"
"=A2 a2\n"
"=A3 a3\n"
"gpr zero .32 0 0\n"
"gpr at .32 4 0\n"
"gpr v0 .32 8 0\n"
"gpr v1 .32 12 0\n"
"gpr a0 .32 16 0\n"
"gpr a1 .32 20 0\n"
"gpr a2 .32 24 0\n"
"gpr a3 .32 28 0\n"
"gpr t0 .32 32 0\n"
"gpr t1 .32 36 0\n"
"gpr t2 .32 40 0\n"
"gpr t3 .32 44 0\n"
"gpr t4 .32 48 0\n"
"gpr t5 .32 52 0\n"
"gpr t6 .32 56 0\n"
"gpr t7 .32 60 0\n"
"gpr s0 .32 64 0\n"
"gpr s1 .32 68 0\n"
"gpr s2 .32 72 0\n"
"gpr s3 .32 76 0\n"
"gpr s4 .32 80 0\n"
"gpr s5 .32 84 0\n"
"gpr s6 .32 88 0\n"
"gpr s7 .32 92 0\n"
"gpr t8 .32 96 0\n"
"gpr t9 .32 100 0\n"
"gpr k0 .32 104 0\n"
"gpr k1 .32 108 0\n"
"gpr gp .32 112 0\n"
"gpr sp .32 116 0\n"
"gpr fp .32 120 0\n"
"gpr ra .32 124 0\n"
"gpr pc .32 128 0\n";
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"=PC pc\n"</literal>
<literal type="string">"=SP sp\n"</literal>
<literal type="string">"=BP fp\n"</literal>
<literal type="string">"=A0 a0\n"</literal>
<literal type="string">"=A1 a1\n"</literal>
<literal type="string">"=A2 a2\n"</literal>
<literal type="string">"=A3 a3\n"</literal>
<literal type="string">"gpr zero .64 0 0\n"</literal>

<literal type="string">"gpr at .64 8 0\n"</literal>
<literal type="string">"gpr v0 .64 16 0\n"</literal>
<literal type="string">"gpr v1 .64 24 0\n"</literal>

<literal type="string">"gpr a0 .64 32 0\n"</literal>
<literal type="string">"gpr a1 .64 40 0\n"</literal>
<literal type="string">"gpr a2 .64 48 0\n"</literal>
<literal type="string">"gpr a3 .64 56 0\n"</literal>

<literal type="string">"gpr t0 .64 64 0\n"</literal>
<literal type="string">"gpr t1 .64 72 0\n"</literal>
<literal type="string">"gpr t2 .64 80 0\n"</literal>
<literal type="string">"gpr t3 .64 88 0\n"</literal>
<literal type="string">"gpr t4 .64 96 0\n"</literal>
<literal type="string">"gpr t5 .64 104 0\n"</literal>
<literal type="string">"gpr t6 .64 112 0\n"</literal>
<literal type="string">"gpr t7 .64 120 0\n"</literal>

<literal type="string">"gpr s0 .64 128 0\n"</literal>
<literal type="string">"gpr s1 .64 136 0\n"</literal>
<literal type="string">"gpr s2 .64 144 0\n"</literal>
<literal type="string">"gpr s3 .64 152 0\n"</literal>
<literal type="string">"gpr s4 .64 160 0\n"</literal>
<literal type="string">"gpr s5 .64 168 0\n"</literal>
<literal type="string">"gpr s6 .64 176 0\n"</literal>
<literal type="string">"gpr s7 .64 184 0\n"</literal>
<literal type="string">"gpr t8 .64 192 0\n"</literal>
<literal type="string">"gpr t9 .64 200 0\n"</literal>

<literal type="string">"gpr k0 .64 208 0\n"</literal>
<literal type="string">"gpr k1 .64 216 0\n"</literal>
<literal type="string">"gpr gp .64 224 0\n"</literal>
<literal type="string">"gpr sp .64 232 0\n"</literal>
<literal type="string">"gpr fp .64 240 0\n"</literal>
<literal type="string">"gpr ra .64 248 0\n"</literal>

<literal type="string">"gpr pc .64 272 0\n"</literal></expr></init></decl>
;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>archinfo</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_mips_gnu</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mips.gnu"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"MIPS code analysis plugin"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"mips"</literal></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,
<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>true</name></expr>,
<expr><operator>.</operator><name>archinfo</name> <operator>=</operator> <name>archinfo</name></expr>,
<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>mips_op</name></expr>,
<expr><operator>.</operator><name>set_reg_profile</name> <operator>=</operator> <name>mips_set_reg_profile</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_mips_gnu</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
