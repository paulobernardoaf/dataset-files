<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\p\anal_xtensa.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xtensa-isa.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CM</name></cpp:macro> <cpp:value>","</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XTENSA_MAX_LENGTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__declspec</name><argument_list>(<argument>dllimport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>extern</specifier> <name>xtensa_isa</name></type> <name>xtensa_default_isa</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xtensa_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>length_table</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>length_table</name><index>[<expr><operator>*</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>xtensa_offset</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xc</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&amp;</operator> <literal type="number">0x80000</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>addr</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>offset</name> <operator>-</operator> <literal type="number">0x100000</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>addr</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>xtensa_imm18s</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&amp;</operator> <literal type="number">0x20000</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>addr</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>offset</name> <operator>-</operator> <literal type="number">0x40000</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>addr</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>xtensa_imm6s</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>imm6</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x30</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>addr</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>imm6</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>xtensa_imm8s</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>imm8</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>imm8</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>addr</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>imm8</name> <operator>-</operator> <literal type="number">0x100</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>addr</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>imm8</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>xtensa_imm12s</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>imm12</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut16</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>imm12</name> <operator>&amp;</operator> <literal type="number">0x800</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>addr</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>imm12</name> <operator>-</operator> <literal type="number">0x1000</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>addr</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>imm12</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>XtensaOpFn</name>) <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_null_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_unk_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_mov_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_load_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_store_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_add_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_sub_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_mul_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_div_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_DIV</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_mod_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOD</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_and_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_or_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_xor_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_shl_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_shr_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_l32r_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x40000</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_snm0_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x0</literal></expr>:</case> <case>case <expr><literal type="number">0x1</literal></expr>:</case> <case>case <expr><literal type="number">0x2</literal></expr>:</case> <case>case <expr><literal type="number">0x3</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x8</literal></expr>:</case> <case>case <expr><literal type="number">0x9</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xa</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xc</literal></expr>:</case> <case>case <expr><literal type="number">0xd</literal></expr>:</case> <case>case <expr><literal type="number">0xe</literal></expr>:</case> <case>case <expr><literal type="number">0xf</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCALL</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_sync_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x0</literal></expr>:</case> <case>case <expr><literal type="number">0x1</literal></expr>:</case> <case>case <expr><literal type="number">0x2</literal></expr>:</case> <case>case <expr><literal type="number">0x3</literal></expr>:</case>
<case>case <expr><literal type="number">0x8</literal></expr>:</case>
<case>case <expr><literal type="number">0xc</literal></expr>:</case> <case>case <expr><literal type="number">0xd</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NULL</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_rfei_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x0</literal></expr>:</case>
<switch>switch <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x0</literal></expr>:</case> <case>case <expr><literal type="number">0x1</literal></expr>:</case> <case>case <expr><literal type="number">0x2</literal></expr>:</case>
<case>case <expr><literal type="number">0x4</literal></expr>:</case> <case>case <expr><literal type="number">0x5</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">0x1</literal></expr>:</case> <case>case <expr><literal type="number">0x2</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_st0_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x0</literal></expr>:</case>
<expr_stmt><expr><call><name>xtensa_snm0_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x1</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMOV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x2</literal></expr>:</case>
<expr_stmt><expr><call><name>xtensa_sync_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x3</literal></expr>:</case>
<expr_stmt><expr><call><name>xtensa_rfei_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x4</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x5</literal></expr>:</case> <case>case <expr><literal type="number">0x6</literal></expr>:</case> <case>case <expr><literal type="number">0x7</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SWI</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x8</literal></expr>:</case> <case>case <expr><literal type="number">0x9</literal></expr>:</case> <case>case <expr><literal type="number">0xa</literal></expr>:</case> <case>case <expr><literal type="number">0xb</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_st1_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x0</literal></expr>:</case> <case>case <expr><literal type="number">0x1</literal></expr>:</case> <case>case <expr><literal type="number">0x2</literal></expr>:</case> <case>case <expr><literal type="number">0x3</literal></expr>:</case>
<case>case <expr><literal type="number">0x4</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NULL</name></expr>;</expr_stmt>

<break>break;</break>
<case>case <expr><literal type="number">0x6</literal></expr>:</case> <case>case <expr><literal type="number">0x7</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_IO</name></expr>;</expr_stmt>

<break>break;</break>
<case>case <expr><literal type="number">0x8</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SWI</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xe</literal></expr>:</case> <case>case <expr><literal type="number">0xf</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NULL</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_rt0_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_tlb_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x3</literal></expr>:</case>
<case>case <expr><literal type="number">0x4</literal></expr>:</case> <case>case <expr><literal type="number">0x5</literal></expr>:</case> <case>case <expr><literal type="number">0x6</literal></expr>:</case> <case>case <expr><literal type="number">0x7</literal></expr>:</case>
<case>case <expr><literal type="number">0xb</literal></expr>:</case>
<case>case <expr><literal type="number">0xc</literal></expr>:</case> <case>case <expr><literal type="number">0xd</literal></expr>:</case> <case>case <expr><literal type="number">0xe</literal></expr>:</case> <case>case <expr><literal type="number">0xf</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_accer_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x0</literal></expr>:</case>
<case>case <expr><literal type="number">0x8</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_IO</name></expr>;</expr_stmt>

<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_imp_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x0</literal></expr>:</case> <case>case <expr><literal type="number">0x1</literal></expr>:</case> <case>case <expr><literal type="number">0x2</literal></expr>:</case> <case>case <expr><literal type="number">0x3</literal></expr>:</case>
<case>case <expr><literal type="number">0x8</literal></expr>:</case> <case>case <expr><literal type="number">0x9</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xe</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtensaOpFn</name></type> <name><name>xtensa_rst0_fns</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>xtensa_st0_op</name></expr>,
<expr><name>xtensa_and_op</name></expr>,
<expr><name>xtensa_or_op</name></expr>,
<expr><name>xtensa_xor_op</name></expr>,
<expr><name>xtensa_st1_op</name></expr>,
<expr><name>xtensa_tlb_op</name></expr>,
<expr><name>xtensa_rt0_op</name></expr>,
<expr><name>xtensa_unk_op</name></expr>,
<expr><name>xtensa_add_op</name></expr>,
<expr><name>xtensa_add_op</name></expr>,
<expr><name>xtensa_add_op</name></expr>,
<expr><name>xtensa_add_op</name></expr>,
<expr><name>xtensa_sub_op</name></expr>,
<expr><name>xtensa_sub_op</name></expr>,
<expr><name>xtensa_sub_op</name></expr>,
<expr><name>xtensa_sub_op</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtensaOpFn</name></type> <name><name>xtensa_rst1_fns</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>xtensa_shl_op</name></expr>,
<expr><name>xtensa_shl_op</name></expr>,
<expr><name>xtensa_shr_op</name></expr>,
<expr><name>xtensa_shr_op</name></expr>,
<expr><name>xtensa_shr_op</name></expr>,
<expr><name>xtensa_unk_op</name></expr>,
<expr><name>xtensa_null_op</name></expr>,
<expr><name>xtensa_accer_op</name></expr>,
<expr><name>xtensa_shr_op</name></expr>,
<expr><name>xtensa_shr_op</name></expr>,
<expr><name>xtensa_shl_op</name></expr>,
<expr><name>xtensa_shr_op</name></expr>,
<expr><name>xtensa_mul_op</name></expr>,
<expr><name>xtensa_mul_op</name></expr>,
<expr><name>xtensa_unk_op</name></expr>,
<expr><name>xtensa_imp_op</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtensaOpFn</name></type> <name><name>xtensa_rst2_fns</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>xtensa_and_op</name></expr>,
<expr><name>xtensa_and_op</name></expr>,
<expr><name>xtensa_or_op</name></expr>,
<expr><name>xtensa_or_op</name></expr>,
<expr><name>xtensa_xor_op</name></expr>,
<expr><name>xtensa_unk_op</name></expr>,
<expr><name>xtensa_unk_op</name></expr>,
<expr><name>xtensa_unk_op</name></expr>,
<expr><name>xtensa_mul_op</name></expr>,
<expr><name>xtensa_unk_op</name></expr>,
<expr><name>xtensa_mul_op</name></expr>,
<expr><name>xtensa_mul_op</name></expr>,
<expr><name>xtensa_div_op</name></expr>,
<expr><name>xtensa_div_op</name></expr>,
<expr><name>xtensa_mod_op</name></expr>,
<expr><name>xtensa_mod_op</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_rst0_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>xtensa_rst0_fns</name><index>[<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name> <operator>(</operator><name>anal</name><operator>,</operator> <name>op</name><operator>,</operator> <name>addr</name><operator>,</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_rst1_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>xtensa_rst1_fns</name><index>[<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name> <operator>(</operator><name>anal</name><operator>,</operator> <name>op</name><operator>,</operator> <name>addr</name><operator>,</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_rst2_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>xtensa_rst2_fns</name><index>[<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name> <operator>(</operator><name>anal</name><operator>,</operator> <name>op</name><operator>,</operator> <name>addr</name><operator>,</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_lsc4_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x0</literal></expr>:</case>
<expr_stmt><expr><call><name>xtensa_load_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x4</literal></expr>:</case>
<expr_stmt><expr><call><name>xtensa_store_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_lscx_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x0</literal></expr>:</case> <case>case <expr><literal type="number">0x1</literal></expr>:</case>
<expr_stmt><expr><call><name>xtensa_load_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x4</literal></expr>:</case> <case>case <expr><literal type="number">0x5</literal></expr>:</case>
<expr_stmt><expr><call><name>xtensa_store_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_fp0_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x0</literal></expr>:</case> <case>case <expr><literal type="number">0x4</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x1</literal></expr>:</case> <case>case <expr><literal type="number">0x5</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x2</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x8</literal></expr>:</case> <case>case <expr><literal type="number">0x9</literal></expr>:</case> <case>case <expr><literal type="number">0xa</literal></expr>:</case> <case>case <expr><literal type="number">0xb</literal></expr>:</case>
<case>case <expr><literal type="number">0xc</literal></expr>:</case> <case>case <expr><literal type="number">0xd</literal></expr>:</case> <case>case <expr><literal type="number">0xe</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xf</literal></expr>:</case>
<switch>switch <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x0</literal></expr>:</case> <case>case <expr><literal type="number">0x4</literal></expr>:</case> <case>case <expr><literal type="number">0x5</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x1</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ABS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x6</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOT</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_fp1_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x1</literal></expr>:</case> <case>case <expr><literal type="number">0x2</literal></expr>:</case> <case>case <expr><literal type="number">0x3</literal></expr>:</case>
<case>case <expr><literal type="number">0x4</literal></expr>:</case> <case>case <expr><literal type="number">0x5</literal></expr>:</case> <case>case <expr><literal type="number">0x6</literal></expr>:</case> <case>case <expr><literal type="number">0x7</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x8</literal></expr>:</case> <case>case <expr><literal type="number">0x9</literal></expr>:</case> <case>case <expr><literal type="number">0xa</literal></expr>:</case> <case>case <expr><literal type="number">0xb</literal></expr>:</case>
<case>case <expr><literal type="number">0xc</literal></expr>:</case> <case>case <expr><literal type="number">0xd</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtensaOpFn</name></type> <name><name>xtensa_qrst_fns</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>xtensa_rst0_op</name></expr>,
<expr><name>xtensa_rst1_op</name></expr>,
<expr><name>xtensa_rst2_op</name></expr>,
<expr><name>xtensa_mov_op</name></expr>, 
<expr><name>xtensa_null_op</name></expr>, 
<expr><name>xtensa_null_op</name></expr>, 
<expr><name>xtensa_unk_op</name></expr>, 
<expr><name>xtensa_unk_op</name></expr>, 
<expr><name>xtensa_lscx_op</name></expr>,
<expr><name>xtensa_lsc4_op</name></expr>,
<expr><name>xtensa_fp0_op</name></expr>,
<expr><name>xtensa_fp1_op</name></expr>,
<expr><name>xtensa_unk_op</name></expr>,
<expr><name>xtensa_unk_op</name></expr>,
<expr><name>xtensa_unk_op</name></expr>,
<expr><name>xtensa_unk_op</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_qrst_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>xtensa_qrst_fns</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name> <operator>(</operator><name>anal</name><operator>,</operator> <name>op</name><operator>,</operator> <name>addr</name><operator>,</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtensaOpFn</name></type> <name><name>xtensa_lsai_fns</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>xtensa_load_op</name></expr>,
<expr><name>xtensa_load_op</name></expr>,
<expr><name>xtensa_load_op</name></expr>,
<expr><name>xtensa_unk_op</name></expr>,
<expr><name>xtensa_store_op</name></expr>,
<expr><name>xtensa_store_op</name></expr>,
<expr><name>xtensa_store_op</name></expr>,
<expr><name>xtensa_null_op</name></expr>, 
<expr><name>xtensa_unk_op</name></expr>,
<expr><name>xtensa_load_op</name></expr>,
<expr><name>xtensa_mov_op</name></expr>,
<expr><name>xtensa_load_op</name></expr>,
<expr><name>xtensa_add_op</name></expr>,
<expr><name>xtensa_add_op</name></expr>,
<expr><name>xtensa_store_op</name></expr>,
<expr><name>xtensa_store_op</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_lsai_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>xtensa_lsai_fns</name><index>[<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name> <operator>(</operator><name>anal</name><operator>,</operator> <name>op</name><operator>,</operator> <name>addr</name><operator>,</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_lsci_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>r</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xtensa_store_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>xtensa_load_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_calln_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>xtensa_offset</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_b_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>xtensa_imm8s</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_si_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>n</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>m</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>xtensa_imm18s</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>xtensa_imm12s</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>xtensa_b_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<switch>switch <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UPUSH</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<switch>switch <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>xtensa_b_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x8</literal></expr>:</case> <case>case <expr><literal type="number">0x9</literal></expr>:</case> <case>case <expr><literal type="number">0xa</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>xtensa_b_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_st2n_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>xtensa_imm6s</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_st3n_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x0</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xf</literal></expr>:</case>
<switch>switch <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xtensa_unk_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtensaOpFn</name></type> <name><name>xtensa_op0_fns</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>xtensa_qrst_op</name></expr>,
<expr><name>xtensa_l32r_op</name></expr>,
<expr><name>xtensa_lsai_op</name></expr>,
<expr><name>xtensa_lsci_op</name></expr>,
<expr><name>xtensa_null_op</name></expr>, 
<expr><name>xtensa_calln_op</name></expr>,
<expr><name>xtensa_si_op</name></expr>,
<expr><name>xtensa_b_op</name></expr>,

<expr><name>xtensa_load_op</name></expr>,
<expr><name>xtensa_store_op</name></expr>,
<expr><name>xtensa_add_op</name></expr>,
<expr><name>xtensa_add_op</name></expr>,
<expr><name>xtensa_st2n_op</name></expr>,
<expr><name>xtensa_st3n_op</name></expr>,
<expr><name>xtensa_null_op</name></expr>, 
<expr><name>xtensa_null_op</name></expr> 
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sign_extend</name><parameter_list>(<parameter><decl><type><name>st32</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>bit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>|=</operator> <literal type="number">0xFFFFFFFF</literal> <operator>&lt;&lt;</operator> <name>bit</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtensa_check_stack_op</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>st32</name></type> <name>imm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>src</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <literal type="number">39</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sign_extend</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>imm</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>imm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <operator>-</operator><name>imm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_push_signed_imm</name><parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type> <name>esil</name></decl></parameter>, <parameter><decl><type><name>st32</name></type> <name>imm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"0x%x"</literal> <name>CM</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><name>esil</name></expr></argument>,
<argument><expr><literal type="string">"0x%x"</literal> <name>CM</name>
<literal type="string">"0x0"</literal> <name>CM</name>
<literal type="string">"-"</literal> <name>CM</name></expr></argument>,
<argument><expr><operator>-</operator> <name>imm</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_sign_extend</name><parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>bit</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>ut32</name></type> <name>bit_mask</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>extend_mask</name> <init>= <expr><literal type="number">0xFFFFFFFF</literal> <operator>&lt;&lt;</operator> <name>bit</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><name>esil</name></expr></argument>,
<argument><expr><literal type="string">"DUP"</literal> <name>CM</name>
<literal type="string">"0x%x"</literal> <name>CM</name>
<literal type="string">"&amp;"</literal> <name>CM</name>
<literal type="string">"0"</literal> <name>CM</name>
<literal type="string">"==,$z,!"</literal> <name>CM</name>
<literal type="string">"?{"</literal> <name>CM</name>
<literal type="string">"0x%x"</literal> <name>CM</name>
<literal type="string">"|"</literal> <name>CM</name>
<literal type="string">"}"</literal> <name>CM</name></expr></argument>,
<argument><expr><name>bit_mask</name></expr></argument>,
<argument><expr><name>extend_mask</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_load_imm</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>reg_d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>reg_a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>sign_extend_bit</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg_d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>dst_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>src_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>







<decl_stmt><decl><type><name>ut8</name></type> <name>data_size</name> <init>= <expr><ternary><condition><expr><name>opcode</name> <operator>==</operator> <literal type="number">82</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> 
</then><else>: <expr><ternary><condition><expr><name>opcode</name> <operator>==</operator> <literal type="number">83</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> 
</then><else>: <expr><ternary><condition><expr><name>opcode</name> <operator>==</operator> <literal type="number">84</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> 
</then><else>: <expr><ternary><condition><expr><name>opcode</name> <operator>==</operator> <literal type="number">31</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> 
</then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>sign_extend_bit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">84</literal></expr>:</case> 
<case>case <expr><literal type="number">31</literal></expr>:</case> 
<expr_stmt><expr><name>offset</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">83</literal></expr>:</case> 
<expr_stmt><expr><name>sign_extend_bit</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">82</literal></expr>:</case> 
<expr_stmt><expr><name>offset</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"0x%x"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"+"</literal> <name>CM</name>
<literal type="string">"[%d]"</literal> <name>CM</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>,

<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>src_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_a</name></expr></argument>,

<argument><expr><name>data_size</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sign_extend_bit</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>esil_sign_extend</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name>sign_extend_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"="</literal></expr></argument>,

<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>dst_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_d</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_load_relative</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st32</name></type> <name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>dst_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>









<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>offset</name> <operator>|</operator> <literal type="number">0xFFFF0000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"0x%x"</literal> <name>CM</name>
<literal type="string">"$$"</literal> <name>CM</name>
<literal type="string">"3"</literal> <name>CM</name>
<literal type="string">"+"</literal> <name>CM</name>
<literal type="string">"0xFFFFFFFC"</literal> <name>CM</name>
<literal type="string">"&amp;"</literal> <name>CM</name>
<literal type="string">"-"</literal> <name>CM</name>
<literal type="string">"[4]"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"="</literal></expr></argument>,

<argument><expr><name>offset</name></expr></argument>,

<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>dst_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>dst</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_add_imm</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>st32</name></type> <name>imm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>src</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>dst_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>src_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <literal type="number">39</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sign_extend</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>imm</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s%d"</literal> <name>CM</name></expr></argument>, <argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>src_rf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>esil_push_signed_imm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"+"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"="</literal></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>dst_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>dst</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_store_imm</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>reg_d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>reg_a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg_d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>dst_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>src_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><name>ut8</name></type> <name>data_size</name> <init>=
<expr><ternary><condition><expr><name>opcode</name> <operator>==</operator> <literal type="number">453</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> 
</then><else>: <expr><ternary><condition><expr><name>opcode</name> <operator>==</operator> <literal type="number">36</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> 
</then><else>: <expr><ternary><condition><expr><name>opcode</name> <operator>==</operator> <literal type="number">100</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> 
</then><else>: <expr><ternary><condition><expr><name>opcode</name> <operator>==</operator> <literal type="number">99</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> 
</then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt> 

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">100</literal></expr>:</case> 
<case>case <expr><literal type="number">453</literal></expr>:</case> 
<case>case <expr><literal type="number">36</literal></expr>:</case> 
<expr_stmt><expr><name>offset</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">99</literal></expr>:</case> 
<expr_stmt><expr><name>offset</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"0x%x"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"+"</literal> <name>CM</name>
<literal type="string">"=[%d]"</literal></expr></argument>,

<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>dst_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_d</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>,

<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>src_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_a</name></expr></argument>,

<argument><expr><name>data_size</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_move_imm</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>st32</name></type> <name>imm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>reg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <literal type="number">90</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sign_extend</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>imm</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <literal type="number">33</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sign_extend</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>imm</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>esil_push_signed_imm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"="</literal></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_move</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>src</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>dst_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>src_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"="</literal></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>src_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>src</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>dst_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>dst</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_move_conditional</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>cond</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>dst_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>src_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>cond_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compare_op</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">91</literal></expr>:</case> 
<expr_stmt><expr><name>compare_op</name> <operator>=</operator> <literal type="string">"==,$z"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">92</literal></expr>:</case> 
<expr_stmt><expr><name>compare_op</name> <operator>=</operator> <literal type="string">"==,$z,!"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">93</literal></expr>:</case> 
<expr_stmt><expr><name>compare_op</name> <operator>=</operator> <literal type="string">"&lt;"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">94</literal></expr>:</case> 
<expr_stmt><expr><name>compare_op</name> <operator>=</operator> <literal type="string">"&gt;="</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>











<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"0"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"%s"</literal> <name>CM</name>
<literal type="string">"?{"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"="</literal> <name>CM</name>
<literal type="string">"}"</literal></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>cond_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>cond</name></expr></argument>,
<argument><expr><name>compare_op</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>src_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>src</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>dst_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>dst</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_add_sub</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>op1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>op2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>shift</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>dst_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>op1_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>op2_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>is_add</name> <operator>=</operator>
<operator>(</operator><name>opcode</name> <operator>==</operator> <literal type="number">26</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>opcode</name> <operator>==</operator> <literal type="number">41</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>opcode</name> <operator>==</operator> <literal type="number">43</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>opcode</name> <operator>==</operator> <literal type="number">44</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>opcode</name> <operator>==</operator> <literal type="number">45</literal><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">43</literal></expr>:</case>
<case>case <expr><literal type="number">46</literal></expr>:</case>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">44</literal></expr>:</case>
<case>case <expr><literal type="number">47</literal></expr>:</case>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">45</literal></expr>:</case>
<case>case <expr><literal type="number">48</literal></expr>:</case>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"%d"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"&lt;&lt;"</literal> <name>CM</name>
<literal type="string">"%s"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"="</literal></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>op2_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>op2</name></expr></argument>,
<argument><expr><name>shift</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>op1_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>op1</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>is_add</name></expr> ?</condition><then> <expr><literal type="string">"+"</literal></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>dst_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>dst</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_branch_compare_imm</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>,
<parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>cmp_reg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>cmp_imm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st32</name></type> <name>branch_imm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compare_op</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>cmp_imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>branch_imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>cmp_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">52</literal></expr>:</case> 
<expr_stmt><expr><name>compare_op</name> <operator>=</operator> <literal type="string">"==,$z"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">53</literal></expr>:</case> 
<expr_stmt><expr><name>compare_op</name> <operator>=</operator> <literal type="string">"==,$z,!"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">58</literal></expr>:</case> 
<case>case <expr><literal type="number">54</literal></expr>:</case> 
<expr_stmt><expr><name>compare_op</name> <operator>=</operator> <literal type="string">"&gt;="</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">59</literal></expr>:</case> 
<case>case <expr><literal type="number">55</literal></expr>:</case> 
<expr_stmt><expr><name>compare_op</name> <operator>=</operator> <literal type="string">"&lt;"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>











<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"%s%d"</literal> <name>CM</name></expr></argument>,

<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>cmp_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>cmp_reg</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esil_push_signed_imm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name>cmp_imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal> <name>CM</name></expr></argument>, <argument><expr><name>compare_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"?{"</literal> <name>CM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>esil_push_signed_imm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name>branch_imm</name> <operator>+</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"pc"</literal> <name>CM</name> <literal type="string">"+="</literal> <name>CM</name> <literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_branch_compare</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>,
<parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>op1_reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>op2_reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st32</name></type> <name>branch_imm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compare_op</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op1_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op2_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>branch_imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>op1_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>op2_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">60</literal></expr>:</case> 
<expr_stmt><expr><name>compare_op</name> <operator>=</operator> <literal type="string">"==,$z"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">61</literal></expr>:</case> 
<expr_stmt><expr><name>compare_op</name> <operator>=</operator> <literal type="string">"==,$z,!"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">62</literal></expr>:</case> 
<case>case <expr><literal type="number">64</literal></expr>:</case> 
<expr_stmt><expr><name>compare_op</name> <operator>=</operator> <literal type="string">"&gt;="</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">63</literal></expr>:</case> 
<case>case <expr><literal type="number">65</literal></expr>:</case> 
<expr_stmt><expr><name>compare_op</name> <operator>=</operator> <literal type="string">"&lt;"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>sign_extend</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>branch_imm</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>branch_imm</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>











<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"%s"</literal> <name>CM</name>
<literal type="string">"?{"</literal> <name>CM</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>op2_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>op2_reg</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>op1_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>op1_reg</name></expr></argument>,
<argument><expr><name>compare_op</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esil_push_signed_imm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name>branch_imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"pc"</literal> <name>CM</name> <literal type="string">"+="</literal> <name>CM</name> <literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_branch_compare_single</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>,
<parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>op_reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st32</name></type> <name>branch_imm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compare_op</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>branch_imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>op_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">72</literal></expr>:</case> 
<case>case <expr><literal type="number">28</literal></expr>:</case> 
<expr_stmt><expr><name>compare_op</name> <operator>=</operator> <literal type="string">"==,$z"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">73</literal></expr>:</case> 
<case>case <expr><literal type="number">29</literal></expr>:</case> 
<expr_stmt><expr><name>compare_op</name> <operator>=</operator> <literal type="string">"==,$z,!"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">74</literal></expr>:</case> 
<expr_stmt><expr><name>compare_op</name> <operator>=</operator> <literal type="string">"&gt;="</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">75</literal></expr>:</case> 
<expr_stmt><expr><name>compare_op</name> <operator>=</operator> <literal type="string">"&lt;"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>sign_extend</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>branch_imm</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>branch_imm</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>











<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"0"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"%s"</literal> <name>CM</name>
<literal type="string">"?{"</literal> <name>CM</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>op_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>op_reg</name></expr></argument>,
<argument><expr><name>compare_op</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esil_push_signed_imm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name>branch_imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"pc"</literal> <name>CM</name> <literal type="string">"+="</literal> <name>CM</name> <literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_branch_check_mask</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>,
<parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>op1_reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>op2_reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st32</name></type> <name>branch_imm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compare_op</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>compare_val</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><literal type="string">"0"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op1_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op2_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>branch_imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>op1_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>op2_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">69</literal></expr>:</case> 
<case>case <expr><literal type="number">66</literal></expr>:</case> 
<expr_stmt><expr><name>compare_op</name> <operator>=</operator> <literal type="string">"==,$z,!"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">68</literal></expr>:</case> 
<case>case <expr><literal type="number">67</literal></expr>:</case> 
<expr_stmt><expr><name>compare_op</name> <operator>=</operator> <literal type="string">"==,$z"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">69</literal></expr>:</case> 
<case>case <expr><literal type="number">68</literal></expr>:</case> 
<expr_stmt><expr><call><name>snprintf</name><argument_list>(
<argument><expr><name>compare_val</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>compare_val</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%s%d"</literal></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>op2_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>op2_reg</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>sign_extend</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>branch_imm</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>branch_imm</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>













<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"&amp;"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"%s"</literal> <name>CM</name>
<literal type="string">"?{"</literal> <name>CM</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>op1_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>op1_reg</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>op2_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>op2_reg</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>op2_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>op2_reg</name></expr></argument>,
<argument><expr><name>compare_op</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esil_push_signed_imm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name>branch_imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"pc"</literal> <name>CM</name> <literal type="string">"+="</literal> <name>CM</name> <literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_bitwise_op</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>op1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>op2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>bop</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>dst_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>op1_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>op2_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">49</literal></expr>:</case> 
<expr_stmt><expr><name>bop</name> <operator>=</operator> <literal type="char">'&amp;'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">50</literal></expr>:</case> 
<expr_stmt><expr><name>bop</name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">51</literal></expr>:</case> 
<expr_stmt><expr><name>bop</name> <operator>=</operator> <literal type="char">'^'</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>bop</name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"%c"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"="</literal></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>op1_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>op1</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>op2_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>op2</name></expr></argument>,
<argument><expr><name>bop</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>dst_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>dst</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_branch_check_bit_imm</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>src_reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>imm_bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st32</name></type> <name>imm_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>bit_clear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmp_op</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imm_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_decode</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>imm_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>imm_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>src_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bit_clear</name> <operator>=</operator> <name>opcode</name> <operator>==</operator> <literal type="number">56</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cmp_op</name> <operator>=</operator> <ternary><condition><expr><name>bit_clear</name></expr> ?</condition><then> <expr><literal type="string">"==,$z"</literal></expr> </then><else>: <expr><literal type="string">"==,$z,!"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>imm_bit</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sign_extend</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>imm_offset</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imm_offset</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>













<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"0x%x"</literal> <name>CM</name>
<literal type="string">"&amp;"</literal> <name>CM</name>
<literal type="string">"0"</literal> <name>CM</name>
<literal type="string">"%s"</literal> <name>CM</name>
<literal type="string">"?{"</literal> <name>CM</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>src_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>src_reg</name></expr></argument>,
<argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>cmp_op</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esil_push_signed_imm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name>imm_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"pc"</literal> <name>CM</name>
<literal type="string">"+="</literal> <name>CM</name>
<literal type="string">"}"</literal></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_branch_check_bit</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>src_reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>bit_reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st32</name></type> <name>imm_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>bit_clear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmp_op</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bit_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>imm_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>src_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>bit_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>bit_clear</name> <operator>=</operator> <name>opcode</name> <operator>==</operator> <literal type="number">70</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cmp_op</name> <operator>=</operator> <ternary><condition><expr><name>bit_clear</name></expr> ?</condition><then> <expr><literal type="string">"==,$z"</literal></expr> </then><else>: <expr><literal type="string">"==,$z,!"</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sign_extend</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>imm_offset</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imm_offset</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>















<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"1"</literal> <name>CM</name>
<literal type="string">"&lt;&lt;"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"&amp;"</literal> <name>CM</name>
<literal type="string">"0"</literal> <name>CM</name>
<literal type="string">"%s"</literal> <name>CM</name>
<literal type="string">"?{"</literal> <name>CM</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>bit_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>bit_reg</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>src_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>src_reg</name></expr></argument>,
<argument><expr><name>cmp_op</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esil_push_signed_imm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name>imm_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"pc"</literal> <name>CM</name>
<literal type="string">"+="</literal> <name>CM</name>
<literal type="string">"}"</literal></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_abs_neg</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>src_reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>dst_reg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>neg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>dst_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>src_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>neg</name> <operator>=</operator> <name>opcode</name> <operator>==</operator> <literal type="number">95</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>neg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"0"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"&lt;"</literal> <name>CM</name>
<literal type="string">"?{"</literal> <name>CM</name>
<literal type="string">"0"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"-"</literal> <name>CM</name>
<literal type="string">"}"</literal> <name>CM</name>
<literal type="string">"0"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"&gt;="</literal> <name>CM</name>
<literal type="string">"?{"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"}"</literal> <name>CM</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>src_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>src_reg</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>src_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>src_reg</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>src_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>src_reg</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>src_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>src_reg</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"0"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"-"</literal> <name>CM</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>src_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>src_reg</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"="</literal> <name>CM</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>dst_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>dst_reg</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_call</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>,
<parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>call</name> <init>= <expr><name>opcode</name> <operator>==</operator> <literal type="number">76</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st32</name></type> <name>imm_offset</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>,
<argument><expr><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>imm_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>call</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"pc"</literal> <name>CM</name>
<literal type="string">"a0"</literal> <name>CM</name>
<literal type="string">"="</literal> <name>CM</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sign_extend</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>imm_offset</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>call</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>imm_offset</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>imm_offset</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esil_push_signed_imm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name>imm_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"pc"</literal> <name>CM</name> <literal type="string">"+="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_callx</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>,
<parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>callx</name> <init>= <expr><name>opcode</name> <operator>==</operator> <literal type="number">77</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>dst_reg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>dst_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"%s%d"</literal> <name>CM</name> <literal type="string">"0"</literal> <name>CM</name> <literal type="string">"+"</literal> <name>CM</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>dst_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>dst_reg</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>callx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"pc"</literal> <name>CM</name>
<literal type="string">"a0"</literal> <name>CM</name>
<literal type="string">"="</literal> <name>CM</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"pc"</literal> <name>CM</name> <literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_set_shift_amount</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>,
<parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>src_reg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>src_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"sar"</literal> <name>CM</name>
<literal type="string">"="</literal></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>src_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>src_reg</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_set_shift_amount_imm</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>,
<parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>sa_imm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa_imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_decode</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa_imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"0x%x"</literal> <name>CM</name>
<literal type="string">"sar"</literal> <name>CM</name>
<literal type="string">"="</literal></expr></argument>,
<argument><expr><name>sa_imm</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_shift_logic_imm</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>,
<parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>reg_dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>reg_src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>imm_amount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shift_op</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imm_amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_decode</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>imm_amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>dst_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>src_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <literal type="number">113</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shift_op</name> <operator>=</operator> <literal type="string">"&gt;&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>shift_op</name> <operator>=</operator> <literal type="string">"&lt;&lt;"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"0x%x"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"%s"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"="</literal></expr></argument>,
<argument><expr><name>imm_amount</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>src_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_src</name></expr></argument>,
<argument><expr><name>shift_op</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>dst_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_dst</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_shift_logic_sar</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>,
<parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>reg_dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>reg_src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shift_op</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>dst_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>src_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <literal type="number">109</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shift_op</name> <operator>=</operator> <literal type="string">"&gt;&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>shift_op</name> <operator>=</operator> <literal type="string">"&lt;&lt;"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"sar"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"%s"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"="</literal></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>src_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_src</name></expr></argument>,
<argument><expr><name>shift_op</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>dst_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_dst</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>esil_extract_unsigned</name><parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>,
<parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>reg_dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>reg_src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>imm_shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>imm_mask</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imm_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imm_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>dst_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>src_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>and_mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>imm_mask</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(
<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"0x%x"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"&gt;&gt;"</literal> <name>CM</name>
<literal type="string">"0x%x"</literal> <name>CM</name>
<literal type="string">"&amp;"</literal> <name>CM</name>
<literal type="string">"%s%d"</literal> <name>CM</name>
<literal type="string">"="</literal></expr></argument>,
<argument><expr><name>imm_shift</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>src_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_src</name></expr></argument>,
<argument><expr><name>and_mask</name></expr></argument>,
<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>dst_rf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_dst</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>analop_esil</name> <parameter_list>(<parameter><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl></parameter>, <parameter><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>xtensa_format</name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>xtensa_insnbuf</name></type> <name>slot_buffer</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">26</literal></expr>:</case> 
<case>case <expr><literal type="number">41</literal></expr>:</case> 
<case>case <expr><literal type="number">43</literal></expr>:</case> 
<case>case <expr><literal type="number">44</literal></expr>:</case> 
<case>case <expr><literal type="number">45</literal></expr>:</case> 
<case>case <expr><literal type="number">42</literal></expr>:</case> 
<case>case <expr><literal type="number">46</literal></expr>:</case> 
<case>case <expr><literal type="number">47</literal></expr>:</case> 
<case>case <expr><literal type="number">48</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_add_sub</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">32</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_move</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">90</literal></expr>:</case> 
<case>case <expr><literal type="number">33</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_move_imm</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<case>case <expr><literal type="number">34</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="number">453</literal></expr>:</case> 
<case>case <expr><literal type="number">36</literal></expr>:</case> 
<case>case <expr><literal type="number">100</literal></expr>:</case> 
<case>case <expr><literal type="number">99</literal></expr>:</case> 
<case>case <expr><literal type="number">101</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_store_imm</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">27</literal></expr>:</case> 
<case>case <expr><literal type="number">39</literal></expr>:</case> 
<expr_stmt><expr><call><name>xtensa_check_stack_op</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>esil_add_imm</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">98</literal></expr>:</case> 
<case>case <expr><literal type="number">35</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"a0,pc,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">82</literal></expr>:</case> 
<case>case <expr><literal type="number">83</literal></expr>:</case> 
<case>case <expr><literal type="number">84</literal></expr>:</case> 
<case>case <expr><literal type="number">31</literal></expr>:</case> 
<case>case <expr><literal type="number">86</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_load_imm</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>



<case>case <expr><literal type="number">85</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_load_relative</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">40</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><literal type="number">49</literal></expr>:</case> 
<case>case <expr><literal type="number">50</literal></expr>:</case> 
<case>case <expr><literal type="number">51</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_bitwise_op</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">52</literal></expr>:</case> 
<case>case <expr><literal type="number">53</literal></expr>:</case> 
<case>case <expr><literal type="number">54</literal></expr>:</case> 
<case>case <expr><literal type="number">55</literal></expr>:</case> 
<case>case <expr><literal type="number">58</literal></expr>:</case> 
<case>case <expr><literal type="number">59</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_branch_compare_imm</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">56</literal></expr>:</case> 
<case>case <expr><literal type="number">57</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_branch_check_bit_imm</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">60</literal></expr>:</case> 
<case>case <expr><literal type="number">61</literal></expr>:</case> 
<case>case <expr><literal type="number">62</literal></expr>:</case> 
<case>case <expr><literal type="number">63</literal></expr>:</case> 
<case>case <expr><literal type="number">64</literal></expr>:</case> 
<case>case <expr><literal type="number">65</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_branch_compare</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">66</literal></expr>:</case> 
<case>case <expr><literal type="number">67</literal></expr>:</case> 
<case>case <expr><literal type="number">68</literal></expr>:</case> 
<case>case <expr><literal type="number">69</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_branch_check_mask</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">70</literal></expr>:</case> 
<case>case <expr><literal type="number">71</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_branch_check_bit</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">72</literal></expr>:</case> 
<case>case <expr><literal type="number">73</literal></expr>:</case> 
<case>case <expr><literal type="number">28</literal></expr>:</case> 
<case>case <expr><literal type="number">29</literal></expr>:</case> 
<case>case <expr><literal type="number">74</literal></expr>:</case> 
<case>case <expr><literal type="number">75</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_branch_compare_single</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">78</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_extract_unsigned</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">79</literal></expr>:</case> 
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><literal type="number">76</literal></expr>:</case> 
<case>case <expr><literal type="number">80</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_call</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">81</literal></expr>:</case> 
<case>case <expr><literal type="number">77</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_callx</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">91</literal></expr>:</case> 
<case>case <expr><literal type="number">92</literal></expr>:</case> 
<case>case <expr><literal type="number">93</literal></expr>:</case> 
<case>case <expr><literal type="number">94</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_move_conditional</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">96</literal></expr>:</case> 
<case>case <expr><literal type="number">95</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_abs_neg</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">102</literal></expr>:</case> 
<case>case <expr><literal type="number">103</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_set_shift_amount</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">111</literal></expr>:</case> 
<case>case <expr><literal type="number">113</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_shift_logic_imm</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">106</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_set_shift_amount_imm</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">107</literal></expr>:</case> 
<case>case <expr><literal type="number">109</literal></expr>:</case> 
<expr_stmt><expr><call><name>esil_shift_logic_sar</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xtensa_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf_original</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len_original</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>xtensa_length</name> <argument_list>(<argument><expr><name>buf_original</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>len_original</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xtensa_op0_fns</name><index>[<expr><operator>(</operator><name><name>buf_original</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>]</index></name> <operator>(</operator><name>anal</name><operator>,</operator> <name>op</name><operator>,</operator> <name>addr</name><operator>,</operator> <name>buf_original</name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buffer</name><index>[<expr><name>XTENSA_MAX_LENGTH</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>R_MIN</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>XTENSA_MAX_LENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf_original</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xtensa_default_isa</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xtensa_default_isa</name> <operator>=</operator> <call><name>xtensa_isa_init</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xtensa_opcode</name></type> <name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_isa</name></type> <name>isa</name> <init>= <expr><name>xtensa_default_isa</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xtensa_format</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nslots</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>xtensa_insnbuf</name></type> <name>insn_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>xtensa_insnbuf</name></type> <name>slot_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>insn_buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>insn_buffer</name> <operator>=</operator> <call><name>xtensa_insnbuf_alloc</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slot_buffer</name> <operator>=</operator> <call><name>xtensa_insnbuf_alloc</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>insn_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>xtensa_insnbuf_size</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xtensa_insnbuf_word</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xtensa_insnbuf_from_chars</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>insn_buffer</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>xtensa_format_decode</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>insn_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>XTENSA_UNDEFINED</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nslots</name> <operator>=</operator> <call><name>xtensa_format_num_slots</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nslots</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nslots</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xtensa_format_get_slot</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>insn_buffer</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>xtensa_opcode_decode</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <literal type="number">39</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>xtensa_check_stack_op</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_ESIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>analop_esil</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>strdup</name> <argument_list>(

<argument><expr><literal type="string">"#a0 return address\n"</literal>
<literal type="string">"#a1 stack pointer\n"</literal>
<literal type="string">"#a2-a7 arguments\n"</literal>
<literal type="string">"#a2-a5 return value (call0 ABI)\n"</literal>
<literal type="string">"#a12-a15 callee-saved (call0 ABI)\n"</literal>
<literal type="string">"=PC pc\n"</literal>
<literal type="string">"=BP a14\n"</literal>
<literal type="string">"=SP a1\n"</literal>
<literal type="string">"=A0 a2\n"</literal>
<literal type="string">"=A1 a3\n"</literal>
<literal type="string">"=A2 a4\n"</literal>
<literal type="string">"=A3 a5\n"</literal>
<literal type="string">"=A4 a6\n"</literal>
<literal type="string">"=A5 a7\n"</literal>
<literal type="string">"gpr a0 .32 0 0\n"</literal>
<literal type="string">"gpr a1 .32 4 0\n"</literal>
<literal type="string">"gpr a2 .32 8 0\n"</literal>
<literal type="string">"gpr a3 .32 16 0\n"</literal>
<literal type="string">"gpr a4 .32 20 0\n"</literal>
<literal type="string">"gpr a5 .32 24 0\n"</literal>
<literal type="string">"gpr a6 .32 28 0\n"</literal>
<literal type="string">"gpr a7 .32 32 0\n"</literal>
<literal type="string">"gpr a8 .32 36 0\n"</literal>
<literal type="string">"gpr a9 .32 40 0\n"</literal>
<literal type="string">"gpr a10 .32 44 0\n"</literal>
<literal type="string">"gpr a11 .32 48 0\n"</literal>
<literal type="string">"gpr a12 .32 52 0\n"</literal>
<literal type="string">"gpr a13 .32 56 0\n"</literal>
<literal type="string">"gpr a14 .32 60 0\n"</literal>
<literal type="string">"gpr a15 .32 64 0\n"</literal>


<literal type="string">"gpr pc .32 68 0\n"</literal>


<literal type="string">"gpr sar .32 72 0\n"</literal></expr></argument>
)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_xtensa</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"xtensa"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Xtensa disassembler"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"xtensa"</literal></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">8</literal></expr>,
<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>true</name></expr>,
<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>xtensa_op</name></expr>,
<expr><operator>.</operator><name>get_reg_profile</name> <operator>=</operator> <name>get_reg_profile</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_xtensa</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
