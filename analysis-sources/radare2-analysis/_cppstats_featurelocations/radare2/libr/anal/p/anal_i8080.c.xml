<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\p\anal_i8080.c">




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../asm/arch/i8080/i8080dis.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>i8080_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ilen</name> <init>= <expr><call><name>i8080_disasm</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x03</literal></expr>:</case>
<case>case <expr><literal type="number">0x04</literal></expr>:</case>
<case>case <expr><literal type="number">0x0c</literal></expr>:</case>
<case>case <expr><literal type="number">0x13</literal></expr>:</case>
<case>case <expr><literal type="number">0x14</literal></expr>:</case>
<case>case <expr><literal type="number">0x1c</literal></expr>:</case>
<case>case <expr><literal type="number">0x23</literal></expr>:</case>
<case>case <expr><literal type="number">0x24</literal></expr>:</case>
<case>case <expr><literal type="number">0x2c</literal></expr>:</case>
<case>case <expr><literal type="number">0x33</literal></expr>:</case>
<case>case <expr><literal type="number">0x34</literal></expr>:</case>
<case>case <expr><literal type="number">0x3c</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><literal type="number">0x09</literal></expr>:</case>
<case>case <expr><literal type="number">0x19</literal></expr>:</case>
<case>case <expr><literal type="number">0x29</literal></expr>:</case>
<case>case <expr><literal type="number">0x39</literal></expr>:</case>
<case>case <expr><literal type="number">0x80</literal></expr>:</case>
<case>case <expr><literal type="number">0x81</literal></expr>:</case>
<case>case <expr><literal type="number">0x82</literal></expr>:</case>
<case>case <expr><literal type="number">0x83</literal></expr>:</case>
<case>case <expr><literal type="number">0x84</literal></expr>:</case>
<case>case <expr><literal type="number">0x85</literal></expr>:</case>
<case>case <expr><literal type="number">0x86</literal></expr>:</case>
<case>case <expr><literal type="number">0x87</literal></expr>:</case>
<case>case <expr><literal type="number">0xc6</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x90</literal></expr>:</case>
<case>case <expr><literal type="number">0x91</literal></expr>:</case>
<case>case <expr><literal type="number">0x92</literal></expr>:</case>
<case>case <expr><literal type="number">0x93</literal></expr>:</case>
<case>case <expr><literal type="number">0x94</literal></expr>:</case>
<case>case <expr><literal type="number">0x95</literal></expr>:</case>
<case>case <expr><literal type="number">0x96</literal></expr>:</case>
<case>case <expr><literal type="number">0x97</literal></expr>:</case>
<case>case <expr><literal type="number">0xd6</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xc0</literal></expr>:</case>
<case>case <expr><literal type="number">0xc8</literal></expr>:</case>
<case>case <expr><literal type="number">0xd0</literal></expr>:</case>
<case>case <expr><literal type="number">0xd8</literal></expr>:</case>
<case>case <expr><literal type="number">0xe0</literal></expr>:</case>
<case>case <expr><literal type="number">0xe8</literal></expr>:</case>
<case>case <expr><literal type="number">0xf0</literal></expr>:</case>
<case>case <expr><literal type="number">0xf8</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CRET</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xc9</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x05</literal></expr>:</case>
<case>case <expr><literal type="number">0x0b</literal></expr>:</case>
<case>case <expr><literal type="number">0x0d</literal></expr>:</case>
<case>case <expr><literal type="number">0x15</literal></expr>:</case>
<case>case <expr><literal type="number">0x1b</literal></expr>:</case>
<case>case <expr><literal type="number">0x1d</literal></expr>:</case>
<case>case <expr><literal type="number">0x25</literal></expr>:</case>
<case>case <expr><literal type="number">0x2b</literal></expr>:</case>
<case>case <expr><literal type="number">0x2d</literal></expr>:</case>
<case>case <expr><literal type="number">0x35</literal></expr>:</case>
<case>case <expr><literal type="number">0x3b</literal></expr>:</case>
<case>case <expr><literal type="number">0x3d</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xc5</literal></expr>:</case>
<case>case <expr><literal type="number">0xd5</literal></expr>:</case>
<case>case <expr><literal type="number">0xe5</literal></expr>:</case>
<case>case <expr><literal type="number">0xf5</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xc1</literal></expr>:</case>
<case>case <expr><literal type="number">0xd1</literal></expr>:</case>
<case>case <expr><literal type="number">0xe1</literal></expr>:</case>
<case>case <expr><literal type="number">0xf1</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x40</literal></expr>:</case>
<case>case <expr><literal type="number">0x49</literal></expr>:</case>
<case>case <expr><literal type="number">0x52</literal></expr>:</case>
<case>case <expr><literal type="number">0x5b</literal></expr>:</case>
<case>case <expr><literal type="number">0x64</literal></expr>:</case>
<case>case <expr><literal type="number">0x6d</literal></expr>:</case>
<case>case <expr><literal type="number">0x76</literal></expr>:</case>
<case>case <expr><literal type="number">0x7f</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><literal type="number">0x10</literal></expr>:</case>
<case>case <expr><literal type="number">0x18</literal></expr>:</case>
<case>case <expr><literal type="number">0x20</literal></expr>:</case>
<case>case <expr><literal type="number">0x28</literal></expr>:</case>
<case>case <expr><literal type="number">0x30</literal></expr>:</case>
<case>case <expr><literal type="number">0x38</literal></expr>:</case>
<case>case <expr><literal type="number">0xc2</literal></expr>:</case>
<case>case <expr><literal type="number">0xc3</literal></expr>:</case>
<case>case <expr><literal type="number">0xca</literal></expr>:</case>
<case>case <expr><literal type="number">0xd2</literal></expr>:</case>
<case>case <expr><literal type="number">0xda</literal></expr>:</case>
<case>case <expr><literal type="number">0xe2</literal></expr>:</case>
<case>case <expr><literal type="number">0xe9</literal></expr>:</case>
<case>case <expr><literal type="number">0xea</literal></expr>:</case>
<case>case <expr><literal type="number">0xf2</literal></expr>:</case>
<case>case <expr><literal type="number">0xfa</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt> 
<break>break;</break>

<case>case <expr><literal type="number">0xc4</literal></expr>:</case>
<case>case <expr><literal type="number">0xcc</literal></expr>:</case>
<case>case <expr><literal type="number">0xcd</literal></expr>:</case>
<case>case <expr><literal type="number">0xd4</literal></expr>:</case>
<case>case <expr><literal type="number">0xdc</literal></expr>:</case>
<case>case <expr><literal type="number">0xdd</literal></expr>:</case>
<case>case <expr><literal type="number">0xe4</literal></expr>:</case>
<case>case <expr><literal type="number">0xec</literal></expr>:</case>
<case>case <expr><literal type="number">0xed</literal></expr>:</case>
<case>case <expr><literal type="number">0xf4</literal></expr>:</case>
<case>case <expr><literal type="number">0xfc</literal></expr>:</case>
<case>case <expr><literal type="number">0xfd</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xc7</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xcf</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0x08</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xd7</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xdf</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0x18</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xe7</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xef</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0x28</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xf7</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0x30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xff</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0x38</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<break>break;</break> 
</block_content>}</block></switch>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ilen</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_i8080</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"i8080"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"I8080 CPU code analysis plugin"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"i8080"</literal></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">16</literal></expr>,
<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>i8080_op</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_i8080</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
