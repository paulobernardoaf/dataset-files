<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\p\anal_mips_cs.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;capstone/capstone.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;capstone/mips.h&gt;</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPERAND</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;mips.operands[x]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;mips.operands[x].reg</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cs_reg_name (*handle, insn-&gt;detail-&gt;mips.operands[x].reg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;mips.operands[x].imm</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMBASE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cs_reg_name(*handle, insn-&gt;detail-&gt;mips.operands[x].mem.base)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMINDEX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;mips.operands[x].mem.index</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMDISP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;mips.operands[x].mem.disp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPCOUNT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;mips.op_count</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_VAL</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((i)&lt;OPCOUNT() &amp;&amp; OPERAND(i).type == MIPS_OP_IMM) {(op)-&gt;val = OPERAND(i).imm;}</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE_SRC_DST_3</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(op)-&gt;src[0] = r_anal_value_new ();(op)-&gt;src[1] = r_anal_value_new ();(op)-&gt;dst = r_anal_value_new ();</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE_SRC_DST_2</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(op)-&gt;src[0] = r_anal_value_new ();(op)-&gt;dst = r_anal_value_new ();</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_SRC_DST_3_REGS</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CREATE_SRC_DST_3 (op);(op)-&gt;dst-&gt;reg = r_reg_get (anal-&gt;reg, REG (0), R_REG_TYPE_GPR);(op)-&gt;src[0]-&gt;reg = r_reg_get (anal-&gt;reg, REG (1), R_REG_TYPE_GPR);(op)-&gt;src[1]-&gt;reg = r_reg_get (anal-&gt;reg, REG (2), R_REG_TYPE_GPR);</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_SRC_DST_3_IMM</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CREATE_SRC_DST_3 (op);(op)-&gt;dst-&gt;reg = r_reg_get (anal-&gt;reg, REG (0), R_REG_TYPE_GPR);(op)-&gt;src[0]-&gt;reg = r_reg_get (anal-&gt;reg, REG (1), R_REG_TYPE_GPR);(op)-&gt;src[1]-&gt;imm = IMM (2);</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_SRC_DST_2_REGS</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CREATE_SRC_DST_2 (op);(op)-&gt;dst-&gt;reg = r_reg_get (anal-&gt;reg, REG (0), R_REG_TYPE_GPR);(op)-&gt;src[0]-&gt;reg = r_reg_get (anal-&gt;reg, REG (1), R_REG_TYPE_GPR);</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_SRC_DST_3_REG_OR_IMM</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (OPERAND(2).type == MIPS_OP_IMM) {SET_SRC_DST_3_IMM (op);} else if (OPERAND(2).type == MIPS_OP_REG) {SET_SRC_DST_3_REGS (op);}</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ES_IS_NEGATIVE</name><parameter_list>(<parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"1,"arg",&lt;&lt;&lt;,1,&amp;"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ES_CALL_DR</name><parameter_list>(<parameter><type><name>ra</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"pc,4,+,"ra",=,"ES_J(addr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ES_CALL_D</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ES_CALL_DR("ra", addr)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ES_CALL_NDR</name><parameter_list>(<parameter><type><name>ra</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"pc,"ra",=,"ES_J(addr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ES_CALL_ND</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ES_CALL_NDR("ra", addr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_DS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_DS</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ES_TRAP_DS</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>"$ds,!,!,?{,$$,1,TRAP,BREAK,},"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ES_J</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>addr",SETJT,1,SETD"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ES_TRAP_DS</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ES_J</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>addr",pc,="</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ES_SIGN_EXT64</name><parameter_list>(<parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>arg",0x80000000,&amp;,0,&lt;,?{,""0xffffffff00000000,"arg",|=,""}"
</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTECT_ZERO</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>if (REG(0)[0]=='z'){r_strbuf_appendf (&amp;op-&gt;esil, ",");} else</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESIL_LOAD</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PROTECT_ZERO () {r_strbuf_appendf (&amp;op-&gt;esil, "%s,["size"],%s,=",ARG(1), REG(0));}</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>void</name></type> <name>opex</name><parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>csh</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>cs_mips</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>&amp;</operator><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>mips</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"operands\":["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>op_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>cs_mips_op</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MIPS_OP_REG</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"reg\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_OP_IMM</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"imm\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_OP_MEM</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"mem\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>base</name></name> <operator>!=</operator> <name>MIPS_REG_INVALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"base\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"disp\":%"</literal><name>PFMT64d</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>disp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"invalid\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name><parameter_list>(<parameter><decl><type><name>csh</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>mips</name><operator>.</operator><name>operands</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MIPS_OP_INVALID</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>MIPS_OP_REG</name></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>,
<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>mips</name><operator>.</operator><name>operands</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_OP_IMM</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>st64</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>st64</name><operator>)</operator><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>mips</name><operator>.</operator><name>operands</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>imm</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>MIPS_OP_MEM</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>disp</name> <init>= <expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>mips</name><operator>.</operator><name>operands</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>disp</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",%s,-"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>-</operator><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>mips</name><operator>.</operator><name>operands</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr></argument>,
<argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>,
<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>mips</name><operator>.</operator><name>operands</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">",%s,+"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>mips</name><operator>.</operator><name>operands</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr></argument>,
<argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>,
<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>mips</name><operator>.</operator><name>operands</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*str[x]!=0)?str[x]:arg(handle, insn, str[x], x)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>analop_esil</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>csh</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>insn</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>mips</name><operator>.</operator><name>op_count</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARG</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>insn</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MIPS_INS_NOP</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_BREAK</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%d,TRAP"</literal></expr></argument>, <argument><expr><call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_SD</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,=[8]"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_SW</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SWL</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SWR</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,=[4]"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_SH</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,=[2]"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_SWC1</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SWC2</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,$"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_SB</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,=[1]"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_CMP</name></expr>:</case>
<case>case <expr><name>MIPS_INS_CMPU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_CMPGU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_CMPGDU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_CMPI</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,=="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_SHRAV</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SHRAV_R</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SHRA</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SHRA_R</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SRA</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&gt;&gt;,31,%s,&gt;&gt;,?{,32,%s,-,%s,1,&lt;&lt;,1,-,&lt;&lt;,}{,0,},|,%s,=,"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_SHRL</name></expr>:</case>

<case>case <expr><name>MIPS_INS_SRLV</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SRL</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&gt;&gt;,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_SLLV</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SLL</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&lt;&lt;,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_BAL</name></expr>:</case>
<case>case <expr><name>MIPS_INS_JAL</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">""</literal> <call><name>ES_CALL_D</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_JALR</name></expr>:</case>
<case>case <expr><name>MIPS_INS_JALRS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OPCOUNT</name> <argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">""</literal> <call><name>ES_CALL_D</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>PROTECT_ZERO</name> <argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">""</literal> <call><name>ES_CALL_DR</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_JALRC</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><call><name>OPCOUNT</name> <argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">""</literal> <call><name>ES_CALL_ND</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>PROTECT_ZERO</name> <argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">""</literal> <call><name>ES_CALL_NDR</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_JRADDIUSP</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">"%d,sp,+=,"</literal> <call><name>ES_J</name> <argument_list>(<argument><expr><literal type="string">"ra"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_JR</name></expr>:</case>
<case>case <expr><name>MIPS_INS_JRC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_J</name></expr>:</case>
<case>case <expr><name>MIPS_INS_B</name></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">""</literal> <call><name>ES_J</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_BNE</name></expr>:</case> 
<case>case <expr><name>MIPS_INS_BNEL</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">"%s,%s,==,$z,!,?{,"</literal> <call><name>ES_J</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",}"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_BEQ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BEQL</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">"%s,%s,==,$z,?{,"</literal> <call><name>ES_J</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",}"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_BZ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BEQZ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BEQZC</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">"%s,0,==,$z,?{,"</literal> <call><name>ES_J</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",}"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_BNEZ</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">"%s,0,==,$z,!,?{,"</literal> <call><name>ES_J</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",}"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_BEQZALC</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">"%s,0,==,$z,?{,"</literal> <call><name>ES_CALL_ND</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",}"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_BLEZ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BLEZC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BLEZL</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">"0,%s,==,$z,?{,"</literal> <call><name>ES_J</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",BREAK,},"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">"1,"</literal> <call><name>ES_IS_NEGATIVE</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",==,$z,?{,"</literal> <call><name>ES_J</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",}"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_BGEZ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BGEZC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BGEZL</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">"0,"</literal> <call><name>ES_IS_NEGATIVE</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",==,$z,?{,"</literal> <call><name>ES_J</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",}"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_BGEZAL</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">"0,"</literal> <call><name>ES_IS_NEGATIVE</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",==,$z,?{,"</literal> <call><name>ES_CALL_D</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",}"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_BGEZALC</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">"0,"</literal> <call><name>ES_IS_NEGATIVE</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",==,$z,?{,"</literal> <call><name>ES_CALL_ND</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",}"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_BGTZALC</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">"0,%s,==,$z,?{,BREAK,},"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0,"</literal> <call><name>ES_IS_NEGATIVE</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",==,$z,?{,"</literal> <call><name>ES_CALL_ND</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",}"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_BLTZAL</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">"1,"</literal> <call><name>ES_IS_NEGATIVE</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",==,$z,?{,"</literal> <call><name>ES_CALL_D</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",}"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_BLTZ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BLTZC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BLTZL</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">"1,"</literal> <call><name>ES_IS_NEGATIVE</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",==,$z,?{,"</literal> <call><name>ES_J</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",}"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_BGTZ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BGTZC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BGTZL</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">"0,%s,==,$z,?{,BREAK,},"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">"0,"</literal> <call><name>ES_IS_NEGATIVE</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",==,$z,?{,"</literal> <call><name>ES_J</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",}"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_BTEQZ</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">"0,t,==,$z,?{,"</literal> <call><name>ES_J</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",}"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_BTNEZ</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>ES_TRAP_DS</name> <argument_list>()</argument_list></call> <literal type="string">"0,t,==,$z,!,?{,"</literal> <call><name>ES_J</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <literal type="string">",}"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_MOV</name></expr>:</case>
<case>case <expr><name>MIPS_INS_MOVE</name></expr>:</case>
<macro><name>PROTECT_ZERO</name> <argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>MIPS_INS_MOVZ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_MOVF</name></expr>:</case>
<macro><name>PROTECT_ZERO</name> <argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0,%s,==,$z,?{,%s,%s,=,}"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>MIPS_INS_MOVT</name></expr>:</case>
<macro><name>PROTECT_ZERO</name> <argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,==,$z,?{,%s,%s,=,}"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>MIPS_INS_FSUB</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SUB</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SUBU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_DSUB</name></expr>:</case>
<case>case <expr><name>MIPS_INS_DSUBU</name></expr>:</case>
<macro><name>PROTECT_ZERO</name> <argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,-,%s,="</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>MIPS_INS_NEG</name></expr>:</case>
<case>case <expr><name>MIPS_INS_NEGU</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0,-,%s,=,"</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>MIPS_INS_ADD</name></expr>:</case> <block>{<block_content>
<macro><name>PROTECT_ZERO</name> <argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,%s,="</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
r_strbuf_appendf (&amp;op-&gt;esil,
"0,32,%s,%s,+,&gt;&gt;,&gt;,?{,1,TRAP,}{,%s,%s,+,%s,=,}",
ARG(2), ARG(1), ARG(2), ARG(1), ARG(0));
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>MIPS_INS_ADDI</name></expr>:</case>
<macro><name>PROTECT_ZERO</name> <argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"30,0x80000000,%s,%s,^,&amp;,&gt;&gt;,31,0x80000000,%s,&amp;,0x80000000,%s,%s,+,&amp;,^,&gt;&gt;,|,1,==,$z,?{,$$,1,TRAP,}{,%s,%s,+,%s,=,}"</literal></expr></argument>,
<argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>MIPS_INS_DADD</name></expr>:</case>
<case>case <expr><name>MIPS_INS_DADDI</name></expr>:</case>

<case>case <expr><name>MIPS_INS_ADDU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_ADDIU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_DADDIU</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg0</name> <init>= <expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg1</name> <init>= <expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg2</name> <init>= <expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>PROTECT_ZERO</name> <argument_list>()</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg2</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,-,%s,="</literal></expr></argument>,
<argument><expr><name>arg2</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,%s,="</literal></expr></argument>,
<argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>MIPS_INS_LI</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LDI</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">",%s,="</literal></expr></argument>, <argument><expr><call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_LUI</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"0000,%s,="</literal></expr></argument>, <argument><expr><call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_LB</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESIL_LOAD</name> <argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_LBU</name></expr>:</case>

<expr_stmt><expr><call><name>ESIL_LOAD</name> <argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_LW</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LWC1</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LWC2</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LWL</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LWR</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LWU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LL</name></expr>:</case>
<expr_stmt><expr><call><name>ESIL_LOAD</name> <argument_list>(<argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MIPS_INS_LDL</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LDC1</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LDC2</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LLD</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LD</name></expr>:</case>
<expr_stmt><expr><call><name>ESIL_LOAD</name> <argument_list>(<argument><expr><literal type="string">"8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MIPS_INS_LWX</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LH</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LHU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LHX</name></expr>:</case>
<expr_stmt><expr><call><name>ESIL_LOAD</name> <argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MIPS_INS_AND</name></expr>:</case>
<case>case <expr><name>MIPS_INS_ANDI</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg0</name> <init>= <expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg1</name> <init>= <expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg2</name> <init>= <expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>arg0</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&amp;="</literal></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&amp;,%s,="</literal></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>MIPS_INS_OR</name></expr>:</case>
<case>case <expr><name>MIPS_INS_ORI</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg0</name> <init>= <expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg1</name> <init>= <expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg2</name> <init>= <expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>PROTECT_ZERO</name> <argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,|,%s,="</literal></expr></argument>,
<argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>MIPS_INS_XOR</name></expr>:</case>
<case>case <expr><name>MIPS_INS_XORI</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg0</name> <init>= <expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg1</name> <init>= <expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg2</name> <init>= <expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>PROTECT_ZERO</name> <argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,^,%s,="</literal></expr></argument>,
<argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>MIPS_INS_NOR</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg0</name> <init>= <expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg1</name> <init>= <expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg2</name> <init>= <expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>PROTECT_ZERO</name> <argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,|,0xffffffff,^,%s,="</literal></expr></argument>,
<argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>MIPS_INS_SLT</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SLTI</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OPCOUNT</name> <argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&lt;,t,="</literal></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&lt;,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_SLTU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SLTIU</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OPCOUNT</name> <argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0xffffffff,&amp;,%s,0xffffffff,&amp;,&lt;,t,="</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0xffffffff,&amp;,%s,0xffffffff,&amp;,&lt;,%s,="</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_MUL</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"%s,%s,*,0xffffffff,&amp;,lo,=,"</literal>
<call><name>ES_SIGN_EXT64</name> <argument_list>(<argument><expr><literal type="string">"lo"</literal></expr></argument>)</argument_list></call>
<literal type="string">",32,%s,%s,*,&gt;&gt;,0xffffffff,&amp;,hi,=,"</literal>
<call><name>ES_SIGN_EXT64</name> <argument_list>(<argument><expr><literal type="string">"hi"</literal></expr></argument>)</argument_list></call>
<literal type="string">",lo,%s,="</literal></expr></argument>,
<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_MULT</name></expr>:</case>
<case>case <expr><name>MIPS_INS_MULTU</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,
<argument><expr><literal type="string">"%s,%s,*,0xffffffff,&amp;,lo,=,"</literal>
<call><name>ES_SIGN_EXT64</name> <argument_list>(<argument><expr><literal type="string">"lo"</literal></expr></argument>)</argument_list></call>
<literal type="string">",32,%s,%s,*,&gt;&gt;,0xffffffff,&amp;,hi,=,"</literal>
<call><name>ES_SIGN_EXT64</name> <argument_list>(<argument><expr><literal type="string">"hi"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_MFLO</name></expr>:</case>
<macro><name>PROTECT_ZERO</name> <argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"lo,%s,="</literal></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>MIPS_INS_MFHI</name></expr>:</case>
<macro><name>PROTECT_ZERO</name> <argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"hi,%s,="</literal></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>MIPS_INS_MTLO</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,lo,=,"</literal><call><name>ES_SIGN_EXT64</name> <argument_list>(<argument><expr><literal type="string">"lo"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_MTHI</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,hi,=,"</literal><call><name>ES_SIGN_EXT64</name> <argument_list>(<argument><expr><literal type="string">"hi"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

case MIPS_INS_DIV:
case MIPS_INS_DIVU:
case MIPS_INS_DDIV:
case MIPS_INS_DDIVU:
PROTECT_ZERO () {

r_strbuf_appendf (&amp;op-&gt;esil, "%s,%s,/,lo,=,%s,%s,%%,hi,=", REG(1), REG(0), REG(1), REG(0));
}
break;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_reg_name</name><parameter_list>(<parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>csh</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg_num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>OPERAND</name> <argument_list>(<argument><expr><name>reg_num</name></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MIPS_OP_REG</name></expr>:</case>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><call><name>OPERAND</name> <argument_list>(<argument><expr><name>reg_num</name></expr></argument>)</argument_list></call><operator>.</operator><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_OP_MEM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OPERAND</name> <argument_list>(<argument><expr><name>reg_num</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>!=</operator> <name>MIPS_REG_INVALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><call><name>OPERAND</name> <argument_list>(<argument><expr><name>reg_num</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>op_fillval</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>csh</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>RRegItem</name></type> <name>reg</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_TYPE_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>MIPS_OP_MEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <operator>&amp;</operator><name>reg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_reg_name</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name></expr></argument>, <argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>delta</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>MIPS_OP_MEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <operator>&amp;</operator><name>reg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_reg_name</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_SHL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_SAR</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_XOR</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_AND</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_OR</name></expr>:</case>
<expr_stmt><expr><call><name>SET_SRC_DST_3_REG_OR_IMM</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>:</case>
<expr_stmt><expr><call><name>SET_SRC_DST_3_REG_OR_IMM</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>:</case> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
capstone bug
------------
$ r2 -a mips -e cfg.bigendian=1 -c "wx 0083001b" -

[0x00000000]&gt; aoj~{}
[
{
"opcode": "divu zero, a0, v1",
"disasm": "divu zero, a0, v1",
"mnemonic": "divu",
"sign": false,
"prefix": 0,
"id": 192,
"opex": {
"operands": [
{
"type": "reg",
"value": "a0"
},
{
"type": "reg",
"value": "v1"
}
]
},
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>MIPS_OP_REG</name> <operator>&amp;&amp;</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>MIPS_OP_REG</name> <operator>&amp;&amp;</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>MIPS_OP_REG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SET_SRC_DST_3_REGS</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>MIPS_OP_REG</name> <operator>&amp;&amp;</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>MIPS_OP_REG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SET_SRC_DST_2_REGS</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unknown div at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>insn</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>insn</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>MIPS_INS_SLTI</name> <operator>||</operator> <name><name>insn</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>MIPS_INS_SLTIU</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SET_SRC_DST_3_IMM</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_opdir</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_TYPE_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>R_ANAL_OP_DIR_READ</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>R_ANAL_OP_DIR_WRITE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_LEA</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>R_ANAL_OP_DIR_REF</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UCALL</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>R_ANAL_OP_DIR_EXEC</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>analop</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>opsize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>csh</name></type> <name>hndl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>omode</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>obits</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cs_insn</name><modifier>*</modifier></type> <name>insn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><ternary><condition><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr>?</condition><then> <expr><name>CS_MODE_BIG_ENDIAN</name></expr></then><else>: <expr><name>CS_MODE_LITTLE_ENDIAN</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"micro"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CS_MODE_MICRO</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"r6"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CS_MODE_MIPS32R6</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"v3"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CS_MODE_MIPS3</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"v2"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;</operator> <literal type="number">3</literal></expr></cpp:if>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CS_MODE_MIPS2</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">64</literal><operator>)</operator></expr>?</condition><then> <expr><name>CS_MODE_MIPS64</name></expr></then><else>: <expr><name>CS_MODE_MIPS32</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>omode</name> <operator>||</operator> <name><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <name>obits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cs_close</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>hndl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hndl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>omode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>obits</name> <operator>=</operator> <name><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hndl</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cs_open</name> <argument_list>(<argument><expr><name>CS_ARCH_MIPS</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hndl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>CS_ERR_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fin</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cs_option</name> <argument_list>(<argument><expr><name>hndl</name></expr></argument>, <argument><expr><name>CS_OPT_DETAIL</name></expr></argument>, <argument><expr><name>CS_OPT_ON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>cs_disasm</name> <argument_list>(<argument><expr><name>hndl</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_DISASM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_DISASM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>,
<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>insn</name><operator>-&gt;</operator><name>op_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>?</condition><then><expr><literal type="string">" "</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>op_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>opsize</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MIPS_INS_INVALID</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_LB</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LBU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LBUX</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LW</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LWC1</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LWC2</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LWL</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LWR</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LWXC1</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LD</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LDC1</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LDC2</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LDL</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LDR</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LDXC1</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MIPS_OP_MEM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>MIPS_REG_GP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>anal</name><operator>-&gt;</operator><name>gp</name></name> <operator>+</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_OP_IMM</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_OP_REG</name></expr>:</case>

<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<break>break;</break>
<case>case <expr><name>MIPS_INS_SD</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SW</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SB</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SH</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SWC1</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SWC2</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SWL</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SWR</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SWXC1</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_NOP</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_SYSCALL</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SWI</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_BREAK</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_JALR</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCALL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_JAL</name></expr>:</case>
<case>case <expr><name>MIPS_INS_JALS</name></expr>:</case>
<case>case <expr><name>MIPS_INS_JALX</name></expr>:</case>
<case>case <expr><name>MIPS_INS_JRADDIUSP</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BAL</name></expr>:</case>

<case>case <expr><name>MIPS_INS_BLTZAL</name></expr>:</case> 
<case>case <expr><name>MIPS_INS_BGEZAL</name></expr>:</case> 
<case>case <expr><name>MIPS_INS_BLTZALL</name></expr>:</case> 
<case>case <expr><name>MIPS_INS_BGEZALL</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BLTZALC</name></expr>:</case> 
<case>case <expr><name>MIPS_INS_BLEZALC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BGEZALC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BGTZALC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_JIALC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_JIC</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MIPS_INS_JIALC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_JIC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BLTZALC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BLEZALC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BGEZALC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BGTZALC</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>MIPS_INS_LI</name></expr>:</case>
<case>case <expr><name>MIPS_INS_LUI</name></expr>:</case>
<expr_stmt><expr><call><name>SET_VAL</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_MOVE</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_ADD</name></expr>:</case>
<case>case <expr><name>MIPS_INS_ADDI</name></expr>:</case>
<case>case <expr><name>MIPS_INS_ADDU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_ADDIU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_DADD</name></expr>:</case>
<case>case <expr><name>MIPS_INS_DADDI</name></expr>:</case>
<case>case <expr><name>MIPS_INS_DADDIU</name></expr>:</case>
<expr_stmt><expr><call><name>SET_VAL</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <operator>(</operator><name><name>insn</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>MIPS_INS_ADDI</name> <operator>||</operator> <name><name>insn</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>MIPS_INS_ADD</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>REGID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>MIPS_REG_SP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <operator>-</operator><call><name>IMM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_SUB</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SUBV</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SUBVI</name></expr>:</case>
<case>case <expr><name>MIPS_INS_DSUBU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_FSUB</name></expr>:</case>
<case>case <expr><name>MIPS_INS_FMSUB</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SUBU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_DSUB</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SUBS_S</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SUBS_U</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SUBUH</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SUBUH_R</name></expr>:</case>
<expr_stmt><expr><call><name>SET_VAL</name> <argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name><name>insn</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>MIPS_INS_SUB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_MULV</name></expr>:</case>
<case>case <expr><name>MIPS_INS_MULT</name></expr>:</case>
<case>case <expr><name>MIPS_INS_MULSA</name></expr>:</case>
<case>case <expr><name>MIPS_INS_FMUL</name></expr>:</case>
<case>case <expr><name>MIPS_INS_MUL</name></expr>:</case>
<case>case <expr><name>MIPS_INS_DMULT</name></expr>:</case>
<case>case <expr><name>MIPS_INS_DMULTU</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_XOR</name></expr>:</case>
<case>case <expr><name>MIPS_INS_XORI</name></expr>:</case>
<expr_stmt><expr><call><name>SET_VAL</name> <argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_AND</name></expr>:</case>
<case>case <expr><name>MIPS_INS_ANDI</name></expr>:</case>
<expr_stmt><expr><call><name>SET_VAL</name> <argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>REGID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>MIPS_REG_SP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_ALIGN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_NOT</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_OR</name></expr>:</case>
<case>case <expr><name>MIPS_INS_ORI</name></expr>:</case>
<expr_stmt><expr><call><name>SET_VAL</name> <argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_DIV</name></expr>:</case>
<case>case <expr><name>MIPS_INS_DIVU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_DDIV</name></expr>:</case>
<case>case <expr><name>MIPS_INS_DDIVU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_FDIV</name></expr>:</case>
<case>case <expr><name>MIPS_INS_DIV_S</name></expr>:</case>
<case>case <expr><name>MIPS_INS_DIV_U</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_DIV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_CMPGDU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_CMPGU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_CMPU</name></expr>:</case>
<case>case <expr><name>MIPS_INS_CMPI</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_J</name></expr>:</case>
<case>case <expr><name>MIPS_INS_B</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BZ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BEQ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BNZ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BNE</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BNEL</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BEQL</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BEQZ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BNEG</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BNEGI</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BNEZ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BTEQZ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BTNEZ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BLTZ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BLTZL</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BLEZ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BLEZL</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BGEZ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BGEZL</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BGTZ</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BGTZL</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BLEZC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BGEZC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BLTZC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BGTZC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>MIPS_INS_J</name> <operator>||</operator> <name><name>insn</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>MIPS_INS_B</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>MIPS_OP_IMM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>MIPS_OP_IMM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>OPERAND</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>MIPS_OP_IMM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MIPS_INS_BLEZC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BGEZC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BLTZC</name></expr>:</case>
<case>case <expr><name>MIPS_INS_BGTZC</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<break>break;</break>
<case>case <expr><name>MIPS_INS_JR</name></expr>:</case>
<case>case <expr><name>MIPS_INS_JRC</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RJMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>mips</name><operator>.</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>MIPS_REG_RA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_SLT</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SLTI</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_VAL</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_SLTIU</name></expr>:</case>
<expr_stmt><expr><call><name>SET_VAL</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_SHRAV</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SHRAV_R</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SHRA</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SHRA_R</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SRA</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_VAL</name> <argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_SHRL</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SRLV</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SRL</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_VAL</name> <argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIPS_INS_SLLV</name></expr>:</case>
<case>case <expr><name>MIPS_INS_SLL</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_VAL</name> <argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<label><name>beach</name>:</label>
<expr_stmt><expr><call><name>set_opdir</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>insn</name> <operator>&amp;&amp;</operator> <name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_OPEX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>opex</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>opex</name></name></expr></argument>, <argument><expr><name>hndl</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_ESIL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>analop_esil</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hndl</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_VAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>op_fillval</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hndl</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cs_free</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fin</name>:</label>
<return>return <expr><name>opsize</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator>
<literal type="string">"=PC pc\n"</literal>
<literal type="string">"=SP sp\n"</literal>
<literal type="string">"=BP fp\n"</literal>
<literal type="string">"=SN v0\n"</literal>
<literal type="string">"=A0 a0\n"</literal>
<literal type="string">"=A1 a1\n"</literal>
<literal type="string">"=A2 a2\n"</literal>
<literal type="string">"=A3 a3\n"</literal>
<literal type="string">"=R0 v0\n"</literal>
<literal type="string">"=R1 v1\n"</literal>
<literal type="string">"gpr zero .32 ? 0\n"</literal>
<literal type="string">"gpr at .32 4 0\n"</literal>
<literal type="string">"gpr v0 .32 8 0\n"</literal>
<literal type="string">"gpr v1 .32 12 0\n"</literal>
<literal type="string">"gpr a0 .32 16 0\n"</literal>
<literal type="string">"gpr a1 .32 20 0\n"</literal>
<literal type="string">"gpr a2 .32 24 0\n"</literal>
<literal type="string">"gpr a3 .32 28 0\n"</literal>
<literal type="string">"gpr t0 .32 32 0\n"</literal>
<literal type="string">"gpr t1 .32 36 0\n"</literal>
<literal type="string">"gpr t2 .32 40 0\n"</literal>
<literal type="string">"gpr t3 .32 44 0\n"</literal>
<literal type="string">"gpr t4 .32 48 0\n"</literal>
<literal type="string">"gpr t5 .32 52 0\n"</literal>
<literal type="string">"gpr t6 .32 56 0\n"</literal>
<literal type="string">"gpr t7 .32 60 0\n"</literal>
<literal type="string">"gpr s0 .32 64 0\n"</literal>
<literal type="string">"gpr s1 .32 68 0\n"</literal>
<literal type="string">"gpr s2 .32 72 0\n"</literal>
<literal type="string">"gpr s3 .32 76 0\n"</literal>
<literal type="string">"gpr s4 .32 80 0\n"</literal>
<literal type="string">"gpr s5 .32 84 0\n"</literal>
<literal type="string">"gpr s6 .32 88 0\n"</literal>
<literal type="string">"gpr s7 .32 92 0\n"</literal>
<literal type="string">"gpr t8 .32 96 0\n"</literal>
<literal type="string">"gpr t9 .32 100 0\n"</literal>
<literal type="string">"gpr k0 .32 104 0\n"</literal>
<literal type="string">"gpr k1 .32 108 0\n"</literal>
<literal type="string">"gpr gp .32 112 0\n"</literal>
<literal type="string">"gpr sp .32 116 0\n"</literal>
<literal type="string">"gpr fp .32 120 0\n"</literal>
<literal type="string">"gpr ra .32 124 0\n"</literal>
<literal type="string">"gpr pc .32 128 0\n"</literal>
<literal type="string">"gpr hi .32 132 0\n"</literal>
<literal type="string">"gpr lo .32 136 0\n"</literal>
<literal type="string">"gpr t .32 140 0\n"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">64</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator>
<literal type="string">"=PC pc\n"</literal>
<literal type="string">"=SP sp\n"</literal>
<literal type="string">"=BP fp\n"</literal>
<literal type="string">"=A0 a0\n"</literal>
<literal type="string">"=A1 a1\n"</literal>
<literal type="string">"=A2 a2\n"</literal>
<literal type="string">"=A3 a3\n"</literal>
<literal type="string">"=SN v0\n"</literal>
<literal type="string">"=R0 v0\n"</literal>
<literal type="string">"=R1 v1\n"</literal>
<literal type="string">"gpr zero .64 ? 0\n"</literal>
<literal type="string">"gpr at .64 8 0\n"</literal>
<literal type="string">"gpr v0 .64 16 0\n"</literal>
<literal type="string">"gpr v1 .64 24 0\n"</literal>
<literal type="string">"gpr a0 .64 32 0\n"</literal>
<literal type="string">"gpr a1 .64 40 0\n"</literal>
<literal type="string">"gpr a2 .64 48 0\n"</literal>
<literal type="string">"gpr a3 .64 56 0\n"</literal>
<literal type="string">"gpr t0 .64 64 0\n"</literal>
<literal type="string">"gpr t1 .64 72 0\n"</literal>
<literal type="string">"gpr t2 .64 80 0\n"</literal>
<literal type="string">"gpr t3 .64 88 0\n"</literal>
<literal type="string">"gpr t4 .64 96 0\n"</literal>
<literal type="string">"gpr t5 .64 104 0\n"</literal>
<literal type="string">"gpr t6 .64 112 0\n"</literal>
<literal type="string">"gpr t7 .64 120 0\n"</literal>
<literal type="string">"gpr s0 .64 128 0\n"</literal>
<literal type="string">"gpr s1 .64 136 0\n"</literal>
<literal type="string">"gpr s2 .64 144 0\n"</literal>
<literal type="string">"gpr s3 .64 152 0\n"</literal>
<literal type="string">"gpr s4 .64 160 0\n"</literal>
<literal type="string">"gpr s5 .64 168 0\n"</literal>
<literal type="string">"gpr s6 .64 176 0\n"</literal>
<literal type="string">"gpr s7 .64 184 0\n"</literal>
<literal type="string">"gpr t8 .64 192 0\n"</literal>
<literal type="string">"gpr t9 .64 200 0\n"</literal>
<literal type="string">"gpr k0 .64 208 0\n"</literal>
<literal type="string">"gpr k1 .64 216 0\n"</literal>
<literal type="string">"gpr gp .64 224 0\n"</literal>
<literal type="string">"gpr sp .64 232 0\n"</literal>
<literal type="string">"gpr fp .64 240 0\n"</literal>
<literal type="string">"gpr ra .64 248 0\n"</literal>
<literal type="string">"gpr pc .64 256 0\n"</literal>
<literal type="string">"gpr hi .64 264 0\n"</literal>
<literal type="string">"gpr lo .64 272 0\n"</literal>
<literal type="string">"gpr t .64 280 0\n"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><ternary><condition><expr><name>p</name></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>archinfo</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>anal_preludes</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KW</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>ds</name></type></parameter>,<parameter><type><name>m</name></type></parameter>,<parameter><type><name>ms</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_list_append (l, r_search_keyword_new((const ut8*)d,ds,(const ut8*)m, ms, NULL))</cpp:value></cpp:define>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_search_keyword_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>KW</name> <argument_list>(<argument><expr><literal type="string">"\x27\xbd\x00"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_mips_cs</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mips"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Capstone MIPS analyzer"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"BSD"</literal></expr>,
<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>true</name></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"mips"</literal></expr>,
<expr><operator>.</operator><name>get_reg_profile</name> <operator>=</operator> <name>get_reg_profile</name></expr>,
<expr><operator>.</operator><name>archinfo</name> <operator>=</operator> <name>archinfo</name></expr>,
<expr><operator>.</operator><name>preludes</name> <operator>=</operator> <name>anal_preludes</name></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">16</literal><operator>|</operator><literal type="number">32</literal><operator>|</operator><literal type="number">64</literal></expr>,
<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>analop</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_mips_cs</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
