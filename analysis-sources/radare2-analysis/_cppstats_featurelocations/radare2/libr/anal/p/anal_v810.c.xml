<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\p\anal_v810.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;v810_disas.h&gt;</cpp:file></cpp:include>

<enum>enum <block>{
<decl><name>V810_FLAG_CY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>V810_FLAG_OV</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>V810_FLAG_S</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>V810_FLAG_Z</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
}</block>;</enum>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_flags</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>V810_FLAG_CY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",31,$c,cy,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>V810_FLAG_OV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",31,$o,ov,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>V810_FLAG_S</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",31,$s,s,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>V810_FLAG_Z</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",$z,z,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_flags</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>V810_FLAG_CY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",0,cy,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>V810_FLAG_OV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",0,ov,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>V810_FLAG_S</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",0,s,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>V810_FLAG_Z</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",0,z,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v810_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name></decl>, <decl><type ref="prev"/><name>reg1</name></decl>, <decl><type ref="prev"/><name>reg2</name></decl>, <decl><type ref="prev"/><name>imm5</name></decl>, <decl><type ref="prev"/><name>cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>word1</name></decl>, <decl><type ref="prev"/><name>word2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st32</name></type> <name>jumpdisp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v810_cmd</name></name></type> <name>cmd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>v810_decode_command</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>word1</name> <operator>=</operator> <call><name>r_read_ble16</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>word2</name> <operator>=</operator> <call><name>r_read_ble16</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>OPCODE</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">0x4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opcode</name> <operator>&amp;=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>V810_MOV</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u,="</literal></expr></argument>,
<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_MOV_IMM5</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,r%u,="</literal></expr></argument>,
<argument><expr><operator>(</operator><name>st8</name><operator>)</operator><call><name>SEXT5</name><argument_list>(<argument><expr><call><name>IMM5</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_MOVHI</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"16,%hu,&lt;&lt;,r%u,+,r%u,="</literal></expr></argument>,
<argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_MOVEA</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%hd,r%u,+,r%u,="</literal></expr></argument>,
<argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_LDSR</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_STSR</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_NOT</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,0xffffffff,^,r%u,="</literal></expr></argument>,
<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_S</name> <operator>|</operator> <name>V810_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_DIV</name></expr>:</case>
<case>case <expr><name>V810_DIVU</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_DIV</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u,/=,r%u,r%u,%,r30,="</literal></expr></argument>,
<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_OV</name> <operator>|</operator> <name>V810_FLAG_S</name> <operator>|</operator> <name>V810_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_JMP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>REG1</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,pc,="</literal></expr></argument>,
<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_OR</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u,|="</literal></expr></argument>,
<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_S</name> <operator>|</operator> <name>V810_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_ORI</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%hu,r%u,|,r%u,="</literal></expr></argument>,
<argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_S</name> <operator>|</operator> <name>V810_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_MUL</name></expr>:</case>
<case>case <expr><name>V810_MULU</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u,*=,32,r%u,r%u,*,&gt;&gt;,r30,="</literal></expr></argument>,
<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_OV</name> <operator>|</operator> <name>V810_FLAG_S</name> <operator>|</operator> <name>V810_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_XOR</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u,^="</literal></expr></argument>,
<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_S</name> <operator>|</operator> <name>V810_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_XORI</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%hu,r%u,^,r%u,="</literal></expr></argument>,
<argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_S</name> <operator>|</operator> <name>V810_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_AND</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u,&amp;="</literal></expr></argument>,
<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_S</name> <operator>|</operator> <name>V810_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_ANDI</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%hu,r%u,&amp;,r%u,="</literal></expr></argument>,
<argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_OV</name> <operator>|</operator> <name>V810_FLAG_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_CMP</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u,=="</literal></expr></argument>,
<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_CMP_IMM5</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,r%u,=="</literal></expr></argument>,
<argument><expr><operator>(</operator><name>st8</name><operator>)</operator><call><name>SEXT5</name><argument_list>(<argument><expr><call><name>IMM5</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_SUB</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u,-="</literal></expr></argument>,
<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_ADD</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u,+="</literal></expr></argument>,
<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_ADDI</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%hd,r%u,+,r%u,="</literal></expr></argument>,
<argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_ADD_IMM5</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,r%u,+="</literal></expr></argument>,
<argument><expr><operator>(</operator><name>st8</name><operator>)</operator><call><name>SEXT5</name><argument_list>(<argument><expr><call><name>IMM5</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_SHR</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u,&gt;&gt;="</literal></expr></argument>,
<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_CY</name> <operator>|</operator> <name>V810_FLAG_S</name> <operator>|</operator> <name>V810_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_SHR_IMM5</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%u,r%u,&gt;&gt;="</literal></expr></argument>,
<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><call><name>IMM5</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_CY</name> <operator>|</operator> <name>V810_FLAG_S</name> <operator>|</operator> <name>V810_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_SAR</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg1</name> <operator>=</operator> <call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg2</name> <operator>=</operator> <call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"31,r%u,&gt;&gt;,?{,r%u,32,-,r%u,1,&lt;&lt;,--,&lt;&lt;,}{,0,},r%u,r%u,&gt;&gt;,|,r%u,="</literal></expr></argument>,
<argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_CY</name> <operator>|</operator> <name>V810_FLAG_S</name> <operator>|</operator> <name>V810_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_SAR_IMM5</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>imm5</name> <operator>=</operator> <call><name>IMM5</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg2</name> <operator>=</operator> <call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"31,r%u,&gt;&gt;,?{,%u,32,-,%u,1,&lt;&lt;,--,&lt;&lt;,}{,0,},%u,r%u,&gt;&gt;,|,r%u,="</literal></expr></argument>,
<argument><expr><name>reg2</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>imm5</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>imm5</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>imm5</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_CY</name> <operator>|</operator> <name>V810_FLAG_S</name> <operator>|</operator> <name>V810_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_SHL</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u,&lt;&lt;="</literal></expr></argument>,
<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_CY</name> <operator>|</operator> <name>V810_FLAG_S</name> <operator>|</operator> <name>V810_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_SHL_IMM5</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%u,r%u,&lt;&lt;="</literal></expr></argument>,
<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><call><name>IMM5</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_CY</name> <operator>|</operator> <name>V810_FLAG_S</name> <operator>|</operator> <name>V810_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V810_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_LDB</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,%hd,+,[1],r%u,="</literal></expr></argument>,
<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",DUP,0x80,&amp;,?{,0xffffff00,|,}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_LDH</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,%hd,+,0xfffffffe,&amp;,[2],r%u,="</literal></expr></argument>,
<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",DUP,0x8000,&amp;,?{,0xffffff00,|,}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_LDW</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,%hd,+,0xfffffffc,&amp;,[4],r%u,="</literal></expr></argument>,
<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",DUP,0x80000000,&amp;,?{,0xffffff00,|,}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_STB</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u,%hd,+,=[1]"</literal></expr></argument>,
<argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>word2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_STH</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u,%hd,+,0xfffffffe,&amp;,=[2]"</literal></expr></argument>,
<argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>word2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_STW</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u,%hd,+,=[4]"</literal></expr></argument>,
<argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>word2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_INB</name></expr>:</case>
<case>case <expr><name>V810_INH</name></expr>:</case>
<case>case <expr><name>V810_INW</name></expr>:</case>
<case>case <expr><name>V810_OUTB</name></expr>:</case>
<case>case <expr><name>V810_OUTH</name></expr>:</case>
<case>case <expr><name>V810_OUTW</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_IO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_TRAP</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%u,TRAP"</literal></expr></argument>, <argument><expr><call><name>IMM5</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_RETI</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

<break>break;</break>
<case>case <expr><name>V810_JAL</name></expr>:</case>
<case>case <expr><name>V810_JR</name></expr>:</case>
<expr_stmt><expr><name>jumpdisp</name> <operator>=</operator> <call><name>DISP26</name><argument_list>(<argument><expr><name>word1</name></expr></argument>, <argument><expr><name>word2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>jumpdisp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>V810_JAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"$$,4,+,r31,=,"</literal></expr></argument>, <argument><expr><name>jumpdisp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"$$,%d,+,pc,="</literal></expr></argument>, <argument><expr><name>jumpdisp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_BCOND</name></expr>:</case>
<expr_stmt><expr><name>cond</name> <operator>=</operator> <call><name>COND</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cond</name> <operator>==</operator> <name>V810_COND_NOP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>jumpdisp</name> <operator>=</operator> <call><name>DISP9</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>jumpdisp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>cond</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>V810_COND_V</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"ov"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_COND_L</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"cy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_COND_E</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_COND_NH</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"cy,z,|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_COND_N</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_COND_NONE</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_COND_LT</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"s,ov,^"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_COND_LE</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"s,ov,^,z,|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_COND_NV</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"ov,!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_COND_NL</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"cy,!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_COND_NE</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"z,!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_COND_H</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"cy,z,|,!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_COND_P</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"s,!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_COND_GE</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"s,ov,^,!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V810_COND_GT</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"s,ov,^,z,|,!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",?{,$$,%d,+,pc,=,}"</literal></expr></argument>, <argument><expr><name>jumpdisp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>=
<expr><literal type="string">"=PC pc\n"</literal>
<literal type="string">"=SP r3\n"</literal>
<literal type="string">"=ZF z\n"</literal>
<literal type="string">"=SF s\n"</literal>
<literal type="string">"=OF ov\n"</literal>
<literal type="string">"=CF cy\n"</literal>

<literal type="string">"gpr r0 .32 0 0\n"</literal>
<literal type="string">"gpr r1 .32 4 0\n"</literal>
<literal type="string">"gpr r2 .32 8 0\n"</literal>
<literal type="string">"gpr r3 .32 12 0\n"</literal>
<literal type="string">"gpr r4 .32 16 0\n"</literal>
<literal type="string">"gpr r5 .32 20 0\n"</literal>
<literal type="string">"gpr r6 .32 24 0\n"</literal>
<literal type="string">"gpr r7 .32 28 0\n"</literal>
<literal type="string">"gpr r8 .32 32 0\n"</literal>
<literal type="string">"gpr r9 .32 36 0\n"</literal>
<literal type="string">"gpr r10 .32 40 0\n"</literal>
<literal type="string">"gpr r11 .32 44 0\n"</literal>
<literal type="string">"gpr r12 .32 48 0\n"</literal>
<literal type="string">"gpr r13 .32 52 0\n"</literal>
<literal type="string">"gpr r14 .32 56 0\n"</literal>
<literal type="string">"gpr r15 .32 60 0\n"</literal>
<literal type="string">"gpr r16 .32 64 0\n"</literal>
<literal type="string">"gpr r17 .32 68 0\n"</literal>
<literal type="string">"gpr r18 .32 72 0\n"</literal>
<literal type="string">"gpr r19 .32 76 0\n"</literal>
<literal type="string">"gpr r20 .32 80 0\n"</literal>
<literal type="string">"gpr r21 .32 84 0\n"</literal>
<literal type="string">"gpr r22 .32 88 0\n"</literal>
<literal type="string">"gpr r23 .32 92 0\n"</literal>
<literal type="string">"gpr r24 .32 96 0\n"</literal>
<literal type="string">"gpr r25 .32 100 0\n"</literal>
<literal type="string">"gpr r26 .32 104 0\n"</literal>
<literal type="string">"gpr r27 .32 108 0\n"</literal>
<literal type="string">"gpr r28 .32 112 0\n"</literal>
<literal type="string">"gpr r29 .32 116 0\n"</literal>
<literal type="string">"gpr r30 .32 120 0\n"</literal>
<literal type="string">"gpr r31 .32 124 0\n"</literal>
<literal type="string">"gpr pc .32 128 0\n"</literal>

<literal type="string">"gpr psw .32 132 0\n"</literal>
<literal type="string">"gpr np .1 132.16 0\n"</literal>
<literal type="string">"gpr ep .1 132.17 0\n"</literal>
<literal type="string">"gpr ae .1 132.18 0\n"</literal>
<literal type="string">"gpr id .1 132.19 0\n"</literal>
<literal type="string">"flg cy .1 132.28 0\n"</literal>
<literal type="string">"flg ov .1 132.29 0\n"</literal>
<literal type="string">"flg s .1 132.30 0\n"</literal>
<literal type="string">"flg z .1 132.31 0\n"</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_v810</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"v810"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"V810 code analysis plugin"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"v810"</literal></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,
<expr><operator>.</operator><name>op</name> <operator>=</operator> <name>v810_op</name></expr>,
<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>true</name></expr>,
<expr><operator>.</operator><name>set_reg_profile</name> <operator>=</operator> <name>set_reg_profile</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_v810</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
