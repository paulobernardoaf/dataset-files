<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\p\anal_cris.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>analop</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opsize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>opsize</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x3f</literal></expr>:</case>
<case>case <expr><literal type="number">0x4f</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<expr_stmt><expr><name>opsize</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x6f</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<expr_stmt><expr><name>opsize</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x7f</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LEA</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>|=</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>|=</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><literal type="number">0xff</literal><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>opsize</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xbf</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>st32</name></type> <name>delta</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>delta</name> <operator>|=</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>|=</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>|=</operator> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>delta</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>opsize</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x00</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>st8</name></type> <name>delta</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>delta</name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xf0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">0xb9</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<switch>switch <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><literal type="number">0xf3</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x96</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator><literal type="number">0xc0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xf2</literal></expr>:</case>
<case>case <expr><literal type="number">0x0b</literal></expr>:</case>
<case>case <expr><literal type="number">0x72</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x05</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xb0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x01</literal></expr>:</case>
<case>case <expr><literal type="number">0x02</literal></expr>:</case>
<case>case <expr><literal type="number">0xc2</literal></expr>:</case>
<case>case <expr><literal type="number">0xf5</literal></expr>:</case>
<case>case <expr><literal type="number">0x91</literal></expr>:</case>
<case>case <expr><literal type="number">0x41</literal></expr>:</case>
<case>case <expr><literal type="number">0x61</literal></expr>:</case>
<case>case <expr><literal type="number">0x65</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x12</literal></expr>:</case>
<case>case <expr><literal type="number">0xf6</literal></expr>:</case>
<case>case <expr><literal type="number">0xe2</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x82</literal></expr>:</case> 
<case>case <expr><literal type="number">0xba</literal></expr>:</case> 
<case>case <expr><literal type="number">0xeb</literal></expr>:</case> 
<case>case <expr><literal type="number">0xc6</literal></expr>:</case> 
<case>case <expr><literal type="number">0x92</literal></expr>:</case> 
<case>case <expr><literal type="number">0x9b</literal></expr>:</case> 
<case>case <expr><literal type="number">0xbe</literal></expr>:</case> 
<case>case <expr><literal type="number">0x06</literal></expr>:</case>
<case>case <expr><literal type="number">0x26</literal></expr>:</case>
<case>case <expr><literal type="number">0xfb</literal></expr>:</case>
<case>case <expr><literal type="number">0x9a</literal></expr>:</case>
<case>case <expr><literal type="number">0xb2</literal></expr>:</case>
<case>case <expr><literal type="number">0xda</literal></expr>:</case>
<case>case <expr><literal type="number">0x2b</literal></expr>:</case>
<case>case <expr><literal type="number">0x6f</literal></expr>:</case>
<case>case <expr><literal type="number">0xa2</literal></expr>:</case>
<case>case <expr><literal type="number">0x2f</literal></expr>:</case>
<case>case <expr><literal type="number">0x8b</literal></expr>:</case>
<case>case <expr><literal type="number">0x1b</literal></expr>:</case>
<case>case <expr><literal type="number">0xaa</literal></expr>:</case>
<case>case <expr><literal type="number">0xa6</literal></expr>:</case>
<case>case <expr><literal type="number">0xb6</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xe0</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>st8</name></type> <name>delta</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>delta</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">0x10</literal></expr>:</case>
<case>case <expr><literal type="number">0x30</literal></expr>:</case>
<case>case <expr><literal type="number">0x20</literal></expr>:</case>
<case>case <expr><literal type="number">0x2d</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><literal type="number">0xbf</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><literal type="number">0xb9</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></switch>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
switch (*buf) {
case 0x3f: 
opsize = 4;
case 0x01:
case 0x53: 
case 0x04:
case 0x61:
case 0x62:
case 0x63:
op-&gt;type = R_ANAL_OP_TYPE_ADD;
break;
case 0x88:
case 0x84:
case 0x81:
case 0x8c:
case 0xad:
op-&gt;type = R_ANAL_OP_TYPE_SUB;
break;
case 0x7f: 
op-&gt;type = R_ANAL_OP_TYPE_LEA;
break;
case 0xcf:
case 0xbe:
case 0x60:
case 0x6f:
case 0x6a: 
case 0x7e:
case 0xfe:
op-&gt;type = R_ANAL_OP_TYPE_MOV;
break;
case 0x00:
op-&gt;type = R_ANAL_OP_TYPE_JMP;

break;
case 0xff:
opsize = 6;
case 0x14:
case 0x0e:
case 0x1a:
case 0x9c:
case 0x6d: 
op-&gt;type = R_ANAL_OP_TYPE_CJMP;

break;
case 0xbf:
opsize = 6;
case 0xb1:
case 0xb2:
case 0xb3:
case 0xb4:
case 0xb5:
case 0xb6:
case 0xb7:
case 0xb8:
case 0xb9:
op-&gt;type = R_ANAL_OP_TYPE_UJMP;

break;
case 0x8f: 
case 0xc0:
case 0xe1:
case 0xaa:
op-&gt;type = R_ANAL_OP_TYPE_CMP;
break;
default:
switch (*w) {
case 0xb0b9: 
op-&gt;type = R_ANAL_OP_TYPE_CJMP;
break;
case 0xb005:
case 0x05b0:
op-&gt;type = R_ANAL_OP_TYPE_NOP;
break;
case 0xf0b9:
case 0xb9f0:
op-&gt;type = R_ANAL_OP_TYPE_RET;
break;
default:
op-&gt;type = R_ANAL_OP_TYPE_MOV;
break;
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>opsize</name></expr>;</expr_stmt>

<return>return <expr><name>opsize</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>=
<expr><literal type="string">"=PC pc\n"</literal>
<literal type="string">"=SP r14\n"</literal> 
<literal type="string">"=BP srp\n"</literal> 
<literal type="string">"=A0 r0\n"</literal>
<literal type="string">"=A1 r1\n"</literal>
<literal type="string">"=A2 r2\n"</literal>
<literal type="string">"=A3 r3\n"</literal>
<literal type="string">"gpr sp .32 56 0\n"</literal> 
<literal type="string">"gpr acr .32 60 0\n"</literal> 
<literal type="string">"gpr pc .32 64 0\n"</literal> 
<literal type="string">"gpr srp .32 68 0\n"</literal> 

<literal type="string">"gpr r0 .32 0 0\n"</literal>
<literal type="string">"gpr r1 .32 4 0\n"</literal>
<literal type="string">"gpr r2 .32 8 0\n"</literal>
<literal type="string">"gpr r3 .32 12 0\n"</literal>
<literal type="string">"gpr r4 .32 16 0\n"</literal>
<literal type="string">"gpr r5 .32 20 0\n"</literal>
<literal type="string">"gpr r6 .32 24 0\n"</literal>
<literal type="string">"gpr r7 .32 28 0\n"</literal>
<literal type="string">"gpr r8 .32 32 0\n"</literal>
<literal type="string">"gpr r9 .32 36 0\n"</literal>
<literal type="string">"gpr r10 .32 40 0\n"</literal>
<literal type="string">"gpr r11 .32 44 0\n"</literal>
<literal type="string">"gpr r12 .32 48 0\n"</literal>
<literal type="string">"gpr r13 .32 52 0\n"</literal>


<literal type="string">"gpr r14 .32 56 0\n"</literal>
<literal type="string">"gpr r15 .32 60 0\n"</literal></expr></init></decl>

;</decl_stmt>
<return>return <expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_cris</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"cris"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Axis Communications 32-bit embedded processor"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"cris"</literal></expr>,
<expr><operator>.</operator><name>set_reg_profile</name> <operator>=</operator> <name>set_reg_profile</name></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,
<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>analop</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_cris</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
