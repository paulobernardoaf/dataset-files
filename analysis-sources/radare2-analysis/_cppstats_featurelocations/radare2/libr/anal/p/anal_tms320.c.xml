<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\p\anal_tms320.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"anal_tms320c64x.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../asm/arch/tms320/tms320_dasm.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>tms320_dasm_t</name></type> <name>engine</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>TMS_ANAL_OP_FN</name>)<parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>int</name></type> <name>tms320_c54x_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tms320_c55x_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tms320_c55x_plus_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tms320_c54x_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tms320_c55x_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name> <init>= <expr><name><name>engine</name><operator>.</operator><name>syntax</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>tms320_dasm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>engine</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <ternary><condition><expr><call><name>strstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"||"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>str</name> <operator>+</operator> <literal type="number">3</literal></expr> </then><else>: <expr><name>str</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"B "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>match</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"B AC"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"BCC "</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"BCCU "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"CALL "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>match</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"CALL AC"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCALL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"CALLCC "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CCALL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"RET"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>match</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"RETCC"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CRET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"MOV "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"PSHBOTH "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UPUSH</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"PSH "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"POPBOTH "</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"POP "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"CMP "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"CMPAND "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ACMP</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"NOP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"INTR "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SWI</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"TRAP "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"INVALID"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tms320_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TMS_ANAL_OP_FN</name></type> <name>aop</name> <init>= <expr><name>tms320_c55x_op</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>r_str_casecmp</name><argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"c64x"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAPSTONE_TMS320C64X_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>tms320c64x_analop</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>r_str_casecmp</name><argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"c54x"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aop</name> <operator>=</operator> <name>tms320_c54x_op</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>r_str_casecmp</name><argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"c55x"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aop</name> <operator>=</operator> <name>tms320_c55x_op</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>r_str_casecmp</name><argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"c55x+"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aop</name> <operator>=</operator> <name>tms320_c55x_plus_op</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>aop</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tms320_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>unused</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>tms320_dasm_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>engine</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tms320_fini</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>unused</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>tms320_dasm_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>engine</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_tms320</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tms320"</literal></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"tms320"</literal></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"TMS320 DSP family code analysis plugin"</literal></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>tms320_init</name></expr>,
<expr><operator>.</operator><name>fini</name> <operator>=</operator> <name>tms320_fini</name></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPLv3"</literal></expr>,
<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>tms320_op</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_tms320</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
