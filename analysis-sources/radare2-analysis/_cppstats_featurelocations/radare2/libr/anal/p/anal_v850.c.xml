<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\p\anal_v850.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_endian.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;v850_disas.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F1_REG1</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((instr) &amp; 0x1F)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F1_REG2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((instr) &amp; 0xF800) &gt;&gt; 11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F1_RN1</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V850_REG_NAMES[F1_REG1(instr)])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F1_RN2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V850_REG_NAMES[F1_REG2(instr)])</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F2_IMM</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F1_REG1(instr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F2_REG2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F1_REG2(instr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F2_RN2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V850_REG_NAMES[F2_REG2(instr)])</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F3_COND</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((instr) &amp; 0xF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F3_DISP</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((instr) &amp; 0x70) &gt;&gt; 4) | (((instr) &amp; 0xF800) &gt;&gt; 7)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F4_DISP</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((instr) &amp; 0x3F)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F4_REG2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F1_REG2(instr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F4_RN2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V850_REG_NAMES[F4_REG2(instr)])</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F5_REG2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F1_REG2(instr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F5_DISP</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((ut32)(instr) &amp; 0xffff) &lt;&lt; 31) | (((ut32)(instr) &amp; 0xffff0000) &lt;&lt; 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F5_RN2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V850_REG_NAMES[F5_REG2(instr)])</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F6_REG1</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F1_REG1(instr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F6_REG2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F1_REG2(instr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F6_IMM</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((instr) &amp; 0xFFFF0000) &gt;&gt; 16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F6_RN1</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V850_REG_NAMES[F6_REG1(instr)])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F6_RN2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V850_REG_NAMES[F6_REG2(instr)])</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F7_REG1</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F1_REG1(instr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F7_REG2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F1_REG2(instr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F7_DISP</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F6_IMM(instr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F7_RN1</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V850_REG_NAMES[F7_REG1(instr)])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F7_RN2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V850_REG_NAMES[F7_REG2(instr)])</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F8_REG1</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F1_REG1(instr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F8_DISP</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F6_IMM(instr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F8_BIT</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((instr) &amp; 0x3800) &gt;&gt; 11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F8_SUB</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((instr) &amp; 0xC000) &gt;&gt; 14)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F8_RN1</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V850_REG_NAMES[F8_REG1(instr)])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F8_RN2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V850_REG_NAMES[F8_REG2(instr)])</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F9_REG1</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F1_REG1(instr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F9_REG2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F1_REG2(instr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F9_SUB</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((instr) &amp; 0x7E00000) &gt;&gt; 21)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F9_RN1</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V850_REG_NAMES[F9_REG1(instr)])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F9_RN2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V850_REG_NAMES[F9_REG2(instr)])</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F11_REG1</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F1_REG1(instr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F11_REG2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F1_REG2(instr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F11_REG3</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((instr) &amp; 0xF8000000) &gt;&gt; 27)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F11_SUB</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((instr) &amp; 0x7E00000) &gt;&gt; 20) | (((instr) &amp; 2) &gt;&gt; 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F11_RN1</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V850_REG_NAMES[F11_REG1(instr)])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F11_RN2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V850_REG_NAMES[F11_REG2(instr)])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F12_IMM</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(F1_REG1(instr) | (((instr) &amp; 0x7C0000) &gt;&gt; 13))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F12_REG2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F1_REG2(instr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F12_REG3</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((instr) &amp; 0xF8000000) &gt;&gt; 27)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F12_SUB</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((instr) &amp; 0x7800001) &gt;&gt; 22) | (((instr) &amp; 2) &gt;&gt; 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F12_RN2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V850_REG_NAMES[F12_REG2(instr)])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F12_RN3</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V850_REG_NAMES[F12_REG3(instr)])</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F13_IMM</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((instr) &amp; 0x3E) &gt;&gt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F13_REG2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((instr) &amp; 0x1F0000) &gt;&gt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F13_LIST</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((instr) &amp;&amp; 0xFFE00000) &gt;&gt; 21)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F13_RN2</name><parameter_list>(<parameter><type><name>instr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V850_REG_NAMES[F13_REG2(instr)])</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>V850_REG_NAMES</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"zero"</literal></expr>,
<expr><literal type="string">"r1"</literal></expr>,
<expr><literal type="string">"r2"</literal></expr>,
<expr><literal type="string">"r3"</literal></expr>,
<expr><literal type="string">"r4"</literal></expr>,
<expr><literal type="string">"r5"</literal></expr>,
<expr><literal type="string">"r6"</literal></expr>,
<expr><literal type="string">"r7"</literal></expr>,
<expr><literal type="string">"r8"</literal></expr>,
<expr><literal type="string">"r9"</literal></expr>,
<expr><literal type="string">"r10"</literal></expr>,
<expr><literal type="string">"r11"</literal></expr>,
<expr><literal type="string">"r12"</literal></expr>,
<expr><literal type="string">"r13"</literal></expr>,
<expr><literal type="string">"r14"</literal></expr>,
<expr><literal type="string">"r15"</literal></expr>,
<expr><literal type="string">"r16"</literal></expr>,
<expr><literal type="string">"r17"</literal></expr>,
<expr><literal type="string">"r18"</literal></expr>,
<expr><literal type="string">"r19"</literal></expr>,
<expr><literal type="string">"r20"</literal></expr>,
<expr><literal type="string">"r21"</literal></expr>,
<expr><literal type="string">"r22"</literal></expr>,
<expr><literal type="string">"r23"</literal></expr>,
<expr><literal type="string">"r24"</literal></expr>,
<expr><literal type="string">"r25"</literal></expr>,
<expr><literal type="string">"r26"</literal></expr>,
<expr><literal type="string">"r27"</literal></expr>,
<expr><literal type="string">"r28"</literal></expr>,
<expr><literal type="string">"r29"</literal></expr>,
<expr><literal type="string">"ep"</literal></expr>,
<expr><literal type="string">"lp"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_flags</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>V850_FLAG_CY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"31,$c,cy,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>V850_FLAG_OV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",31,$o,ov,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>V850_FLAG_S</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",31,$s,s,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>V850_FLAG_Z</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",$z,z,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_flags</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>V850_FLAG_CY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",0,cy,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>V850_FLAG_OV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",0,ov,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>V850_FLAG_S</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",0,s,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>V850_FLAG_Z</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",0,z,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v850_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reg1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reg2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>bitmask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>destaddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st16</name></type> <name>destaddrs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>word1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>word2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v850_cmd</name></name></type> <name>cmd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>v850_decode_command</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>word1</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>word2</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>get_opcode</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>V850_MOV_IMM5</name></expr>:</case>
<case>case <expr><name>V850_MOV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>!=</operator> <name>V850_MOV_IMM5</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,="</literal></expr></argument>, <argument><expr><call><name>F1_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F1_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",%s,="</literal></expr></argument>, <argument><expr><operator>(</operator><name>st64</name><operator>)</operator><operator>(</operator><call><name>F2_IMM</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><call><name>F2_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>V850_MOVEA</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0xffff,&amp;,%u,+,%s,="</literal></expr></argument>, <argument><expr><call><name>F6_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>F6_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_SLDB</name></expr>:</case>
<case>case <expr><name>V850_SLDH</name></expr>:</case>
<case>case <expr><name>V850_SLDW</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>F4_REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>V850_SP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_GET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>V850_SSTB</name></expr>:</case>
<case>case <expr><name>V850_SSTH</name></expr>:</case>
<case>case <expr><name>V850_SSTW</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>F4_REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>V850_SP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_SET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>V850_NOT</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0xffffffff,^,%s,="</literal></expr></argument>,<argument><expr><call><name>F1_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F1_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_S</name> <operator>|</operator> <name>V850_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_DIVH</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_DIV</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,0xffff,&amp;,/,%s,="</literal></expr></argument>,
<argument><expr><call><name>F1_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F1_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F1_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_OV</name> <operator>|</operator> <name>V850_FLAG_S</name> <operator>|</operator> <name>V850_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_JMP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>F1_REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>word1</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,pc,="</literal></expr></argument>, <argument><expr><call><name>F1_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_JARL2</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <call><name>F5_DISP</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name>word2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <name>word1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"pc,%s,=,pc,%hu,+="</literal></expr></argument>, <argument><expr><call><name>F5_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F5_DISP</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name>word2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
case V850_JR:
jumpdisp = DISP26(word1, word2);
op-&gt;type = R_ANAL_OP_TYPE_JMP;
r_strbuf_appendf (&amp;op-&gt;esil, "$$,%d,+,pc,=", jumpdisp);
break;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>V850_OR</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,|="</literal></expr></argument>, <argument><expr><call><name>F1_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F1_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_S</name> <operator>|</operator> <name>V850_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_ORI</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%hu,%s,|,%s,="</literal></expr></argument>,
<argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>F6_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F6_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_S</name> <operator>|</operator> <name>V850_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_MULH</name></expr>:</case>
<case>case <expr><name>V850_MULH_IMM5</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_XOR</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,^="</literal></expr></argument>, <argument><expr><call><name>F1_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F1_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_S</name> <operator>|</operator> <name>V850_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_XORI</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%hu,%s,^,%s,="</literal></expr></argument>, <argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>F6_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F6_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_S</name> <operator>|</operator> <name>V850_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_AND</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&amp;="</literal></expr></argument>, <argument><expr><call><name>F1_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F1_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_S</name> <operator>|</operator> <name>V850_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_ANDI</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%hu,%s,&amp;,%s,="</literal></expr></argument>, <argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>F6_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F6_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_OV</name> <operator>|</operator> <name>V850_FLAG_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_CMP</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,=="</literal></expr></argument>, <argument><expr><call><name>F1_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F1_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_CMP_IMM5</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%s,=="</literal></expr></argument>, <argument><expr><operator>(</operator><name>st8</name><operator>)</operator><call><name>SEXT5</name><argument_list>(<argument><expr><call><name>F2_IMM</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F2_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_TST</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&amp;"</literal></expr></argument>, <argument><expr><call><name>F1_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F1_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_S</name> <operator>|</operator> <name>V850_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_SUB</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,-="</literal></expr></argument>, <argument><expr><call><name>F1_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F1_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_SUBR</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,-,%s="</literal></expr></argument>, <argument><expr><call><name>F1_RN2</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F1_RN1</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F1_RN2</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_ADD</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+="</literal></expr></argument>, <argument><expr><call><name>F1_RN1</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F1_RN2</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_ADD_IMM5</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>F2_REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>V850_SP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <call><name>F2_IMM</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%s,+="</literal></expr></argument>, <argument><expr><operator>(</operator><name>st8</name><operator>)</operator><call><name>SEXT5</name><argument_list>(<argument><expr><call><name>F2_IMM</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F2_RN2</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_ADDI</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>F6_REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>V850_SP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <operator>(</operator><name>st64</name><operator>)</operator> <name>word2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%s,+,%s,="</literal></expr></argument>, <argument><expr><operator>(</operator><name>st32</name><operator>)</operator> <name>word2</name></expr></argument>, <argument><expr><call><name>F6_RN1</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F6_RN2</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_SHR_IMM5</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%u,%s,&gt;&gt;="</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><call><name>F2_IMM</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F2_RN2</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_CY</name> <operator>|</operator> <name>V850_FLAG_S</name> <operator>|</operator> <name>V850_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_SAR_IMM5</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAR</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>imm5</name> <init>= <expr><call><name>F2_IMM</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>reg2</name> <operator>=</operator> <call><name>F2_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"31,%s,&gt;&gt;,?{,%u,32,-,%u,1,&lt;&lt;,--,&lt;&lt;,}{,0,},%u,%s,&gt;&gt;,|,%s,="</literal></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>imm5</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>imm5</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>imm5</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_CY</name> <operator>|</operator> <name>V850_FLAG_S</name> <operator>|</operator> <name>V850_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_SHL_IMM5</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%u,%s,&lt;&lt;="</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><call><name>F2_IMM</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F2_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_CY</name> <operator>|</operator> <name>V850_FLAG_S</name> <operator>|</operator> <name>V850_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_BCOND</name></expr>:</case>
<case>case <expr><name>V850_BCOND2</name></expr>:</case>
<case>case <expr><name>V850_BCOND3</name></expr>:</case>
<case>case <expr><name>V850_BCOND4</name></expr>:</case>
<expr_stmt><expr><name>destaddr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>word1</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>word1</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>destaddr</name> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>destaddrs</name> <operator>=</operator> <name>destaddr</name> <operator>|</operator> <literal type="number">0xFE00</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>destaddrs</name> <operator>=</operator> <name>destaddr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>destaddrs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>F3_COND</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>V850_COND_V</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"ov"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_COND_CL</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"cy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_COND_ZE</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_COND_NH</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"cy,z,|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_COND_N</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_COND_AL</name></expr>:</case> 
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_COND_LT</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"s,ov,^"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_COND_LE</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"s,ov,^,z,|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_COND_NV</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"ov,!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_COND_NL</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"cy,!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_COND_NE</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"z,!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_COND_H</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"cy,z,|,!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_COND_P</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"s,!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_COND_GE</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"s,ov,^,!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_COND_GT</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"s,ov,^,z,|,!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",?{,$$,%d,+,pc,=,}"</literal></expr></argument>, <argument><expr><name>destaddrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_BIT_MANIP</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>bitop</name> <init>= <expr><name>word1</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>bitop</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>V850_BIT_CLR1</name></expr>:</case>
<expr_stmt><expr><name>bitmask</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>F8_BIT</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%hu,%s,+,[1],%u,&amp;,%hu,%s,+,=[1]"</literal></expr></argument>, <argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>F8_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bitmask</name></expr></argument>, <argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>F8_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
<case>case <expr><name>V850_BIT_NOT1</name></expr>:</case>
<expr_stmt><expr><name>bitmask</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>F8_BIT</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%hu,%s,+,[1],%u,^,%hu,%s,+,=[1]"</literal></expr></argument>, <argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>F8_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bitmask</name></expr></argument>, <argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>F8_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>V850_EXT1</name></expr>:</case>
<switch>switch <condition>(<expr><call><name>get_subopcode</name><argument_list>(<argument><expr><name>word1</name> <operator>|</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name>word2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>V850_EXT_SHL</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&lt;&lt;="</literal></expr></argument>, <argument><expr><call><name>F9_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F9_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_CY</name> <operator>|</operator> <name>V850_FLAG_S</name> <operator>|</operator> <name>V850_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_EXT_SHR</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&gt;&gt;="</literal></expr></argument>, <argument><expr><call><name>F9_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F9_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_CY</name> <operator>|</operator> <name>V850_FLAG_S</name> <operator>|</operator> <name>V850_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V850_EXT_SAR</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg1</name> <operator>=</operator> <call><name>F9_RN1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg2</name> <operator>=</operator> <call><name>F9_RN2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"31,%s,&gt;&gt;,?{,%s,32,-,%s,1,&lt;&lt;,--,&lt;&lt;,}{,0,},%s,%s,&gt;&gt;,|,%s,="</literal></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_CY</name> <operator>|</operator> <name>V850_FLAG_S</name> <operator>|</operator> <name>V850_FLAG_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>V850_FLAG_OV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>=
<expr><literal type="string">"=PC pc\n"</literal>
<literal type="string">"=SP r3\n"</literal>
<literal type="string">"=ZF z\n"</literal>
<literal type="string">"=SF s\n"</literal>
<literal type="string">"=OF ov\n"</literal>
<literal type="string">"=CF cy\n"</literal>

<literal type="string">"gpr zero .32 ? 0\n"</literal>
<literal type="string">"gpr r0 .32 0 0\n"</literal>
<literal type="string">"gpr r1 .32 4 0\n"</literal>
<literal type="string">"gpr r2 .32 8 0\n"</literal>
<literal type="string">"gpr r3 .32 12 0\n"</literal>
<literal type="string">"gpr r4 .32 16 0\n"</literal>
<literal type="string">"gpr r5 .32 20 0\n"</literal>
<literal type="string">"gpr r6 .32 24 0\n"</literal>
<literal type="string">"gpr r7 .32 28 0\n"</literal>
<literal type="string">"gpr r8 .32 32 0\n"</literal>
<literal type="string">"gpr r9 .32 36 0\n"</literal>
<literal type="string">"gpr r10 .32 40 0\n"</literal>
<literal type="string">"gpr r11 .32 44 0\n"</literal>
<literal type="string">"gpr r12 .32 48 0\n"</literal>
<literal type="string">"gpr r13 .32 52 0\n"</literal>
<literal type="string">"gpr r14 .32 56 0\n"</literal>
<literal type="string">"gpr r15 .32 60 0\n"</literal>
<literal type="string">"gpr r16 .32 64 0\n"</literal>
<literal type="string">"gpr r17 .32 68 0\n"</literal>
<literal type="string">"gpr r18 .32 72 0\n"</literal>
<literal type="string">"gpr r19 .32 76 0\n"</literal>
<literal type="string">"gpr r20 .32 80 0\n"</literal>
<literal type="string">"gpr r21 .32 84 0\n"</literal>
<literal type="string">"gpr r22 .32 88 0\n"</literal>
<literal type="string">"gpr r23 .32 92 0\n"</literal>
<literal type="string">"gpr r24 .32 96 0\n"</literal>
<literal type="string">"gpr r25 .32 100 0\n"</literal>
<literal type="string">"gpr r26 .32 104 0\n"</literal>
<literal type="string">"gpr r27 .32 108 0\n"</literal>
<literal type="string">"gpr r28 .32 112 0\n"</literal>
<literal type="string">"gpr r29 .32 116 0\n"</literal>
<literal type="string">"gpr r30 .32 120 0\n"</literal>
<literal type="string">"gpr r31 .32 124 0\n"</literal>
<literal type="string">"gpr pc .32 128 0\n"</literal>

<literal type="string">"gpr psw .32 132 0\n"</literal>
<literal type="string">"gpr np .1 132.16 0\n"</literal>
<literal type="string">"gpr ep .1 132.17 0\n"</literal>
<literal type="string">"gpr ae .1 132.18 0\n"</literal>
<literal type="string">"gpr id .1 132.19 0\n"</literal>
<literal type="string">"flg cy .1 132.28 0\n"</literal>
<literal type="string">"flg ov .1 132.29 0\n"</literal>
<literal type="string">"flg s .1 132.30 0\n"</literal>
<literal type="string">"flg z .1 132.31 0\n"</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_v850</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"v850"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"V850 code analysis plugin"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"v850"</literal></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,
<expr><operator>.</operator><name>op</name> <operator>=</operator> <name>v850_op</name></expr>,
<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>true</name></expr>,
<expr><operator>.</operator><name>get_reg_profile</name> <operator>=</operator> <name>get_reg_profile</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_v850</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
