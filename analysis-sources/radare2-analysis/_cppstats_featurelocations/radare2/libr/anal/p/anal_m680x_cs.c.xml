<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\p\anal_m680x_cs.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;capstone/capstone.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>CS_API_MINOR</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAPSTONE_HAS_M680X</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAPSTONE_HAS_M680X</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CAPSTONE_HAS_M680X</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name> <name>(</name><cpp:literal>"Cannot find support for m680x in capstone"</cpp:literal><name>)</name></cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:warning>#<cpp:directive>warning</cpp:directive> Cannot find capstone-m680x support</cpp:warning>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CAPSTONE_HAS_M680X</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;capstone/m680x.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>m680xmode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CS_MODE_M680X_6800</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"6800"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CS_MODE_M680X_6800</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"6801"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CS_MODE_M680X_6801</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"6805"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CS_MODE_M680X_6805</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"6808"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CS_MODE_M680X_6808</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"6809"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CS_MODE_M680X_6809</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"6811"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CS_MODE_M680X_6811</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"cpu12"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CS_MODE_M680X_CPU12</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"6301"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CS_MODE_M680X_6301</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"6309"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CS_MODE_M680X_6309</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"hcs08"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CS_MODE_M680X_HCS08</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CS_MODE_M680X_6800</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;m680x.operands[x].imm</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;m680x.operands[x].rel</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>analop</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>opsize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>csh</name></type> <name>handle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>omode</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>obits</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cs_insn</name><modifier>*</modifier></type> <name>insn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><call><name>m680xmode</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>omode</name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <name>obits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cs_close</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>omode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>obits</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cs_open</name> <argument_list>(<argument><expr><name>CS_ARCH_M680X</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>CS_ERR_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fin</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cs_option</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CS_OPT_DETAIL</name></expr></argument>, <argument><expr><name>CS_OPT_ON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>cs_disasm</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>opsize</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\xff\xff"</literal></expr></argument>, <argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>opsize</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>opsize</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>M680X_INS_INVLD</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M680X_INS_ABA</name></expr>:</case> 
<case>case <expr><name>M680X_INS_ABX</name></expr>:</case>
<case>case <expr><name>M680X_INS_ABY</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>M680X_INS_ADC</name></expr>:</case>
<case>case <expr><name>M680X_INS_ADCA</name></expr>:</case>
<case>case <expr><name>M680X_INS_ADCB</name></expr>:</case>
<case>case <expr><name>M680X_INS_ADCD</name></expr>:</case>
<case>case <expr><name>M680X_INS_ADCR</name></expr>:</case>
<case>case <expr><name>M680X_INS_ADD</name></expr>:</case>
<case>case <expr><name>M680X_INS_ADDA</name></expr>:</case>
<case>case <expr><name>M680X_INS_ADDB</name></expr>:</case>
<case>case <expr><name>M680X_INS_ADDD</name></expr>:</case>
<case>case <expr><name>M680X_INS_ADDE</name></expr>:</case>
<case>case <expr><name>M680X_INS_ADDF</name></expr>:</case>
<case>case <expr><name>M680X_INS_ADDR</name></expr>:</case>
<case>case <expr><name>M680X_INS_ADDW</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M680X_INS_AIM</name></expr>:</case>
<case>case <expr><name>M680X_INS_AIS</name></expr>:</case>
<case>case <expr><name>M680X_INS_AIX</name></expr>:</case>
<case>case <expr><name>M680X_INS_AND</name></expr>:</case>
<case>case <expr><name>M680X_INS_ANDA</name></expr>:</case>
<case>case <expr><name>M680X_INS_ANDB</name></expr>:</case>
<case>case <expr><name>M680X_INS_ANDCC</name></expr>:</case>
<case>case <expr><name>M680X_INS_ANDD</name></expr>:</case>
<case>case <expr><name>M680X_INS_ANDR</name></expr>:</case>
<case>case <expr><name>M680X_INS_ASL</name></expr>:</case>
<case>case <expr><name>M680X_INS_ASLA</name></expr>:</case>
<case>case <expr><name>M680X_INS_ASLB</name></expr>:</case>
<case>case <expr><name>M680X_INS_ASLD</name></expr>:</case> 
<case>case <expr><name>M680X_INS_ASR</name></expr>:</case>
<case>case <expr><name>M680X_INS_ASRA</name></expr>:</case>
<case>case <expr><name>M680X_INS_ASRB</name></expr>:</case>
<case>case <expr><name>M680X_INS_ASRD</name></expr>:</case>
<case>case <expr><name>M680X_INS_ASRX</name></expr>:</case>
<case>case <expr><name>M680X_INS_BAND</name></expr>:</case>
<case>case <expr><name>M680X_INS_BCC</name></expr>:</case> 
<case>case <expr><name>M680X_INS_BCLR</name></expr>:</case>
<case>case <expr><name>M680X_INS_BCS</name></expr>:</case> 
<case>case <expr><name>M680X_INS_BEOR</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>M680X_INS_BIAND</name></expr>:</case>
<case>case <expr><name>M680X_INS_BIEOR</name></expr>:</case>
<case>case <expr><name>M680X_INS_BIH</name></expr>:</case>
<case>case <expr><name>M680X_INS_BIL</name></expr>:</case>
<case>case <expr><name>M680X_INS_BIOR</name></expr>:</case>
<case>case <expr><name>M680X_INS_BIT</name></expr>:</case>
<case>case <expr><name>M680X_INS_BITA</name></expr>:</case>
<case>case <expr><name>M680X_INS_BITB</name></expr>:</case>
<case>case <expr><name>M680X_INS_BITD</name></expr>:</case>
<case>case <expr><name>M680X_INS_BITMD</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>M680X_INS_BRA</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <call><name>REL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M680X_INS_BEQ</name></expr>:</case>
<case>case <expr><name>M680X_INS_BGE</name></expr>:</case>
<case>case <expr><name>M680X_INS_BGND</name></expr>:</case>
<case>case <expr><name>M680X_INS_BGT</name></expr>:</case>
<case>case <expr><name>M680X_INS_BHCC</name></expr>:</case>
<case>case <expr><name>M680X_INS_BHCS</name></expr>:</case>
<case>case <expr><name>M680X_INS_BHI</name></expr>:</case>
<case>case <expr><name>M680X_INS_BLE</name></expr>:</case>
<case>case <expr><name>M680X_INS_BLS</name></expr>:</case>
<case>case <expr><name>M680X_INS_BLT</name></expr>:</case>
<case>case <expr><name>M680X_INS_BMC</name></expr>:</case>
<case>case <expr><name>M680X_INS_BMI</name></expr>:</case>
<case>case <expr><name>M680X_INS_BMS</name></expr>:</case>
<case>case <expr><name>M680X_INS_BNE</name></expr>:</case>
<case>case <expr><name>M680X_INS_BOR</name></expr>:</case>
<case>case <expr><name>M680X_INS_BPL</name></expr>:</case>
<case>case <expr><name>M680X_INS_BRCLR</name></expr>:</case>
<case>case <expr><name>M680X_INS_BRSET</name></expr>:</case>
<case>case <expr><name>M680X_INS_BRN</name></expr>:</case>
<case>case <expr><name>M680X_INS_BSET</name></expr>:</case>
<case>case <expr><name>M680X_INS_BSR</name></expr>:</case>
<case>case <expr><name>M680X_INS_BVC</name></expr>:</case>
<case>case <expr><name>M680X_INS_BVS</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <call><name>REL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M680X_INS_CALL</name></expr>:</case>
<case>case <expr><name>M680X_INS_CBA</name></expr>:</case> 
<case>case <expr><name>M680X_INS_CBEQ</name></expr>:</case>
<case>case <expr><name>M680X_INS_CBEQA</name></expr>:</case>
<case>case <expr><name>M680X_INS_CBEQX</name></expr>:</case>
<case>case <expr><name>M680X_INS_CLC</name></expr>:</case> 
<case>case <expr><name>M680X_INS_CLI</name></expr>:</case> 
<case>case <expr><name>M680X_INS_CLR</name></expr>:</case>
<case>case <expr><name>M680X_INS_CLRA</name></expr>:</case>
<case>case <expr><name>M680X_INS_CLRB</name></expr>:</case>
<case>case <expr><name>M680X_INS_CLRD</name></expr>:</case>
<case>case <expr><name>M680X_INS_CLRE</name></expr>:</case>
<case>case <expr><name>M680X_INS_CLRF</name></expr>:</case>
<case>case <expr><name>M680X_INS_CLRH</name></expr>:</case>
<case>case <expr><name>M680X_INS_CLRW</name></expr>:</case>
<case>case <expr><name>M680X_INS_CLRX</name></expr>:</case>
<case>case <expr><name>M680X_INS_CLV</name></expr>:</case> 
<break>break;</break>
<case>case <expr><name>M680X_INS_CMP</name></expr>:</case>
<case>case <expr><name>M680X_INS_CMPA</name></expr>:</case>
<case>case <expr><name>M680X_INS_CMPB</name></expr>:</case>
<case>case <expr><name>M680X_INS_CMPD</name></expr>:</case>
<case>case <expr><name>M680X_INS_CMPE</name></expr>:</case>
<case>case <expr><name>M680X_INS_CMPF</name></expr>:</case>
<case>case <expr><name>M680X_INS_CMPR</name></expr>:</case>
<case>case <expr><name>M680X_INS_CMPS</name></expr>:</case>
<case>case <expr><name>M680X_INS_CMPU</name></expr>:</case>
<case>case <expr><name>M680X_INS_CMPW</name></expr>:</case>
<case>case <expr><name>M680X_INS_CMPX</name></expr>:</case>
<case>case <expr><name>M680X_INS_CMPY</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M680X_INS_COM</name></expr>:</case>
<case>case <expr><name>M680X_INS_COMA</name></expr>:</case>
<case>case <expr><name>M680X_INS_COMB</name></expr>:</case>
<case>case <expr><name>M680X_INS_COMD</name></expr>:</case>
<case>case <expr><name>M680X_INS_COME</name></expr>:</case>
<case>case <expr><name>M680X_INS_COMF</name></expr>:</case>
<case>case <expr><name>M680X_INS_COMW</name></expr>:</case>
<case>case <expr><name>M680X_INS_COMX</name></expr>:</case>
<case>case <expr><name>M680X_INS_CPD</name></expr>:</case>
<case>case <expr><name>M680X_INS_CPHX</name></expr>:</case>
<case>case <expr><name>M680X_INS_CPS</name></expr>:</case>
<case>case <expr><name>M680X_INS_CPX</name></expr>:</case> 
<case>case <expr><name>M680X_INS_CPY</name></expr>:</case>
<case>case <expr><name>M680X_INS_CWAI</name></expr>:</case>
<case>case <expr><name>M680X_INS_DAA</name></expr>:</case>
<case>case <expr><name>M680X_INS_DBEQ</name></expr>:</case>
<case>case <expr><name>M680X_INS_DBNE</name></expr>:</case>
<case>case <expr><name>M680X_INS_DBNZ</name></expr>:</case>
<case>case <expr><name>M680X_INS_DBNZA</name></expr>:</case>
<case>case <expr><name>M680X_INS_DBNZX</name></expr>:</case>
<case>case <expr><name>M680X_INS_DEC</name></expr>:</case>
<case>case <expr><name>M680X_INS_DECA</name></expr>:</case>
<case>case <expr><name>M680X_INS_DECB</name></expr>:</case>
<case>case <expr><name>M680X_INS_DECD</name></expr>:</case>
<case>case <expr><name>M680X_INS_DECE</name></expr>:</case>
<case>case <expr><name>M680X_INS_DECF</name></expr>:</case>
<case>case <expr><name>M680X_INS_DECW</name></expr>:</case>
<case>case <expr><name>M680X_INS_DECX</name></expr>:</case>
<case>case <expr><name>M680X_INS_DES</name></expr>:</case> 
<case>case <expr><name>M680X_INS_DEX</name></expr>:</case> 
<case>case <expr><name>M680X_INS_DEY</name></expr>:</case>
<case>case <expr><name>M680X_INS_DIV</name></expr>:</case>
<case>case <expr><name>M680X_INS_DIVD</name></expr>:</case>
<case>case <expr><name>M680X_INS_DIVQ</name></expr>:</case>
<case>case <expr><name>M680X_INS_EDIV</name></expr>:</case>
<case>case <expr><name>M680X_INS_EDIVS</name></expr>:</case>
<case>case <expr><name>M680X_INS_EIM</name></expr>:</case>
<case>case <expr><name>M680X_INS_EMACS</name></expr>:</case>
<case>case <expr><name>M680X_INS_EMAXD</name></expr>:</case>
<case>case <expr><name>M680X_INS_EMAXM</name></expr>:</case>
<case>case <expr><name>M680X_INS_EMIND</name></expr>:</case>
<case>case <expr><name>M680X_INS_EMINM</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>M680X_INS_EMUL</name></expr>:</case>
<case>case <expr><name>M680X_INS_EMULS</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M680X_INS_EOR</name></expr>:</case>
<case>case <expr><name>M680X_INS_EORA</name></expr>:</case>
<case>case <expr><name>M680X_INS_EORB</name></expr>:</case>
<case>case <expr><name>M680X_INS_EORD</name></expr>:</case>
<case>case <expr><name>M680X_INS_EORR</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M680X_INS_ETBL</name></expr>:</case>
<case>case <expr><name>M680X_INS_EXG</name></expr>:</case>
<case>case <expr><name>M680X_INS_FDIV</name></expr>:</case>
<case>case <expr><name>M680X_INS_IBEQ</name></expr>:</case>
<case>case <expr><name>M680X_INS_IBNE</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>M680X_INS_IDIV</name></expr>:</case>
<case>case <expr><name>M680X_INS_IDIVS</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_DIV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M680X_INS_ILLGL</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>M680X_INS_INC</name></expr>:</case>
<case>case <expr><name>M680X_INS_INCA</name></expr>:</case>
<case>case <expr><name>M680X_INS_INCB</name></expr>:</case>
<case>case <expr><name>M680X_INS_INCD</name></expr>:</case>
<case>case <expr><name>M680X_INS_INCE</name></expr>:</case>
<case>case <expr><name>M680X_INS_INCF</name></expr>:</case>
<case>case <expr><name>M680X_INS_INCW</name></expr>:</case>
<case>case <expr><name>M680X_INS_INCX</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M680X_INS_INS</name></expr>:</case> 
<case>case <expr><name>M680X_INS_INX</name></expr>:</case> 
<case>case <expr><name>M680X_INS_INY</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>M680X_INS_JMP</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M680X_INS_JSR</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RJMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M680X_INS_LBCC</name></expr>:</case> 
<case>case <expr><name>M680X_INS_LBCS</name></expr>:</case> 
<case>case <expr><name>M680X_INS_LBEQ</name></expr>:</case>
<case>case <expr><name>M680X_INS_LBGE</name></expr>:</case>
<case>case <expr><name>M680X_INS_LBGT</name></expr>:</case>
<case>case <expr><name>M680X_INS_LBHI</name></expr>:</case>
<case>case <expr><name>M680X_INS_LBLE</name></expr>:</case>
<case>case <expr><name>M680X_INS_LBLS</name></expr>:</case>
<case>case <expr><name>M680X_INS_LBLT</name></expr>:</case>
<case>case <expr><name>M680X_INS_LBMI</name></expr>:</case>
<case>case <expr><name>M680X_INS_LBNE</name></expr>:</case>
<case>case <expr><name>M680X_INS_LBPL</name></expr>:</case>
<case>case <expr><name>M680X_INS_LBRA</name></expr>:</case>
<case>case <expr><name>M680X_INS_LBRN</name></expr>:</case>
<case>case <expr><name>M680X_INS_LBSR</name></expr>:</case>
<case>case <expr><name>M680X_INS_LBVC</name></expr>:</case>
<case>case <expr><name>M680X_INS_LBVS</name></expr>:</case>
<case>case <expr><name>M680X_INS_LDA</name></expr>:</case>
<case>case <expr><name>M680X_INS_LDAA</name></expr>:</case> 
<case>case <expr><name>M680X_INS_LDAB</name></expr>:</case> 
<case>case <expr><name>M680X_INS_LDB</name></expr>:</case>
<case>case <expr><name>M680X_INS_LDBT</name></expr>:</case>
<case>case <expr><name>M680X_INS_LDD</name></expr>:</case>
<case>case <expr><name>M680X_INS_LDE</name></expr>:</case>
<case>case <expr><name>M680X_INS_LDF</name></expr>:</case>
<case>case <expr><name>M680X_INS_LDHX</name></expr>:</case>
<case>case <expr><name>M680X_INS_LDMD</name></expr>:</case>
<case>case <expr><name>M680X_INS_LDQ</name></expr>:</case>
<case>case <expr><name>M680X_INS_LDS</name></expr>:</case>
<case>case <expr><name>M680X_INS_LDU</name></expr>:</case>
<case>case <expr><name>M680X_INS_LDW</name></expr>:</case>
<case>case <expr><name>M680X_INS_LDX</name></expr>:</case>
<case>case <expr><name>M680X_INS_LDY</name></expr>:</case>
<case>case <expr><name>M680X_INS_LEAS</name></expr>:</case>
<case>case <expr><name>M680X_INS_LEAU</name></expr>:</case>
<case>case <expr><name>M680X_INS_LEAX</name></expr>:</case>
<case>case <expr><name>M680X_INS_LEAY</name></expr>:</case>
<case>case <expr><name>M680X_INS_LSL</name></expr>:</case>
<case>case <expr><name>M680X_INS_LSLA</name></expr>:</case>
<case>case <expr><name>M680X_INS_LSLB</name></expr>:</case>
<case>case <expr><name>M680X_INS_LSLD</name></expr>:</case>
<case>case <expr><name>M680X_INS_LSLX</name></expr>:</case>
<case>case <expr><name>M680X_INS_LSR</name></expr>:</case>
<case>case <expr><name>M680X_INS_LSRA</name></expr>:</case>
<case>case <expr><name>M680X_INS_LSRB</name></expr>:</case>
<case>case <expr><name>M680X_INS_LSRD</name></expr>:</case> 
<case>case <expr><name>M680X_INS_LSRW</name></expr>:</case>
<case>case <expr><name>M680X_INS_LSRX</name></expr>:</case>
<case>case <expr><name>M680X_INS_MAXA</name></expr>:</case>
<case>case <expr><name>M680X_INS_MAXM</name></expr>:</case>
<case>case <expr><name>M680X_INS_MEM</name></expr>:</case>
<case>case <expr><name>M680X_INS_MINA</name></expr>:</case>
<case>case <expr><name>M680X_INS_MINM</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>M680X_INS_MOV</name></expr>:</case>
<case>case <expr><name>M680X_INS_MOVB</name></expr>:</case>
<case>case <expr><name>M680X_INS_MOVW</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M680X_INS_MUL</name></expr>:</case>
<case>case <expr><name>M680X_INS_MULD</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M680X_INS_NEG</name></expr>:</case>
<case>case <expr><name>M680X_INS_NEGA</name></expr>:</case>
<case>case <expr><name>M680X_INS_NEGB</name></expr>:</case>
<case>case <expr><name>M680X_INS_NEGD</name></expr>:</case>
<case>case <expr><name>M680X_INS_NEGX</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M680X_INS_NOP</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M680X_INS_NSA</name></expr>:</case>
<case>case <expr><name>M680X_INS_OIM</name></expr>:</case>
<case>case <expr><name>M680X_INS_ORA</name></expr>:</case>
<case>case <expr><name>M680X_INS_ORAA</name></expr>:</case> 
<case>case <expr><name>M680X_INS_ORAB</name></expr>:</case> 
<case>case <expr><name>M680X_INS_ORB</name></expr>:</case>
<case>case <expr><name>M680X_INS_ORCC</name></expr>:</case>
<case>case <expr><name>M680X_INS_ORD</name></expr>:</case>
<case>case <expr><name>M680X_INS_ORR</name></expr>:</case>
<case>case <expr><name>M680X_INS_PSHA</name></expr>:</case> 
<case>case <expr><name>M680X_INS_PSHB</name></expr>:</case> 
<case>case <expr><name>M680X_INS_PSHC</name></expr>:</case>
<case>case <expr><name>M680X_INS_PSHD</name></expr>:</case>
<case>case <expr><name>M680X_INS_PSHH</name></expr>:</case>
<case>case <expr><name>M680X_INS_PSHS</name></expr>:</case>
<case>case <expr><name>M680X_INS_PSHSW</name></expr>:</case>
<case>case <expr><name>M680X_INS_PSHU</name></expr>:</case>
<case>case <expr><name>M680X_INS_PSHUW</name></expr>:</case>
<case>case <expr><name>M680X_INS_PSHX</name></expr>:</case> 
<case>case <expr><name>M680X_INS_PSHY</name></expr>:</case>
<case>case <expr><name>M680X_INS_PULA</name></expr>:</case> 
<case>case <expr><name>M680X_INS_PULB</name></expr>:</case> 
<case>case <expr><name>M680X_INS_PULC</name></expr>:</case>
<case>case <expr><name>M680X_INS_PULD</name></expr>:</case>
<case>case <expr><name>M680X_INS_PULH</name></expr>:</case>
<case>case <expr><name>M680X_INS_PULS</name></expr>:</case>
<case>case <expr><name>M680X_INS_PULSW</name></expr>:</case>
<case>case <expr><name>M680X_INS_PULU</name></expr>:</case>
<case>case <expr><name>M680X_INS_PULUW</name></expr>:</case>
<case>case <expr><name>M680X_INS_PULX</name></expr>:</case> 
<case>case <expr><name>M680X_INS_PULY</name></expr>:</case>
<case>case <expr><name>M680X_INS_REV</name></expr>:</case>
<case>case <expr><name>M680X_INS_REVW</name></expr>:</case>
<case>case <expr><name>M680X_INS_ROL</name></expr>:</case>
<case>case <expr><name>M680X_INS_ROLA</name></expr>:</case>
<case>case <expr><name>M680X_INS_ROLB</name></expr>:</case>
<case>case <expr><name>M680X_INS_ROLD</name></expr>:</case>
<case>case <expr><name>M680X_INS_ROLW</name></expr>:</case>
<case>case <expr><name>M680X_INS_ROLX</name></expr>:</case>
<case>case <expr><name>M680X_INS_ROR</name></expr>:</case>
<case>case <expr><name>M680X_INS_RORA</name></expr>:</case>
<case>case <expr><name>M680X_INS_RORB</name></expr>:</case>
<case>case <expr><name>M680X_INS_RORD</name></expr>:</case>
<case>case <expr><name>M680X_INS_RORW</name></expr>:</case>
<case>case <expr><name>M680X_INS_RORX</name></expr>:</case>
<case>case <expr><name>M680X_INS_RSP</name></expr>:</case>
<case>case <expr><name>M680X_INS_RTC</name></expr>:</case>
<case>case <expr><name>M680X_INS_RTI</name></expr>:</case>
<case>case <expr><name>M680X_INS_RTS</name></expr>:</case>
<case>case <expr><name>M680X_INS_SBA</name></expr>:</case> 
<case>case <expr><name>M680X_INS_SBC</name></expr>:</case>
<case>case <expr><name>M680X_INS_SBCA</name></expr>:</case>
<case>case <expr><name>M680X_INS_SBCB</name></expr>:</case>
<case>case <expr><name>M680X_INS_SBCD</name></expr>:</case>
<case>case <expr><name>M680X_INS_SBCR</name></expr>:</case>
<case>case <expr><name>M680X_INS_SEC</name></expr>:</case>
<case>case <expr><name>M680X_INS_SEI</name></expr>:</case>
<case>case <expr><name>M680X_INS_SEV</name></expr>:</case>
<case>case <expr><name>M680X_INS_SEX</name></expr>:</case>
<case>case <expr><name>M680X_INS_SEXW</name></expr>:</case>
<case>case <expr><name>M680X_INS_SLP</name></expr>:</case>
<case>case <expr><name>M680X_INS_STA</name></expr>:</case>
<case>case <expr><name>M680X_INS_STAA</name></expr>:</case> 
<case>case <expr><name>M680X_INS_STAB</name></expr>:</case> 
<case>case <expr><name>M680X_INS_STB</name></expr>:</case>
<case>case <expr><name>M680X_INS_STBT</name></expr>:</case>
<case>case <expr><name>M680X_INS_STD</name></expr>:</case>
<case>case <expr><name>M680X_INS_STE</name></expr>:</case>
<case>case <expr><name>M680X_INS_STF</name></expr>:</case>
<case>case <expr><name>M680X_INS_STOP</name></expr>:</case>
<case>case <expr><name>M680X_INS_STHX</name></expr>:</case>
<case>case <expr><name>M680X_INS_STQ</name></expr>:</case>
<case>case <expr><name>M680X_INS_STS</name></expr>:</case>
<case>case <expr><name>M680X_INS_STU</name></expr>:</case>
<case>case <expr><name>M680X_INS_STW</name></expr>:</case>
<case>case <expr><name>M680X_INS_STX</name></expr>:</case>
<case>case <expr><name>M680X_INS_STY</name></expr>:</case>
<case>case <expr><name>M680X_INS_SUB</name></expr>:</case>
<case>case <expr><name>M680X_INS_SUBA</name></expr>:</case>
<case>case <expr><name>M680X_INS_SUBB</name></expr>:</case>
<case>case <expr><name>M680X_INS_SUBD</name></expr>:</case>
<case>case <expr><name>M680X_INS_SUBE</name></expr>:</case>
<case>case <expr><name>M680X_INS_SUBF</name></expr>:</case>
<case>case <expr><name>M680X_INS_SUBR</name></expr>:</case>
<case>case <expr><name>M680X_INS_SUBW</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M680X_INS_SWI</name></expr>:</case>
<case>case <expr><name>M680X_INS_SWI2</name></expr>:</case>
<case>case <expr><name>M680X_INS_SWI3</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SWI</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M680X_INS_SYNC</name></expr>:</case>
<case>case <expr><name>M680X_INS_TAB</name></expr>:</case> 
<case>case <expr><name>M680X_INS_TAP</name></expr>:</case> 
<case>case <expr><name>M680X_INS_TAX</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>M680X_INS_TBA</name></expr>:</case> 
<case>case <expr><name>M680X_INS_TBEQ</name></expr>:</case>
<case>case <expr><name>M680X_INS_TBL</name></expr>:</case>
<case>case <expr><name>M680X_INS_TBNE</name></expr>:</case>
<case>case <expr><name>M680X_INS_TEST</name></expr>:</case>
<case>case <expr><name>M680X_INS_TFM</name></expr>:</case>
<case>case <expr><name>M680X_INS_TFR</name></expr>:</case>
<case>case <expr><name>M680X_INS_TIM</name></expr>:</case>
<case>case <expr><name>M680X_INS_TPA</name></expr>:</case> 
<case>case <expr><name>M680X_INS_TST</name></expr>:</case>
<case>case <expr><name>M680X_INS_TSTA</name></expr>:</case>
<case>case <expr><name>M680X_INS_TSTB</name></expr>:</case>
<case>case <expr><name>M680X_INS_TSTD</name></expr>:</case>
<case>case <expr><name>M680X_INS_TSTE</name></expr>:</case>
<case>case <expr><name>M680X_INS_TSTF</name></expr>:</case>
<case>case <expr><name>M680X_INS_TSTW</name></expr>:</case>
<case>case <expr><name>M680X_INS_TSTX</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>M680X_INS_TSX</name></expr>:</case> 
<case>case <expr><name>M680X_INS_TSY</name></expr>:</case>
<case>case <expr><name>M680X_INS_TXA</name></expr>:</case>
<case>case <expr><name>M680X_INS_TXS</name></expr>:</case> 
<case>case <expr><name>M680X_INS_TYS</name></expr>:</case>
<case>case <expr><name>M680X_INS_WAI</name></expr>:</case> 
<case>case <expr><name>M680X_INS_WAIT</name></expr>:</case>
<case>case <expr><name>M680X_INS_WAV</name></expr>:</case>
<case>case <expr><name>M680X_INS_WAVR</name></expr>:</case>
<case>case <expr><name>M680X_INS_XGDX</name></expr>:</case> 
<case>case <expr><name>M680X_INS_XGDY</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
<label><name>beach</name>:</label>
<expr_stmt><expr><call><name>cs_free</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fin</name>:</label>
<return>return <expr><name>opsize</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>set_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= \
<expr><literal type="string">"=PC pc\n"</literal>
<literal type="string">"=SP sp\n"</literal>
<literal type="string">"=A0 a0\n"</literal>
<literal type="string">"=A1 a1\n"</literal>
<literal type="string">"gpr pc .16 48 0\n"</literal>
<literal type="string">"gpr sp .16 48 0\n"</literal>
<literal type="string">"gpr a0 .16 48 0\n"</literal>
<literal type="string">"gpr a1 .16 48 0\n"</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_m680x_cs</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"m680x"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Capstone M680X analysis plugin"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"BSD"</literal></expr>,
<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"m680x"</literal></expr>,
<expr><operator>.</operator><name>set_reg_profile</name> <operator>=</operator> <operator>&amp;</operator><name>set_reg_profile</name></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">16</literal> <operator>|</operator> <literal type="number">32</literal></expr>,
<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>analop</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_m680x_cs</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"m680x (unsupported)"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Capstone M680X analyzer (unsupported)"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"BSD"</literal></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"m680x"</literal></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_m680x_cs</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
