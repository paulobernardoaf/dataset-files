<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\p\anal_pic.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../asm/arch/pic/pic_midrange.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>_pic_midrange_op_args_val</name> <block>{
<decl_stmt><decl><type><name>ut16</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>b</name></decl>;</decl_stmt>
}</block></struct></type> <name>PicMidrangeOpArgsVal</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pic_midrange_inst_handler_t</name>) <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>,
<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>,
<parameter><decl><type><name>PicMidrangeOpArgsVal</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>_pic_midrange_op_anal_info</name> <block>{
<decl_stmt><decl><type><name>PicMidrangeOpcode</name></type> <name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PicMidrangeOpArgs</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pic_midrange_inst_handler_t</name></type> <name>handler</name></decl>;</decl_stmt>
}</block></struct></type> <name>PicMidrangeOpAnalInfo</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_HANDLER</name><parameter_list>(<parameter><type><name>OPCODE_NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void _inst__##OPCODE_NAME (RAnal *anal, RAnalOp *op, ut64 addr, PicMidrangeOpArgsVal *args)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_DECL</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>ARGS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ PIC_MIDRANGE_OPCODE_##NAME, PIC_MIDRANGE_OP_ARGS_##ARGS, _inst__##NAME }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>e</name><parameter_list>(<parameter><type><name>frag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_strbuf_append (&amp;op-&gt;esil, frag)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ef</name><parameter_list>(<parameter><type><name>frag</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_strbuf_appendf (&amp;op-&gt;esil, frag, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_MIDRANGE_ESIL_SRAM_START</name></cpp:macro> <cpp:value>(1 &lt;&lt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_MIDRANGE_ESIL_CSTACK_TOP</name></cpp:macro> <cpp:value>((1 &lt;&lt; 16) + (1 &lt;&lt; 12))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_MIDRANGE_ESIL_BSR_ADDR</name></cpp:macro> <cpp:value>"bsr,0x80,*,0x%x,+,_sram,+"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_MIDRANGE_ESIL_OPTION_ADDR</name></cpp:macro> <cpp:value>"0x95,_sram,+"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_MIDRANGE_ESIL_UPDATE_FLAGS</name></cpp:macro> <cpp:value>"$z,z,:=," "7,$c,c,:=," "4,$c,dc,:=,"</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_MIDRANGE_ESIL_LW_OP</name><parameter_list>(<parameter><type><name>O</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"0x%x,wreg," #O "=," PIC_MIDRANGE_ESIL_UPDATE_FLAGS</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_MIDRANGE_ESIL_FWF_OP</name><parameter_list>(<parameter><type><name>O</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"wreg," PIC_MIDRANGE_ESIL_BSR_ADDR "," #O "=[1]," PIC_MIDRANGE_ESIL_UPDATE_FLAGS</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_MIDRANGE_ESIL_WWF_OP</name><parameter_list>(<parameter><type><name>O</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PIC_MIDRANGE_ESIL_BSR_ADDR ",[1]," "wreg," #O "=," PIC_MIDRANGE_ESIL_UPDATE_FLAGS</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_MIDRANGE_ESIL_FWF_OP_C</name><parameter_list>(<parameter><type><name>O</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"c,wreg," "+," PIC_MIDRANGE_ESIL_BSR_ADDR "," #O "=[1]," PIC_MIDRANGE_ESIL_UPDATE_FLAGS</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_MIDRANGE_ESIL_WWF_OP_C</name><parameter_list>(<parameter><type><name>O</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"c," PIC_MIDRANGE_ESIL_BSR_ADDR ",[1]," #O "," "wreg," #O "=," PIC_MIDRANGE_ESIL_UPDATE_FLAGS</cpp:value></cpp:define>



<macro><name>INST_HANDLER</name> <argument_list>(<argument>NOP</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>RETFIE</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>OPTION</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>TRIS</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>RETURN</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"0x1f,stkptr,==,$z,?{,BREAK,},"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"_stack,stkptr,2,*,+,[2],2,*,pc,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"0x01,stkptr,-=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"0xff,stkptr,==,$z,?{,0x1f,stkptr,=,},"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>CALL</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>pclath</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_reg_read</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"pclath"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pclath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>pclath</name> <operator>&amp;</operator> <literal type="number">0x78</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>args</name><operator>-&gt;</operator><name>k</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"8,pclath,0x78,&amp;,&lt;&lt;,0x%x,+,2,*,pc,=,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"0x1f,stkptr,==,$z,?{,0xff,stkptr,=,},"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"0x0f,stkptr,==,$z,?{,0xff,stkptr,=,},"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"0x01,stkptr,+=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x%x,_stack,stkptr,2,*,+,=[2],"</literal></expr></argument>, <argument><expr><operator>(</operator><name>addr</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>GOTO</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>pclath</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_reg_read</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"pclath"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pclath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>pclath</name> <operator>&amp;</operator> <literal type="number">0x78</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>args</name><operator>-&gt;</operator><name>k</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"8,pclath,0x78,&amp;,&lt;&lt;,0x%x,+,2,*,pc,=,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>BCF</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>mask</name> <init>= <expr><operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>args</name><operator>-&gt;</operator><name>b</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><name>PIC_MIDRANGE_ESIL_BSR_ADDR</name>
<literal type="string">",[1],0x%x,&amp;,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",=[1],"</literal></expr></argument>,
<argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>BSF</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>args</name><operator>-&gt;</operator><name>b</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><name>PIC_MIDRANGE_ESIL_BSR_ADDR</name>
<literal type="string">",[1],0x%x,|,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",=[1],"</literal></expr></argument>,
<argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>BTFSC</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>args</name><operator>-&gt;</operator><name>b</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],0x%x,&amp;,!,?{,0x%x,pc,=,},"</literal></expr></argument>,
<argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>BTFSS</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>args</name><operator>-&gt;</operator><name>b</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],0x%x,&amp;,?{,0x%x,pc,=,},"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>,
<argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>BRA</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>st16</name></type> <name>branch</name> <init>= <expr><name><name>args</name><operator>-&gt;</operator><name>k</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>branch</name> <operator>|=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>branch</name> <operator>&amp;</operator> <literal type="number">0x100</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xfe00</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>branch</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"%s0x%x,1,+,2,*,pc,+=,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>branch</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>branch</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>branch</name></expr> </then><else>: <expr><name>branch</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>BRW</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>wreg</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_esil_reg_read</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"wreg"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>wreg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>wreg</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"wreg,1,+,2,*,pc,+=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>CLR</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x00,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",=[1],"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"0x00,wreg,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"1,z,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>SUBWF</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_FWF_OP</name> <argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_WWF_OP</name> <argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"wreg,0x00,-,wreg,=,c,!=,dc,!=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>DECFSZ</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x01,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",-=[1],"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x01,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],-,wreg,=,"</literal></expr></argument>,
<argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],!,?{,0x%x,pc,=,},"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>,
<argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>INCFSZ</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x01,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",+=[1],"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x01,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],+,wreg,=,"</literal></expr></argument>,
<argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],!,?{,0x%x,pc,=,},"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>,
<argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>INCF</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x01,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",+=[1],"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x01,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],+,wreg,=,"</literal></expr></argument>,
<argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"$z,z,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>DECF</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x01,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",-=[1],"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x01,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],-,wreg,=,"</literal></expr></argument>,
<argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"$z,z,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>IORWF</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_FWF_OP</name> <argument_list>(<argument><expr><operator>|</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_WWF_OP</name> <argument_list>(<argument><expr><operator>|</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>ANDWF</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_FWF_OP</name> <argument_list>(<argument><expr><operator>&amp;</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_WWF_OP</name> <argument_list>(<argument><expr><operator>&amp;</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>XORWF</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_FWF_OP</name> <argument_list>(<argument><expr><operator>^</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_WWF_OP</name> <argument_list>(<argument><expr><operator>^</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>ADDWF</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_FWF_OP</name> <argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_WWF_OP</name> <argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>SUBLW</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_LW_OP</name> <argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>ADDLW</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_LW_OP</name> <argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>IORLW</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_LW_OP</name> <argument_list>(<argument><expr><operator>|</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>ANDLW</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_LW_OP</name> <argument_list>(<argument><expr><operator>&amp;</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>XORLW</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_LW_OP</name> <argument_list>(<argument><expr><operator>^</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>MOVLW</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x%x,wreg,=,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>RETLW</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x%x,wreg,=,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"0x1f,stkptr,==,$z,?{,BREAK,},"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"_stack,stkptr,2,*,+,[2],2,*,pc,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"0x01,stkptr,-=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"0xff,stkptr,==,$z,?{,0x1f,stkptr,=,},"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>MOVLP</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x%x,pclath,=,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>MOVLB</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x%x,bsr,=,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>CALLW</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCALL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"8,pclath,&lt;&lt;,0x%x,+,wreg,2,*,pc,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"0x1f,stkptr,==,$z,?{,0xff,stkptr,=,},"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"0x0f,stkptr,==,$z,?{,0xff,stkptr,=,},"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"0x01,stkptr,+=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x%x,_stack,stkptr,2,*,+,=[2],"</literal></expr></argument>, <argument><expr><operator>(</operator><name>addr</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>MOVWF</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"wreg,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",=[1],"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>MOVF</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><name>PIC_MIDRANGE_ESIL_BSR_ADDR</name>
<literal type="string">",[1],"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",=[1],"</literal></expr></argument>,
<argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><name>PIC_MIDRANGE_ESIL_BSR_ADDR</name></expr></argument>, <argument><expr><literal type="string">",[1],wreg,=,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"$z,z,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>SWAPF</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"4,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],&gt;&gt;,0x0f,&amp;,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"4,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],&lt;&lt;,0xf0,&amp;,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"|,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",=[1],"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>LSLF</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"7,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],&gt;&gt;,c,=,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",&lt;&lt;=[1],"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],&lt;&lt;,wreg,=,"</literal></expr></argument>,
<argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"$z,z,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>LSRF</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],&amp;,c,=,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",&gt;&gt;=[1],"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],&gt;&gt;,wreg,=,"</literal></expr></argument>,
<argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"$z,z,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>ASRF</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],&amp;,c,=,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],&gt;&gt;,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x80,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],&amp;,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"|,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",=[1],"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"|,wreg,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"$z,z,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>RRF</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],&amp;,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",&gt;&gt;=[1],"</literal>
<literal type="string">"c,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",|=[1],"</literal></expr></argument>,
<argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],&gt;&gt;,wreg,=,"</literal>
<literal type="string">"c,wreg,|=[1],"</literal></expr></argument>,
<argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"c,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>RLF</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"7,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],&gt;&gt;,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",&lt;&lt;=[1],"</literal>
<literal type="string">"c,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",|=[1],"</literal></expr></argument>,
<argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",[1],&lt;&lt;,wreg,=,"</literal>
<literal type="string">"c,wreg,|=[1],"</literal></expr></argument>,
<argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"c,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>COMF</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0xff,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",^=[1],"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0xff,"</literal> <name>PIC_MIDRANGE_ESIL_BSR_ADDR</name> <literal type="string">",^,wreg,=,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"$z,z,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>RESET</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"0x0,pc,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"0x1f,stkptr,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>ADDFSR</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x%x,fsr0l,+=,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"7,$c,?{,0x01,fsr0h,+=,},"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x%x,fsr1l,+=,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"7,$c,?{,0x01,fsr1h,+=,},"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>CLRWDT</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"1,to,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"1,pd,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>SLEEP</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"1,to,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"0,pd,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>SUBWFB</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"c,!=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_FWF_OP_C</name> <argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_WWF_OP_C</name> <argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"wreg,0x00,-,wreg,=,c,!=,dc,!=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>ADDWFC</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_FWF_OP_C</name> <argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><call><name>PIC_MIDRANGE_ESIL_WWF_OP_C</name> <argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>MOVIW_1</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,fsr0l,%s=,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"7,$c%s,fsr0h,%s,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">",!"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"indf0,wreg,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"$z,z,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,fsr0l,%s=,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"7,$c%s,fsr0h,%s,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">",!"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,fsr1l,%s=,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"7,$c%s,fsr1h,%s,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">",!"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"indf1,wreg,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"$z,z,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,fsr1l,%s=,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"7,$c%s,fsr1h,%s,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">",!"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>MOVWI_1</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,fsr0l,%s=,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"$c7%s,fsr0h,%s,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">",!"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"wreg,indf0=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"$z,z,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,fsr0l,%s=,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"$c7%s,fsr0h,%s,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">",!"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,fsr1l,%s=,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"$c7,fsr1h,%s,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">",!"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"wreg,indf1=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"$z,z,:=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"1,fsr1l,%s=,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"$c7%s,fsr1h,%s,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">",!"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>m</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>MOVIW_2</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"fsr0l,8,fsr0h,&lt;&lt;,+,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"fsr1l,8,fsr1h,&lt;&lt;,+,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ef</name> <argument_list>(<argument><expr><literal type="string">"0x%x,+,[1],wreg,=,"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>INST_HANDLER</name> <argument_list>(<argument>MOVWI_2</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"wreg,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"fsr0l,8,fsr0h,&lt;&lt;,+,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"fsr1l,8,fsr1h,&lt;&lt;,+,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>e</name> <argument_list>(<argument><expr><literal type="string">"=[1],"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_MIDRANGE_OPINFO_LEN</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PicMidrangeOpAnalInfo</name></type> <name><name>pic_midrange_op_anal_info</name><index>[<expr><name>PIC_MIDRANGE_OPINFO_LEN</name></expr>]</index></name> <init>= <expr><block>{
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>NOP</name></expr></argument>, <argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>RETURN</name></expr></argument>, <argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>RETFIE</name></expr></argument>, <argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>OPTION</name></expr></argument>, <argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>SLEEP</name></expr></argument>, <argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>CLRWDT</name></expr></argument>, <argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>TRIS</name></expr></argument>, <argument><expr><literal type="number">2F</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>MOVWF</name></expr></argument>, <argument><expr><literal type="number">7F</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>CLR</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>SUBWF</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>DECF</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>IORWF</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>ANDWF</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>XORWF</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>ADDWF</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>MOVF</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>COMF</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>INCF</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>DECFSZ</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>RRF</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>RLF</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>SWAPF</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>INCFSZ</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>BCF</name></expr></argument>, <argument><expr><literal type="number">3B_7F</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>BSF</name></expr></argument>, <argument><expr><literal type="number">3B_7F</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>BTFSC</name></expr></argument>, <argument><expr><literal type="number">3B_7F</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>BTFSS</name></expr></argument>, <argument><expr><literal type="number">3B_7F</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>CALL</name></expr></argument>, <argument><expr><literal type="number">11K</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>GOTO</name></expr></argument>, <argument><expr><literal type="number">11K</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>MOVLW</name></expr></argument>, <argument><expr><literal type="number">8K</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>RETLW</name></expr></argument>, <argument><expr><literal type="number">8K</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>IORLW</name></expr></argument>, <argument><expr><literal type="number">8K</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>ANDLW</name></expr></argument>, <argument><expr><literal type="number">8K</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>XORLW</name></expr></argument>, <argument><expr><literal type="number">8K</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>SUBLW</name></expr></argument>, <argument><expr><literal type="number">8K</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>ADDLW</name></expr></argument>, <argument><expr><literal type="number">8K</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>CALLW</name></expr></argument>, <argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>BRW</name></expr></argument>, <argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>MOVIW_1</name></expr></argument>, <argument><expr><literal type="number">1N_2M</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>MOVWI_1</name></expr></argument>, <argument><expr><literal type="number">1N_2M</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>MOVLB</name></expr></argument>, <argument><expr><literal type="number">4K</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>LSLF</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>LSRF</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>ASRF</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>SUBWFB</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>ADDWFC</name></expr></argument>, <argument><expr><literal type="number">1D_7F</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>ADDFSR</name></expr></argument>, <argument><expr><literal type="number">1N_6K</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>MOVLP</name></expr></argument>, <argument><expr><literal type="number">7F</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>BRA</name></expr></argument>, <argument><expr><literal type="number">9K</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>INST_DECL</name> <argument_list>(<argument><expr><name>MOVIW_2</name></expr></argument>, <argument><expr><literal type="number">1N_6K</literal></expr></argument>)</argument_list></call></expr>, <macro><name>INST_DECL</name> <argument_list>(<argument>MOVWI_2</argument>, <argument><literal type="number">1N_6K</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>anal_pic_midrange_extract_args</name> <parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>,
<parameter><decl><type><name>PicMidrangeOpArgs</name></type> <name>args</name></decl></parameter>,
<parameter><decl><type><name>PicMidrangeOpArgsVal</name> <modifier>*</modifier></type><name>args_val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>args_val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>PicMidrangeOpArgsVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>args</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_NONE</name></expr>:</case> <return>return;</return>
<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_2F</name></expr>:</case>
<expr_stmt><expr><name><name>args_val</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_2F_MASK_F</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_7F</name></expr>:</case>
<expr_stmt><expr><name><name>args_val</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_7F_MASK_F</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>:</case>
<expr_stmt><expr><name><name>args_val</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_1D_7F_MASK_F</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args_val</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator>
<operator>(</operator><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_1D_7F_MASK_D</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_1N_6K</name></expr>:</case>
<expr_stmt><expr><name><name>args_val</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator>
<operator>(</operator><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_1N_6K_MASK_N</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args_val</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_1N_6K_MASK_K</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_3B_7F</name></expr>:</case>
<expr_stmt><expr><name><name>args_val</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator>
<operator>(</operator><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_3B_7F_MASK_B</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args_val</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_3B_7F_MASK_F</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_4K</name></expr>:</case>
<expr_stmt><expr><name><name>args_val</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_4K_MASK_K</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_8K</name></expr>:</case>
<expr_stmt><expr><name><name>args_val</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_8K_MASK_K</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_9K</name></expr>:</case>
<expr_stmt><expr><name><name>args_val</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_9K_MASK_K</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_11K</name></expr>:</case>
<expr_stmt><expr><name><name>args_val</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_11K_MASK_K</name></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_1N_2M</name></expr>:</case>
<expr_stmt><expr><name><name>args_val</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator>
<operator>(</operator><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_1N_2M_MASK_N</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args_val</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_1N_2M_MASK_M</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>RIODesc</name> <modifier>*</modifier></type><name>mem_sram</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RIODesc</name> <modifier>*</modifier></type><name>mem_stack</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>RIODesc</name> <modifier>*</modifier></type><name>cpu_memory_map</name> <parameter_list>(<parameter><decl><type><name>RIOBind</name> <modifier>*</modifier></type><name>iob</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>addr</name></decl></parameter>,
<parameter><decl><type><name>ut32</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mstr</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"malloc://%d"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>&amp;&amp;</operator> <call><name><name>iob</name><operator>-&gt;</operator><name>fd_get_name</name></name> <argument_list>(<argument><expr><name><name>iob</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>iob</name><operator>-&gt;</operator><name>fd_remap</name></name> <argument_list>(<argument><expr><name><name>iob</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name><name>iob</name><operator>-&gt;</operator><name>open_at</name></name> <argument_list>(<argument><expr><name><name>iob</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>mstr</name></expr></argument>, <argument><expr><name>R_PERM_RW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>desc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>pic_midrange_reg_write</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>regname</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>reg</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>regname</name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>anal_pic_midrange_malloc</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>init_done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init_done</name> <operator>||</operator> <name>force</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>mem_sram</name> <operator>=</operator>
<call><name>cpu_memory_map</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>anal</name><operator>-&gt;</operator><name>iob</name></name></expr></argument>, <argument><expr><name>mem_sram</name></expr></argument>,
<argument><expr><name>PIC_MIDRANGE_ESIL_SRAM_START</name></expr></argument>, <argument><expr><literal type="number">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mem_stack</name> <operator>=</operator>
<call><name>cpu_memory_map</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>anal</name><operator>-&gt;</operator><name>iob</name></name></expr></argument>, <argument><expr><name>mem_stack</name></expr></argument>,
<argument><expr><name>PIC_MIDRANGE_ESIL_CSTACK_TOP</name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pic_midrange_reg_write</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"_sram"</literal></expr></argument>,
<argument><expr><name>PIC_MIDRANGE_ESIL_SRAM_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pic_midrange_reg_write</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"_stack"</literal></expr></argument>,
<argument><expr><name>PIC_MIDRANGE_ESIL_CSTACK_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pic_midrange_reg_write</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"stkptr"</literal></expr></argument>, <argument><expr><literal type="number">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>init_done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>anal_pic_midrange_op</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>anal_pic_midrange_malloc</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PicMidrangeOpcode</name></type> <name>opcode</name> <init>= <expr><call><name>pic_midrange_get_opcode</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PicMidrangeOpArgsVal</name></type> <name>args_val</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PIC_MIDRANGE_OPINFO_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pic_midrange_op_anal_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opcode</name> <operator>==</operator> <name>opcode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>anal_pic_midrange_extract_args</name> <argument_list>(
<argument><expr><name>instr</name></expr></argument>, <argument><expr><name><name>pic_midrange_op_anal_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>args</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>args_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic_midrange_op_anal_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>handler</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>args_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pic18_cond_branch</name> <parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,?,{,0x%x,pc,=,}"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>anal_pic_pic18_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<goto>goto <name>beach</name>;</goto> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>b</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>dword_instr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dword_instr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dword_instr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x76</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dword_instr</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal> <operator>!=</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
<switch>switch <condition>(<expr><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content> 
<case>case <expr><literal type="number">0x1b</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x1a</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0x7ff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x,pc,="</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></switch>
<switch>switch <condition>(<expr><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content> 
<case>case <expr><literal type="number">0xf</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xc</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dword_instr</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal> <operator>!=</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xb</literal></expr>:</case> 
<case>case <expr><literal type="number">0xa</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x9</literal></expr>:</case> 
<case>case <expr><literal type="number">0x8</literal></expr>:</case> 
<case>case <expr><literal type="number">0x7</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<switch>switch <condition>(<expr><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content> 
<case>case <expr><literal type="number">0xe0</literal></expr>:</case> 
<expr_stmt><expr><call><name>pic18_cond_branch</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xe1</literal></expr>:</case> 
<expr_stmt><expr><call><name>pic18_cond_branch</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"z,!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xe3</literal></expr>:</case> 
<expr_stmt><expr><call><name>pic18_cond_branch</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"c,!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xe4</literal></expr>:</case> 
<expr_stmt><expr><call><name>pic18_cond_branch</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"ov"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xe5</literal></expr>:</case> 
<expr_stmt><expr><call><name>pic18_cond_branch</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"ov,!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xe6</literal></expr>:</case> 
<expr_stmt><expr><call><name>pic18_cond_branch</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xe7</literal></expr>:</case> 
<expr_stmt><expr><call><name>pic18_cond_branch</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"n,!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xe2</literal></expr>:</case> 
<expr_stmt><expr><call><name>pic18_cond_branch</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xef</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dword_instr</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal> <operator>!=</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>dword_instr</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>dword_instr</name> <operator>&amp;</operator> <literal type="number">0xfff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x,pc,="</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xf</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x,wreg,+=,$z,z,:=,7,$s,n,:=,7,$c,c,:=,7,$o,ov,:=,"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xe</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x,wreg,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xd</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x,wreg,*,prod,="</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xc</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x,wreg,=,tos,pc,=,"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xb</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x,wreg,&amp;=,$z,z,:=,7,$s,n,:=,"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xa</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x,wreg,^=,$z,z,:=,7,$s,n,:=,"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x9</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x,wreg,^=,$z,z,:=,7,$s,n,:=,"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x8</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"wreg,0x%x,-,wreg,=,$z,z,:=,7,$s,n,:=,7,$c,c,:=,7,$o,ov,:=,"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<switch>switch <condition>(<expr><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content> 
<case>case <expr><literal type="number">0x3b8</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dword_instr</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal> <operator>!=</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>beach</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
<switch>switch <condition>(<expr><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content> 
<case>case <expr><literal type="number">0x17</literal></expr>:</case> 
<case>case <expr><literal type="number">0x16</literal></expr>:</case> 
<case>case <expr><literal type="number">0x15</literal></expr>:</case> 
<case>case <expr><literal type="number">0x13</literal></expr>:</case> 
<case>case <expr><literal type="number">0xb</literal></expr>:</case> 
<case>case <expr><literal type="number">0x1</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x14</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x12</literal></expr>:</case> 
<case>case <expr><literal type="number">0xf</literal></expr>:</case> 
<case>case <expr><literal type="number">0xa</literal></expr>:</case> 
<case>case <expr><literal type="number">0x8</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x9</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x11</literal></expr>:</case> 
<case>case <expr><literal type="number">0xd</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROL</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x10</literal></expr>:</case> 
<case>case <expr><literal type="number">0xc</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROR</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xe</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x7</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CPL</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x6</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x5</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x4</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
<switch>switch <condition>(<expr><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content> 
<case>case <expr><literal type="number">0x37</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x36</literal></expr>:</case> 
<case>case <expr><literal type="number">0x35</literal></expr>:</case> 
<case>case <expr><literal type="number">0x34</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x33</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x32</literal></expr>:</case> 
<case>case <expr><literal type="number">0x31</literal></expr>:</case> 
<case>case <expr><literal type="number">0x30</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x1</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
<switch>switch <condition>(<expr><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x10</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x,bsr,=,"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
<switch>switch <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0xff</literal></expr>:</case> 
<case>case <expr><literal type="number">0x7</literal></expr>:</case> 
<case>case <expr><literal type="number">0x4</literal></expr>:</case> 
<case>case <expr><literal type="number">0x3</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x13</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"tos,pc,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x12</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"tos,pc,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x11</literal></expr>:</case> 
<case>case <expr><literal type="number">0x10</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xf</literal></expr>:</case> 
<case>case <expr><literal type="number">0xe</literal></expr>:</case> 
<case>case <expr><literal type="number">0xd</literal></expr>:</case> 
<case>case <expr><literal type="number">0xc</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0xb</literal></expr>:</case> 
<case>case <expr><literal type="number">0xa</literal></expr>:</case> 
<case>case <expr><literal type="number">0x9</literal></expr>:</case> 
<case>case <expr><literal type="number">0x8</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x6</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x5</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<case>case <expr><literal type="number">0x0</literal></expr>:</case> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
<label><name>beach</name>:</label>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>anal_pic_midrange_set_reg_profile</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"=PC pc\n"</literal>
<literal type="string">"=SP stkptr\n"</literal>
<literal type="string">"gpr indf0 .8 0 0\n"</literal>
<literal type="string">"gpr indf1 .8 1 0\n"</literal>
<literal type="string">"gpr pcl .8 2 0\n"</literal>
<literal type="string">"gpr status .8 3 0\n"</literal>
<literal type="string">"flg c .1 3.0 0\n"</literal>
<literal type="string">"flg dc .1 3.1 0\n"</literal>
<literal type="string">"flg z .1 3.2 0\n"</literal>
<literal type="string">"flg pd .1 3.3 0\n"</literal>
<literal type="string">"flg to .1 3.4 0\n"</literal>
<literal type="string">"gpr fsr0l .8 4 0\n"</literal>
<literal type="string">"gpr fsr0h .8 5 0\n"</literal>
<literal type="string">"gpr fsr1l .8 6 0\n"</literal>
<literal type="string">"gpr fsr1h .8 7 0\n"</literal>
<literal type="string">"gpr bsr .8 8 0\n"</literal>
<literal type="string">"gpr wreg .8 9 0\n"</literal>
<literal type="string">"gpr pclath .8 10 0\n"</literal>
<literal type="string">"gpr intcon .8 11 0\n"</literal>
<literal type="string">"gpr pc .16 12 0\n"</literal>
<literal type="string">"gpr stkptr .8 14 0\n"</literal>
<literal type="string">"gpr _sram .32 15 0\n"</literal>
<literal type="string">"gpr _stack .32 19 0\n"</literal></expr>;</expr_stmt>

<return>return <expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>anal_pic_pic18_set_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator>
<literal type="string">"#pc lives in nowhere actually"</literal>
<literal type="string">"=PC pc\n"</literal>
<literal type="string">"=SP tos\n"</literal>
<literal type="string">"gpr pc .32 0 0\n"</literal>
<literal type="string">"gpr pcl .8 0 0\n"</literal>
<literal type="string">"gpr pclath .8 1 0\n"</literal>
<literal type="string">"gpr pclatu .8 2 0\n"</literal>
<literal type="string">"#bsr max is 0b111\n"</literal>
<literal type="string">"gpr bsr .8 4 0\n"</literal>
<literal type="string">"#tos doesn't exist\n"</literal>
<literal type="string">"#general rule of thumb any register of size &gt;8 bits has no existence\n"</literal>
<literal type="string">"gpr tos .32 5 0\n"</literal>
<literal type="string">"gpr tosl .8 5 0\n"</literal>
<literal type="string">"gpr tosh .8 6 0\n"</literal>
<literal type="string">"gpr tosu .8 7 0\n"</literal>

<literal type="string">"gpr indf0 .16 9 0\n"</literal>
<literal type="string">"gpr fsr0 .12 9 0\n"</literal>
<literal type="string">"gpr fsr0l .8 9 0\n"</literal>
<literal type="string">"gpr fsr0h .8 10 0\n"</literal>
<literal type="string">"gpr indf1 .16 11 0\n"</literal>
<literal type="string">"gpr fsr1 .12 11 0\n"</literal>
<literal type="string">"gpr fsr1l .8 11 0\n"</literal>
<literal type="string">"gpr fsr1h .8 12 0\n"</literal>
<literal type="string">"gpr indf2 .16 13 0\n"</literal>
<literal type="string">"gpr fsr2 .12 13 0\n"</literal>
<literal type="string">"gpr frs2l .8 13 0\n"</literal>
<literal type="string">"gpr fsr2h .8 14 0\n"</literal>
<literal type="string">"gpr tblptr .22 15 0\n"</literal>
<literal type="string">"gpr tblptrl .8 15 0\n"</literal>
<literal type="string">"gpr tblptrh .8 16 0\n"</literal>
<literal type="string">"gpr tblptru .8 17 0\n"</literal>
<literal type="string">"gpr rcon .8 18 0\n"</literal>
<literal type="string">"gpr memcon .8 19 0\n"</literal>
<literal type="string">"gpr intcon .8 20 0\n"</literal>
<literal type="string">"gpr intcon2 .8 21 0\n"</literal>
<literal type="string">"gpr intcon3 .8 22 0\n"</literal>
<literal type="string">"gpr pie1 .8 23 0\n"</literal>
<literal type="string">"gpr porta .7 29 0\n"</literal>
<literal type="string">"gpr trisa .8 30 0\n"</literal>
<literal type="string">"gpr portb .8 33 0\n"</literal>
<literal type="string">"gpr tisb .8 34 0\n"</literal>
<literal type="string">"gpr latb .8 35 0\n"</literal>
<literal type="string">"gpr portc .8 36 0\n"</literal>
<literal type="string">"gpr trisc .8 37 0\n"</literal>
<literal type="string">"gpr latc .8 38 0\n"</literal>
<literal type="string">"gpr portd .8 39 0\n"</literal>
<literal type="string">"gpr trisd .8 40 0\n"</literal>
<literal type="string">"gpr latd .8 41 0\n"</literal>
<literal type="string">"gpr pspcon .8 42 0\n"</literal>
<literal type="string">"gpr porte .8 43 0\n"</literal>
<literal type="string">"gpr trise .8 44 0\n"</literal>
<literal type="string">"gpr late .8 45 0\n"</literal>
<literal type="string">"gpr t0con .8 46 0\n"</literal>
<literal type="string">"gpr t1con .8 47 0\n"</literal>
<literal type="string">"gpr t2con .8 48 0\n"</literal>
<literal type="string">"gpr tmr1h .8 50 0\n"</literal>
<literal type="string">"gpr tmr0h .8 51 0\n"</literal>
<literal type="string">"gpr tmr1l .8 52 0\n"</literal>
<literal type="string">"gpr tmr2 .8 53 0\n"</literal>
<literal type="string">"gpr pr2 .8 54 0\n"</literal>
<literal type="string">"gpr ccpr1h .8 55 0\n"</literal>
<literal type="string">"gpr postinc2 .8 56 0\n"</literal>
<literal type="string">"gpr ccpr1l .8 57 0\n"</literal>
<literal type="string">"gpr postdec2 .8 58 0\n"</literal>
<literal type="string">"gpr ccp1con .8 59 0\n"</literal>
<literal type="string">"gpr preinc2 .8 60 0\n"</literal>
<literal type="string">"gpr ccpr2h .8 61 0\n"</literal>
<literal type="string">"gpr plusw2 .8 62 0\n"</literal>
<literal type="string">"gpr ccpr2l .8 63 0\n"</literal>
<literal type="string">"gpr ccp2con .8 64 0\n"</literal>
<literal type="string">"gpr status .8 65 0\n"</literal>
<literal type="string">"flg c .1 .520 0\n"</literal>
<literal type="string">"flg dc .1 .521 0\n"</literal>
<literal type="string">"flg z .1 .522 0\n"</literal>
<literal type="string">"flg ov .1 .523 0\n"</literal>
<literal type="string">"flg n .1 .524 0\n"</literal>
<literal type="string">"gpr prod .16 66 0\n"</literal>
<literal type="string">"gpr prodl .8 66 0\n"</literal>
<literal type="string">"gpr prodh .8 67 0\n"</literal>
<literal type="string">"gpr osccon .8 68 0\n"</literal>
<literal type="string">"gpr tmr3h .8 69 0\n"</literal>
<literal type="string">"gpr lvdcon .8 70 0\n"</literal>
<literal type="string">"gpr tmr3l .8 71 0\n"</literal>
<literal type="string">"gpr wdtcon .8 72 0\n"</literal>
<literal type="string">"gpr t3con .8 73 0\n"</literal>
<literal type="string">"gpr spbrg .8 74 0\n"</literal>
<literal type="string">"gpr postinc0 .8 75 0\n"</literal>
<literal type="string">"gpr rcreg .8 76 0\n"</literal>
<literal type="string">"gpr postdec0 .8 77 0\n"</literal>
<literal type="string">"gpr txreg .8 78 0\n"</literal>
<literal type="string">"gpr preinc0 .8 79 0\n"</literal>
<literal type="string">"gpr txsta .8 80 0\n"</literal>
<literal type="string">"gpr plusw0 .8 81 0\n"</literal>
<literal type="string">"gpr rcsta .8 82 0\n"</literal>
<literal type="string">"gpr sspbuf .8 83 0\n"</literal>
<literal type="string">"gpr wreg .8 84 0\n"</literal>
<literal type="string">"gpr sspadd .8 85 0\n"</literal>
<literal type="string">"gpr sspstat .8 86 0\n"</literal>
<literal type="string">"gpr postinc1 .8 87 0\n"</literal>
<literal type="string">"gpr sspcon1 .8 88 0\n"</literal>
<literal type="string">"gpr postdec1 .8 89 0\n"</literal>
<literal type="string">"gpr sspcon2 .8 90 0\n"</literal>
<literal type="string">"gpr preinc1 .8 91 0\n"</literal>
<literal type="string">"gpr adresh .8 92 0\n"</literal>
<literal type="string">"gpr plusw1 .8 93 0\n"</literal>
<literal type="string">"gpr adresl .8 94 0\n"</literal>
<literal type="string">"gpr adcon0 .8 95 0\n"</literal>
<literal type="string">"#stkprt max is 0b11111\n"</literal>
<literal type="string">"gpr stkptr .8 96 0\n"</literal>
<literal type="string">"gpr tablat .8 14 0\n"</literal></expr>;</expr_stmt>

<return>return <expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>anal_pic_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"baseline"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"midrange"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>anal_pic_midrange_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"pic18"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>anal_pic_pic18_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>anal_pic_set_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"baseline"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>anal_pic_midrange_set_reg_profile</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"midrange"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>anal_pic_midrange_set_reg_profile</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"pic18"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>anal_pic_pic18_set_reg_profile</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_pic</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"pic"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"PIC analysis plugin"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"pic"</literal></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">8</literal></expr>,
<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>anal_pic_op</name></expr>,
<expr><operator>.</operator><name>set_reg_profile</name> <operator>=</operator> <operator>&amp;</operator><name>anal_pic_set_reg_profile</name></expr>,
<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>true</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_pic</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
