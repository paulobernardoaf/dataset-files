<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\p\anal_mcore.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../asm/arch/mcore/mcore.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mcore_anal</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>mcore_handle</name></type> <name>handle</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mcore_t</name><modifier>*</modifier></type> <name>instr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mcore_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[!] mcore: bad or invalid data.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>instr</name> <operator>=</operator> <call><name>mcore_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>instr</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>instr</name><operator>-&gt;</operator><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>instr</name><operator>-&gt;</operator><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_ICALL</name></expr>:</case>



<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_RET</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_ILL</name></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>mcore_free</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"=PC pc\n"</literal>
<literal type="string">"=SP r1\n"</literal>
<literal type="string">"=SR sr\n"</literal>
<literal type="string">"=A0 r3\n"</literal>
<literal type="string">"=A1 r4\n"</literal>
<literal type="string">"=A2 r5\n"</literal>
<literal type="string">"=A3 r6\n"</literal>
<literal type="string">"=A4 r7\n"</literal>
<literal type="string">"=A5 r8\n"</literal>
<literal type="string">"=A6 r6\n"</literal>
<literal type="string">"gpr r0 .32 0 0\n"</literal>
<literal type="string">"gpr r1 .32 4 0\n"</literal>
<literal type="string">"gpr r2 .32 8 0\n"</literal>
<literal type="string">"gpr r3 .32 12 0\n"</literal>
<literal type="string">"gpr r4 .32 16 0\n"</literal>
<literal type="string">"gpr r5 .32 20 0\n"</literal>
<literal type="string">"gpr r6 .32 24 0\n"</literal>
<literal type="string">"gpr r7 .32 28 0\n"</literal>
<literal type="string">"gpr r8 .32 32 0\n"</literal>
<literal type="string">"gpr r9 .32 36 0\n"</literal>
<literal type="string">"gpr r10 .32 40 0\n"</literal>
<literal type="string">"gpr r11 .32 44 0\n"</literal>
<literal type="string">"gpr r12 .32 48 0\n"</literal>
<literal type="string">"gpr r13 .32 52 0\n"</literal>
<literal type="string">"gpr r14 .32 56 0\n"</literal>
<literal type="string">"gpr r15 .32 60 0\n"</literal>

<literal type="string">"gpr psr .32 64 0\n"</literal>
<literal type="string">"gpr vbr .32 68 0\n"</literal>
<literal type="string">"gpr epsr .32 72 0\n"</literal>
<literal type="string">"gpr fpsr .32 76 0\n"</literal>
<literal type="string">"gpr epc .32 80 0\n"</literal>
<literal type="string">"gpr fpc .32 84 0\n"</literal>
<literal type="string">"gpr ss0 .32 88 0\n"</literal>
<literal type="string">"gpr ss1 .32 92 0\n"</literal>
<literal type="string">"gpr ss2 .32 96 0\n"</literal>
<literal type="string">"gpr ss3 .32 100 0\n"</literal>
<literal type="string">"gpr ss4 .32 104 0\n"</literal>
<literal type="string">"gpr gcr .32 108 0\n"</literal>
<literal type="string">"gpr gsr .32 112 0\n"</literal>
<literal type="string">"gpr cpidr .32 116 0\n"</literal>
<literal type="string">"gpr dcsr .32 120 0\n"</literal>
<literal type="string">"gpr cwr .32 124 0\n"</literal>
<literal type="string">"gpr cr16 .32 128 0\n"</literal>
<literal type="string">"gpr cfr .32 132 0\n"</literal>
<literal type="string">"gpr ccr .32 136 0\n"</literal>
<literal type="string">"gpr capr .32 140 0\n"</literal>
<literal type="string">"gpr pacr .32 144 0\n"</literal>
<literal type="string">"gpr prsr .32 148 0\n"</literal>

<literal type="string">"gpr cr22 .32 152 0\n"</literal>
<literal type="string">"gpr cr23 .32 156 0\n"</literal>
<literal type="string">"gpr cr24 .32 160 0\n"</literal>
<literal type="string">"gpr cr25 .32 164 0\n"</literal>
<literal type="string">"gpr cr26 .32 168 0\n"</literal>
<literal type="string">"gpr cr27 .32 172 0\n"</literal>
<literal type="string">"gpr cr28 .32 176 0\n"</literal>
<literal type="string">"gpr cr29 .32 180 0\n"</literal>
<literal type="string">"gpr cr30 .32 184 0\n"</literal>
<literal type="string">"gpr cr31 .32 188 0\n"</literal>
<literal type="string">"gpr pc .32 192 0\n"</literal></expr>;</expr_stmt>
<return>return <expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>archinfo</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_mcore</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mcore"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"MCore analysis plugin"</literal></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"mcore"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,
<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>mcore_anal</name></expr>,
<expr><operator>.</operator><name>archinfo</name> <operator>=</operator> <name>archinfo</name></expr>,
<expr><operator>.</operator><name>set_reg_profile</name> <operator>=</operator> <operator>&amp;</operator><name>set_reg_profile</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_mcore</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
