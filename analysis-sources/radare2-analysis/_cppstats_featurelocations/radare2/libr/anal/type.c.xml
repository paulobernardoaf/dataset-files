<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\type.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sdb/sdb.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>is_type</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"=type"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>name</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"=struct"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>name</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"=union"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>name</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"=enum"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>name</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"=typedef"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>name</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"=func"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>save_type_size</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb_types</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>sdb_types</name> <operator>&amp;&amp;</operator> <name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sdb_exists</name> <argument_list>(<argument><expr><name>sdb_types</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>(</operator><name>type</name> <operator>=</operator> <call><name>sdb_const_get</name> <argument_list>(<argument><expr><name>sdb_types</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type_name_size</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s.%s"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"!size"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>type_name_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>r_type_get_bitsize</name> <argument_list>(<argument><expr><name>sdb_types</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>sdb_types</name></expr></argument>, <argument><expr><name>type_name_size</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>type_name_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>__save_parsed_type_size</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parsed</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>anal</name> <operator>&amp;&amp;</operator> <name>parsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>parsed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"=struct\n"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"=union\n"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>+</operator> <name>offset</name> <operator>==</operator> <name>ptr</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>ptr</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>name</name> <operator>&gt;</operator> <name>str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>save_type_size</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>str</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_remove_parsed_type</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>anal</name> <operator>&amp;&amp;</operator> <name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>TDB</name> <init>= <expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>sdb_const_get</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>type</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>tmp_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_type_del</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s.%s."</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>sdb_foreach_list</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>ls_foreach</name> <argument_list>(<argument>l</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_type_del</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_save_parsed_type</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parsed</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>anal</name> <operator>&amp;&amp;</operator> <name>parsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>parsed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>type</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>is_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>cur</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>name</name> <operator>&gt;</operator> <name>type</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>name</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>r_anal_remove_parsed_type</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>sdb_query_lines</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><name>parsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__save_parsed_type_size</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>parsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>typecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type1</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type2</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>type1</name></expr></argument> , <argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_anal_types_from_fcn</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalVar</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_anal_var_all_list</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>type_used</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>var</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>type_used</name></expr></argument> , <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>uniq</name> <init>= <expr><call><name>r_list_uniq</name> <argument_list>(<argument><expr><name>type_used</name></expr></argument> , <argument><expr><name>typecmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>type_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>uniq</name></expr>;</return>
</block_content>}</block></function>
</unit>
