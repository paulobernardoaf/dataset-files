<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\flirt.c">


































































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cmd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_sign.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__386</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__Z80</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__I860</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__8051</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__TMS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__6502</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__PDP</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__68K</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__JAVA</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__6800</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__ST7</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__MC6812</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__MIPS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__ARM</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__TMSC6</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__PPC</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__80196</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__Z8</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__SH</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__NET</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__AVR</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__H8</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__PIC</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__SPARC</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__ALPHA</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__HPPA</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__H8500</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__TRICORE</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__DSP56K</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__C166</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__ST20</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__IA64</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__I960</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__F2MC</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__TMS320C54</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__TMS320C55</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__TRIMEDIA</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__M32R</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__NEC_78K0</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__NEC_78K0S</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__M740</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__M7700</name></cpp:macro> <cpp:value>41</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__ST9</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__FR</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__MC6816</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__M7900</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__TMS320C3</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__KR1878</name></cpp:macro> <cpp:value>47</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__AD218X</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__OAKDSP</name></cpp:macro> <cpp:value>49</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__TLCS900</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__C39</name></cpp:macro> <cpp:value>51</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__CR16</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__MN102L00</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__TMS320C1X</name></cpp:macro> <cpp:value>54</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__NEC_V850X</name></cpp:macro> <cpp:value>55</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__SCR_ADPT</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__EBC</name></cpp:macro> <cpp:value>57</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__MSP430</name></cpp:macro> <cpp:value>58</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__SPU</name></cpp:macro> <cpp:value>59</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__ARCH__DALVIK</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__DOS_EXE_OLD</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__DOS_COM_OLD</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__BIN</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__DOSDRV</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__NE</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__INTELHEX</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__MOSHEX</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__LX</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__LE</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__NLM</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__COFF</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__PE</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__OMF</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__SREC</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__ZIP</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__OMFLIB</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__AR</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__LOADER</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__ELF</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__W32RUN</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__AOUT</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__PILOT</name></cpp:macro> <cpp:value>0x00200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__DOS_EXE</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__DOS_COM</name></cpp:macro> <cpp:value>0x00800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FILE__AIXAR</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__OS__MSDOS</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__OS__WIN</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__OS__OS2</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__OS__NETWARE</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__OS__UNIX</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__OS__OTHER</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__APP__CONSOLE</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__APP__GRAPHICS</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__APP__EXE</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__APP__DLL</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__APP__DRV</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__APP__SINGLE_THREADED</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__APP__MULTI_THREADED</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__APP__16_BIT</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__APP__32_BIT</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__APP__64_BIT</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FEATURE__STARTUP</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FEATURE__CTYPE_CRC</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FEATURE__2BYTE_CTYPE</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FEATURE__ALT_CTYPE_CRC</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FEATURE__COMPRESSED</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__PARSE__MORE_PUBLIC_NAMES</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__PARSE__READ_TAIL_BYTES</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__PARSE__READ_REFERENCED_FUNCTIONS</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__PARSE__MORE_MODULES_WITH_SAME_CRC</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__PARSE__MORE_MODULES</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FUNCTION__LOCAL</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDASIG__FUNCTION__UNRESOLVED_COLLISION</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <name>idasig_v5_t</name> <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name><name>magic</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name></type> <name>version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name></type> <name>arch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>file_types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>os_types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>app_types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>features</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>old_n_functions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>crc16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>ctype</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name></type> <name>library_name_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>ctypes_crc16</name></decl>;</decl_stmt>
}</block></struct></type> <name>idasig_v5_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>idasig_v6_v7_t</name> <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>n_functions</name></decl>;</decl_stmt>
}</block></struct></type> <name>idasig_v6_v7_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>idasig_v8_v9_t</name> <block>{
<decl_stmt><decl><type><name>ut16</name></type> <name>pattern_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>idasig_v8_v9_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>idasig_v10_t</name> <block>{
<decl_stmt><decl><type><name>ut16</name></type> <name>unknown</name></decl>;</decl_stmt>
}</block></struct></type> <name>idasig_v10_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>header_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_FLIRT_NAME_MAX</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>RFlirtTailByte</name> <block>{
<decl_stmt><decl><type><name>ut16</name></type> <name>offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name></type> <name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>RFlirtTailByte</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RFlirtFunction</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>R_FLIRT_NAME_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name></type> <name>negative_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name></type> <name>is_local</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name></type> <name>is_collision</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RFlirtFunction</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RFlirtModule</name> <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>crc_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>crc16</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>ut16</name></type> <name>length</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>public_functions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>tail_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>referenced_functions</name></decl>;</decl_stmt>
}</block></struct></type> <name>RFlirtModule</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RFlirtNode</name> <block>{
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>child_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>module_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>length</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>variant_mask</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>pattern_bytes</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>variant_bool_array</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RFlirtNode</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name></type> <name>version</name></decl>;</decl_stmt> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLY</name></cpp:macro> <cpp:value>0x8408</cpp:value></cpp:define>
<function><type><name>ut16</name></type> <name>crc16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data_p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>crc</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>*</operator><name>data_p</name><operator>++</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>crc</name> <operator>^</operator> <name>data</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>POLY</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>data</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <operator>~</operator><name>crc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>crc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ut16</name><operator>)</operator> <operator>(</operator><name>crc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>buf_eof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>buf_err</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>read_byte</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>length</name> <operator>=</operator> <call><name>r_buf_read</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf_err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf_eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>read_short</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>r</name> <init>= <expr><operator>(</operator><call><name>read_byte</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>read_byte</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>read_word</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>r</name> <init>= <expr><operator>(</operator><call><name>read_short</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>read_short</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>read_max_2_bytes</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>r</name> <init>= <expr><call><name>read_byte</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>
?</condition><then> <expr><operator>(</operator><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <call><name>read_byte</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>r</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>read_multiple_bytes</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>r</name> <init>= <expr><call><name>read_byte</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0xc0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <call><name>read_byte</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0xe0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>read_byte</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>read_short</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>read_word</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>module_free</name><parameter_list>(<parameter><decl><type><name>RFlirtModule</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>module</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>module</name><operator>-&gt;</operator><name>public_functions</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>public_functions</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>public_functions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>module</name><operator>-&gt;</operator><name>tail_bytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>tail_bytes</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>tail_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>module</name><operator>-&gt;</operator><name>referenced_functions</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>referenced_functions</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>referenced_functions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>node_free</name><parameter_list>(<parameter><decl><type><name>RFlirtNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>variant_bool_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pattern_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>module_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>module_list</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator><name>module_free</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>module_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>child_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>child_list</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator> <name>node_free</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>child_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_module</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RFlirtModule</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>pub_func_it</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref_func_it</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tail_byte_it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlirtFunction</name> <modifier>*</modifier></type><name>func</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlirtTailByte</name> <modifier>*</modifier></type><name>tail_byte</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%02X %04X %04X "</literal></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>crc_length</name></name></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>crc16</name></name></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>module-&gt;public_functions</argument>, <argument>pub_func_it</argument>, <argument>func</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>func</name><operator>-&gt;</operator><name>is_local</name></name> <operator>||</operator> <name><name>func</name><operator>-&gt;</operator><name>is_collision</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>func</name><operator>-&gt;</operator><name>is_local</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>func</name><operator>-&gt;</operator><name>is_collision</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%04X:%s"</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pub_func_it</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name><name>module</name><operator>-&gt;</operator><name>tail_bytes</name></name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>module-&gt;tail_bytes</argument>, <argument>tail_byte_it</argument>, <argument>tail_byte</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" (%04X: %02X)"</literal></expr></argument>, <argument><expr><name><name>tail_byte</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>tail_byte</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>module</name><operator>-&gt;</operator><name>referenced_functions</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" (REF "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>module-&gt;referenced_functions</argument>, <argument>ref_func_it</argument>, <argument>ref_func</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%04X: %s"</literal></expr></argument>, <argument><expr><name><name>ref_func</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>ref_func</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ref_func_it</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>print_node_pattern</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RFlirtNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>variant_bool_array</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%02X"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>pattern_bytes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">":\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_indentation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>r_str_pad</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RFlirtNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>child_it</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>module_it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlirtNode</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlirtModule</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>pattern_bytes</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>print_indentation</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_node_pattern</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>child_list</name></name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>node-&gt;child_list</argument>, <argument>child_it</argument>, <argument>child</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>print_node</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>module_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>node-&gt;module_list</argument>, <argument>module_it</argument>, <argument>module</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>print_indentation</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%d. "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_module</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>module_match_buffer</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RFlirtModule</name> <modifier>*</modifier></type><name>module</name></decl></parameter>,
<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>buf_size</name></decl></parameter>)</parameter_list> <block>{<block_content>



<decl_stmt><decl><type><name>RFlirtFunction</name> <modifier>*</modifier></type><name>flirt_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>next_module_function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>tail_byte_it</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>flirt_func_it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlirtTailByte</name> <modifier>*</modifier></type><name>tail_byte</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">32</literal> <operator>+</operator> <name><name>module</name><operator>-&gt;</operator><name>crc_length</name></name> <operator>&lt;</operator> <name>buf_size</name> <operator>&amp;&amp;</operator>
<name><name>module</name><operator>-&gt;</operator><name>crc16</name></name> <operator>!=</operator> <call><name>crc16</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>crc_length</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>module</name><operator>-&gt;</operator><name>tail_bytes</name></name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>module-&gt;tail_bytes</argument>, <argument>tail_byte_it</argument>, <argument>tail_byte</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">32</literal> <operator>+</operator> <name><name>module</name><operator>-&gt;</operator><name>crc_length</name></name> <operator>+</operator> <name><name>tail_byte</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name>buf_size</name> <operator>&amp;&amp;</operator>
<name><name>b</name><index>[<expr><literal type="number">32</literal> <operator>+</operator> <name><name>module</name><operator>-&gt;</operator><name>crc_length</name></name> <operator>+</operator> <name><name>tail_byte</name><operator>-&gt;</operator><name>offset</name></name></expr>]</index></name> <operator>!=</operator> <name><name>tail_byte</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>



<macro><name>r_list_foreach</name> <argument_list>(<argument>module-&gt;public_functions</argument>, <argument>flirt_func_it</argument>, <argument>flirt_func</argument>)</argument_list></macro> <block>{<block_content>



<expr_stmt><expr><name>next_module_function</name> <operator>=</operator> <call><name>r_anal_get_function_at</name> <argument_list>(<argument><expr><operator>(</operator><name>RAnal</name> <operator>*</operator><operator>)</operator> <name>anal</name></expr></argument>, <argument><expr><name>address</name> <operator>+</operator> <name><name>flirt_func</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next_module_function</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_offs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>next_module_function_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ut64</name></type> <name>flirt_fcn_size</name> <init>= <expr><name><name>module</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name><name>flirt_func</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlirtFunction</name> <modifier>*</modifier></type><name>next_flirt_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>next_flirt_func_it</name> <init>= <expr><name><name>flirt_func_it</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>next_flirt_func_it</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next_flirt_func</name> <operator>=</operator> <name><name>next_flirt_func_it</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>next_flirt_func</name><operator>-&gt;</operator><name>is_local</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>next_flirt_func</name><operator>-&gt;</operator><name>negative_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flirt_fcn_size</name> <operator>=</operator> <name><name>next_flirt_func</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>flirt_func</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>next_flirt_func_it</name> <operator>=</operator> <name><name>next_flirt_func_it</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>next_module_function_size</name> <operator>=</operator> <call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>next_module_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next_module_function_size</name> <operator>&lt;</operator> <name>flirt_fcn_size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl>;</decl_stmt>
<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>anal-&gt;fcns</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>fcn</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fcn</name> <operator>!=</operator> <name>next_module_function</name> <operator>&amp;&amp;</operator>
<name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name><name>next_module_function</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>next_module_function_size</name> <operator>&amp;&amp;</operator>
<name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name> <operator>&lt;</operator> <name><name>next_module_function</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>flirt_fcn_size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter_bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>fcn-&gt;bbs</argument>, <argument>iter_bb</argument>, <argument>block</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_function_add_block</name> <argument_list>(<argument><expr><name>next_module_function</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>next_module_function</name><operator>-&gt;</operator><name>ninstr</name></name> <operator>+=</operator> <name><name>fcn</name><operator>-&gt;</operator><name>ninstr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_function_delete</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_anal_function_resize</name> <argument_list>(<argument><expr><name>next_module_function</name></expr></argument>, <argument><expr><name>flirt_fcn_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_module_function_size</name> <operator>=</operator> <call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>next_module_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_trim_jmprefs</name> <argument_list>(<argument><expr><operator>(</operator><name>RAnal</name> <operator>*</operator><operator>)</operator><name>anal</name></expr></argument>, <argument><expr><name>next_module_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name><name>flirt_func</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>name_offs</name></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>name_offs</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>flirt_func</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>name_offs</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>r_name_filter2</name> <argument_list>(<argument><expr><name><name>flirt_func</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <name>name_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>next_module_function</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next_module_function</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"flirt.%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>set</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>next_module_function</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>next_module_function</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>next_module_function_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Found %s\n"</literal></expr></argument>, <argument><expr><name><name>next_module_function</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>node_pattern_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RFlirtNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>variant_bool_array</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>pattern_bytes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>node_match_buffer</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RFlirtNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>buf_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>node_child_it</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>module_it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlirtNode</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlirtModule</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>node_pattern_match</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <name>buf_idx</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <name>buf_idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>child_list</name></name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>node-&gt;child_list</argument>, <argument>node_child_it</argument>, <argument>child</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>node_match_buffer</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>buf_idx</name> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>module_list</name></name></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>node-&gt;module_list</argument>, <argument>module_it</argument>, <argument>module</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>module_match_buffer</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>module</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>node_match_functions</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RFlirtNode</name> <modifier>*</modifier></type><name>root_node</name></decl></parameter>)</parameter_list> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"There are no analyzed functions. Have you run 'aa'?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>push_fs</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="string">"flirt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>anal-&gt;fcns</argument>, <argument>it_func</argument>, <argument>func</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>func</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>R_ANAL_FCN_TYPE_FCN</name> <operator>&amp;&amp;</operator> <name><name>func</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>R_ANAL_FCN_TYPE_LOC</name></expr>)</condition> <block>{<block_content> 
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>func_size</name> <init>= <expr><call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>func_buf</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>func_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>func_buf</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>func_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>func_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Couldn't read function %s at 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>func_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>node_child_it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlirtNode</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>root_node-&gt;child_list</argument>, <argument>node_child_it</argument>, <argument>child</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>node_match_buffer</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>func_buf</name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>func_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>func_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>pop_fs</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>read_module_tail_bytes</name><parameter_list>(<parameter><decl><type><name>RFlirtModule</name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>number_of_tail_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlirtTailByte</name> <modifier>*</modifier></type><name>tail_byte</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>module</name><operator>-&gt;</operator><name>tail_bytes</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>number_of_tail_bytes</name> <operator>=</operator> <call><name>read_byte</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>number_of_tail_bytes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>number_of_tail_bytes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tail_byte</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RFlirtTailByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tail_byte</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tail_byte</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>read_multiple_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>tail_byte</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>read_max_2_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>tail_byte</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>read_byte</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>tail_bytes</name></name></expr></argument>, <argument><expr><name>tail_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"READ TAIL BYTE: %04X: %02X\n"</literal></expr></argument>, <argument><expr><name><name>tail_byte</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>tail_byte</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

<label><name>err_exit</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tail_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>tail_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>read_module_referenced_functions</name><parameter_list>(<parameter><decl><type><name>RFlirtModule</name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>number_of_referenced_functions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>ref_function_name_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlirtFunction</name> <modifier>*</modifier></type><name>ref_function</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>referenced_functions</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>number_of_referenced_functions</name> <operator>=</operator> <call><name>read_byte</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>number_of_referenced_functions</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>number_of_referenced_functions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ref_function</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RFlirtFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref_function</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ref_function</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>read_multiple_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ref_function</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>read_max_2_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ref_function_name_length</name> <operator>=</operator> <call><name>read_byte</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref_function_name_length</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ref_function_name_length</name> <operator>=</operator> <call><name>read_multiple_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name>ref_function_name_length</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ref_function_name_length</name> <operator>&gt;=</operator> <name>R_FLIRT_NAME_MAX</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ref_function_name_length</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ref_function</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>read_byte</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ref_function</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>ref_function_name_length</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ref_function</name><operator>-&gt;</operator><name>negative_offset</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ref_function</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>ref_function_name_length</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>referenced_functions</name></name></expr></argument>, <argument><expr><name>ref_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"(REF: %04X: %s)\n"</literal></expr></argument>, <argument><expr><name><name>ref_function</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>ref_function</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

<label><name>err_exit</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ref_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>read_module_public_functions</name><parameter_list>(<parameter><decl><type><name>RFlirtModule</name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>current_byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlirtFunction</name> <modifier>*</modifier></type><name>function</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>public_functions</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>function</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RFlirtFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>read_multiple_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>read_max_2_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>function</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_byte</name> <operator>=</operator> <call><name>read_byte</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>current_byte</name> <operator>&lt;</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>current_byte</name> <operator>&amp;</operator> <name>IDASIG__FUNCTION__LOCAL</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>function</name><operator>-&gt;</operator><name>is_local</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>current_byte</name> <operator>&amp;</operator> <name>IDASIG__FUNCTION__UNRESOLVED_COLLISION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>function</name><operator>-&gt;</operator><name>is_collision</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>current_byte</name> <operator>&amp;</operator> <literal type="number">0x01</literal> <operator>||</operator> <name>current_byte</name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr>)</condition> <block>{<block_content> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"INVESTIGATE PUBLIC NAME FLAG: %02X @ %04X\n"</literal></expr></argument>, <argument><expr><name>current_byte</name></expr></argument>,
<argument><expr><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>current_byte</name> <operator>=</operator> <call><name>read_byte</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>current_byte</name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>R_FLIRT_NAME_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>function</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>current_byte</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current_byte</name> <operator>=</operator> <call><name>read_byte</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>R_FLIRT_NAME_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Function name too long\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>function</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>R_FLIRT_NAME_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>function</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%04X:%s "</literal></expr></argument>, <argument><expr><name><name>function</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>function</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <name>current_byte</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>public_functions</name></name></expr></argument>, <argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>IDASIG__PARSE__MORE_PUBLIC_NAMES</name></expr>)</condition>;</do>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>true</name></expr>;</return>

<label><name>err_exit</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>parse_leaf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>RFlirtNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>ut8</name></type> <name>flags</name></decl>, <decl><type ref="prev"/><name>crc_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>crc16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlirtModule</name> <modifier>*</modifier></type><name>module</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>module_list</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content> 

<expr_stmt><expr><name>crc_length</name> <operator>=</operator> <call><name>read_byte</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>crc16</name> <operator>=</operator> <call><name>read_short</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>crc_length</name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name>crc16</name> <operator>!=</operator> <literal type="number">0x0000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"WARNING non zero crc of zero length @ %04X\n"</literal></expr></argument>,
<argument><expr><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"crc_len: %02X crc16: %04X\n"</literal></expr></argument>, <argument><expr><name>crc_length</name></expr></argument>, <argument><expr><name>crc16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<do>do <block>{<block_content> 
<expr_stmt><expr><name>module</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RFlirtModule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>module</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>crc_length</name></name> <operator>=</operator> <name>crc_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>crc16</name></name> <operator>=</operator> <name>crc16</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>read_multiple_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>read_max_2_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"module_length: %04X\n"</literal></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_module_public_functions</name> <argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>IDASIG__PARSE__READ_TAIL_BYTES</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_module_tail_bytes</name> <argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>IDASIG__PARSE__READ_REFERENCED_FUNCTIONS</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_module_referenced_functions</name> <argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>module_list</name></name></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>IDASIG__PARSE__MORE_MODULES_WITH_SAME_CRC</name></expr>)</condition>;</do>
</block_content>}</block> while <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>IDASIG__PARSE__MORE_MODULES</name></expr>)</condition>;</do> 

<return>return <expr><name>true</name></expr>;</return>

<label><name>err_exit</name>:</label>
<expr_stmt><expr><call><name>module_free</name> <argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>read_node_length</name><parameter_list>(<parameter><decl><type><name>RFlirtNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>read_byte</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"node length: %02X\n"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>read_node_variant_mask</name><parameter_list>(<parameter><decl><type><name>RFlirtNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">0x10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>variant_mask</name></name> <operator>=</operator> <call><name>read_max_2_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;=</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>variant_mask</name></name> <operator>=</operator> <call><name>read_multiple_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;=</operator> <literal type="number">0x40</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>variant_mask</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><call><name>read_multiple_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <call><name>read_multiple_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>read_node_bytes</name><parameter_list>(<parameter><decl><type><name>RFlirtNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>current_mask_bit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>current_mask_bit</name> <operator>=</operator> <literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>pattern_bytes</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>variant_bool_array</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>current_mask_bit</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>variant_bool_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>variant_mask</name></name> <operator>&amp;</operator> <name>current_mask_bit</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>variant_mask</name></name> <operator>&amp;</operator> <name>current_mask_bit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>pattern_bytes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>pattern_bytes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>read_byte</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>parse_tree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>RFlirtNode</name> <modifier>*</modifier></type><name>root_node</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>RFlirtNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>tree_nodes</name> <init>= <expr><call><name>read_multiple_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><name>buf_eof</name> <operator>||</operator> <name>buf_err</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tree_nodes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<return>return <expr><call><name>parse_leaf</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>root_node</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>root_node</name><operator>-&gt;</operator><name>child_list</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tree_nodes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>node</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RFlirtNode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_node_length</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_node_variant_mask</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_node_bytes</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>root_node</name><operator>-&gt;</operator><name>child_list</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_tree</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>err_exit</name>;</goto> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>true</name></expr>;</return>
<label><name>err_exit</name>:</label>
<expr_stmt><expr><call><name>node_free</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_ARCH</name><parameter_list>(<parameter><type><name>define</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (arch == define) { eprintf (" %s", str); return; }</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>print_arch</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>arch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__386</name></expr></argument>, <argument><expr><literal type="string">"386"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__Z80</name></expr></argument>, <argument><expr><literal type="string">"Z80"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__I860</name></expr></argument>, <argument><expr><literal type="string">"I860"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__8051</name></expr></argument>, <argument><expr><literal type="string">"8051"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__TMS</name></expr></argument>, <argument><expr><literal type="string">"TMS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__6502</name></expr></argument>, <argument><expr><literal type="string">"6502"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__PDP</name></expr></argument>, <argument><expr><literal type="string">"PDP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__68K</name></expr></argument>, <argument><expr><literal type="string">"68K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__JAVA</name></expr></argument>, <argument><expr><literal type="string">"JAVA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__6800</name></expr></argument>, <argument><expr><literal type="string">"6800"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__ST7</name></expr></argument>, <argument><expr><literal type="string">"ST7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__MC6812</name></expr></argument>, <argument><expr><literal type="string">"MC6812"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__MIPS</name></expr></argument>, <argument><expr><literal type="string">"MIPS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__ARM</name></expr></argument>, <argument><expr><literal type="string">"ARM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__TMSC6</name></expr></argument>, <argument><expr><literal type="string">"TMSC6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__PPC</name></expr></argument>, <argument><expr><literal type="string">"PPC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__80196</name></expr></argument>, <argument><expr><literal type="string">"80196"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__Z8</name></expr></argument>, <argument><expr><literal type="string">"Z8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__SH</name></expr></argument>, <argument><expr><literal type="string">"SH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__NET</name></expr></argument>, <argument><expr><literal type="string">"NET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__AVR</name></expr></argument>, <argument><expr><literal type="string">"AVR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__H8</name></expr></argument>, <argument><expr><literal type="string">"H8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__PIC</name></expr></argument>, <argument><expr><literal type="string">"PIC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__SPARC</name></expr></argument>, <argument><expr><literal type="string">"SPARC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__ALPHA</name></expr></argument>, <argument><expr><literal type="string">"ALPHA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__HPPA</name></expr></argument>, <argument><expr><literal type="string">"HPPA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__H8500</name></expr></argument>, <argument><expr><literal type="string">"H8500"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__TRICORE</name></expr></argument>, <argument><expr><literal type="string">"TRICORE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__DSP56K</name></expr></argument>, <argument><expr><literal type="string">"DSP56K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__C166</name></expr></argument>, <argument><expr><literal type="string">"C166"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__ST20</name></expr></argument>, <argument><expr><literal type="string">"ST20"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__IA64</name></expr></argument>, <argument><expr><literal type="string">"IA64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__I960</name></expr></argument>, <argument><expr><literal type="string">"I960"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__F2MC</name></expr></argument>, <argument><expr><literal type="string">"F2MC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__TMS320C54</name></expr></argument>, <argument><expr><literal type="string">"TMS320C54"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__TMS320C55</name></expr></argument>, <argument><expr><literal type="string">"TMS320C55"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__TRIMEDIA</name></expr></argument>, <argument><expr><literal type="string">"TRIMEDIA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__M32R</name></expr></argument>, <argument><expr><literal type="string">"M32R"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__NEC_78K0</name></expr></argument>, <argument><expr><literal type="string">"NEC_78K0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__NEC_78K0S</name></expr></argument>, <argument><expr><literal type="string">"NEC_78K0S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__M740</name></expr></argument>, <argument><expr><literal type="string">"M740"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__M7700</name></expr></argument>, <argument><expr><literal type="string">"M7700"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__ST9</name></expr></argument>, <argument><expr><literal type="string">"ST9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__FR</name></expr></argument>, <argument><expr><literal type="string">"FR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__MC6816</name></expr></argument>, <argument><expr><literal type="string">"MC6816"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__M7900</name></expr></argument>, <argument><expr><literal type="string">"M7900"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__TMS320C3</name></expr></argument>, <argument><expr><literal type="string">"TMS320C3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__KR1878</name></expr></argument>, <argument><expr><literal type="string">"KR1878"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__AD218X</name></expr></argument>, <argument><expr><literal type="string">"AD218X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__OAKDSP</name></expr></argument>, <argument><expr><literal type="string">"OAKDSP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__TLCS900</name></expr></argument>, <argument><expr><literal type="string">"TLCS900"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__C39</name></expr></argument>, <argument><expr><literal type="string">"C39"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__CR16</name></expr></argument>, <argument><expr><literal type="string">"CR16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__MN102L00</name></expr></argument>, <argument><expr><literal type="string">"MN102L00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__TMS320C1X</name></expr></argument>, <argument><expr><literal type="string">"TMS320C1X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__NEC_V850X</name></expr></argument>, <argument><expr><literal type="string">"NEC_V850X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__SCR_ADPT</name></expr></argument>, <argument><expr><literal type="string">"SCR_ADPT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__EBC</name></expr></argument>, <argument><expr><literal type="string">"EBC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__MSP430</name></expr></argument>, <argument><expr><literal type="string">"MSP430"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__SPU</name></expr></argument>, <argument><expr><literal type="string">"SPU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_ARCH</name> <argument_list>(<argument><expr><name>IDASIG__ARCH__DALVIK</name></expr></argument>, <argument><expr><literal type="string">"DALVIK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_FLAG</name><parameter_list>(<parameter><type><name>define</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (flags &amp; define) { eprintf (" %s", str); }</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>print_file_types</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__DOS_EXE_OLD</name></expr></argument>, <argument><expr><literal type="string">"DOS_EXE_OLD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__DOS_COM_OLD</name></expr></argument>, <argument><expr><literal type="string">"DOS_COM_OLD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__BIN</name></expr></argument>, <argument><expr><literal type="string">"BIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__DOSDRV</name></expr></argument>, <argument><expr><literal type="string">"DOSDRV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__NE</name></expr></argument>, <argument><expr><literal type="string">"NE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__INTELHEX</name></expr></argument>, <argument><expr><literal type="string">"INTELHEX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__MOSHEX</name></expr></argument>, <argument><expr><literal type="string">"MOSHEX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__LX</name></expr></argument>, <argument><expr><literal type="string">"LX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__LE</name></expr></argument>, <argument><expr><literal type="string">"LE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__NLM</name></expr></argument>, <argument><expr><literal type="string">"NLM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__COFF</name></expr></argument>, <argument><expr><literal type="string">"COFF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__PE</name></expr></argument>, <argument><expr><literal type="string">"PE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__OMF</name></expr></argument>, <argument><expr><literal type="string">"OMF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__SREC</name></expr></argument>, <argument><expr><literal type="string">"SREC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__ZIP</name></expr></argument>, <argument><expr><literal type="string">"ZIP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__OMFLIB</name></expr></argument>, <argument><expr><literal type="string">"OMFLIB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__AR</name></expr></argument>, <argument><expr><literal type="string">"AR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__LOADER</name></expr></argument>, <argument><expr><literal type="string">"LOADER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__ELF</name></expr></argument>, <argument><expr><literal type="string">"ELF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__W32RUN</name></expr></argument>, <argument><expr><literal type="string">"W32RUN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__AOUT</name></expr></argument>, <argument><expr><literal type="string">"AOUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__PILOT</name></expr></argument>, <argument><expr><literal type="string">"PILOT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__DOS_EXE</name></expr></argument>, <argument><expr><literal type="string">"EXE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FILE__AIXAR</name></expr></argument>, <argument><expr><literal type="string">"AIXAR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_os_types</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__OS__MSDOS</name></expr></argument>, <argument><expr><literal type="string">"MSDOS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__OS__WIN</name></expr></argument>, <argument><expr><literal type="string">"WIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__OS__OS2</name></expr></argument>, <argument><expr><literal type="string">"OS2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__OS__NETWARE</name></expr></argument>, <argument><expr><literal type="string">"NETWARE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__OS__UNIX</name></expr></argument>, <argument><expr><literal type="string">"UNIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_app_types</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__APP__CONSOLE</name></expr></argument>, <argument><expr><literal type="string">"CONSOLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__APP__GRAPHICS</name></expr></argument>, <argument><expr><literal type="string">"GRAPHICS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__APP__EXE</name></expr></argument>, <argument><expr><literal type="string">"EXE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__APP__DLL</name></expr></argument>, <argument><expr><literal type="string">"DLL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__APP__DRV</name></expr></argument>, <argument><expr><literal type="string">"DRV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__APP__SINGLE_THREADED</name></expr></argument>, <argument><expr><literal type="string">"SINGLE_THREADED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__APP__MULTI_THREADED</name></expr></argument>, <argument><expr><literal type="string">"MULTI_THREADED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__APP__16_BIT</name></expr></argument>, <argument><expr><literal type="string">"16_BIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__APP__32_BIT</name></expr></argument>, <argument><expr><literal type="string">"32_BIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__APP__64_BIT</name></expr></argument>, <argument><expr><literal type="string">"64_BIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_features</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FEATURE__STARTUP</name></expr></argument>, <argument><expr><literal type="string">"STARTUP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FEATURE__CTYPE_CRC</name></expr></argument>, <argument><expr><literal type="string">"CTYPE_CRC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FEATURE__2BYTE_CTYPE</name></expr></argument>, <argument><expr><literal type="string">"2BYTE_CTYPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FEATURE__ALT_CTYPE_CRC</name></expr></argument>, <argument><expr><literal type="string">"ALT_CTYPE_CRC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_FLAG</name> <argument_list>(<argument><expr><name>IDASIG__FEATURE__COMPRESSED</name></expr></argument>, <argument><expr><literal type="string">"COMPRESSED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_header</name><parameter_list>(<parameter><decl><type><name>idasig_v5_t</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"version: %d\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"arch:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>print_arch</name> <argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"file_types:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>print_file_types</name> <argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>file_types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"os_types:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>print_os_types</name> <argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>os_types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"app_types:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>print_app_types</name> <argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>app_types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"features:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>print_features</name> <argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"old_n_functions: %04x\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>old_n_functions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"crc16: %04x\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>crc16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ctype: %s\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>ctype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"library_name_len: %d\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>library_name_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ctypes_crc16: %04x\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>ctypes_crc16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_header</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>idasig_v5_t</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>file_types</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>file_types</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>file_types</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>os_types</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>os_types</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>os_types</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>app_types</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>app_types</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>app_types</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>features</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>features</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>features</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>old_n_functions</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>old_n_functions</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>old_n_functions</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>crc16</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>crc16</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>crc16</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>ctype</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ctype</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ctype</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>library_name_len</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>library_name_len</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>library_name_len</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>ctypes_crc16</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ctypes_crc16</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ctypes_crc16</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_v6_v7_header</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>idasig_v6_v7_t</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>n_functions</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>n_functions</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>n_functions</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_v8_v9_header</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>idasig_v8_v9_t</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>pattern_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>pattern_size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>pattern_size</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_v10_header</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>idasig_v10_t</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>unknown</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>unknown</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>unknown</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RFlirtNode</name> <modifier>*</modifier></type><name>flirt_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>flirt_buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>decompressed_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>r_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>decompressed_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlirtNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlirtNode</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>idasig_v5_t</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>idasig_v6_v7_t</name> <modifier>*</modifier></type><name>v6_v7</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>idasig_v8_v9_t</name> <modifier>*</modifier></type><name>v8_v9</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>idasig_v10_t</name> <modifier>*</modifier></type><name>v10</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf_eof</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>version</name> <operator>=</operator> <call><name>r_sign_is_flirt</name> <argument_list>(<argument><expr><name>flirt_buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>version</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">5</literal> <operator>||</operator> <name>version</name></expr></argument> &gt;</argument_list></name> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unsupported flirt signature version\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>header</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>idasig_v5_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>parse_header</name> <argument_list>(<argument><expr><name>flirt_buf</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>v6_v7</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>idasig_v6_v7_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_v6_v7_header</name> <argument_list>(<argument><expr><name>flirt_buf</name></expr></argument>, <argument><expr><name>v6_v7</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>v8_v9</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>idasig_v8_v9_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_v8_v9_header</name> <argument_list>(<argument><expr><name>flirt_buf</name></expr></argument>, <argument><expr><name>v8_v9</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>v10</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>idasig_v10_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_v10_header</name> <argument_list>(<argument><expr><name>flirt_buf</name></expr></argument>, <argument><expr><name>v10</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>library_name_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>flirt_buf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>library_name_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>header</name><operator>-&gt;</operator><name>library_name_len</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name><name>header</name><operator>-&gt;</operator><name>library_name_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>print_header</name> <argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>header_size</name> <operator>=</operator> <call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>flirt_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>flirt_buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>flirt_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>flirt_buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>IDASIG__FEATURE__COMPRESSED</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Sorry we do not support the signatures version 5 compression.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>decompressed_buf</name> <operator>=</operator> <call><name>r_inflate</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decompressed_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Decompressing failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>decompressed_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>decompressed_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>node</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RFlirtNode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r_buf</name> <operator>=</operator> <call><name>r_buf_new_with_pointers</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>r_file_dump</name> <argument_list>(<argument><expr><literal type="string">"sig_dump"</literal></expr></argument>, <argument><expr><name><name>r_buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>r_buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>parse_tree</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>r_buf</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<label><name>exit</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>r_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>v6_v7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>v8_v9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>v10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_sign_is_flirt</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>idasig_v5_t</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>idasig_v5_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>header</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><literal type="string">"IDASGN"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>

<label><name>exit</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_sign_flirt_dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flirt_file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>flirt_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlirtNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flirt_buf</name> <operator>=</operator> <call><name>r_buf_new_slurp</name> <argument_list>(<argument><expr><name>flirt_file</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Can't open %s\n"</literal></expr></argument>, <argument><expr><name>flirt_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>flirt_parse</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>flirt_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>flirt_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_node</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>node_free</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"We encountered an error while parsing the file. Sorry.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_sign_flirt_scan</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flirt_file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>flirt_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlirtNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flirt_buf</name> <operator>=</operator> <call><name>r_buf_new_slurp</name> <argument_list>(<argument><expr><name>flirt_file</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Can't open %s\n"</literal></expr></argument>, <argument><expr><name>flirt_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>flirt_parse</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>flirt_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>flirt_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>node_match_functions</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error while scanning the file %s\n"</literal></expr></argument>, <argument><expr><name>flirt_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>node_free</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"We encountered an error while parsing the file %s. Sorry.\n"</literal></expr></argument>, <argument><expr><name>flirt_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
