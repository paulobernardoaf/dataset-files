<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\anal\op.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_list.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDB_VARUSED_FMT</name></cpp:macro> <cpp:value>"qzdq"</cpp:value></cpp:define>
<struct>struct <name>VarUsedType</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>fcn_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>scope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>delta</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>R_API</name> <name>RAnalOp</name> <modifier>*</modifier></type><name>r_anal_op_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_anal_op_init</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>op</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_anal_op_list_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_op_free</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_op_init</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>op</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>disp</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_op_fini</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_anal_var_free</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>var</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_value_free</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_value_free</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_value_free</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_value_free</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>opex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_switch_op_free</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>switch_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>switch_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_op_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_op</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><name>_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>_op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalVar</name> <modifier>*</modifier></type><name>get_link_var</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>faddr</name></decl></parameter>, <parameter><decl><type><name>RAnalVar</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var_local</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"var.0x%"</literal><name>PFMT64x</name><literal type="string">".%d.%d.%s"</literal></expr></argument>,
<argument><expr><name>faddr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><literal type="string">"reads"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xss</name> <init>= <expr><call><name>sdb_const_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_fcns</name></name></expr></argument>, <argument><expr><name>var_local</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>xss</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>inst_key</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"inst.0x%"</literal><name>PFMT64x</name><literal type="string">".lvar"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var_def</name> <init>= <expr><call><name>sdb_const_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_fcns</name></name></expr></argument>, <argument><expr><name>inst_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_def</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>inst_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>VarUsedType</name></name></type> <name>vut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalVar</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdb_fmt_tobin</name> <argument_list>(<argument><expr><name>var_def</name></expr></argument>, <argument><expr><name>SDB_VARUSED_FMT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vut</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_anal_var_get</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>vut</name><operator>.</operator><name>fcn_addr</name></name></expr></argument>, <argument><expr><name><name>vut</name><operator>.</operator><name>type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vut</name><operator>.</operator><name>scope</name></name></expr></argument>, <argument><expr><name><name>vut</name><operator>.</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_fmt_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>vut</name></expr></argument>, <argument><expr><name>SDB_VARUSED_FMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>inst_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RAnalVar</name> <modifier>*</modifier></type><name>get_used_var</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>inst_key</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"inst.0x%"</literal><name>PFMT64x</name><literal type="string">".vars"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var_def</name> <init>= <expr><call><name>sdb_const_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_fcns</name></name></expr></argument>, <argument><expr><name>inst_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>VarUsedType</name></name></type> <name>vut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalVar</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdb_fmt_tobin</name> <argument_list>(<argument><expr><name>var_def</name></expr></argument>, <argument><expr><name>SDB_VARUSED_FMT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vut</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_anal_var_get</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>vut</name><operator>.</operator><name>fcn_addr</name></name></expr></argument>, <argument><expr><name><name>vut</name><operator>.</operator><name>type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vut</name><operator>.</operator><name>scope</name></name></expr></argument>, <argument><expr><name><name>vut</name><operator>.</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_fmt_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>vut</name></expr></argument>, <argument><expr><name>SDB_VARUSED_FMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>inst_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>defaultCycles</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_PUSH</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_POP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>:</case>
<return>return <expr><literal type="number">2</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_LEA</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_NOP</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_TRAP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_SWI</name></expr>:</case>
<return>return <expr><literal type="number">4</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_SYNC</name></expr>:</case>
<return>return <expr><literal type="number">4</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_RET</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_RJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>:</case>
<return>return <expr><literal type="number">4</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_op_init</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>anal</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>op</name></name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>anal</name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>coreb</name><operator>.</operator><name>archbits</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>coreb</name><operator>.</operator><name>archbits</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>coreb</name><operator>.</operator><name>core</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>pcalign</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>%</operator> <name><name>anal</name><operator>-&gt;</operator><name>pcalign</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>op</name></name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>nopcode</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>nopcode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_VAL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalVar</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>get_used_var</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_var_free</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>var</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\xff\xff\xff\xff"</literal></expr></argument>, <argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <call><name>defaultCycles</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_DISASM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: unhandled R_ANAL_OP_MASK_DISASM in r_anal_op\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_HINT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalHint</name> <modifier>*</modifier></type><name>hint</name> <init>= <expr><call><name>r_anal_hint_get</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hint</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_anal_op_hint</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_hint_free</name> <argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalOp</name> <modifier>*</modifier></type><name>r_anal_op_copy</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>nop</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nop</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>nop</name> <operator>=</operator> <operator>*</operator><name>op</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>nop</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nop</name><operator>-&gt;</operator><name>mnemonic</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>nop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>nop</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>nop</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_copy</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nop</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_copy</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nop</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_copy</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nop</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_copy</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>nop</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_strbuf_copy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>nop</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>nop</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_op_nonlinear</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>&amp;=</operator> <name>R_ANAL_OP_TYPE_MASK</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_RCALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_ICALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UCALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_IRCALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UCCALL</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_MJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UCJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_RJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_IJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_IRJMP</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_TRAP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_ILL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UNK</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_SWI</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_RET</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_op_ismemref</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>&amp;=</operator> <name>R_ANAL_OP_TYPE_MASK</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_LEA</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<struct><specifier>static</specifier> struct <name>optype</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block> <decl><name><name>optypes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><literal type="string">"io"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_ACMP</name></expr>, <expr><literal type="string">"acmp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><literal type="string">"add"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_SYNC</name></expr>, <expr><literal type="string">"sync"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><literal type="string">"and"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>, <expr><literal type="string">"call"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_CCALL</name></expr>, <expr><literal type="string">"ccall"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><literal type="string">"cjmp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_MJMP</name></expr>, <expr><literal type="string">"mjmp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="string">"cmp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_IO</name></expr>, <expr><literal type="string">"cret"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_ILL</name></expr>, <expr><literal type="string">"ill"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>, <expr><literal type="string">"jmp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_LEA</name></expr>, <expr><literal type="string">"lea"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_LEAVE</name></expr>, <expr><literal type="string">"leave"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><literal type="string">"load"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_NEW</name></expr>, <expr><literal type="string">"new"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_MOD</name></expr>, <expr><literal type="string">"mod"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_CMOV</name></expr>, <expr><literal type="string">"cmov"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><literal type="string">"mov"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_CAST</name></expr>, <expr><literal type="string">"cast"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><literal type="string">"mul"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><literal type="string">"div"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_NOP</name></expr>, <expr><literal type="string">"nop"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_NOT</name></expr>, <expr><literal type="string">"not"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_NULL</name></expr> , <expr><literal type="string">"null"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_OR</name></expr> , <expr><literal type="string">"or"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_POP</name></expr> , <expr><literal type="string">"pop"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_PUSH</name></expr> , <expr><literal type="string">"push"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_REP</name></expr> , <expr><literal type="string">"rep"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_RET</name></expr> , <expr><literal type="string">"ret"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_ROL</name></expr> , <expr><literal type="string">"rol"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_ROR</name></expr> , <expr><literal type="string">"ror"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_SAL</name></expr> , <expr><literal type="string">"sal"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_SAR</name></expr> , <expr><literal type="string">"sar"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_SHL</name></expr> , <expr><literal type="string">"shl"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_SHR</name></expr> , <expr><literal type="string">"shr"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_STORE</name></expr> , <expr><literal type="string">"store"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_SUB</name></expr> , <expr><literal type="string">"sub"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_SWI</name></expr> , <expr><literal type="string">"swi"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_CSWI</name></expr> , <expr><literal type="string">"cswi"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_SWITCH</name></expr>, <expr><literal type="string">"switch"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_TRAP</name></expr> , <expr><literal type="string">"trap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_UCALL</name></expr> , <expr><literal type="string">"ucall"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_RCALL</name></expr> , <expr><literal type="string">"rcall"</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_ICALL</name></expr> , <expr><literal type="string">"ucall"</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_IRCALL</name></expr>, <expr><literal type="string">"ucall"</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_UCCALL</name></expr>, <expr><literal type="string">"uccall"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_UCJMP</name></expr> , <expr><literal type="string">"ucjmp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_UJMP</name></expr> , <expr><literal type="string">"ujmp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_RJMP</name></expr> , <expr><literal type="string">"rjmp"</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_IJMP</name></expr> , <expr><literal type="string">"ujmp"</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_IRJMP</name></expr> , <expr><literal type="string">"ujmp"</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_UNK</name></expr> , <expr><literal type="string">"unk"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_UPUSH</name></expr> , <expr><literal type="string">"upush"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_RPUSH</name></expr> , <expr><literal type="string">"rpush"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_XCHG</name></expr> , <expr><literal type="string">"xchg"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_XOR</name></expr> , <expr><literal type="string">"xor"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_CASE</name></expr> , <expr><literal type="string">"case"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_CPL</name></expr> , <expr><literal type="string">"cpl"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>R_ANAL_OP_TYPE_CRYPTO</name></expr>, <expr><literal type="string">"crypto"</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_optype_from_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>optypes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>optypes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>optypes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_anal_optype_to_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>once</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<label><name>repeat</name>:</label>

<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_IO</name></expr> :</case> <return>return <expr><literal type="string">"io"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_ACMP</name></expr> :</case> <return>return <expr><literal type="string">"acmp"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_ADD</name></expr> :</case> <return>return <expr><literal type="string">"add"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_SYNC</name></expr> :</case> <return>return <expr><literal type="string">"sync"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_AND</name></expr> :</case> <return>return <expr><literal type="string">"and"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_CALL</name></expr> :</case> <return>return <expr><literal type="string">"call"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_CCALL</name></expr> :</case> <return>return <expr><literal type="string">"ccall"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr> :</case> <return>return <expr><literal type="string">"cjmp"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_MJMP</name></expr> :</case> <return>return <expr><literal type="string">"mjmp"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_CMP</name></expr> :</case> <return>return <expr><literal type="string">"cmp"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_CRET</name></expr> :</case> <return>return <expr><literal type="string">"cret"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_DIV</name></expr> :</case> <return>return <expr><literal type="string">"div"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_ILL</name></expr> :</case> <return>return <expr><literal type="string">"ill"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr> :</case> <return>return <expr><literal type="string">"jmp"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_LEA</name></expr> :</case> <return>return <expr><literal type="string">"lea"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_LEAVE</name></expr> :</case> <return>return <expr><literal type="string">"leave"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr> :</case> <return>return <expr><literal type="string">"load"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_NEW</name></expr> :</case> <return>return <expr><literal type="string">"new"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_MOD</name></expr> :</case> <return>return <expr><literal type="string">"mod"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_CMOV</name></expr> :</case> <return>return <expr><literal type="string">"cmov"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_MOV</name></expr> :</case> <return>return <expr><literal type="string">"mov"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_CAST</name></expr> :</case> <return>return <expr><literal type="string">"cast"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_MUL</name></expr> :</case> <return>return <expr><literal type="string">"mul"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_NOP</name></expr> :</case> <return>return <expr><literal type="string">"nop"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_NOT</name></expr> :</case> <return>return <expr><literal type="string">"not"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_NULL</name></expr> :</case> <return>return <expr><literal type="string">"null"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_OR</name></expr> :</case> <return>return <expr><literal type="string">"or"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_POP</name></expr> :</case> <return>return <expr><literal type="string">"pop"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_PUSH</name></expr> :</case> <return>return <expr><literal type="string">"push"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_RPUSH</name></expr> :</case> <return>return <expr><literal type="string">"rpush"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_REP</name></expr> :</case> <return>return <expr><literal type="string">"rep"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_RET</name></expr> :</case> <return>return <expr><literal type="string">"ret"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_ROL</name></expr> :</case> <return>return <expr><literal type="string">"rol"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_ROR</name></expr> :</case> <return>return <expr><literal type="string">"ror"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_SAL</name></expr> :</case> <return>return <expr><literal type="string">"sal"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_SAR</name></expr> :</case> <return>return <expr><literal type="string">"sar"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_SHL</name></expr> :</case> <return>return <expr><literal type="string">"shl"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_SHR</name></expr> :</case> <return>return <expr><literal type="string">"shr"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_STORE</name></expr> :</case> <return>return <expr><literal type="string">"store"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_SUB</name></expr> :</case> <return>return <expr><literal type="string">"sub"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_SWI</name></expr> :</case> <return>return <expr><literal type="string">"swi"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_CSWI</name></expr> :</case> <return>return <expr><literal type="string">"cswi"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_SWITCH</name></expr>:</case> <return>return <expr><literal type="string">"switch"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_TRAP</name></expr> :</case> <return>return <expr><literal type="string">"trap"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_UCALL</name></expr> :</case> <return>return <expr><literal type="string">"ucall"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_RCALL</name></expr> :</case> <return>return <expr><literal type="string">"rcall"</literal></expr>;</return> 
<case>case <expr><name>R_ANAL_OP_TYPE_ICALL</name></expr> :</case> <return>return <expr><literal type="string">"ucall"</literal></expr>;</return> 
<case>case <expr><name>R_ANAL_OP_TYPE_IRCALL</name></expr>:</case> <return>return <expr><literal type="string">"ucall"</literal></expr>;</return> 
<case>case <expr><name>R_ANAL_OP_TYPE_UCCALL</name></expr>:</case> <return>return <expr><literal type="string">"uccall"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_UCJMP</name></expr> :</case> <return>return <expr><literal type="string">"ucjmp"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_UJMP</name></expr> :</case> <return>return <expr><literal type="string">"ujmp"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_RJMP</name></expr> :</case> <return>return <expr><literal type="string">"rjmp"</literal></expr>;</return> 
<case>case <expr><name>R_ANAL_OP_TYPE_IJMP</name></expr> :</case> <return>return <expr><literal type="string">"ujmp"</literal></expr>;</return> 
<case>case <expr><name>R_ANAL_OP_TYPE_IRJMP</name></expr> :</case> <return>return <expr><literal type="string">"ujmp"</literal></expr>;</return> 
<case>case <expr><name>R_ANAL_OP_TYPE_UNK</name></expr> :</case> <return>return <expr><literal type="string">"unk"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_UPUSH</name></expr> :</case> <return>return <expr><literal type="string">"upush"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_XCHG</name></expr> :</case> <return>return <expr><literal type="string">"xchg"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_XOR</name></expr> :</case> <return>return <expr><literal type="string">"xor"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_CASE</name></expr> :</case> <return>return <expr><literal type="string">"case"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_CPL</name></expr> :</case> <return>return <expr><literal type="string">"cpl"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_TYPE_CRYPTO</name></expr>:</case> <return>return <expr><literal type="string">"crypto"</literal></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>once</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>once</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>&amp;=</operator> <name>R_ANAL_OP_TYPE_MASK</name></expr>;</expr_stmt> 
<goto>goto <name>repeat</name>;</goto>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="string">"undefined"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_anal_op_to_esil_string</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_anal_op_to_string</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cstr</name></decl>, <decl><type ref="prev"/><name><name>ret</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r0</name> <init>= <expr><call><name>r_anal_value_to_string</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>a0</name> <init>= <expr><call><name>r_anal_value_to_string</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name>r_anal_value_to_string</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r0</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a0</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s = %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bb</name> <operator>=</operator> <call><name>r_anal_bb_from_offset</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cstr</name> <operator>=</operator> <call><name>r_anal_cond_to_string</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"if (%s) goto 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>cstr</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"if (%s) goto 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"goto 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_UJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_RJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_IJMP</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_IRJMP</name></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"goto %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_PUSH</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_UPUSH</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_RPUSH</name></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"push %s"</literal></expr></argument>, <argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_POP</name></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"pop %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_UCALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_RCALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_ICALL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_IRCALL</name></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s()"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>:</case>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s()"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"()"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_CCALL</name></expr>:</case>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bb</name> <operator>=</operator> <call><name>r_anal_bb_from_offset</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cstr</name> <operator>=</operator> <call><name>r_anal_cond_to_string</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"if (%s) %s()"</literal></expr></argument>, <argument><expr><name>cstr</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"if (%s) 0x%"</literal> <name>PFMT64x</name> <literal type="string">"()"</literal></expr></argument>, <argument><expr><name>cstr</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"if (unk) %s()"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"if (unk) 0x%"</literal> <name>PFMT64x</name> <literal type="string">"()"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a1</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s += %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s = %s + %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a1</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s -= %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s = %s - %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a1</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s *= %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s = %s * %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a1</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s /= %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s = %s / %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_AND</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a1</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s &amp;= %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s = %s &amp; %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_OR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a1</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s |= %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s = %s | %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_XOR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a1</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s ^= %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s = %s ^ %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_LEA</name></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s -&gt; %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_NOP</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"nop"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_RET</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"ret"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_CRET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bb</name> <operator>=</operator> <call><name>r_anal_bb_from_offset</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cstr</name> <operator>=</operator> <call><name>r_anal_cond_to_string</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"if (%s) ret"</literal></expr></argument>, <argument><expr><name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"if (unk) ret"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_LEAVE</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"leave"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_MOD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a1</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s %%= %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s = %s %% %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_XCHG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a1</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"tmp = %s; %s = %s; %s = tmp"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s = %s ^ %s"</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>R_ANAL_OP_TYPE_ROL</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_ROR</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_SWITCH</name></expr>:</case>
<case>case <expr><name>R_ANAL_OP_TYPE_CASE</name></expr>:</case>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Command not implemented.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_anal_stackop_tostring</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_STACK_NULL</name></expr>:</case>
<return>return <expr><literal type="string">"null"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_STACK_NOP</name></expr>:</case>
<return>return <expr><literal type="string">"nop"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_STACK_INC</name></expr>:</case>
<return>return <expr><literal type="string">"inc"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_STACK_GET</name></expr>:</case>
<return>return <expr><literal type="string">"get"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_STACK_SET</name></expr>:</case>
<return>return <expr><literal type="string">"set"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_STACK_RESET</name></expr>:</case>
<return>return <expr><literal type="string">"reset"</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="string">"unk"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_anal_op_family_to_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_ANAL_OP_FAMILY_UNKNOWN</name></expr>:</case> <return>return <expr><literal type="string">"unk"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_FAMILY_CPU</name></expr>:</case> <return>return <expr><literal type="string">"cpu"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_FAMILY_PAC</name></expr>:</case> <return>return <expr><literal type="string">"pac"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_FAMILY_FPU</name></expr>:</case> <return>return <expr><literal type="string">"fpu"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_FAMILY_MMX</name></expr>:</case> <return>return <expr><literal type="string">"mmx"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_FAMILY_SSE</name></expr>:</case> <return>return <expr><literal type="string">"sse"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_FAMILY_PRIV</name></expr>:</case> <return>return <expr><literal type="string">"priv"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_FAMILY_THREAD</name></expr>:</case> <return>return <expr><literal type="string">"thrd"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_FAMILY_CRYPTO</name></expr>:</case> <return>return <expr><literal type="string">"crpt"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_FAMILY_IO</name></expr>:</case> <return>return <expr><literal type="string">"io"</literal></expr>;</return>
<case>case <expr><name>R_ANAL_OP_FAMILY_VIRT</name></expr>:</case> <return>return <expr><literal type="string">"virt"</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_op_family_from_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<struct>struct <name>op_family</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>op_family</name></name></type> <name><name>of</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"cpu"</literal></expr>, <expr><name>R_ANAL_OP_FAMILY_CPU</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fpu"</literal></expr>, <expr><name>R_ANAL_OP_FAMILY_FPU</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"mmx"</literal></expr>, <expr><name>R_ANAL_OP_FAMILY_MMX</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sse"</literal></expr>, <expr><name>R_ANAL_OP_FAMILY_SSE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"priv"</literal></expr>, <expr><name>R_ANAL_OP_FAMILY_PRIV</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"virt"</literal></expr>, <expr><name>R_ANAL_OP_FAMILY_VIRT</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"crpt"</literal></expr>, <expr><name>R_ANAL_OP_FAMILY_CRYPTO</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"io"</literal></expr>, <expr><name>R_ANAL_OP_FAMILY_IO</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pac"</literal></expr>, <expr><name>R_ANAL_OP_FAMILY_PAC</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"thread"</literal></expr>, <expr><name>R_ANAL_OP_FAMILY_THREAD</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>of</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>of</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>of</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>of</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>R_ANAL_OP_FAMILY_UNKNOWN</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_op_hint</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>RAnalHint</name> <modifier>*</modifier></type><name>hint</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>changes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hint</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hint</name><operator>-&gt;</operator><name>val</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>hint</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hint</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>hint</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hint</name><operator>-&gt;</operator><name>jump</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>hint</name><operator>-&gt;</operator><name>jump</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hint</name><operator>-&gt;</operator><name>fail</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name><name>hint</name><operator>-&gt;</operator><name>fail</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hint</name><operator>-&gt;</operator><name>opcode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>hint</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hint</name><operator>-&gt;</operator><name>esil</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name><name>hint</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hint</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>hint</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>changes</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_op_reg_delta</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RAnalOp</name></type> <name>op</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_ALL</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>.</operator><name>dst</name></name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>.</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>.</operator><name>dst</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>.</operator><name>dst</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>.</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op</name><operator>.</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>delta</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
