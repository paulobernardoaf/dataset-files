<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\hash\hash.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_util.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_LIB_XXHASH</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xxhash.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xxhash.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>R_LIB_VERSION</name> <argument_list>(<argument><expr><name>r_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>bit</name></decl>;</decl_stmt>
}</block> <decl><name><name>hash_name_bytes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"all"</literal></expr>, <expr><name>UT64_MAX</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xor"</literal></expr>, <expr><name>R_HASH_XOR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xorpair"</literal></expr>, <expr><name>R_HASH_XORPAIR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"md4"</literal></expr>, <expr><name>R_HASH_MD4</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"md5"</literal></expr>, <expr><name>R_HASH_MD5</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sha1"</literal></expr>, <expr><name>R_HASH_SHA1</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sha256"</literal></expr>, <expr><name>R_HASH_SHA256</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sha384"</literal></expr>, <expr><name>R_HASH_SHA384</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sha512"</literal></expr>, <expr><name>R_HASH_SHA512</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"adler32"</literal></expr>, <expr><name>R_HASH_ADLER32</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xxhash"</literal></expr>, <expr><name>R_HASH_XXHASH</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"parity"</literal></expr>, <expr><name>R_HASH_PARITY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"entropy"</literal></expr>, <expr><name>R_HASH_ENTROPY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hamdist"</literal></expr>, <expr><name>R_HASH_HAMDIST</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pcprint"</literal></expr>, <expr><name>R_HASH_PCPRINT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mod255"</literal></expr>, <expr><name>R_HASH_MOD255</name></expr> }</block></expr>,



<expr><block>{ <expr><literal type="string">"luhn"</literal></expr>, <expr><name>R_HASH_LUHN</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fletcher8"</literal></expr>, <expr><name>R_HASH_FLETCHER8</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fletcher16"</literal></expr>, <expr><name>R_HASH_FLETCHER16</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fletcher32"</literal></expr>, <expr><name>R_HASH_FLETCHER32</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fletcher64"</literal></expr>, <expr><name>R_HASH_FLETCHER64</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc8smbus"</literal></expr>, <expr><name>R_HASH_CRC8_SMBUS</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC8_EXTRA</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"crc8cdma2000"</literal></expr>, <expr><name>R_HASH_CRC8_CDMA2000</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc8darc"</literal></expr>, <expr><name>R_HASH_CRC8_DARC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc8dvbs2"</literal></expr>, <expr><name>R_HASH_CRC8_DVB_S2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc8ebu"</literal></expr>, <expr><name>R_HASH_CRC8_EBU</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc8icode"</literal></expr>, <expr><name>R_HASH_CRC8_ICODE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc8itu"</literal></expr>, <expr><name>R_HASH_CRC8_ITU</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc8maxim"</literal></expr>, <expr><name>R_HASH_CRC8_MAXIM</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc8rohc"</literal></expr>, <expr><name>R_HASH_CRC8_ROHC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc8wcdma"</literal></expr>, <expr><name>R_HASH_CRC8_WCDMA</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC15_EXTRA</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"crc15can"</literal></expr>, <expr><name>R_HASH_CRC15_CAN</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr><block>{ <expr><literal type="string">"crc16"</literal></expr>, <expr><name>R_HASH_CRC16</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16hdlc"</literal></expr>, <expr><name>R_HASH_CRC16_HDLC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16usb"</literal></expr>, <expr><name>R_HASH_CRC16_USB</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16citt"</literal></expr>, <expr><name>R_HASH_CRC16_CITT</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC16_EXTRA</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"crc16augccitt"</literal></expr>, <expr><name>R_HASH_CRC16_AUG_CCITT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16buypass"</literal></expr>, <expr><name>R_HASH_CRC16_BUYPASS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16cdma2000"</literal></expr>, <expr><name>R_HASH_CRC16_CDMA2000</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16dds110"</literal></expr>, <expr><name>R_HASH_CRC16_DDS110</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16dectr"</literal></expr>, <expr><name>R_HASH_CRC16_DECT_R</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16dectx"</literal></expr>, <expr><name>R_HASH_CRC16_DECT_X</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16dnp"</literal></expr>, <expr><name>R_HASH_CRC16_DNP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16en13757"</literal></expr>, <expr><name>R_HASH_CRC16_EN13757</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16genibus"</literal></expr>, <expr><name>R_HASH_CRC16_GENIBUS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16maxim"</literal></expr>, <expr><name>R_HASH_CRC16_MAXIM</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16mcrf4xx"</literal></expr>, <expr><name>R_HASH_CRC16_MCRF4XX</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16riello"</literal></expr>, <expr><name>R_HASH_CRC16_RIELLO</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16t10dif"</literal></expr>, <expr><name>R_HASH_CRC16_T10_DIF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16teledisk"</literal></expr>, <expr><name>R_HASH_CRC16_TELEDISK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16tms37157"</literal></expr>, <expr><name>R_HASH_CRC16_TMS37157</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crca"</literal></expr>, <expr><name>R_HASH_CRCA</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16kermit"</literal></expr>, <expr><name>R_HASH_CRC16_KERMIT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16modbus"</literal></expr>, <expr><name>R_HASH_CRC16_MODBUS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16x25"</literal></expr>, <expr><name>R_HASH_CRC16_X25</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc16xmodem"</literal></expr>, <expr><name>R_HASH_CRC16_XMODEM</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC24</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"crc24"</literal></expr>, <expr><name>R_HASH_CRC24</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr><block>{ <expr><literal type="string">"crc32"</literal></expr>, <expr><name>R_HASH_CRC32</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc32c"</literal></expr>, <expr><name>R_HASH_CRC32C</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc32ecma267"</literal></expr>, <expr><name>R_HASH_CRC32_ECMA_267</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC32_EXTRA</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"crc32bzip2"</literal></expr>, <expr><name>R_HASH_CRC32_BZIP2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc32d"</literal></expr>, <expr><name>R_HASH_CRC32D</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc32mpeg2"</literal></expr>, <expr><name>R_HASH_CRC32_MPEG2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc32posix"</literal></expr>, <expr><name>R_HASH_CRC32_POSIX</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc32q"</literal></expr>, <expr><name>R_HASH_CRC32Q</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc32jamcrc"</literal></expr>, <expr><name>R_HASH_CRC32_JAMCRC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc32xfer"</literal></expr>, <expr><name>R_HASH_CRC32_XFER</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"crc64"</literal></expr>, <expr><name>R_HASH_CRC64</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64_EXTRA</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"crc64ecma"</literal></expr>, <expr><name>R_HASH_CRC64_ECMA182</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc64we"</literal></expr>, <expr><name>R_HASH_CRC64_WE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc64xz"</literal></expr>, <expr><name>R_HASH_CRC64_XZ</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crc64iso"</literal></expr>, <expr><name>R_HASH_CRC64_ISO</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>


<function><type><name>R_API</name> <name>int</name></type> <name>r_hash_pcprint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>buffer</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>buffer</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>buffer</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_PRINTABLE</name> <argument_list>(<argument><expr><operator>*</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><operator>(</operator><literal type="number">100</literal> <operator>*</operator> <name>n</name><operator>)</operator> <operator>/</operator> <name>len</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_hash_parity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>ones</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>buf</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>buf</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>x</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ones</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">128</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">64</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">32</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">16</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>
<operator>(</operator><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>ones</name> <operator>%</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>R_API</name> <name>ut16</name></type> <name>r_hash_xorpair</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>len</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>len</name><operator>--</operator></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>^=</operator> <operator>*</operator><name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name></type> <name>r_hash_xor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>len</name><operator>--</operator></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>^=</operator> <operator>*</operator><name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name></type> <name>r_hash_mod255</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>c</name> <operator>%</operator> <literal type="number">255</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut32</name></type> <name>r_hash_xxhash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>XXH32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name></type> <name>r_hash_deviation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>len</name><operator>--</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <call><name>R_ABS</name> <argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_hash_name</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>bit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>hash_name_bytes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bit</name> <operator>&amp;</operator> <name><name>hash_name_bytes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>hash_name_bytes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_hash_size</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>algo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALGOBIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>if (algo &amp; R_HASH_##x) {return R_HASH_SIZE_##x;}</cpp:value></cpp:define>



<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>FLETCHER8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>FLETCHER16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>FLETCHER32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>FLETCHER64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>MD4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>MD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>SHA256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>SHA384</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>SHA512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>XXHASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>ADLER32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>PARITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>ENTROPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>HAMDIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>XOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>XORPAIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>MOD255</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>PCPRINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>LUHN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC8_SMBUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC8_EXTRA</name></expr></cpp:if>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC8_CDMA2000</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC8_DARC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC8_DVB_S2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC8_EBU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC8_ICODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC8_ITU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC8_MAXIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC8_ROHC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC8_WCDMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC15_EXTRA</name></expr></cpp:if>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC15_CAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_HDLC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_USB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_CITT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC16_EXTRA</name></expr></cpp:if>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_AUG_CCITT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ALGOBIT</name> <argument_list>(<argument>CRC16_BUYPASS</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_CDMA2000</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_DDS110</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_DECT_R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_DECT_X</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_DNP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_EN13757</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_GENIBUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_MAXIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_MCRF4XX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_RIELLO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_T10_DIF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_TELEDISK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_TMS37157</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRCA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_KERMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_MODBUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_X25</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC16_XMODEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC24</name></expr></cpp:if>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC24</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC32C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC32_ECMA_267</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC32_EXTRA</name></expr></cpp:if>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC32_BZIP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC32D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC32_MPEG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC32_POSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC32Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC32_JAMCRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC32_XFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64</name></expr></cpp:if>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64_EXTRA</name></expr></cpp:if>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC64_ECMA182</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC64_WE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC64_XZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALGOBIT</name> <argument_list>(<argument><expr><name>CRC64_ISO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>ut64</name></type> <name>r_hash_name_to_bits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>tolower</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>*</operator><name>ptr</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hash_name_bytes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>hash_name_bytes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <name><name>hash_name_bytes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition>;</do>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_hash_do_spice</name><parameter_list>(<parameter><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>algo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loops</name></decl></parameter>, <parameter><decl><type><name>RHashSeed</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>hlen</name> <init>= <expr><call><name>r_hash_size</name> <argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>loops</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>seed</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>seed</name><operator>-&gt;</operator><name>prefix</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>seed</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>seed</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name><name>seed</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>hlen</name></expr></argument>, <argument><expr><name><name>seed</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>seed</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>hlen</name> <operator>+</operator> <name><name>seed</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>hlen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_hash_calculate</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>algo</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_hash_to_string</name><parameter_list>(<parameter><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>algo</name> <init>= <expr><call><name>r_hash_name_to_bits</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>digest_hex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RHash</name> <modifier>*</modifier></type><name>myctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>digest_size</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>algo</name> <operator>||</operator> <operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>myctx</name> <operator>=</operator> <name>ctx</name> <operator>=</operator> <call><name>r_hash_new</name> <argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_hash_do_begin</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>digest_size</name> <operator>=</operator> <call><name>r_hash_calculate</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>algo</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_hash_do_end</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>digest_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>digest_hex</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>digest_hex</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="string">"%02.8f"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>entropy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>digest_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>digest_size</name> <operator>*</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>digest_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>digest_hex</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>digest_hex</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name>digest_size</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>digest_hex</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>digest_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>digest_hex</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>digest_hex</name><index>[<expr><name>digest_size</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_hash_free</name> <argument_list>(<argument><expr><name>myctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>digest_hex</name></expr>;</return>
</block_content>}</block></function>
</unit>
