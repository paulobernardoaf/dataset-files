<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\hash\sha2.h">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SHA2_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SHA2_H__</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHA2_USE_INTTYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA256_BLOCK_LENGTH</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA256_DIGEST_LENGTH</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA256_DIGEST_STRING_LENGTH</name></cpp:macro> <cpp:value>(SHA256_DIGEST_LENGTH * 2 + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA384_BLOCK_LENGTH</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA384_DIGEST_LENGTH</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA384_DIGEST_STRING_LENGTH</name></cpp:macro> <cpp:value>(SHA384_DIGEST_LENGTH * 2 + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA512_BLOCK_LENGTH</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA512_DIGEST_LENGTH</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA512_DIGEST_STRING_LENGTH</name></cpp:macro> <cpp:value>(SHA512_DIGEST_LENGTH * 2 + 1)</cpp:value></cpp:define>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
typedef unsigned char u_int8_t; 
typedef unsigned int u_int32_t; 
typedef unsigned long long u_int64_t; 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>u_int8_t</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u_int8_t</name></cpp:macro> <cpp:value>unsigned char</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u_int32_t</name></cpp:macro> <cpp:value>unsigned int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u_int64_t</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHA2_USE_INTTYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

typedef struct _SHA256_CTX {
uint32_t state[8];
uint64_t bitcount;
uint8_t buffer[SHA256_BLOCK_LENGTH];
} SHA256_CTX;
typedef struct _SHA512_CTX {
uint64_t state[8];
uint64_t bitcount[2];
uint8_t buffer[SHA512_BLOCK_LENGTH];
} SHA512_CTX;

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

typedef struct _SHA256_CTX {
u_int32_t state[8];
u_int64_t bitcount;
u_int8_t buffer[SHA256_BLOCK_LENGTH];
} SHA256_CTX;
typedef struct _SHA512_CTX {
u_int64_t state[8];
u_int64_t bitcount[2];
u_int8_t buffer[SHA512_BLOCK_LENGTH];
} SHA512_CTX;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

typedef SHA512_CTX SHA384_CTX;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NOPROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHA2_USE_INTTYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>SHA256_Init</name><parameter_list>(<parameter><decl><type><name>R_SHA256_CTX</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SHA256_Update</name><parameter_list>(<parameter><decl><type><name>R_SHA256_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SHA256_Final</name><parameter_list>(<parameter><decl><type><name><name>uint8_t</name><index>[<expr><name>SHA256_DIGEST_LENGTH</name></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name>R_SHA256_CTX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>SHA256_End</name><parameter_list>(<parameter><decl><type><name>R_SHA256_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>char</name><index>[<expr><name>SHA256_DIGEST_STRING_LENGTH</name></expr>]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>SHA256_Data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>char</name><index>[<expr><name>SHA256_DIGEST_STRING_LENGTH</name></expr>]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SHA384_Init</name><parameter_list>(<parameter><decl><type><name>R_SHA384_CTX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SHA384_Update</name><parameter_list>(<parameter><decl><type><name>R_SHA384_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SHA384_Final</name><parameter_list>(<parameter><decl><type><name><name>uint8_t</name><index>[<expr><name>SHA384_DIGEST_LENGTH</name></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name>R_SHA384_CTX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>SHA384_End</name><parameter_list>(<parameter><decl><type><name>R_SHA384_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>char</name><index>[<expr><name>SHA384_DIGEST_STRING_LENGTH</name></expr>]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>SHA384_Data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>char</name><index>[<expr><name>SHA384_DIGEST_STRING_LENGTH</name></expr>]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SHA512_Init</name><parameter_list>(<parameter><decl><type><name>R_SHA512_CTX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SHA512_Update</name><parameter_list>(<parameter><decl><type><name>R_SHA512_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SHA512_Final</name><parameter_list>(<parameter><decl><type><name><name>uint8_t</name><index>[<expr><name>SHA512_DIGEST_LENGTH</name></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name>R_SHA512_CTX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>SHA512_End</name><parameter_list>(<parameter><decl><type><name>R_SHA512_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>char</name><index>[<expr><name>SHA512_DIGEST_STRING_LENGTH</name></expr>]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>SHA512_Data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>char</name><index>[<expr><name>SHA512_DIGEST_STRING_LENGTH</name></expr>]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function_decl><type><name>void</name></type> <name>SHA256_Init</name><parameter_list>(<parameter><decl><type><name>R_SHA256_CTX</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SHA256_Update</name><parameter_list>(<parameter><decl><type><name>R_SHA256_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_int8_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SHA256_Final</name><parameter_list>(<parameter><decl><type><name><name>u_int8_t</name><index>[<expr><name>SHA256_DIGEST_LENGTH</name></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name>R_SHA256_CTX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>SHA256_End</name><parameter_list>(<parameter><decl><type><name>R_SHA256_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>char</name><index>[<expr><name>SHA256_DIGEST_STRING_LENGTH</name></expr>]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>SHA256_Data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u_int8_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>char</name><index>[<expr><name>SHA256_DIGEST_STRING_LENGTH</name></expr>]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SHA384_Init</name><parameter_list>(<parameter><decl><type><name>R_SHA384_CTX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SHA384_Update</name><parameter_list>(<parameter><decl><type><name>R_SHA384_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_int8_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SHA384_Final</name><parameter_list>(<parameter><decl><type><name><name>u_int8_t</name><index>[<expr><name>SHA384_DIGEST_LENGTH</name></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name>R_SHA384_CTX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>SHA384_End</name><parameter_list>(<parameter><decl><type><name>R_SHA384_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>char</name><index>[<expr><name>SHA384_DIGEST_STRING_LENGTH</name></expr>]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>SHA384_Data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u_int8_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>char</name><index>[<expr><name>SHA384_DIGEST_STRING_LENGTH</name></expr>]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SHA512_Init</name><parameter_list>(<parameter><decl><type><name>R_SHA512_CTX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SHA512_Update</name><parameter_list>(<parameter><decl><type><name>R_SHA512_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_int8_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SHA512_Final</name><parameter_list>(<parameter><decl><type><name><name>u_int8_t</name><index>[<expr><name>SHA512_DIGEST_LENGTH</name></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name>R_SHA512_CTX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>SHA512_End</name><parameter_list>(<parameter><decl><type><name>R_SHA512_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>char</name><index>[<expr><name>SHA512_DIGEST_STRING_LENGTH</name></expr>]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>SHA512_Data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u_int8_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>char</name><index>[<expr><name>SHA512_DIGEST_STRING_LENGTH</name></expr>]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function_decl><type><name>void</name></type> <name>SHA256_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SHA256_Update</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SHA256_Final</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>SHA256_End</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>SHA256_Data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SHA384_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SHA384_Update</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SHA384_Final</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>SHA384_End</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>SHA384_Data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SHA512_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SHA512_Update</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SHA512_Final</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>SHA512_End</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>SHA512_Data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
