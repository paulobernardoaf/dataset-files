<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\reg\double.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_reg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__SDB_WINDOWS__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASTLDBL</name></cpp:macro> <cpp:value>(double)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASTLDBL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>R_API</name> <name>double</name></type> <name>r_reg_get_double</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RRegSet</name> <modifier>*</modifier></type><name>regset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>vld</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>ret</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg</name> <operator>||</operator> <operator>!</operator><name>item</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0LL</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>BITS2BYTES</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>regset</name> <operator>=</operator> <operator>&amp;</operator><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>arena</name></name></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">64</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>off</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>vld</name></expr></argument>, <argument><expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>vld</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_reg_set_double: Bit size %d not supported\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0.0f</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_reg_set_double</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_reg_set_value: item is NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">64</literal></expr>:</case>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>value</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_reg_set_double: Bit size %d not supported\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>arena</name></name></expr>]</index></name><operator>.</operator><name><name>arena</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <call><name>BITS2BYTES</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>BITS2BYTES</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_mem_copybits</name> <argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>arena</name></name></expr>]</index></name><operator>.</operator><name><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator>
<call><name>BITS2BYTES</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_reg_set_value: Cannot set %s to %lf\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>long</name> <name>double</name></type> <name>r_reg_get_longdouble</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RRegSet</name> <modifier>*</modifier></type><name>regset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>vld</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>ret</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg</name> <operator>||</operator> <operator>!</operator><name>item</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0LL</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>BITS2BYTES</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>regset</name> <operator>=</operator> <operator>&amp;</operator><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>arena</name></name></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">80</literal></expr>:</case>
<case>case <expr><literal type="number">96</literal></expr>:</case>
<case>case <expr><literal type="number">128</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>off</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>vld</name></expr></argument>, <argument><expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr>sizeof <operator>(</operator><name>long</name> <name>double</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>vld</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_reg_get_longdouble: Bit size %d not supported\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0.0f</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_reg_set_longdouble</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_reg_set_value: item is NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">80</literal></expr>:</case>
<case>case <expr><literal type="number">96</literal></expr>:</case>
<case>case <expr><literal type="number">128</literal></expr>:</case>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>value</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_reg_set_longdouble: Bit size %d not supported\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>arena</name></name></expr>]</index></name><operator>.</operator><name><name>arena</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <call><name>BITS2BYTES</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>BITS2BYTES</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_mem_copybits</name> <argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>arena</name></name></expr>]</index></name><operator>.</operator><name><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator>
<call><name>BITS2BYTES</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<macro><name>eprintf</name> <argument_list>(<argument><literal type="string">"r_reg_set_value: Cannot set %s to %"</literal> LDBLFMT <literal type="string">"\n"</literal></argument>, <argument>item-&gt;name</argument>, <argument>CASTLDBL value</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>float</name></type> <name>r_reg_get_float</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><literal type="number">0.0f</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_reg_set_float</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
