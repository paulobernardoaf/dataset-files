<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\reg\reg.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_reg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>R_LIB_VERSION</name> <argument_list>(<argument><expr><name>r_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>types</name><index>[<expr><name>R_REG_TYPE_LAST</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"gpr"</literal></expr>, <expr><literal type="string">"drx"</literal></expr>, <expr><literal type="string">"fpu"</literal></expr>, <expr><literal type="string">"mmx"</literal></expr>, <expr><literal type="string">"xmm"</literal></expr>, <expr><literal type="string">"ymm"</literal></expr>, <expr><literal type="string">"flg"</literal></expr>, <expr><literal type="string">"seg"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_reg_32_to_64</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rreg32</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_REG_TYPE_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>reg-&gt;regset[i].regs</argument>, <argument>iter</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name>rreg32</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_REG_TYPE_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>reg-&gt;regset[i].regs</argument>, <argument>iter</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <name>j</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_reg_64_to_32</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rreg64</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_REG_TYPE_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>reg-&gt;regset[i].regs</argument>, <argument>iter</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name>rreg64</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_REG_TYPE_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>reg-&gt;regset[i].regs</argument>, <argument>iter</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <name>j</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_reg_get_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name>R_REG_TYPE_LAST</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>types</name><index>[<expr><name>idx</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_reg_type_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_REG_TYPE_LAST</name> <operator>&amp;&amp;</operator> <name><name>types</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>types</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>R_REG_TYPE_ALL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_reg_item_free</name><parameter_list>(<parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_reg_get_name_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>type</name> <operator>|</operator> <operator>(</operator><name><name>type</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'Z'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'F'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_ZF</name></expr>;</return>
<case>case <expr><literal type="char">'S'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'F'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_SF</name></expr>;</return>
<case>case <expr><literal type="char">'C'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'F'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_CF</name></expr>;</return>
<case>case <expr><literal type="char">'O'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'F'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_OF</name></expr>;</return>

<case>case <expr><literal type="char">'P'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'C'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_PC</name></expr>;</return>
<case>case <expr><literal type="char">'S'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'R'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_SR</name></expr>;</return>
<case>case <expr><literal type="char">'L'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'R'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_LR</name></expr>;</return>
<case>case <expr><literal type="char">'S'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'P'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_SP</name></expr>;</return>
<case>case <expr><literal type="char">'B'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'P'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_BP</name></expr>;</return>
<case>case <expr><literal type="char">'S'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'N'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_SN</name></expr>;</return>

<case>case <expr><literal type="char">'A'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'0'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_A0</name></expr>;</return>
<case>case <expr><literal type="char">'A'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'1'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_A1</name></expr>;</return>
<case>case <expr><literal type="char">'A'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'2'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_A2</name></expr>;</return>
<case>case <expr><literal type="char">'A'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'3'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_A3</name></expr>;</return>
<case>case <expr><literal type="char">'A'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'4'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_A4</name></expr>;</return>
<case>case <expr><literal type="char">'A'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'5'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_A5</name></expr>;</return>
<case>case <expr><literal type="char">'A'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'6'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_A6</name></expr>;</return>
<case>case <expr><literal type="char">'A'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'7'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_A7</name></expr>;</return>
<case>case <expr><literal type="char">'A'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'8'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_A8</name></expr>;</return>
<case>case <expr><literal type="char">'A'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'9'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_A9</name></expr>;</return>

<case>case <expr><literal type="char">'R'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'0'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_R0</name></expr>;</return>
<case>case <expr><literal type="char">'R'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'1'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_R1</name></expr>;</return>
<case>case <expr><literal type="char">'R'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'2'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_R2</name></expr>;</return>
<case>case <expr><literal type="char">'R'</literal> <operator>+</operator> <operator>(</operator><literal type="char">'3'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>:</case> <return>return <expr><name>R_REG_NAME_R3</name></expr>;</return>
</block_content>}</block></switch></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_reg_set_name</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>reg</name> <operator>&amp;&amp;</operator> <name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>role</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>role</name> <operator>&lt;</operator> <name>R_REG_NAME_LAST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>role</name></expr>]</index></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>role</name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_reg_get_name</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&amp;&amp;</operator> <name>role</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>role</name> <operator>&lt;</operator> <name>R_REG_NAME_LAST</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>role</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>roles</name><index>[<expr><name>R_REG_NAME_LAST</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"PC"</literal></expr>, <expr><literal type="string">"SP"</literal></expr>, <expr><literal type="string">"SR"</literal></expr>, <expr><literal type="string">"BP"</literal></expr>, <expr><literal type="string">"LR"</literal></expr>,
<expr><literal type="string">"A0"</literal></expr>, <expr><literal type="string">"A1"</literal></expr>, <expr><literal type="string">"A2"</literal></expr>, <expr><literal type="string">"A3"</literal></expr>, <expr><literal type="string">"A4"</literal></expr>, <expr><literal type="string">"A5"</literal></expr>, <expr><literal type="string">"A6"</literal></expr>, <expr><literal type="string">"A7"</literal></expr>, <expr><literal type="string">"A8"</literal></expr>, <expr><literal type="string">"A9"</literal></expr>,
<expr><literal type="string">"R0"</literal></expr>, <expr><literal type="string">"R1"</literal></expr>, <expr><literal type="string">"R2"</literal></expr>, <expr><literal type="string">"R3"</literal></expr>,
<expr><literal type="string">"ZF"</literal></expr>, <expr><literal type="string">"SF"</literal></expr>, <expr><literal type="string">"CF"</literal></expr>, <expr><literal type="string">"OF"</literal></expr>,
<expr><literal type="string">"SN"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_reg_get_role</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>role</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>role</name> <operator>&lt;</operator> <name>R_REG_NAME_LAST</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>roles</name><index>[<expr><name>role</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_reg_free_internal</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>init</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>roregs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>roregs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>reg_profile_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>reg_profile_cmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_REG_NAME_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_REG_TYPE_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ht_pp_free</name> <argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ht_regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ht_regs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pool</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>init</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>regs</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_reg_item_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>regs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pool</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_reg_arena_free</name> <argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>arena</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pool</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>allregs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>allregs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>regcmp</name><parameter_list>(<parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offa</name> <init>= <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>offset</name></name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name><name>a</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offb</name> <init>= <expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>offset</name></name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>offa</name> <operator>&gt;</operator> <name>offb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_reg_reindex</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>all</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_REG_TYPE_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>reg-&gt;regset[i].regs</argument>, <argument>iter</argument>, <argument>r</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>all</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_list_sort</name> <argument_list>(<argument><expr><name>all</name></expr></argument>, <argument><expr><operator>(</operator><name>RListComparator</name><operator>)</operator><name>regcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>all</argument>, <argument>iter</argument>, <argument>r</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>allregs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>allregs</name></name> <operator>=</operator> <name>all</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RRegItem</name> <modifier>*</modifier></type><name>r_reg_index_get</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>reg</name><operator>-&gt;</operator><name>allregs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_reg_reindex</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>reg-&gt;allregs</argument>, <argument>iter</argument>, <argument>r</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_reg_free</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>reg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_reg_free_internal</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RReg</name> <modifier>*</modifier></type><name>r_reg_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RRegArena</name> <modifier>*</modifier></type><name>arena</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RReg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_REG_TYPE_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>arena</name> <operator>=</operator> <call><name>r_reg_arena_new</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arena</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pool</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_reg_arena_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>regs</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_reg_item_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pool</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>arena</name> <operator>=</operator> <name>arena</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_reg_arena_push</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_REG_TYPE_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cur</name> <operator>=</operator> <call><name>r_list_tail</name> <argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>reg</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_reg_is_readonly</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>reg</name><operator>-&gt;</operator><name>roregs</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>reg-&gt;roregs</argument>, <argument>iter</argument>, <argument>name</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_reg_setv</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>reg</name> <operator>&amp;&amp;</operator> <name>name</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>ri</name></expr>?</condition><then> <expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>UT64_MAX</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_reg_getv</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>reg</name> <operator>&amp;&amp;</operator> <name>name</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>ri</name></expr>?</condition><then> <expr><call><name>r_reg_get_value</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>UT64_MAX</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RRegItem</name> <modifier>*</modifier></type><name>r_reg_get</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>reg</name> <operator>&amp;&amp;</operator> <name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>R_REG_TYPE_FLG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>R_REG_TYPE_GPR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>R_REG_TYPE_LAST</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alias</name> <init>= <expr><call><name>r_reg_get_name_idx</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>alias</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nname</name> <init>= <expr><call><name>r_reg_get_name</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>nname</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>type</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>e</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ht_regs</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>ht_pp_find</name> <argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_reg_get_list</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>regs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>type</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>type</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name>R_REG_TYPE_LAST</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>regs</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>regs</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>type</name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_REG_TYPE_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maskregstype</name> <operator>&amp;</operator> <name>mask</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>regs</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>regs</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>regs</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>RRegItem</name> <modifier>*</modifier></type><name>r_reg_get_at</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>regsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_reg_get_list</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>ri</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>regsize</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BITS2BYTES</name> <argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>delta</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ri</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>RRegItem</name> <modifier>*</modifier></type><name>r_reg_next_diff</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>prev_ri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>regsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>reg</name> <operator>&amp;&amp;</operator> <name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>type</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>type</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name>R_REG_TYPE_LAST</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RRegArena</name> <modifier>*</modifier></type><name>arena</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>arena</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_offset</name> <init>= <expr><ternary><condition><expr><name>prev_ri</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>prev_ri</name><operator>-&gt;</operator><name>offset</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>prev_ri</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>regs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>ri</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>offset</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name>prev_offset</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ri</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RRegSet</name> <modifier>*</modifier></type><name>r_reg_regset_get</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>type</name> <operator>&gt;=</operator> <name>R_REG_TYPE_LAST</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RRegSet</name> <modifier>*</modifier></type><name>rs</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name><name>rs</name><operator>-&gt;</operator><name>arena</name></name></expr> ?</condition><then> <expr><name>rs</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
