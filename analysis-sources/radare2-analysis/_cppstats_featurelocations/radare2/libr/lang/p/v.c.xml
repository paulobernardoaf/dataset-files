<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\lang\p\v.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_lang.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>lang_v_file</name><parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r2v</name> <init>= \
<expr><literal type="string">"module main\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"#flag `pkg-config --cflags --libs r_core`\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"#include &lt;r_core.h&gt;\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"struct R2 {}\n"</literal>
<literal type="string">"fn C.r_core_cmd_str (core &amp;R2, s string) byteptr\n"</literal>
<literal type="string">"fn C.r_core_free (core &amp;R2)\n"</literal>
<literal type="string">"fn C.r_core_new () &amp;R2\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"pub fn (core &amp;R2)cmd(s string) string {\n"</literal>
<literal type="string">" unsafe {\n"</literal>
<literal type="string">" o := C.r_core_cmd_str (core, s.str)\n"</literal>
<literal type="string">" strs := string(byteptr(o))\n"</literal>
<literal type="string">" free(o)\n"</literal>
<literal type="string">" return strs\n"</literal>
<literal type="string">" }\n"</literal>
<literal type="string">"}\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"pub fn (core &amp;R2)str() string {\n"</literal>
<literal type="string">" return i64(core).str()\n"</literal>
<literal type="string">"}\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"pub fn main() {}\n"</literal>
<literal type="string">"pub fn (core &amp;R2)free() {\n"</literal>
<literal type="string">" unsafe {C.r_core_free (core)}\n"</literal>
<literal type="string">"}\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"pub fn new() &amp;R2 {\n"</literal>
<literal type="string">" return C.r_core_new ()\n"</literal>
<literal type="string">"}\n"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vsk</name> <init>= \
<expr><literal type="string">"fn entry(core &amp;R2) {\n"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__run</name><parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>r_sandbox_fopen</name> <argument_list>(<argument><expr><literal type="string">".tmp.v"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><name>r2v</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><name>vsk</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lang_v_file</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><literal type="string">".tmp.v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_file_rm</name> <argument_list>(<argument><expr><literal type="string">".tmp.v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot open .tmp.v\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lang_v_file</name><parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">".v"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">".tmp.v"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>code</name> <init>= <expr><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>__run</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"file not found (%s)\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>r_str_lchr</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libpath</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>libname</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>libpath</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>libname</name> <operator>=</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>libpath</name> <operator>=</operator> <literal type="string">"."</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>libname</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_sys_setenv</name> <argument_list>(<argument><expr><literal type="string">"PKG_CONFIG_PATH"</literal></expr></argument>, <argument><expr><name>R2_LIBDIR</name><literal type="string">"/pkgconfig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shl</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s/lib%s."</literal><name>R_LIB_EXT</name></expr></argument>, <argument><expr><name>libpath</name></expr></argument>, <argument><expr><name>libname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"v -cflags '-shared -fPIC' -o %s build %s"</literal></expr></argument>, <argument><expr><name>shl</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_sandbox_system</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>shl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lib</name> <init>= <expr><call><name>r_lib_dl_open</name> <argument_list>(<argument><expr><name>shl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>shl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lib</name></expr>)</condition> <block>{<block_content>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fcn</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>fcn</name> <operator>=</operator> <call><name>r_lib_dl_sym</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"main__entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fcn</name> <argument_list>(<argument><expr><name><name>lang</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>ac</name></expr></argument>, <argument><expr><name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ac</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>av</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot find 'entry' symbol in library\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_lib_dl_close</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot open library\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_file_rm</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lang_v_run</name><parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__run</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>RLangPlugin</name></type> <name>r_lang_plugin_v</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"v"</literal></expr>,
<expr><operator>.</operator><name>ext</name> <operator>=</operator> <literal type="string">"v"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"V language extension"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL"</literal></expr>,
<expr><operator>.</operator><name>run</name> <operator>=</operator> <name>lang_v_run</name></expr>,
<expr><operator>.</operator><name>run_file</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>lang_v_file</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
