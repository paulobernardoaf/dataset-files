<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\lang\lang.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lang.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>R_LIB_VERSION</name><argument_list>(<argument><expr><name>r_lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"p/pipe.c"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"p/vala.c"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"p/rust.c"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"p/zig.c"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"p/c.c"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"p/v.c"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"p/lib.c"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"p/cpipe.c"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>RLang</name> <modifier>*</modifier></type><name>__lang</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>void</name></type> <name>r_lang_plugin_free</name> <parameter_list>(<parameter><decl><type><name>RLangPlugin</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>fini</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>fini</name></name> <argument_list>(<argument><expr><name>__lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RLang</name> <modifier>*</modifier></type><name>r_lang_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RLang</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lang</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>lang</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lang</name><operator>-&gt;</operator><name>langs</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lang</name><operator>-&gt;</operator><name>langs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_lang_free</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>lang</name><operator>-&gt;</operator><name>langs</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator><name>r_lang_plugin_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lang</name><operator>-&gt;</operator><name>defs</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lang</name><operator>-&gt;</operator><name>defs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_lang_free</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>lang</name><operator>-&gt;</operator><name>defs</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator><name>r_lang_def_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lang</name><operator>-&gt;</operator><name>cb_printf</name></name> <operator>=</operator> <operator>(</operator><name>PrintfCallback</name><operator>)</operator><name>printf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_lang_add</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_lang_plugin_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>
<expr_stmt><expr><call><name>r_lang_add</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_lang_plugin_cpipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>r_lang_add</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_lang_plugin_vala</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_lang_add</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_lang_plugin_rust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_lang_add</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_lang_plugin_zig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_lang_add</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_lang_plugin_pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_lang_add</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_lang_plugin_lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_lang_add</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_lang_plugin_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>lang</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_lang_free</name><parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lang</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__lang</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_lang_undef</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>lang</name><operator>-&gt;</operator><name>langs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>lang</name><operator>-&gt;</operator><name>defs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>R_API</name> <name>void</name></type> <name>r_lang_set_user_ptr</name><parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>lang</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_lang_define</name><parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RLangDef</name> <modifier>*</modifier></type><name>def</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>lang-&gt;defs</argument>, <argument>iter</argument>, <argument>def</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>def</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name>def</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RLangDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>def</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>lang</name><operator>-&gt;</operator><name>defs</name></name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_lang_def_free</name> <parameter_list>(<parameter><decl><type><name>RLangDef</name> <modifier>*</modifier></type><name>def</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_lang_undef</name><parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RLangDef</name> <modifier>*</modifier></type><name>def</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>lang-&gt;defs</argument>, <argument>iter</argument>, <argument>def</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>def</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name><name>lang</name><operator>-&gt;</operator><name>defs</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>lang</name><operator>-&gt;</operator><name>defs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lang</name><operator>-&gt;</operator><name>defs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_lang_setup</name><parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lang</name> <operator>&amp;&amp;</operator> <name><name>lang</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>lang</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>setup</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>lang</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>setup</name></name> <argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_lang_add</name><parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>, <parameter><decl><type><name>RLangPlugin</name> <modifier>*</modifier></type><name>foo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>foo</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>r_lang_get_by_name</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><name><name>foo</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>foo</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>foo</name><operator>-&gt;</operator><name>init</name></name> <argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>lang</name><operator>-&gt;</operator><name>langs</name></name></expr></argument>, <argument><expr><name>foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>bool</name></type> <name>r_lang_list</name><parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RLangPlugin</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lang</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>lang-&gt;langs</argument>, <argument>iter</argument>, <argument>h</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>license</name> <init>= <expr><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>license</name></name></expr>
?</condition><then> <expr><name><name>h</name><operator>-&gt;</operator><name>license</name></name></expr> </then><else>: <expr><literal type="string">"???"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>lang</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s: (%s) %s\n"</literal></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>license</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RLangPlugin</name> <modifier>*</modifier></type><name>r_lang_get_by_extension</name> <parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RLangPlugin</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_str_lchr</name> <argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ext</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>lang-&gt;langs</argument>, <argument>iter</argument>, <argument>h</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RLangPlugin</name> <modifier>*</modifier></type><name>r_lang_get_by_name</name> <parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RLangPlugin</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>lang-&gt;langs</argument>, <argument>iter</argument>, <argument>h</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>alias</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_lang_use</name><parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RLangPlugin</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>r_lang_get_by_name</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lang</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>bool</name></type> <name>r_lang_set_argv</name><parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lang</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>lang</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>set_argv</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>lang</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>set_argv</name></name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_lang_run</name><parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lang</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>lang</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>run</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>lang</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>run</name></name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_lang_run_string</name><parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_lang_run</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_lang_run_file</name><parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lang</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lang</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>run_file</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lang</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>run</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>code</name> <init>= <expr><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>code</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Could not open '%s'.\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>lang</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>run</name></name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>lang</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>run_file</name></name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>int</name></type> <name>r_lang_prompt</name><parameter_list>(<parameter><decl><type><name>RLang</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lang</name> <operator>||</operator> <operator>!</operator><name><name>lang</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lang</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>prompt</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>lang</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>prompt</name></name> <argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RLine</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>r_line_singleton</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RLineHistory</name></type> <name>hist</name> <init>= <expr><name><name>line</name><operator>-&gt;</operator><name>history</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RLineHistory</name></type> <name>histnull</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RLineCompletion</name></type> <name>oc</name> <init>= <expr><name><name>line</name><operator>-&gt;</operator><name>completion</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RLineCompletion</name></type> <name>ocnull</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prompt</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>prompt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>completion</name></name> <operator>=</operator> <name>ocnull</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>history</name></name> <operator>=</operator> <name>histnull</name></expr>;</expr_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s&gt; "</literal></expr></argument>, <argument><expr><name><name>lang</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_line_set_prompt</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
printf ("%s&gt; ", lang-&gt;cur-&gt;name);
fflush (stdout);
fgets (buf, sizeof (buf), stdin);
if (feof (stdin)) break;
r_str_trim_tail (buf);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_line_readline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_line_hist_add</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sandbox_system</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>foo</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>code</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>foo</name> <operator>=</operator> <call><name>r_cons_editor</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_lang_run</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><name>foo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>foo</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>r_cons_yesno</name> <argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>, <argument><expr><literal type="string">"Edit again? (Y/n)"</literal></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">". "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>r_file_abspath</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_lang_run_file</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RLangDef</name> <modifier>*</modifier></type><name>def</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">" ? - show this help message\n"</literal>
<literal type="string">" ! - run $EDITOR\n"</literal>
<literal type="string">" !command - run system command\n"</literal>
<literal type="string">" . file - interpret file\n"</literal>
<literal type="string">" q - quit prompt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s example:\n"</literal></expr></argument>, <argument><expr><name><name>lang</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lang</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>help</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>*</operator><name><name>lang</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>help</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name><name>lang</name><operator>-&gt;</operator><name>defs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"variables:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>lang-&gt;defs</argument>, <argument>iter</argument>, <argument>def</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" %s %s\n"</literal></expr></argument>, <argument><expr><name><name>def</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>def</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_lang_run</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>r_line_set_prompt</name> <argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>completion</name></name> <operator>=</operator> <name>oc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>history</name></name> <operator>=</operator> <name>hist</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clearerr</name> <argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
