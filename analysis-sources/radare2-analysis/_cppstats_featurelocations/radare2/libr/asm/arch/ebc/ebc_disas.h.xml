<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\ebc\ebc_disas.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_EBC_DISAS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R2_EBC_DISAS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EBC_OPCODE_MASK</name></cpp:macro> <cpp:value>0x3F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EBC_MODIFIER_MASK</name></cpp:macro> <cpp:value>0xC0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EBC_OPERAND1_MASK</name></cpp:macro> <cpp:value>0x07</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EBC_OPERAND2_MASK</name></cpp:macro> <cpp:value>(0x07 &lt;&lt; 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EBC_OPERAND1_DIRECT</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EBC_OPERAND2_DIRECT</name></cpp:macro> <cpp:value>0xA0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EBC_OPERAND1_INDX</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EBC_OPERAND2_INDX</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EBC_GET_OPCODE</name><parameter_list>(<parameter><type><name>byte</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(byte &amp; EBC_OPCODE_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EBC_INSTR_MAXLEN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EBC_OPERANDS_MAXLEN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EBC_NTH_BIT</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1ULL &lt;&lt; n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EBC_N_BIT_MASK</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(~(~0U &lt;&lt; (n)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EBC_GET_BIT</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v &gt;&gt; n) &amp; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x &amp; (1 &lt;&lt; n))</cpp:value></cpp:define>

<enum>enum <name>ebc_opcodes</name> <block>{
<decl><name>EBC_BREAK</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>EBC_JMP</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>EBC_JMP8</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>EBC_CALL</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,
<decl><name>EBC_RET</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
<decl><name>EBC_CMPEQ</name> <init>= <expr><literal type="number">0x05</literal></expr></init></decl>,
<decl><name>EBC_CMPLTE</name> <init>= <expr><literal type="number">0x06</literal></expr></init></decl>,
<decl><name>EBC_CMPGTE</name> <init>= <expr><literal type="number">0x07</literal></expr></init></decl>,
<decl><name>EBC_CMPULTE</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,
<decl><name>EBC_CMPUGTE</name> <init>= <expr><literal type="number">0x09</literal></expr></init></decl>,
<decl><name>EBC_NOT</name> <init>= <expr><literal type="number">0x0A</literal></expr></init></decl>,
<decl><name>EBC_NEG</name> <init>= <expr><literal type="number">0x0B</literal></expr></init></decl>,
<decl><name>EBC_ADD</name> <init>= <expr><literal type="number">0x0C</literal></expr></init></decl>,
<decl><name>EBC_SUB</name> <init>= <expr><literal type="number">0x0D</literal></expr></init></decl>,
<decl><name>EBC_MUL</name> <init>= <expr><literal type="number">0x0E</literal></expr></init></decl>,
<decl><name>EBC_MULU</name> <init>= <expr><literal type="number">0x0F</literal></expr></init></decl>,
<decl><name>EBC_DIV</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>EBC_DIVU</name> <init>= <expr><literal type="number">0x11</literal></expr></init></decl>,
<decl><name>EBC_MOD</name> <init>= <expr><literal type="number">0x12</literal></expr></init></decl>,
<decl><name>EBC_MODU</name> <init>= <expr><literal type="number">0x13</literal></expr></init></decl>,
<decl><name>EBC_AND</name> <init>= <expr><literal type="number">0x14</literal></expr></init></decl>,
<decl><name>EBC_OR</name> <init>= <expr><literal type="number">0x15</literal></expr></init></decl>,
<decl><name>EBC_XOR</name> <init>= <expr><literal type="number">0x16</literal></expr></init></decl>,
<decl><name>EBC_SHL</name> <init>= <expr><literal type="number">0x17</literal></expr></init></decl>,
<decl><name>EBC_SHR</name> <init>= <expr><literal type="number">0x18</literal></expr></init></decl>,
<decl><name>EBC_ASHR</name> <init>= <expr><literal type="number">0x19</literal></expr></init></decl>,
<decl><name>EBC_EXTNDB</name> <init>= <expr><literal type="number">0x1A</literal></expr></init></decl>,
<decl><name>EBC_EXTNDW</name> <init>= <expr><literal type="number">0x1B</literal></expr></init></decl>,
<decl><name>EBC_EXTNDD</name> <init>= <expr><literal type="number">0x1C</literal></expr></init></decl>,
<decl><name>EBC_MOVBW</name> <init>= <expr><literal type="number">0x1D</literal></expr></init></decl>,
<decl><name>EBC_MOVWW</name> <init>= <expr><literal type="number">0x1E</literal></expr></init></decl>,
<decl><name>EBC_MOVDW</name> <init>= <expr><literal type="number">0x1F</literal></expr></init></decl>,
<decl><name>EBC_MOVQW</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,
<decl><name>EBC_MOVBD</name> <init>= <expr><literal type="number">0x21</literal></expr></init></decl>,
<decl><name>EBC_MOVWD</name> <init>= <expr><literal type="number">0x22</literal></expr></init></decl>,
<decl><name>EBC_MOVDD</name> <init>= <expr><literal type="number">0x23</literal></expr></init></decl>,
<decl><name>EBC_MOVQD</name> <init>= <expr><literal type="number">0x24</literal></expr></init></decl>,
<decl><name>EBC_MOVSNW</name> <init>= <expr><literal type="number">0x25</literal></expr></init></decl>,
<decl><name>EBC_MOVSND</name> <init>= <expr><literal type="number">0x26</literal></expr></init></decl>,
<decl><name>EBC_UNDEFINED</name> <init>= <expr><literal type="number">0x27</literal></expr></init></decl>,
<decl><name>EBC_MOVQQ</name> <init>= <expr><literal type="number">0x28</literal></expr></init></decl>,
<decl><name>EBC_LOADSP</name> <init>= <expr><literal type="number">0x29</literal></expr></init></decl>,
<decl><name>EBC_STORESP</name> <init>= <expr><literal type="number">0x2A</literal></expr></init></decl>,
<decl><name>EBC_PUSH</name> <init>= <expr><literal type="number">0x2B</literal></expr></init></decl>,
<decl><name>EBC_POP</name> <init>= <expr><literal type="number">0x2C</literal></expr></init></decl>,
<decl><name>EBC_CMPIEQ</name> <init>= <expr><literal type="number">0x2D</literal></expr></init></decl>,
<decl><name>EBC_CMPILTE</name> <init>= <expr><literal type="number">0x2E</literal></expr></init></decl>,
<decl><name>EBC_CMPIGTE</name> <init>= <expr><literal type="number">0x2F</literal></expr></init></decl>,
<decl><name>EBC_CMPIULTE</name> <init>= <expr><literal type="number">0x30</literal></expr></init></decl>,
<decl><name>EBC_CMPIUGTE</name> <init>= <expr><literal type="number">0x31</literal></expr></init></decl>,
<decl><name>EBC_MOVNW</name> <init>= <expr><literal type="number">0x32</literal></expr></init></decl>,
<decl><name>EBC_MOVND</name> <init>= <expr><literal type="number">0x33</literal></expr></init></decl>,
<decl><name>EBC_UNDEFINED2</name> <init>= <expr><literal type="number">0x34</literal></expr></init></decl>,
<decl><name>EBC_PUSHN</name> <init>= <expr><literal type="number">0x35</literal></expr></init></decl>,
<decl><name>EBC_POPN</name> <init>= <expr><literal type="number">0x36</literal></expr></init></decl>,
<decl><name>EBC_MOVI</name> <init>= <expr><literal type="number">0x37</literal></expr></init></decl>,
<decl><name>EBC_MOVIN</name> <init>= <expr><literal type="number">0x38</literal></expr></init></decl>,
<decl><name>EBC_MOVREL</name> <init>= <expr><literal type="number">0x39</literal></expr></init></decl>,
<decl><name>EBC_COMMAND_NUM</name></decl>
}</block>;</enum>


<typedef>typedef <type><struct>struct <name>ebc_command</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>instr</name><index>[<expr><name>EBC_INSTR_MAXLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>operands</name><index>[<expr><name>EBC_OPERANDS_MAXLEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ebc_command_t</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ebc_decode_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
