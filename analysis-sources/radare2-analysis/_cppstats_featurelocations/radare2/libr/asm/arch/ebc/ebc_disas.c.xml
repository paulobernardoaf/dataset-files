<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\ebc\ebc_disas.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ebc_disas.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHK_SNPRINTF</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int len_chk_snprintf_ = snprintf (dst, sz, fmt, __VA_ARGS__); if (len_chk_snprintf_ &gt;= sz) { return -1; }} while (0)</cpp:value></cpp:define>






<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>instr_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"break"</literal></expr>,
<expr><literal type="string">"jmp"</literal></expr>,
<expr><literal type="string">"jmp8"</literal></expr>,
<expr><literal type="string">"call"</literal></expr>,
<expr><literal type="string">"ret"</literal></expr>,
<expr><literal type="string">"cmp"</literal></expr>,
<expr><literal type="string">"cmp"</literal></expr>,
<expr><literal type="string">"cmp"</literal></expr>,
<expr><literal type="string">"cmp"</literal></expr>,
<expr><literal type="string">"cmp"</literal></expr>,
<expr><literal type="string">"not"</literal></expr>,
<expr><literal type="string">"neg"</literal></expr>,
<expr><literal type="string">"add"</literal></expr>,
<expr><literal type="string">"sub"</literal></expr>,
<expr><literal type="string">"mul"</literal></expr>,
<expr><literal type="string">"mulu"</literal></expr>,
<expr><literal type="string">"div"</literal></expr>,
<expr><literal type="string">"divu"</literal></expr>,
<expr><literal type="string">"mod"</literal></expr>,
<expr><literal type="string">"modu"</literal></expr>,
<expr><literal type="string">"and"</literal></expr>,
<expr><literal type="string">"or"</literal></expr>,
<expr><literal type="string">"xor"</literal></expr>,
<expr><literal type="string">"shl"</literal></expr>,
<expr><literal type="string">"shr"</literal></expr>,
<expr><literal type="string">"ashr"</literal></expr>,
<expr><literal type="string">"extndb"</literal></expr>,
<expr><literal type="string">"extndw"</literal></expr>,
<expr><literal type="string">"extndd"</literal></expr>,
<expr><literal type="string">"movbw"</literal></expr>,
<expr><literal type="string">"movww"</literal></expr>,
<expr><literal type="string">"movdw"</literal></expr>,
<expr><literal type="string">"movqw"</literal></expr>,
<expr><literal type="string">"movbd"</literal></expr>,
<expr><literal type="string">"movwd"</literal></expr>,
<expr><literal type="string">"movdd"</literal></expr>,
<expr><literal type="string">"movqd"</literal></expr>,
<expr><literal type="string">"movsnw"</literal></expr>,
<expr><literal type="string">"movsnd"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"movqq"</literal></expr>,
<expr><literal type="string">"loadsp"</literal></expr>,
<expr><literal type="string">"storesp"</literal></expr>,
<expr><literal type="string">"push"</literal></expr>,
<expr><literal type="string">"pop"</literal></expr>,
<expr><literal type="string">"cmpi"</literal></expr>,
<expr><literal type="string">"cmpi"</literal></expr>,
<expr><literal type="string">"cmpi"</literal></expr>,
<expr><literal type="string">"cmpi"</literal></expr>,
<expr><literal type="string">"cmpi"</literal></expr>,
<expr><literal type="string">"movnw"</literal></expr>,
<expr><literal type="string">"movnd"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"pushn"</literal></expr>,
<expr><literal type="string">"popn"</literal></expr>,
<expr><literal type="string">"movi"</literal></expr>,
<expr><literal type="string">"movin"</literal></expr>,
<expr><literal type="string">"movrel"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>dedic_regs</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"FLAGS"</literal></expr>,
<expr><literal type="string">"IP"</literal></expr>,
<expr><literal type="string">"DR_RESERVED1"</literal></expr>,
<expr><literal type="string">"DR_RESERVED2"</literal></expr>,
<expr><literal type="string">"DR_RESERVED3"</literal></expr>,
<expr><literal type="string">"DR_RESERVED4"</literal></expr>,
<expr><literal type="string">"DR_RESERVED5"</literal></expr>,
<expr><literal type="string">"DR_RESERVED6"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>decode</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>ebc_index</name> <block>{
<enum>enum <block>{ <decl><name>EBC_INDEX16</name></decl>, <decl><name>EBC_INDEX32</name></decl>, <decl><name>EBC_INDEX64</name></decl> }</block> <decl><name>type</name></decl>;</enum>
<enum>enum <block>{ <decl><name>EBC_INDEX_PLUS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>EBC_INDEX_MINUS</name></decl> }</block> <decl><name>sign</name></decl>;</enum>
<decl_stmt><decl><type><name>ut8</name></type> <name>a_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>n</name></decl>;</decl_stmt>
}</block></struct></type> <name>ebc_index_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_index16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ebc_index_t</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>EBC_INDEX16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <ternary><condition><expr><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr> ?</condition><then> <expr><name>EBC_INDEX_PLUS</name></expr> </then><else>: <expr><name>EBC_INDEX_MINUS</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>a_width</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <call><name>EBC_N_BIT_MASK</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <call><name>EBC_N_BIT_MASK</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>a_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <name><name>index</name><operator>-&gt;</operator><name>a_width</name></name><operator>)</operator> <operator>&amp;</operator> <call><name>EBC_N_BIT_MASK</name><argument_list>(<argument><expr><literal type="number">12</literal> <operator>-</operator> <name><name>index</name><operator>-&gt;</operator><name>a_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_index32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ebc_index_t</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ut32</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>EBC_INDEX32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <ternary><condition><expr><name>tmp</name> <operator>&amp;</operator> <call><name>EBC_NTH_BIT</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>EBC_INDEX_PLUS</name></expr> </then><else>: <expr><name>EBC_INDEX_MINUS</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>a_width</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal><operator>)</operator> <operator>&amp;</operator> <call><name>EBC_N_BIT_MASK</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <call><name>EBC_N_BIT_MASK</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>a_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <name><name>index</name><operator>-&gt;</operator><name>a_width</name></name><operator>)</operator> <operator>&amp;</operator> <call><name>EBC_N_BIT_MASK</name><argument_list>(<argument><expr><literal type="number">28</literal> <operator>-</operator> <name><name>index</name><operator>-&gt;</operator><name>a_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_index64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ebc_index_t</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ut64</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>EBC_INDEX64</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <ternary><condition><expr><name>tmp</name> <operator>&amp;</operator> <call><name>EBC_NTH_BIT</name><argument_list>(<argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>EBC_INDEX_PLUS</name></expr> </then><else>: <expr><name>EBC_INDEX_MINUS</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>a_width</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">60</literal><operator>)</operator> <operator>&amp;</operator> <call><name>EBC_N_BIT_MASK</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <call><name>EBC_N_BIT_MASK</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>a_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <name><name>index</name><operator>-&gt;</operator><name>a_width</name></name><operator>)</operator> <operator>&amp;</operator> <call><name>EBC_N_BIT_MASK</name><argument_list>(<argument><expr><literal type="number">60</literal><operator>-</operator> <name><name>index</name><operator>-&gt;</operator><name>a_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_break</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>instr_names</name><index>[<expr><name>EBC_BREAK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_jmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>op1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>immed32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebc_index_t</name></type> <name>idx32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>immed</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%d%s"</literal></expr></argument>, <argument><expr><name><name>instr_names</name><index>[<expr><name>EBC_JMP</name></expr>]</index></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><ternary><condition><expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"cs"</literal></expr> </then><else>: <expr><literal type="string">"cc"</literal></expr></else></ternary></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>immed</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ut64</name><operator>*</operator><operator>)</operator><operator>(</operator><name>bytes</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"0x%lx"</literal></expr></argument>, <argument><expr><name>immed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%sr%u "</literal></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_index32</name> <argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx32</name><operator>.</operator><name>sign</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"%s(%c%u, %c%u)"</literal></expr></argument>,
<argument><expr><name>op1</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx32</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx32</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>immed32</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>bytes</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"%s0x%x"</literal></expr></argument>, <argument><expr><name>op1</name></expr></argument>, <argument><expr><name>immed32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_jmp8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>suff</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"cs"</literal></expr></then><else>: <expr><literal type="string">"cc"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>suff</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>EBC_OPCODE_MASK</name></expr>]</index></name></expr></argument>, <argument><expr><name>suff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_call</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>bits</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>op1</name> <init>= <expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebc_index_t</name></type> <name>idx32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>sign</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decode_index32</name> <argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx32</name><operator>.</operator><name>sign</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"@r%d(%c%u, %c%u)"</literal></expr></argument>,
<argument><expr><name>op1</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx32</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx32</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"@r%d"</literal></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>bytes</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"r%d(0x%x)"</literal></expr></argument>, <argument><expr><name>op1</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"r%d"</literal></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i2</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ut64</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"0x%lx"</literal></expr></argument>, <argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%d%s%s"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name>EBC_CALL</name></expr>]</index></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"ex"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"a"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_ret</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>instr_names</name><index>[<expr><name>EBC_RET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>op1</name></decl>, <decl><type ref="prev"/><name>op2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>immed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebc_index_t</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>op2</name> <operator>=</operator> <operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_index16</name> <argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"r%d, @r%d (%c%d, %c%d)"</literal></expr></argument>,
<argument><expr><name>op1</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>immed</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"r%d, r%d %d"</literal></expr></argument>, <argument><expr><name>op1</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>, <argument><expr><name>immed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>,
<argument><expr><literal type="string">"r%d, r%d"</literal></expr></argument>, <argument><expr><name>op1</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_cmpeq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name> <init>= <expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">64</literal></expr></then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%deq"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name>EBC_CMPLTE</name></expr>]</index></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>decode_cmp</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_cmplte</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name> <init>= <expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">64</literal></expr></then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%dlte"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name>EBC_CMPLTE</name></expr>]</index></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>decode_cmp</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_cmpgte</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name> <init>= <expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">64</literal></expr></then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%dgte"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name>EBC_CMPGTE</name></expr>]</index></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>decode_cmp</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_cmpulte</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name> <init>= <expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">64</literal></expr></then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%dulte"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name>EBC_CMPULTE</name></expr>]</index></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>decode_cmp</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_cmpugte</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name> <init>= <expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">64</literal></expr></then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%dugte"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name>EBC_CMPUGTE</name></expr>]</index></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>decode_cmp</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_not</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name> <init>= <expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">64</literal></expr></then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>op1</name></decl>, <decl><type ref="prev"/><name>op2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>index</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>immed</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%u"</literal></expr></argument>, <argument><expr><name><name>instr_names</name><index>[<expr><name>EBC_NOT</name></expr>]</index></name></expr></argument>,
<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>op2</name> <operator>=</operator> <operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ebc_index_t</name></type> <name>idx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_index16</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">" (%c%d, %c%d)"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>immed</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"(%u)"</literal></expr></argument>, <argument><expr><name>immed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%sr%d, %sr%d%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>op1</name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>op2</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_neg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>decode_not</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'e'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'g'</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name> <init>= <expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">64</literal></expr></then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>op1</name></decl>, <decl><type ref="prev"/><name>op2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>index</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>immed</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%u"</literal></expr></argument>, <argument><expr><name><name>instr_names</name><index>[<expr><name>EBC_ADD</name></expr>]</index></name></expr></argument>,
<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>op2</name> <operator>=</operator> <operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ebc_index_t</name></type> <name>idx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_index16</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">" (%c%d, %c%d)"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>immed</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"(%u)"</literal></expr></argument>, <argument><expr><name>immed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%sr%d, %sr%d%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>op1</name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>op2</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_sub</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>decode_add</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name> <init>= <expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">64</literal></expr></then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%u"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name>EBC_SUB</name></expr>]</index></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_mul</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>decode_add</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name> <init>= <expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">64</literal></expr></then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%u"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name>EBC_MUL</name></expr>]</index></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_mulu</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>decode_add</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name> <init>= <expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">64</literal></expr></then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%u"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name>EBC_MULU</name></expr>]</index></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_div</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>decode_add</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name> <init>= <expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">64</literal></expr></then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%u"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name>EBC_DIV</name></expr>]</index></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_divu</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>decode_add</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name> <init>= <expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">64</literal></expr></then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%u"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name>EBC_DIVU</name></expr>]</index></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_arith</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>decode_add</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name> <init>= <expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">64</literal></expr></then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%u"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>EBC_OPCODE_MASK</name></expr>]</index></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_mov_args</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>op1</name></decl>, <decl><type ref="prev"/><name>op2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>op1c</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>op2c</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ind1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>ind2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebc_index_t</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>sign</name></decl>;</decl_stmt>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>op2</name> <operator>=</operator> <operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>op1c</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%sr%u"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>op2c</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%sr%u"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>EBC_OPCODE_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EBC_MOVBW</name></expr>:</case>
<case>case <expr><name>EBC_MOVWW</name></expr>:</case>
<case>case <expr><name>EBC_MOVDW</name></expr>:</case>
<case>case <expr><name>EBC_MOVQW</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_index16</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr>?</condition><then> <expr><literal type="char">'+'</literal></expr></then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ind1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><literal type="string">"(%c%u, %c%u)"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>,
<argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_index16</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr>?</condition><then> <expr><literal type="char">'+'</literal></expr></then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ind2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"(%c%u, %c%u)"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>,
<argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EBC_MOVBD</name></expr>:</case>
<case>case <expr><name>EBC_MOVWD</name></expr>:</case>
<case>case <expr><name>EBC_MOVDD</name></expr>:</case>
<case>case <expr><name>EBC_MOVQD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_index32</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr>?</condition><then> <expr><literal type="char">'+'</literal></expr></then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ind1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"(%c%u, %c%u)"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>,
<argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_index32</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr>?</condition><then> <expr><literal type="char">'+'</literal></expr></then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ind2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"(%c%u, %c%u)"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>,
<argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EBC_MOVQQ</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_index64</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr>?</condition><then> <expr><literal type="char">'+'</literal></expr></then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ind1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"(%c%u, %c%u)"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>,
<argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_index64</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr>?</condition><then> <expr><literal type="char">'+'</literal></expr></then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ind1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"(%c%u, %c%u)"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>,
<argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s, %s%s"</literal></expr></argument>,
<argument><expr><name>op1c</name></expr></argument>, <argument><expr><name>ind1</name></expr></argument>, <argument><expr><name>op2c</name></expr></argument>, <argument><expr><name>ind2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_mov</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>EBC_OPCODE_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>decode_mov_args</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_movsn_args</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>op1</name></decl>, <decl><type ref="prev"/><name>op2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>op1c</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>op2c</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ind1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>ind2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>op2</name> <operator>=</operator> <operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>op1c</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%sr%u"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>op2c</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%sr%u"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>EBC_OPCODE_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EBC_MOVSNW</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ebc_index_t</name></type> <name>idx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_index16</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr>?</condition><then> <expr><literal type="char">'+'</literal></expr></then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ind1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"(%c%u, %c%u)"</literal></expr></argument>,
<argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ebc_index_t</name></type> <name>idx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_index16</name> <argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr>?</condition><then> <expr><literal type="char">'+'</literal></expr></then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>ind2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"(%c%u, %c%u)"</literal></expr></argument>,
<argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EBC_MOVSND</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s, %s%s"</literal></expr></argument>,
<argument><expr><name>op1c</name></expr></argument>, <argument><expr><name>ind1</name></expr></argument>, <argument><expr><name>op2c</name></expr></argument>, <argument><expr><name>ind2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_movsn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>EBC_OPCODE_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>decode_movsn_args</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_loadsp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>EBC_OPCODE_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s, r%u"</literal></expr></argument>,
<argument><expr><name><name>dedic_regs</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_storesp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>op2</name> <init>= <expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>EBC_OPCODE_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"r%u, %s"</literal></expr></argument>,
<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>op2</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>dedic_regs</name><index>[<expr><name>op2</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"RESERVED_DEDICATED_REG"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_push_pop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>op1</name> <init>= <expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>op1c</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%u"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>EBC_OPCODE_MASK</name></expr>]</index></name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">64</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>op1c</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>op1c</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%sr%d"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ebc_index_t</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>sign</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_index16</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s (%c%d, %c%d)"</literal></expr></argument>,
<argument><expr><name>op1c</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>immed</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>bytes</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s %u"</literal></expr></argument>,
<argument><expr><name>op1c</name></expr></argument>, <argument><expr><name>immed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>op1c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_cmpi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>op1</name> <init>= <expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>op1c</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>indx</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>immed</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>suff</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"eq"</literal></expr>, <expr><literal type="string">"lte"</literal></expr>, <expr><literal type="string">"gte"</literal></expr>, <expr><literal type="string">"ulte"</literal></expr>, <expr><literal type="string">"ugte"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>op1c</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>op1c</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%sr%u"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%u%c%s"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>EBC_OPCODE_MASK</name></expr>]</index></name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">64</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'d'</literal></expr> </then><else>: <expr><literal type="char">'w'</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>suff</name><index>[<expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>EBC_OPCODE_MASK</name><operator>)</operator> <operator>-</operator> <name>EBC_CMPIEQ</name></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebc_index_t</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_index16</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>indx</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>indx</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" (%c%u, %c%u)"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>im</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ut32</name><operator>*</operator><operator>)</operator><operator>(</operator><name>bytes</name> <operator>+</operator> <name>ret</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>immed</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>immed</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>im</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator><operator>(</operator><name>bytes</name> <operator>+</operator> <name>ret</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>immed</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>immed</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s, %s"</literal></expr></argument>, <argument><expr><name>op1c</name></expr></argument>, <argument><expr><name>indx</name></expr></argument>, <argument><expr><name>immed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_movn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>op1</name> <init>= <expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>op2</name> <init>= <expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>op1c</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>op2c</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>indx1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>indx2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebc_index_t</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>EBC_OPCODE_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>op1c</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%sr%u"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>op2c</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%sr%u"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>EBC_OPCODE_MASK</name><operator>)</operator> <operator>==</operator> <name>EBC_MOVNW</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_index16</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>indx1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"(%c%u, %c%u)"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_index16</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>indx2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"(%c%u, %c%u)"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_index32</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>indx1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"(%c%u, %c%u)"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_index32</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>indx2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"(%c%u, %c%u)"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s, %s%s"</literal></expr></argument>, <argument><expr><name>op1c</name></expr></argument>, <argument><expr><name>indx1</name></expr></argument>, <argument><expr><name>op2c</name></expr></argument>, <argument><expr><name>indx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_movi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>p1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>indx</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>op1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>immed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>p2</name> <operator>=</operator> <literal type="char">'w'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>p2</name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>p2</name> <operator>=</operator> <literal type="char">'q'</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>p1</name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>p1</name> <operator>=</operator> <literal type="char">'w'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>p1</name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>p1</name> <operator>=</operator> <literal type="char">'q'</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%c%c"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>EBC_OPCODE_MASK</name></expr>]</index></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebc_index_t</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_index16</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>indx</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"(%c%u, %c%u)"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>p2</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>i1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>i3</name></decl>;</decl_stmt>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator><operator>(</operator><name>bytes</name> <operator>+</operator> <name>ret</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>immed</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>i1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name>i2</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ut32</name><operator>*</operator><operator>)</operator><operator>(</operator><name>bytes</name> <operator>+</operator> <name>ret</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>immed</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>i2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><name>i3</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ut64</name><operator>*</operator><operator>)</operator><operator>(</operator><name>bytes</name> <operator>+</operator> <name>ret</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>immed</name> <operator>=</operator> <name>i3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%sr%u"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s, %lu"</literal></expr></argument>, <argument><expr><name>op1</name></expr></argument>, <argument><expr><name>indx</name></expr></argument>, <argument><expr><name>immed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_movin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>p1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>indx1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>indx2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>op1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebc_index_t</name></type> <name>idx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>p1</name> <operator>=</operator> <literal type="char">'w'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>p1</name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>p1</name> <operator>=</operator> <literal type="char">'q'</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%c"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>EBC_OPCODE_MASK</name></expr>]</index></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_index16</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>indx1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"(%c%u, %c%u)"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>,
<argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>p1</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><call><name>decode_index16</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><call><name>decode_index32</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><call><name>decode_index64</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>indx2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"(%c%u, %c%u)"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%sr%u"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_BIT</name> <argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s, %s"</literal></expr></argument>, <argument><expr><name>op1</name></expr></argument>, <argument><expr><name>indx1</name></expr></argument>, <argument><expr><name>indx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_movrel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>p1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>op1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>indx</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>immed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>formathex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <literal type="char">'w'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>formathex</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>formathex</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <literal type="char">'q'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>formathex</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>EBC_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%c"</literal></expr></argument>,
<argument><expr><name><name>instr_names</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>EBC_OPCODE_MASK</name></expr>]</index></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>op1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%sr%u"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ebc_index_t</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>sign</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_index16</name><argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name><name>idx</name><operator>.</operator><name>sign</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>indx</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"(%c%u, %c%u)"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>v16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>v32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>v64</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>p1</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><name>v16</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>bytes</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>immed</name> <operator>=</operator> <name>v16</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name>v32</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>bytes</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>immed</name> <operator>=</operator> <name>v32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><name>v64</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ut64</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>bytes</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>immed</name> <operator>=</operator> <name>v64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>CHK_SNPRINTF</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>EBC_OPERANDS_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s, 0x%0*lx"</literal></expr></argument>,
<argument><expr><name>op1</name></expr></argument>, <argument><expr><name>indx</name></expr></argument>, <argument><expr><name>formathex</name></expr></argument>, <argument><expr><name>immed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_invalid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>decode</name></type> <name><name>decodes</name><index>[<expr><name>EBC_COMMAND_NUM</name></expr>]</index></name> <init>= <expr><block>{
<expr><name>decode_break</name></expr>,
<expr><name>decode_jmp</name></expr>,
<expr><name>decode_jmp8</name></expr>,
<expr><name>decode_call</name></expr>,
<expr><name>decode_ret</name></expr>,
<expr><name>decode_cmpeq</name></expr>,
<expr><name>decode_cmplte</name></expr>,
<expr><name>decode_cmpgte</name></expr>,
<expr><name>decode_cmpulte</name></expr>,
<expr><name>decode_cmpugte</name></expr>,
<expr><name>decode_not</name></expr>,
<expr><name>decode_neg</name></expr>,
<expr><name>decode_add</name></expr>,
<expr><name>decode_sub</name></expr>,
<expr><name>decode_mul</name></expr>,
<expr><name>decode_mulu</name></expr>,
<expr><name>decode_div</name></expr>,
<expr><name>decode_divu</name></expr>,
<expr><name>decode_arith</name></expr>,
<expr><name>decode_arith</name></expr>,
<expr><name>decode_arith</name></expr>,
<expr><name>decode_arith</name></expr>,
<expr><name>decode_arith</name></expr>,
<expr><name>decode_arith</name></expr>,
<expr><name>decode_arith</name></expr>,
<expr><name>decode_arith</name></expr>,
<expr><name>decode_arith</name></expr>,
<expr><name>decode_arith</name></expr>,
<expr><name>decode_arith</name></expr>,
<expr><name>decode_mov</name></expr>,
<expr><name>decode_mov</name></expr>,
<expr><name>decode_mov</name></expr>,
<expr><name>decode_mov</name></expr>,
<expr><name>decode_mov</name></expr>,
<expr><name>decode_mov</name></expr>,
<expr><name>decode_mov</name></expr>,
<expr><name>decode_mov</name></expr>,
<expr><name>decode_movsn</name></expr>,
<expr><name>decode_movsn</name></expr>,
<expr><name>decode_invalid</name></expr>,
<expr><name>decode_mov</name></expr>,
<expr><name>decode_loadsp</name></expr>,
<expr><name>decode_storesp</name></expr>,
<expr><name>decode_push_pop</name></expr>,
<expr><name>decode_push_pop</name></expr>,
<expr><name>decode_cmpi</name></expr>,
<expr><name>decode_cmpi</name></expr>,
<expr><name>decode_cmpi</name></expr>,
<expr><name>decode_cmpi</name></expr>,
<expr><name>decode_cmpi</name></expr>,
<expr><name>decode_movn</name></expr>,
<expr><name>decode_movn</name></expr>,
<expr><name>decode_invalid</name></expr>,
<expr><name>decode_push_pop</name></expr>,
<expr><name>decode_push_pop</name></expr>,
<expr><name>decode_movi</name></expr>,
<expr><name>decode_movin</name></expr>,
<expr><name>decode_movrel</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>ebc_decode_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>ebc_command_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>instr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>EBC_OPCODE_MASK</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x39</literal></expr>)</condition> <block>{<block_content>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>decodes</name><index>[<expr><name><name>instr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>EBC_OPCODE_MASK</name></expr>]</index></name><operator>(</operator><name>instr</name><operator>,</operator> <name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
