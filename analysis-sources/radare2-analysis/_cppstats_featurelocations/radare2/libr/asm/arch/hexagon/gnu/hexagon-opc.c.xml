<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\hexagon\gnu\hexagon-opc.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sysdep.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ansidecl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mybfd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe-ctype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opcode/hexagon.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bfd_mach_hexagon</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bfd_mach_hexagon_v2</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bfd_mach_hexagon_v3</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bfd_mach_hexagon_v4</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bfd_mach_hexagon_v5</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<enum>enum <block>{
<decl><name>BFD_RELOC_HEX_32_6_X</name></decl>,
<decl><name>BFD_RELOC_HEX_16_X</name></decl>,
<decl><name>BFD_RELOC_HEX_12_X</name></decl>,
<decl><name>BFD_RELOC_HEX_11_X</name></decl>,
<decl><name>BFD_RELOC_HEX_10_X</name></decl>,
<decl><name>BFD_RELOC_HEX_9_X</name></decl>,
<decl><name>BFD_RELOC_HEX_8_X</name></decl>,
<decl><name>BFD_RELOC_HEX_7_X</name></decl>,
<decl><name>BFD_RELOC_HEX_6_X</name></decl>,

<decl><name>BFD_RELOC_HEX_32_PCREL</name></decl>,



<decl><name>BFD_RELOC_HEX_B22_PCREL</name></decl>,
<decl><name>BFD_RELOC_HEX_B15_PCREL</name></decl>,
<decl><name>BFD_RELOC_HEX_B13_PCREL</name></decl>,
<decl><name>BFD_RELOC_HEX_B9_PCREL</name></decl>,
<decl><name>BFD_RELOC_HEX_B7_PCREL</name></decl>,



<decl><name>BFD_RELOC_HEX_PLT_B22_PCREL</name></decl>,


<decl><name>BFD_RELOC_HEX_B32_PCREL_X</name></decl>,

<decl><name>BFD_RELOC_HEX_B22_PCREL_X</name></decl>,
<decl><name>BFD_RELOC_HEX_B15_PCREL_X</name></decl>,
<decl><name>BFD_RELOC_HEX_B13_PCREL_X</name></decl>,
<decl><name>BFD_RELOC_HEX_B9_PCREL_X</name></decl>,
<decl><name>BFD_RELOC_HEX_B7_PCREL_X</name></decl>,



<decl><name>BFD_RELOC_HEX_LO16</name></decl>,
<decl><name>BFD_RELOC_HEX_HI16</name></decl>,
<decl><name>BFD_RELOC_HEX_HL16</name></decl>,



<decl><name>BFD_RELOC_HEX_GOTREL_LO16</name></decl>,
<decl><name>BFD_RELOC_HEX_GOTREL_HI16</name></decl>,
<decl><name>BFD_RELOC_HEX_GOTREL_32</name></decl>,



<decl><name>BFD_RELOC_HEX_GOT_LO16</name></decl>,
<decl><name>BFD_RELOC_HEX_GOT_HI16</name></decl>,
<decl><name>BFD_RELOC_HEX_GOT_32</name></decl>,
<decl><name>BFD_RELOC_HEX_GOT_16</name></decl>,



<decl><name>BFD_RELOC_HEX_GPREL16_0</name></decl>,
<decl><name>BFD_RELOC_HEX_GPREL16_1</name></decl>,
<decl><name>BFD_RELOC_HEX_GPREL16_2</name></decl>,
<decl><name>BFD_RELOC_HEX_GPREL16_3</name></decl>,


<decl><name>BFD_RELOC_HEX_GLOB_DAT</name></decl>,
<decl><name>BFD_RELOC_HEX_COPY</name></decl>,
<decl><name>BFD_RELOC_HEX_JMP_SLOT</name></decl>,
<decl><name>BFD_RELOC_HEX_RELATIVE</name></decl>,
}</block>;</enum>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libiberty.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>long</name></type> <name>hexagon_extend</name> <parameter_list>(<parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ATTRIBUTE_UNUSED</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hexagon_parse_reg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hexagon_parse_dreg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hexagon_parse_reg16</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hexagon_parse_dreg16</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hexagon_parse_reg8</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hexagon_parse_dreg8</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hexagon_parse_nreg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hexagon_parse_preg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hexagon_parse_creg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hexagon_parse_dcreg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hexagon_parse_greg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hexagon_parse_dgreg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hexagon_parse_sreg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hexagon_parse_dsreg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hexagon_parse_mreg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hexagon_parse_splr</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>hexagon_verify_hw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hexagon_insn</name></type> <name>hexagon_nop</name></decl>, <decl><type ref="prev"/><name>hexagon_kext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>hexagon_insn</name></type> <name>hexagon_nop_mask</name></decl>, <decl><type ref="prev"/><name>hexagon_kext_mask</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>hexagon_operand</name></type> <name><name>hexagon_operands</name> <index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"Rs32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_REGISTER</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_reg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Rt32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_REGISTER</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_reg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ru32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_REGISTER</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_reg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Rd32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_REGISTER</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_reg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Re32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_REGISTER</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_reg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Rf32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_REGISTER</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_MODIFIED</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_reg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Rx32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_REGISTER</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_reg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Rz32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'z'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_REGISTER</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_MODIFIED</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_reg</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Rss32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_PAIR</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"r%u:%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_dreg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Rtt32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_PAIR</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"r%u:%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_dreg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Rdd32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_PAIR</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"r%u:%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_dreg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Rxx32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_PAIR</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"r%u:%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_dreg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ryy32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'y'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_PAIR</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"r%u:%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_dreg</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Rd16"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_SUBSET</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_reg16</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Re16"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_SUBSET</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_reg16</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Rs16"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_SUBSET</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_reg16</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Rt16"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_SUBSET</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_reg16</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ru16"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_SUBSET</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_reg16</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Rv16"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_SUBSET</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_reg16</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Rx16"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_SUBSET</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_reg16</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ry16"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'y'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_SUBSET</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_reg16</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Rdd16"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_SUBSET</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_PAIR</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"r%u:%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_dreg16</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Rd8"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_SUBSET</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_reg8</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Rdd8"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_SUBSET</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_PAIR</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"r%u:%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_dreg8</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ree8"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_SUBSET</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_PAIR</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"r%u:%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_dreg8</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Rtt8"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_SUBSET</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_PAIR</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"r%u:%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_dreg8</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Rvv8"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_SUBSET</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_PAIR</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"r%u:%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_dreg8</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Ns8"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_NEW</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_nreg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Nt8"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_NEW</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"r%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_nreg</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Mu2"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_MODIFIER</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"m%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_mreg</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Ps4"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_PREDICATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"p%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_preg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Pt4"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_PREDICATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"p%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_preg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Pu4"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_PREDICATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"p%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_preg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Pv4"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_PREDICATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"p%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_preg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Pd4"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_PREDICATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"p%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_preg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Pe4"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_PREDICATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"p%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_preg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Px4"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_PREDICATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"p%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_preg</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Cs32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_CONTROL</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_creg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Cd32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_CONTROL</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_creg</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Css32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_CONTROL</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_PAIR</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"c%u:%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_dcreg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Cdd32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_CONTROL</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_PAIR</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"c%u:%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_dcreg</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gs32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_GUEST</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_greg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Gd32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_GUEST</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_greg</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gss32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_GUEST</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_PAIR</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"g%u:%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_dgreg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Gdd32"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_GUEST</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_PAIR</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"g%u:%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_dgreg</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Ss64"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_SYSTEM</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_sreg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Sd64"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_SYSTEM</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_sreg</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Sss64"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_SYSTEM</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_PAIR</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"s%u:%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_dsreg</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Sdd64"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_SYSTEM</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_PAIR</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"s%u:%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_dsreg</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"#g16:0"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_HEX_GPREL16_0</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_16_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%g"</literal></expr>, <expr><literal type="string">"#0x%x"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#g16:1"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><name>BFD_RELOC_HEX_GPREL16_1</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_16_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%g"</literal></expr>, <expr><literal type="string">"#0x%x"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#g16:2"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><name>BFD_RELOC_HEX_GPREL16_2</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_16_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%g"</literal></expr>, <expr><literal type="string">"#0x%x"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#g16:3"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><name>BFD_RELOC_HEX_GPREL16_3</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_16_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%g"</literal></expr>, <expr><literal type="string">"#0x%x"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"#u26:6"</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_KXER</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u16:0"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u16:1"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u16:2"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u16:3"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u16"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_16_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u11:3"</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u10"</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_10_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u9"</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_9_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u8"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_8_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u7"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u6:0"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_6_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u6:1"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_6_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u6:2"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_6_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u6:3"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_6_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u6"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_6_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u5:2"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u5:3"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u5"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u4:0"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u4:2"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u4"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u3:0"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u3:1"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u3"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u2"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#U10"</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_10_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#U6:2"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#U6"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_6_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#U5:2"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#U5:3"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#U5"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#U4:0"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#U4:2"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#U4"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#U3:0"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#U3:1"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#U3:2"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#U3:3"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#U3"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#U2"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"#s16"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_16_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s16got"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_HEX_GOT_16</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s12"</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_12_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s11:0"</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_11_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s11:1"</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_11_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s11:2"</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_11_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s11:3"</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_11_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s10"</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_10_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s8"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_8_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s7"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_7_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s6:3"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_6_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s6"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_6_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s4:0"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s4:1"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s4:2"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s4:3"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s4"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#S8"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_8_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#S7"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_7_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#S6:3"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_6_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#S6"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_HEX_32_6_X</name></expr>, <expr><name>BFD_RELOC_HEX_6_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"#m9"</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_NEGATIVE</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"#r22:2"</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><name>BFD_RELOC_HEX_B22_PCREL</name></expr>, <expr><name>BFD_RELOC_HEX_B32_PCREL_X</name></expr>, <expr><name>BFD_RELOC_HEX_B22_PCREL_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_PC_RELATIVE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"@%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#r22:2plt"</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><name>BFD_RELOC_HEX_PLT_B22_PCREL</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_PC_RELATIVE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"@%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#r15:2"</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><name>BFD_RELOC_HEX_B15_PCREL</name></expr>, <expr><name>BFD_RELOC_HEX_B32_PCREL_X</name></expr>, <expr><name>BFD_RELOC_HEX_B15_PCREL_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_PC_RELATIVE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"@%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#r13:2"</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><name>BFD_RELOC_HEX_B13_PCREL</name></expr>, <expr><name>BFD_RELOC_HEX_B32_PCREL_X</name></expr>, <expr><name>BFD_RELOC_HEX_B13_PCREL_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_PC_RELATIVE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"@%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#r9:2"</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><name>BFD_RELOC_HEX_B9_PCREL</name></expr>, <expr><name>BFD_RELOC_HEX_B32_PCREL_X</name></expr>, <expr><name>BFD_RELOC_HEX_B9_PCREL_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_PC_RELATIVE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"@%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#r7:2"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><name>BFD_RELOC_HEX_B7_PCREL</name></expr>, <expr><name>BFD_RELOC_HEX_B32_PCREL_X</name></expr>, <expr><name>BFD_RELOC_HEX_B7_PCREL_X</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_PC_RELATIVE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>,
<expr><literal type="string">"@%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,


<expr><block>{ <expr><literal type="string">"#u26:6"</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><name>BFD_RELOC_HEX_B32_PCREL_X</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_PC_RELATIVE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_KXER</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,




<expr><block>{ <expr><literal type="string">"#u16_lo16"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_HEX_LO16</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_LO16</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><literal type="string">"#0x%04x"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u16_lo16got"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_HEX_GOT_LO16</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_LO16</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><literal type="string">"#0x%04x"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u16_lo16gotrel"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_HEX_GOTREL_LO16</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_LO16</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><literal type="string">"#0x%04x"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u16_hi16"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_HEX_HI16</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_HI16</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><literal type="string">"#0x%04x"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u16_hi16got"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_HEX_GOT_HI16</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_HI16</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><literal type="string">"#0x%04x"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#u16_hi16gotrel"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_HEX_GOTREL_HI16</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_HI16</name></expr>,
<expr><literal type="string">"#%u"</literal></expr>, <expr><literal type="string">"#0x%04x"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s16_lo16"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_HEX_LO16</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_LO16</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s16_lo16got"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_HEX_GOT_LO16</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_LO16</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s16_lo16gotrel"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_HEX_GOTREL_LO16</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_LO16</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s16_hi16"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_HEX_HI16</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_HI16</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s16_hi16got"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_HEX_GOT_HI16</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_HI16</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#s16_hi16gotrel"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_HEX_GOTREL_HI16</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_IMMEDIATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_HI16</name></expr>,
<expr><literal type="string">"#%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,


<expr><block>{ <expr><literal type="string">"Hs"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="string">"0x%x"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Hi"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="string">"%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ho"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="string">"%d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,


<expr><block>{ <expr><literal type="string">"#-1"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_CONSTANT</name></expr>,
<expr><literal type="string">"#-1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#0"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_CONSTANT</name></expr>,
<expr><literal type="string">"#0"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#1"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_CONSTANT</name></expr>,
<expr><literal type="string">"#1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#2"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_CONSTANT</name></expr>,
<expr><literal type="string">"#2"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#3"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_CONSTANT</name></expr>,
<expr><literal type="string">"#3"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"#255"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_CONSTANT</name></expr>,
<expr><literal type="string">"#255"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"p0"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_PREDICATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"p0"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"p1"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_PREDICATE</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_WRITE</name></expr>,
<expr><literal type="string">"p1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Lr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_REGISTER</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"lr"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_splr</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Sp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>, <expr><name>BFD_RELOC_NONE</name></expr>,
<expr><name>HEXAGON_OPERAND_IS_REGISTER</name> <operator>|</operator> <name>HEXAGON_OPERAND_IS_READ</name></expr>,
<expr><literal type="string">"sp"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>hexagon_parse_splr</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>hexagon_operand_count</name> <init>=
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>hexagon_operands</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>hexagon_operands</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>










<decl_stmt><decl><type><name>hexagon_opcode</name> <modifier>*</modifier></type><name>hexagon_opcodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hexagon_opcodes_count</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_MAP_FNAME</name><parameter_list>(<parameter><type><name>TAG</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>hexagon_map_##TAG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_MAP_SIGN</name><parameter_list>(<parameter><type><name>TAG</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void HEXAGON_MAP_FNAME (TAG) (char *i, size_t n, const hexagon_operand_arg args [])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_FUNCTION</name><parameter_list>(<parameter><type><name>TAG</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEXAGON_MAP_SIGN (TAG); HEXAGON_MAP_SIGN (TAG)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEST</name></cpp:macro> <cpp:value>i, n</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OP_VAL</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int) args [N].value)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OP_STR</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(args [N].string [0] == '#' ? args [N].string + 1 : args [N].string)</cpp:value></cpp:define>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opcode/hexagon_asm_maps.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><name>hexagon_opcode</name></type> <name><name>hexagon_opcodes_v2</name> <index>[]</index></name> <init>=
<expr><block>{
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opcode/hexagon_iset_v2.h"</cpp:file></cpp:include>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>hexagon_opcodes_count_v2</name> <init>=
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>hexagon_opcodes_v2</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>hexagon_opcodes_v2</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>hexagon_opcode</name></type> <name><name>hexagon_opcodes_v3</name> <index>[]</index></name> <init>=
<expr><block>{
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opcode/hexagon_iset_v3.h"</cpp:file></cpp:include>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>hexagon_opcodes_count_v3</name> <init>=
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>hexagon_opcodes_v3</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>hexagon_opcodes_v3</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>hexagon_opcode</name></type> <name><name>hexagon_opcodes_v4</name> <index>[]</index></name> <init>=
<expr><block>{
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opcode/hexagon_iset_v4.h"</cpp:file></cpp:include>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>hexagon_opcodes_count_v4</name> <init>=
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>hexagon_opcodes_v4</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>hexagon_opcodes_v4</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>hexagon_opcode</name></type> <name><name>hexagon_opcodes_v5</name> <index>[]</index></name> <init>=
<expr><block>{
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opcode/hexagon_iset_v5.h"</cpp:file></cpp:include>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>hexagon_opcodes_count_v5</name> <init>=
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>hexagon_opcodes_v5</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>hexagon_opcodes_v5</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_SIZE</name></cpp:macro> <cpp:value>(5 * HEXAGON_HASH_1 + 17)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_0</name></cpp:macro> <cpp:value>(0 * HEXAGON_HASH_1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_1</name></cpp:macro> <cpp:value>(1 * ('z' - 'a' + 1))</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_2</name></cpp:macro> <cpp:value>(2 * HEXAGON_HASH_1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_3</name></cpp:macro> <cpp:value>(3 * HEXAGON_HASH_1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_4</name></cpp:macro> <cpp:value>(4 * HEXAGON_HASH_1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_5</name></cpp:macro> <cpp:value>(5 * HEXAGON_HASH_1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_A</name></cpp:macro> <cpp:value>(HEXAGON_HASH_SIZE - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_B</name></cpp:macro> <cpp:value>(HEXAGON_HASH_SIZE - 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_C</name></cpp:macro> <cpp:value>(HEXAGON_HASH_SIZE - 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_D</name></cpp:macro> <cpp:value>(HEXAGON_HASH_SIZE - 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_E</name></cpp:macro> <cpp:value>(HEXAGON_HASH_SIZE - 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_F</name></cpp:macro> <cpp:value>(HEXAGON_HASH_SIZE - 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_G</name></cpp:macro> <cpp:value>(HEXAGON_HASH_SIZE - 7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_H</name></cpp:macro> <cpp:value>(HEXAGON_HASH_SIZE - 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_I</name></cpp:macro> <cpp:value>(HEXAGON_HASH_SIZE - 9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_J</name></cpp:macro> <cpp:value>(HEXAGON_HASH_SIZE - 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_K</name></cpp:macro> <cpp:value>(HEXAGON_HASH_SIZE - 11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_L</name></cpp:macro> <cpp:value>(HEXAGON_HASH_SIZE - 12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_M</name></cpp:macro> <cpp:value>(HEXAGON_HASH_SIZE - 13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_N</name></cpp:macro> <cpp:value>(HEXAGON_HASH_SIZE - 14)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_O</name></cpp:macro> <cpp:value>(HEXAGON_HASH_SIZE - 15)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_P</name></cpp:macro> <cpp:value>(HEXAGON_HASH_SIZE - 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_Z</name></cpp:macro> <cpp:value>(HEXAGON_HASH_SIZE - 17)</cpp:value></cpp:define> 



<decl_stmt><decl><type><specifier>static</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name><name>opcode_map</name> <index>[<expr><name>HEXAGON_HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>hexagon_icode_hash_bits</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>hexagon_opcode</name> <modifier>*</modifier><modifier>*</modifier></type><name>icode_map</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>hexagon_reg</name></type> <name><name>hexagon_gp_regs</name> <index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"sp"</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"fp"</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lr"</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>hexagon_gp_regs_count</name> <init>=
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>hexagon_gp_regs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>hexagon_gp_regs</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>hexagon_reg</name></type> <name><name>hexagon_supervisor_regs</name> <index>[]</index></name> <init>=
<expr><block>{

<expr><block>{<expr><literal type="string">"sgp0"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sgp1"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"stid"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"elr"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"badva0"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"badva1"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ssr"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ccr"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"htid"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"badva"</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"imask"</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"modectl"</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ipend"</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vid"</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"iad"</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"iel"</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"iahl"</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cfgbase"</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"diag"</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rev"</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pcyclelo"</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pcyclehi"</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"brkptpc0"</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"brkptcfg0"</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"brkptpc1"</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"brkptcfg1"</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isdbmbxin"</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isdbmbxout"</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isdben"</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isdbgpr"</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s40"</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s39"</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s29"</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s28"</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s25"</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s22"</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s19"</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s10"</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s9"</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s8"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s7"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s1"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,


<expr><block>{<expr><literal type="string">"sgp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sgpr1"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"ssr"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"imask"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"badva"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"elr"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tid"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"evb"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ipend"</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"syscfg"</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"modectl"</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rev"</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tlbhi"</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tlblo"</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tlbidx"</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"diag"</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"iad"</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"iel"</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"iahl"</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pcyclehi"</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pcyclelo"</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isdbst"</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isdbcfg0"</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isdbcfg1"</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"brkptpc0"</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"brkptcfg0"</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"brkptpc1"</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"brkptcfg1"</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isdbmbxin"</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isdbmbxout"</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isdben"</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isdbgpr"</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><name>HEXAGON_V2_AND_V3</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pmucnt0"</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><name>HEXAGON_V3_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pmucnt1"</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><name>HEXAGON_V3_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pmucnt2"</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><name>HEXAGON_V3_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pmucnt3"</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><name>HEXAGON_V3_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pmuevtcfg"</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><name>HEXAGON_V3_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pmucfg"</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><name>HEXAGON_V3_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"acc0"</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"acc1"</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"chicken"</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s63"</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s62"</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s61"</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s60"</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s59"</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s58"</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s57"</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s56"</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s55"</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s54"</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s53"</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s52"</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s51"</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s50"</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s49"</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s48"</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s47"</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s46"</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s45"</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s44"</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s43"</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"s42"</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s41"</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s40"</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s39"</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s38"</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s37"</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s36"</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s35"</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s34"</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s33"</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s32"</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s31"</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s30"</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s29"</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"s28"</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"s27"</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s26"</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s25"</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s24"</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s23"</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s22"</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s21"</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s20"</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s19"</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s18"</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s17"</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s16"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s15"</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"s14"</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"s13"</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"s12"</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"s11"</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"s10"</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"s9"</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"s8"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"s7"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"s6"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s5"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s4"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s3"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s2"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s1"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s0"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>hexagon_supervisor_regs_count</name> <init>=
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>hexagon_supervisor_regs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>hexagon_supervisor_regs</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>hexagon_reg</name></type> <name><name>hexagon_control_regs</name> <index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"sa0"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lc0"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sa1"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lc1"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"p3:0"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"m0"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"m1"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"usr"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"pc"</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"ugp"</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"gp"</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cs0"</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cs1"</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"upcyclelo"</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"upcyclehi"</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"upmucnt0"</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"upmucnt1"</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"upmucnt2"</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"upmucnt3"</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,



<expr><block>{ <expr><literal type="string">"c29"</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"c28"</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"c27"</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"c26"</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"c25"</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"c24"</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"c13"</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"c12"</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"c11"</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"c10"</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"c9"</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"c8"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"c7"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"c6"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"c4"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"c3"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"c2"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"c1"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"c0"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HEXAGON_V2_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>hexagon_control_regs_count</name> <init>=
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>hexagon_control_regs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>hexagon_control_regs</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>hexagon_reg</name></type> <name><name>hexagon_guest_regs</name> <index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"gpcyclelo"</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"gpcyclehi"</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"gpmucnt0"</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"gpmucnt1"</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"gpmucnt2"</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"gpmucnt3"</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"g29"</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"g28"</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"g27"</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"g26"</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"g25"</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"g24"</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READONLY</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"g3"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"g2"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"g1"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"g0"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HEXAGON_V4_AND_UP</name> <operator>|</operator> <name>HEXAGON_REG_IS_READWRITE</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>hexagon_guest_regs_count</name> <init>=
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>hexagon_guest_regs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>hexagon_guest_regs</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>









<function><type><name>long</name></type>
<name>hexagon_extend</name>
<parameter_list>(<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>is_signed</name></type> <name>ATTRIBUTE_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>xvalue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hexagon_if_arch_kext</name> <argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>xvalue</name> <operator>=</operator> <operator>*</operator><name>value</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>~</operator><literal type="number">0UL</literal> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <operator>*</operator><name>value</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><operator>(</operator><operator>~</operator><literal type="number">0UL</literal> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>





</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>xvalue</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><name>hexagon_hash</name></type>
<name>hexagon_hash_opcode</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>syntax</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pair</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>peq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_if</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>syntax</name></expr></argument>, <argument><expr><literal type="string">"Rd8 = #s6 ; Re8 = #S6"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>syntax</name></expr></argument>, <argument><expr><literal type="string">"Rd8 = #s6 ; Re8 = aslh (Rs8 )"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pair</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>syntax</name></expr></argument>, <argument><expr><name>PACKET_PAIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>peq</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>syntax</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strcspn</name> <argument_list>(<argument><expr><name>syntax</name></expr></argument>, <argument><expr><literal type="string">" \t`~!@#$%^&amp;*()_-=+[{]}\\|;:'\",&lt;.&gt;/?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>is_if</name> <operator>=</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>syntax</name></expr></argument>, <argument><expr><literal type="string">"if"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if ((p1 = strncmp (syntax, "mem", 3)))
{

if (peq)

return (pif? (pnew? HEXAGON_HASH_A: HEXAGON_HASH_B): HEXAGON_HASH_C);
else

return (pif? (pnew? HEXAGON_HASH_D: HEXAGON_HASH_E): HEXAGON_HASH_F);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>pair</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>pair</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ISSPACE</name> <argument_list>(<argument><expr><operator>*</operator><name>p1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="string">"jump"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>syntax</name></expr></argument>, <argument><expr><literal type="string">"jump"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="string">"call"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>syntax</name></expr></argument>, <argument><expr><literal type="string">"call"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><operator>(</operator><call><name>hexagon_if_arch_v4</name> <argument_list>()</argument_list></call> <operator>||</operator> <call><name>hexagon_if_arch_v5</name> <argument_list>()</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="string">"return"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>syntax</name></expr></argument>, <argument><expr><literal type="string">"return"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>is_if</name></expr>?</condition><then> <expr><name>HEXAGON_HASH_G</name></expr></then><else>: <expr><name>HEXAGON_HASH_H</name></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>syntax</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="string">"jump"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="string">"call"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><operator>(</operator><call><name>hexagon_if_arch_v4</name> <argument_list>()</argument_list></call> <operator>||</operator> <call><name>hexagon_if_arch_v5</name> <argument_list>()</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="string">"return"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>is_if</name></expr>?</condition><then> <expr><name>HEXAGON_HASH_I</name></expr></then><else>: <expr><name>HEXAGON_HASH_J</name></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>peq</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>peq</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ISSPACE</name> <argument_list>(<argument><expr><operator>*</operator><name>p1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p1</name> <operator>!=</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>p2</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><call><name>ISSPACE</name> <argument_list>(<argument><expr><operator>*</operator><name>p1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ISPUNCT</name> <argument_list>(<argument><expr><operator>*</operator><name>p1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><call><name>ISALPHA</name> <argument_list>(<argument><expr><name>ch</name> <operator>=</operator> <call><name>TOLOWER</name> <argument_list>(<argument><expr><operator>*</operator><name>p1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>TOLOWER</name> <argument_list>(<argument><expr><name><name>p1</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>pair</name></expr>
?</condition><then> <expr><operator>(</operator><name>HEXAGON_HASH_2</name> <operator>+</operator> <name>ch</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>is_if</name></expr>?</condition><then> <expr><name>HEXAGON_HASH_1</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr> 
</then><else>: <expr><operator>(</operator><name>HEXAGON_HASH_4</name> <operator>+</operator> <name>ch</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>is_if</name></expr>?</condition><then> <expr><name>HEXAGON_HASH_1</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr></else></ternary> <operator>)</operator></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>pair</name></expr>
?</condition><then> <expr><operator>(</operator><name>HEXAGON_HASH_2</name> <operator>+</operator> <name>ch</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>is_if</name></expr>?</condition><then> <expr><name>HEXAGON_HASH_1</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr> 
</then><else>: <expr><operator>(</operator><name>HEXAGON_HASH_0</name> <operator>+</operator> <name>ch</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>is_if</name></expr>?</condition><then> <expr><name>HEXAGON_HASH_1</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr></else></ternary> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>pair</name></expr>
?</condition><then> <expr><ternary><condition><expr><name>is_if</name></expr>?</condition><then> <expr><name>HEXAGON_HASH_K</name></expr></then><else>: <expr><name>HEXAGON_HASH_L</name></expr></else></ternary></expr>
</then><else>: <expr><ternary><condition><expr><name>is_if</name></expr>?</condition><then> <expr><name>HEXAGON_HASH_M</name></expr></then><else>: <expr><name>HEXAGON_HASH_N</name></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>syntax</name></expr></argument>, <argument><expr><literal type="string">"allocframe"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>syntax</name></expr></argument>, <argument><expr><literal type="string">"deallocframe"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>syntax</name></expr></argument>, <argument><expr><literal type="string">"nop"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>pair</name></expr>?</condition><then> <expr><name>HEXAGON_HASH_O</name></expr></then><else>: <expr><name>HEXAGON_HASH_P</name></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><operator>(</operator><name>HEXAGON_HASH_Z</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><name>hexagon_insn</name></type>
<name>hexagon_encode_opcode</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hexagon_insn</name></type> <name>insn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pair</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>insn</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>num_bits</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>pair</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>enc</name></expr>;</condition> <incr><expr><name>enc</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<while>while <condition>(<expr><call><name>ISSPACE</name> <argument_list>(<argument><expr><operator>*</operator><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>enc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>insn</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>*</operator><name>enc</name> <operator>==</operator> <literal type="char">'1'</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>num_bits</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pair</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>enc</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal> <operator>&amp;&amp;</operator> <name><name>enc</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>num_bits</name> <operator>!=</operator> <name>HEXAGON_INSN_LEN</name> <operator>*</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"invalid number of bits: %d\n"</literal></expr></argument>, <argument><expr><name>num_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>HEXAGON_END_PACKET_SET</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><ternary><condition><expr><name>pair</name></expr>?</condition><then> <expr><name>HEXAGON_END_PAIR</name></expr></then><else>: <expr><name>HEXAGON_END_NOT</name></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>hexagon_hash</name></type>
<name>hexagon_hash_icode</name>
<parameter_list>(<parameter><decl><type><name>hexagon_insn</name></type> <name>insn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>hexagon_hash</name></type> <name>xtra</name> <init>= <expr><operator>~</operator><operator>(</operator><operator>-</operator><operator>(</operator><name>HEXAGON_END_PACKET_MASK</name> <operator>&gt;&gt;</operator> <name>HEXAGON_END_PACKET_POS</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hexagon_hash</name></type> <name>hash</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <name>insn</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>HEXAGON_INSN_LEN</name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name>hexagon_icode_hash_bits</name> <operator>-</operator> <name>xtra</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>|=</operator> <operator>(</operator><call><name>HEXAGON_END_PACKET_GET</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>HEXAGON_END_PACKET_POS</name><operator>)</operator>
<operator>&lt;&lt;</operator> <operator>(</operator><name>hexagon_icode_hash_bits</name> <operator>-</operator> <name>xtra</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>hash</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_CPU_TYPE_UNINIT</name></cpp:macro> <cpp:value>(~0UL &lt;&lt; sizeof (cpu_type))</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cpu_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cpu_flag</name></decl>;</decl_stmt>



<function><type><name>int</name></type>
<name>hexagon_arch</name>
<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>cpu_type</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>hexagon_if_arch</name>
<parameter_list>(<parameter><decl><type><name>int</name></type> <name>arch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>hexagon_arch</name> <argument_list>()</argument_list></call> <operator>==</operator> <name>arch</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>hexagon_if_arch_kext</name>
<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>hexagon_if_arch_v4</name> <argument_list>()</argument_list></call> <operator>||</operator> <call><name>hexagon_if_arch_v5</name> <argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>hexagon_if_arch_pairs</name>
<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>hexagon_if_arch_v4</name> <argument_list>()</argument_list></call> <operator>||</operator> <call><name>hexagon_if_arch_v5</name> <argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>hexagon_if_arch_autoand</name>
<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>hexagon_if_arch_v4</name> <argument_list>()</argument_list></call> <operator>||</operator> <call><name>hexagon_if_arch_v5</name> <argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>hexagon_get_opcode_mach</name>
<parameter_list>(<parameter><decl><type><name>int</name></type> <name>bfd_mach</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>big_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int mach_type_map [] =
{
HEXAGON_MACH_V2,
HEXAGON_MACH_V3,
HEXAGON_MACH_V4,
HEXAGON_MACH_V5,

};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<return>return <expr><name>HEXAGON_MACH_V5</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (bfd_mach &lt; bfd_mach_hexagon_v2 || bfd_mach &gt; bfd_mach_hexagon_v5)
return HEXAGON_CPU_TYPE_UNINIT;

return (mach_type_map [bfd_mach - bfd_mach_hexagon_v2]
| (big_p? HEXAGON_MACH_BIG: 0));
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>hexagon_opcode_init_tables</name>
<parameter_list>(<parameter><decl><type><name>int</name></type> <name>cpu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cpu_type</name> <operator>==</operator> <name>cpu</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cpu_type</name> <operator>=</operator> <name>cpu</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cpu_type</name> <operator>==</operator> <name>HEXAGON_CPU_TYPE_UNINIT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cpu_flag</name> <operator>=</operator> <ternary><condition><expr><call><name>hexagon_if_arch_v2</name> <argument_list>()</argument_list></call></expr>?</condition><then> <expr><name>HEXAGON_IS_V2</name></expr>
</then><else>: <expr><ternary><condition><expr><call><name>hexagon_if_arch_v3</name> <argument_list>()</argument_list></call></expr>?</condition><then> <expr><name>HEXAGON_IS_V3</name></expr>
</then><else>: <expr><ternary><condition><expr><call><name>hexagon_if_arch_v4</name> <argument_list>()</argument_list></call></expr>?</condition><then> <expr><name>HEXAGON_IS_V4</name></expr>
</then><else>: <expr><ternary><condition><expr><call><name>hexagon_if_arch_v5</name> <argument_list>()</argument_list></call></expr>?</condition><then> <expr><name>HEXAGON_IS_V5</name></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>






<expr_stmt><expr><name>hexagon_opcodes</name> <operator>=</operator> <ternary><condition><expr><call><name>hexagon_if_arch_v2</name> <argument_list>()</argument_list></call></expr>?</condition><then> <expr><name>hexagon_opcodes_v2</name></expr>
</then><else>: <expr><ternary><condition><expr><call><name>hexagon_if_arch_v3</name> <argument_list>()</argument_list></call></expr>?</condition><then> <expr><name>hexagon_opcodes_v3</name></expr>
</then><else>: <expr><ternary><condition><expr><call><name>hexagon_if_arch_v4</name> <argument_list>()</argument_list></call></expr>?</condition><then> <expr><name>hexagon_opcodes_v4</name></expr>
</then><else>: <expr><name>hexagon_opcodes_v5</name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>hexagon_opcodes_count</name> <operator>=</operator> <ternary><condition><expr><call><name>hexagon_if_arch_v2</name> <argument_list>()</argument_list></call></expr>?</condition><then> <expr><name>hexagon_opcodes_count_v2</name></expr>
</then><else>: <expr><ternary><condition><expr><call><name>hexagon_if_arch_v3</name> <argument_list>()</argument_list></call></expr>?</condition><then> <expr><name>hexagon_opcodes_count_v3</name></expr>
</then><else>: <expr><ternary><condition><expr><call><name>hexagon_if_arch_v4</name> <argument_list>()</argument_list></call></expr>?</condition><then> <expr><name>hexagon_opcodes_count_v4</name></expr>
</then><else>: <expr><name>hexagon_opcodes_count_v5</name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>



<expr_stmt><expr><name>hexagon_icode_hash_bits</name> <operator>=</operator> <name>HEXAGON_INSN_LEN</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hexagon_opcodes_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>str</name> <operator>=</operator> <name><name>hexagon_opcodes</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>enc</name></expr>;</init> <condition><expr><operator>*</operator><name>str</name></expr>;</condition> <incr><expr><name>str</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'1'</literal> <operator>||</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'P'</literal> <operator>||</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <name>hexagon_icode_hash_bits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hexagon_icode_hash_bits</name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>hexagon_icode_hash_bits</name> <operator>+=</operator> <operator>~</operator><operator>(</operator><operator>-</operator><operator>(</operator><name>HEXAGON_END_PACKET_MASK</name> <operator>&gt;&gt;</operator> <name>HEXAGON_END_PACKET_POS</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>opcode_map</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>opcode_map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>icode_map</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>hexagon_icode_hash_bits</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>icode_map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>hexagon_opcodes_count</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>hexagon_hash</name></type> <name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hexagon_insn</name></type> <name>insn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hexagon_hash</name></type> <name>icode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>HEXAGON_HASH_OPCODE</name> <argument_list>(<argument><expr><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>syntax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>insn</name> <operator>=</operator> <call><name>hexagon_encode_opcode</name> <argument_list>(<argument><expr><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>icode</name> <operator>=</operator> <call><name>HEXAGON_HASH_ICODE</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>next_asm</name> <operator>=</operator> <name><name>opcode_map</name> <index>[<expr><name>opcode</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opcode_map</name> <index>[<expr><name>opcode</name></expr>]</index></name> <operator>=</operator> <name>hexagon_opcodes</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>next_dis</name> <operator>=</operator> <name><name>icode_map</name> <index>[<expr><name>icode</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>icode_map</name> <index>[<expr><name>icode</name></expr>]</index></name> <operator>=</operator> <name>hexagon_opcodes</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>attributes</name> <operator>&amp;</operator> <name>A_IT_NOP</name><operator>)</operator>
<operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>syntax</name></expr></argument>, <argument><expr><literal type="string">"nop"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hexagon_nop</name> <operator>=</operator> <name>insn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hexagon_nop_mask</name> <operator>=</operator> <call><name>hexagon_encode_mask</name> <argument_list>(<argument><expr><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>attributes</name> <operator>|=</operator> <name>A_IT_NOP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>attributes</name> <operator>&amp;</operator> <name>A_IT_EXTENDER</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hexagon_kext</name> <operator>=</operator> <name>insn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hexagon_kext_mask</name> <operator>=</operator> <call><name>hexagon_encode_mask</name> <argument_list>(<argument><expr><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>HEXAGON_CODE_IS_PREFIX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>attributes</name> <operator>&amp;</operator> <name>A_BRANCHADDER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>HEXAGON_CODE_IS_BRANCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>attributes</name> <operator>&amp;</operator> <name>A_RESTRICT_SINGLE_MEM_FIRST</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>HEXAGON_CODE_IS_MEMORY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>attributes</name> <operator>&amp;</operator> <name>A_STORE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>HEXAGON_CODE_IS_STORE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>HEXAGON_CODE_IS_LOAD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HEXAGON_END_PACKET_GET</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HEXAGON_END_PAIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>HEXAGON_CODE_IS_DUPLEX</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>attributes</name> <operator>&amp;</operator> <name>PACKED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hexagon_opcodes</name> <index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>HEXAGON_CODE_IS_COMPND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
puts ("Hash Table Depth:");
for (i = 0; i &lt; HEXAGON_HASH_SIZE; i++)
{
hexagon_opcode *op;
size_t j;

for (j = 0, op = opcode_map [i]; op; j++)
op = HEXAGON_CODE_NEXT_ASM (op);

printf ("#%02ld ('%c'): %02ld\t", i, (i % HEXAGON_HASH_1) + 'a', j);
}
puts ("");

puts ("Hash Table Syntax:");
for (i = 0; i &lt; HEXAGON_HASH_SIZE; i++)
{
hexagon_opcode *op;
size_t j;

printf ("#%02ld ('%c')\n", i, (i % HEXAGON_HASH_1) + 'a');

for (j = 0, op = opcode_map [i]; op; j++, op = HEXAGON_CODE_NEXT_ASM (op))
puts (op-&gt;syntax);

puts ("");
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>hexagon_opcode_supported</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>HEXAGON_CODE_CPU</name> <argument_list>(<argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>cpu_type</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type>
<name>hexagon_opcode_lookup_asm</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>opcode_map</name> <index>[<expr><call><name>HEXAGON_HASH_OPCODE</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type>
<name>hexagon_opcode_lookup_dis</name>
<parameter_list>(<parameter><decl><type><name>hexagon_insn</name></type> <name>insn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>icode_map</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>icode_map</name> <index>[<expr><call><name>HEXAGON_HASH_ICODE</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type>
<name>hexagon_lookup_insn</name>
<parameter_list>(<parameter><decl><type><name>hexagon_insn</name></type> <name>insn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hexagon_insn</name></type> <name>encode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hexagon_insn</name></type> <name>mask</name></decl>;</decl_stmt>


<expr_stmt><expr><name>insn</name> <operator>=</operator> <call><name>HEXAGON_END_PACKET_RESET</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>opcode</name> <operator>=</operator> <call><name>hexagon_opcode_lookup_dis</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>opcode</name></expr>;</condition>
<incr><expr><name>opcode</name> <operator>=</operator> <call><name>HEXAGON_CODE_NEXT_DIS</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>map</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>encode</name> <operator>=</operator> <call><name>hexagon_encode_opcode</name> <argument_list>(<argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>hexagon_encode_mask</name> <argument_list>(<argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>encode</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>opcode</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>














<function><type><name>int</name></type>
<name>hexagon_encode_operand</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>avalue</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>xvalue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_rel</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>enc_letter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>smin</name></decl>, <decl><type ref="prev"/><name>smax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>umin</name></decl>, <decl><type ref="prev"/><name>umax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>xer</name></decl>, <decl><type ref="prev"/><name>xed</name></decl>;</decl_stmt>
<union>union
<block>{
<decl_stmt><decl><type><name>long</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>u</name></decl>;</decl_stmt>
}</block> <decl><name>value</name></decl>;</union>
<decl_stmt><decl><type><name>int</name></type> <name>is_s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name> <index>[<expr><literal type="number">500</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>value</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>avalue</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_x</name> <operator>=</operator> <name>is_x</name> <operator>&amp;&amp;</operator> <name>xvalue</name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_s</name> <operator>=</operator> <operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>enc_letter</name> <operator>=</operator> <name><name>operand</name><operator>-&gt;</operator><name>enc_letter</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>FALSE</name> <operator>&amp;&amp;</operator> <name>is_rel</name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>attributes</name></name>
<operator>&amp;</operator> <operator>(</operator><name>EXTENDABLE_LOWER_CASE_IMMEDIATE</name> <operator>|</operator> <name>EXTENDABLE_UPPER_CASE_IMMEDIATE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EXTENDABLE_LOWER_CASE_IMMEDIATE</name></expr>:</case>
<expr_stmt><expr><name>enc_letter</name> <operator>=</operator> <call><name>TOLOWER</name> <argument_list>(<argument><expr><name>enc_letter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EXTENDABLE_UPPER_CASE_IMMEDIATE</name></expr>:</case>
<expr_stmt><expr><name>enc_letter</name> <operator>=</operator> <call><name>TOUPPER</name> <argument_list>(<argument><expr><name>enc_letter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>shift_count</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>.</operator><name>s</name></name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><operator>~</operator><literal type="number">0L</literal> <operator>&lt;&lt;</operator> <name><name>operand</name><operator>-&gt;</operator><name>shift_count</name></name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"low %d bits of immediate %ld must be zero"</literal></expr></argument>,
<argument><expr><name><name>operand</name><operator>-&gt;</operator><name>shift_count</name></name></expr></argument>, <argument><expr><name><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_LO16</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>s</name></name> <operator>=</operator> <call><name>HEXAGON_LO16</name> <argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_HI16</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>s</name></name> <operator>=</operator> <call><name>HEXAGON_HI16</name> <argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_SUBSET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>s</name></name> <operator>=</operator> <call><name>HEXAGON_SUBREGS_TO</name> <argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_PAIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>operand</name><operator>-&gt;</operator><name>bits</name></name> <operator>+</operator> <name><name>operand</name><operator>-&gt;</operator><name>shift_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>smax</name> <operator>=</operator> <operator>~</operator><operator>(</operator><operator>~</operator><literal type="number">0L</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>smin</name> <operator>=</operator> <operator>(</operator><operator>~</operator><literal type="number">0L</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_NEGATIVE</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>umax</name> <operator>=</operator> <operator>~</operator><operator>(</operator><operator>~</operator><literal type="number">0UL</literal> <operator>&lt;&lt;</operator> <name>bits</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>umin</name> <operator>=</operator> <literal type="number">0UL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>xed</name> <operator>=</operator> <name><name>value</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xer</name> <operator>=</operator> <call><name>hexagon_extend</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>xed</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>is_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_x</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>is_s</name> <operator>=</operator> <operator>(</operator><name>xed</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>xvalue</name> <operator>=</operator> <name>xer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>xed</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>is_s</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>.</operator><name>s</name></name> <operator>&lt;</operator> <name>smin</name> <operator>||</operator> <operator>(</operator><name>smax</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>value</name><operator>.</operator><name>s</name></name> <operator>&gt;</operator> <name>smax</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"value %ld out of range: %ld-%ld"</literal></expr></argument>, <argument><expr><name><name>value</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>smin</name></expr></argument>, <argument><expr><name>smax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>.</operator><name>u</name></name> <operator>&lt;</operator> <name>umin</name> <operator>||</operator> <operator>(</operator><name>umax</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>value</name><operator>.</operator><name>u</name></name> <operator>&gt;</operator> <name>umax</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"value %lu out of range: %lu-%lu"</literal></expr></argument>, <argument><expr><name><name>value</name><operator>.</operator><name>u</name></name></expr></argument>, <argument><expr><name>umin</name></expr></argument>, <argument><expr><name>umax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>s</name></name> <operator>&gt;&gt;=</operator> <name><name>operand</name><operator>-&gt;</operator><name>shift_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISSPACE</name> <argument_list>(<argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>enc</name> <index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>enc</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>enc_letter</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>insn</name><operator>)</operator> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift_count</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>insn</name><operator>)</operator> <operator>|=</operator> <operator>(</operator><name><name>value</name><operator>.</operator><name>s</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>s</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num_bits</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>shift_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name>num_bits</name> <operator>!=</operator> <name><name>operand</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"did not encode expected number of bits: %d != %d\n"</literal>
<literal type="string">"enc = %s\n operand = %s"</literal></expr></argument>,
<argument><expr><name>num_bits</name></expr></argument>, <argument><expr><name><name>operand</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name><name>operand</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hexagon_reg_num</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier><name>operand</name></type> <name>ATTRIBUTE_UNUSED</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>reg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>hexagon_reg</name></type> <name><name>alias</name> <index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>aliasn</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>regn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>regs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>regs</name> <operator>=</operator> <operator>*</operator><name>input</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TOLOWER</name> <argument_list>(<argument><expr><name><name>regs</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>TOLOWER</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ISDIGIT</name> <argument_list>(<argument><expr><name><name>regs</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>regs</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>regn</name> <operator>=</operator> <call><name>strtoul</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>regn</name> <operator>!=</operator> <name>ULONG_MAX</name> <operator>&amp;&amp;</operator> <name>regs</name> <operator>!=</operator> <operator>*</operator><name>input</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISALPHA</name> <argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>input</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>regn</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regs</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>regs</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>regn</name> <operator>=</operator> <call><name>strtoul</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof>
<operator>&lt;=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%c%ld"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>regn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>alias</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>cpu_flag</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>alias</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>, <argument><expr><name><name>alias</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>alias</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>regn</name> <operator>=</operator> <name><name>alias</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reg_num</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ISALNUM</name> <argument_list>(<argument><expr><name><name>regs</name> <index>[<expr><name>len</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><operator>*</operator><name>name</name></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>input</name> <operator>=</operator> <name>regs</name> <operator>+</operator> <name>len</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><operator>*</operator><name>name</name></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>aliasn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>aliasn</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>regn</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>hexagon_parse_dreg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reg_odd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg_even</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg_odd</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><name>hexagon_gp_regs</name></expr></argument>, <argument><expr><name>hexagon_gp_regs_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_even</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>hexagon_gp_regs</name></expr></argument>, <argument><expr><name>hexagon_gp_regs_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_odd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>reg_even</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reg_odd</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name> <index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"invalid odd register number: %d"</literal></expr></argument>, <argument><expr><name>reg_odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reg_even</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name> <index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"invalid even register number: %d"</literal></expr></argument>, <argument><expr><name>reg_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reg_odd</name> <operator>!=</operator> <name>reg_even</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name> <index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"registers must be consecutive: %d:%d"</literal></expr></argument>,
<argument><expr><name>reg_odd</name></expr></argument>, <argument><expr><name>reg_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hexagon_encode_operand</name>
<argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>reg_even</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>=</operator> <name>HEXAGON_OPERAND_IS_PAIR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>reg_even</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>input</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>hexagon_parse_dreg16</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reg_odd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg_even</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg_odd</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><name>hexagon_gp_regs</name></expr></argument>, <argument><expr><name>hexagon_gp_regs_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_even</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>hexagon_gp_regs</name></expr></argument>, <argument><expr><name>hexagon_gp_regs_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_odd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>reg_even</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reg_odd</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name> <index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"invalid odd register number: %d"</literal></expr></argument>, <argument><expr><name>reg_odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reg_even</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name> <index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"invalid even register number: %d"</literal></expr></argument>, <argument><expr><name>reg_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reg_odd</name> <operator>!=</operator> <name>reg_even</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name> <index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"registers must be consecutive: %d:%d"</literal></expr></argument>,
<argument><expr><name>reg_odd</name></expr></argument>, <argument><expr><name>reg_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>reg_odd</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>reg_odd</name></expr></argument> &gt;</argument_list></name> <literal type="number">31</literal><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>reg_even</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>reg_even</name></expr></argument> &gt;</argument_list></name> <literal type="number">30</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hexagon_encode_operand</name>
<argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>reg_even</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>=</operator> <name>HEXAGON_OPERAND_IS_PAIR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>reg_even</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>input</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>hexagon_parse_dreg8</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reg_odd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg_even</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg_odd</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><name>hexagon_gp_regs</name></expr></argument>, <argument><expr><name>hexagon_gp_regs_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_even</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>hexagon_gp_regs</name></expr></argument>, <argument><expr><name>hexagon_gp_regs_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_odd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>reg_even</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reg_odd</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name> <index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"invalid odd register number: %d"</literal></expr></argument>, <argument><expr><name>reg_odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reg_even</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name> <index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"invalid even register number: %d"</literal></expr></argument>, <argument><expr><name>reg_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reg_odd</name> <operator>!=</operator> <name>reg_even</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name> <index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"registers must be consecutive: %d:%d"</literal></expr></argument>,
<argument><expr><name>reg_odd</name></expr></argument>, <argument><expr><name>reg_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>reg_odd</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>reg_odd</name></expr></argument> &gt;</argument_list></name> <literal type="number">7</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>reg_odd</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">17</literal> <operator>||</operator> <name>reg_odd</name></expr></argument> &gt;</argument_list></name> <literal type="number">23</literal><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>reg_even</name> <operator>&gt;</operator> <literal type="number">6</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>reg_even</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">16</literal> <operator>||</operator> <name>reg_even</name></expr></argument> &gt;</argument_list></name> <literal type="number">22</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hexagon_encode_operand</name>
<argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>reg_even</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>=</operator> <name>HEXAGON_OPERAND_IS_PAIR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>reg_even</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>input</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>hexagon_parse_reg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><name>hexagon_gp_regs</name></expr></argument>, <argument><expr><name>hexagon_gp_regs_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hexagon_encode_operand</name>
<argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>=</operator> <name>HEXAGON_OPERAND_IS_REGISTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>input</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>hexagon_parse_reg16</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><name>hexagon_gp_regs</name></expr></argument>, <argument><expr><name>hexagon_gp_regs_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg</name> <operator>&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>reg</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">16</literal> <operator>||</operator> <name>reg</name></expr></argument> &gt;</argument_list></name> <literal type="number">23</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hexagon_encode_operand</name>
<argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>=</operator> <name>HEXAGON_OPERAND_IS_REGISTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>input</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>hexagon_parse_reg8</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><name>hexagon_gp_regs</name></expr></argument>, <argument><expr><name>hexagon_gp_regs_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg</name> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>reg</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">16</literal> <operator>||</operator> <name>reg</name></expr></argument> &gt;</argument_list></name> <literal type="number">19</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hexagon_encode_operand</name>
<argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>=</operator> <name>HEXAGON_OPERAND_IS_REGISTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>input</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>hexagon_parse_nreg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><name>hexagon_gp_regs</name></expr></argument>, <argument><expr><name>hexagon_gp_regs_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reg</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>reg</name></expr></argument> &gt;</argument_list></name> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hexagon_encode_operand</name>
<argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>reg</name> <operator>%</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>=</operator> <name>HEXAGON_OPERAND_IS_RNEW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>input</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>hexagon_parse_splr</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>hexagon_reg_num</name>
<argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><name>hexagon_gp_regs</name></expr></argument>, <argument><expr><name>hexagon_gp_regs_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>fmt</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name><name>operand</name><operator>-&gt;</operator><name>fmt</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal> <operator>&amp;&amp;</operator> <name>reg</name> <operator>!=</operator> <literal type="number">29</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>fmt</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal> <operator>&amp;&amp;</operator> <name><name>operand</name><operator>-&gt;</operator><name>fmt</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal> <operator>&amp;&amp;</operator> <name>reg</name> <operator>!=</operator> <literal type="number">31</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hexagon_encode_operand</name>
<argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>=</operator> <name>HEXAGON_OPERAND_IS_REGISTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>input</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>hexagon_parse_preg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><name>hexagon_gp_regs</name></expr></argument>, <argument><expr><name>hexagon_gp_regs_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hexagon_encode_operand</name>
<argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>=</operator> <name>HEXAGON_OPERAND_IS_PREDICATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>input</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>hexagon_parse_mreg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hexagon_encode_operand</name>
<argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>=</operator> <name>HEXAGON_OPERAND_IS_MODIFIER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>input</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>hexagon_parse_creg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>regn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name> <index>[<expr><literal type="number">150</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>hexagon_control_regs</name></expr></argument>, <argument><expr><name>hexagon_control_regs_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regn</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hexagon_verify_hw</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_WRITE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>hexagon_control_regs</name> <index>[<expr><name>regn</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>HEXAGON_REG_IS_READONLY</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cannot write to read-only register `%s'."</literal></expr></argument>,
<argument><expr><name><name>hexagon_control_regs</name> <index>[<expr><name>regn</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>|=</operator> <name>HEXAGON_OPERAND_IS_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hexagon_encode_operand</name>
<argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>|=</operator> <name>HEXAGON_OPERAND_IS_CONTROL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>input</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>hexagon_parse_dcreg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name> <index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rege</name></decl>, <decl><type ref="prev"/><name>rego</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg_odd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg_even</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg_odd</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>hexagon_control_regs</name></expr></argument>, <argument><expr><name>hexagon_control_regs_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rego</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_even</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>hexagon_control_regs</name></expr></argument>, <argument><expr><name>hexagon_control_regs_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rege</name></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_odd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>reg_even</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reg_odd</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"invalid odd register number: %d"</literal></expr></argument>, <argument><expr><name>reg_odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reg_even</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"invalid even register number: %d"</literal></expr></argument>, <argument><expr><name>reg_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reg_odd</name> <operator>!=</operator> <name>reg_even</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"registers must be consecutive: %d:%d"</literal></expr></argument>,
<argument><expr><name>reg_odd</name></expr></argument>, <argument><expr><name>reg_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hexagon_verify_hw</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_WRITE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>hexagon_control_regs</name> <index>[<expr><name>rege</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>HEXAGON_REG_IS_READONLY</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>hexagon_control_regs</name> <index>[<expr><name>rego</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>HEXAGON_REG_IS_READONLY</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cannot write to read-only register `%s:%s'."</literal></expr></argument>,
<argument><expr><name><name>hexagon_control_regs</name> <index>[<expr><name>rego</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><name><name>hexagon_control_regs</name> <index>[<expr><name>rege</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>|=</operator> <name>HEXAGON_OPERAND_IS_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hexagon_encode_operand</name>
<argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>reg_even</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>|=</operator> <name>HEXAGON_OPERAND_IS_PAIR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>reg_even</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>input</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>hexagon_parse_greg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>regn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name> <index>[<expr><literal type="number">150</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>hexagon_guest_regs</name></expr></argument>, <argument><expr><name>hexagon_guest_regs_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regn</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hexagon_verify_hw</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_WRITE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>hexagon_guest_regs</name> <index>[<expr><name>regn</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>HEXAGON_REG_IS_READONLY</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cannot write to read-only register `%s'."</literal></expr></argument>,
<argument><expr><name><name>hexagon_guest_regs</name> <index>[<expr><name>regn</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>|=</operator> <name>HEXAGON_OPERAND_IS_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hexagon_encode_operand</name>
<argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>|=</operator> <name>HEXAGON_OPERAND_IS_CONTROL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>input</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>hexagon_parse_dgreg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name> <index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rege</name></decl>, <decl><type ref="prev"/><name>rego</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg_odd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg_even</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg_odd</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>hexagon_guest_regs</name></expr></argument>, <argument><expr><name>hexagon_guest_regs_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rego</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_even</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>hexagon_guest_regs</name></expr></argument>, <argument><expr><name>hexagon_guest_regs_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rege</name></expr></argument>, <argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_odd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>reg_even</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reg_odd</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"invalid odd register number: %d"</literal></expr></argument>, <argument><expr><name>reg_odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reg_even</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"invalid even register number: %d"</literal></expr></argument>, <argument><expr><name>reg_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reg_odd</name> <operator>!=</operator> <name>reg_even</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"registers must be consecutive: %d:%d"</literal></expr></argument>,
<argument><expr><name>reg_odd</name></expr></argument>, <argument><expr><name>reg_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hexagon_verify_hw</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_WRITE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>hexagon_guest_regs</name> <index>[<expr><name>rege</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>HEXAGON_REG_IS_READONLY</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>hexagon_guest_regs</name> <index>[<expr><name>rego</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>HEXAGON_REG_IS_READONLY</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cannot write to read-only register `%s:%s'."</literal></expr></argument>,
<argument><expr><name><name>hexagon_guest_regs</name> <index>[<expr><name>rego</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><name><name>hexagon_guest_regs</name> <index>[<expr><name>rege</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>|=</operator> <name>HEXAGON_OPERAND_IS_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hexagon_encode_operand</name>
<argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>reg_even</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>|=</operator> <name>HEXAGON_OPERAND_IS_PAIR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>reg_even</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>input</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>hexagon_parse_sreg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>regn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name> <index>[<expr><literal type="number">150</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>hexagon_supervisor_regs</name></expr></argument>, <argument><expr><name>hexagon_supervisor_regs_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regn</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hexagon_verify_hw</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_WRITE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>hexagon_supervisor_regs</name> <index>[<expr><name>regn</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>HEXAGON_REG_IS_READONLY</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cannot write to read-only register `%s'."</literal></expr></argument>,
<argument><expr><name><name>hexagon_supervisor_regs</name> <index>[<expr><name>regn</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>|=</operator> <name>HEXAGON_OPERAND_IS_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hexagon_encode_operand</name>
<argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>|=</operator> <name>HEXAGON_OPERAND_IS_SYSTEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>input</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>hexagon_parse_dsreg</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name> <index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rege</name></decl>, <decl><type ref="prev"/><name>rego</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg_odd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg_even</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg_odd</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>hexagon_supervisor_regs</name></expr></argument>, <argument><expr><name>hexagon_supervisor_regs_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rego</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_even</name> <operator>=</operator> <call><name>hexagon_reg_num</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>hexagon_supervisor_regs</name></expr></argument>, <argument><expr><name>hexagon_supervisor_regs_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rege</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_odd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>reg_even</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reg_odd</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"invalid odd register number: %d"</literal></expr></argument>, <argument><expr><name>reg_odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reg_even</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"invalid even register number: %d"</literal></expr></argument>, <argument><expr><name>reg_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reg_odd</name> <operator>!=</operator> <name>reg_even</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"registers must be consecutive: %d:%d"</literal></expr></argument>,
<argument><expr><name>reg_odd</name></expr></argument>, <argument><expr><name>reg_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hexagon_verify_hw</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_WRITE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>hexagon_supervisor_regs</name> <index>[<expr><name>rege</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>HEXAGON_REG_IS_READONLY</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>hexagon_supervisor_regs</name> <index>[<expr><name>rego</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>HEXAGON_REG_IS_READONLY</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cannot write to read-only register `%s:%s'."</literal></expr></argument>,
<argument><expr><name><name>hexagon_supervisor_regs</name> <index>[<expr><name>rego</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><name><name>hexagon_supervisor_regs</name> <index>[<expr><name>rege</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>|=</operator> <name>HEXAGON_OPERAND_IS_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hexagon_encode_operand</name>
<argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>reg_even</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flag</name> <operator>|=</operator> <name>HEXAGON_OPERAND_IS_PAIR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>reg_even</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>input</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>hexagon_insn</name></type>
<name>hexagon_encode_mask</name>
<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hexagon_insn</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_bits</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>num_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>enc</name></expr>;</condition> <incr><expr><name>enc</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<while>while <condition>(<expr><call><name>ISSPACE</name> <argument_list>(<argument><expr><operator>*</operator><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>enc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><name>mask</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>*</operator><name>enc</name> <operator>==</operator> <literal type="char">'1'</literal> <operator>||</operator> <operator>*</operator><name>enc</name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>num_bits</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>num_bits</name> <operator>==</operator> <name>HEXAGON_INSN_LEN</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>mask</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type>
<name>hexagon_lookup_operand</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>op_len</name></decl>, <decl><type ref="prev"/><name>fm_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><name>op_len</name> <operator>=</operator> <call><name>strcspn</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">" .,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hexagon_operand_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>fm_len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>hexagon_operands</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op_len</name> <operator>==</operator> <name>fm_len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>hexagon_operands</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fmt</name></expr></argument>, <argument><expr><name>op_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>hexagon_operands</name> <operator>+</operator> <name>i</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type>
<name>hexagon_lookup_reloc</name>
<parameter_list>(<parameter><decl><type><name>bfd_reloc_code_real_type</name></type> <name>reloc_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bfd_reloc_code_real_type</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reloc_type</name> <operator>==</operator> <name>BFD_RELOC_NONE</name> <operator>||</operator> <operator>!</operator><name>opcode</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hexagon_operand_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_KXED</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hexagon_operands</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_IMMEDIATE</name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>attributes</name></name>
<operator>&amp;</operator> <operator>(</operator><name>EXTENDABLE_LOWER_CASE_IMMEDIATE</name>
<operator>|</operator> <name>EXTENDABLE_UPPER_CASE_IMMEDIATE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EXTENDABLE_LOWER_CASE_IMMEDIATE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>hexagon_operands</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>enc_letter</name>
<operator>!=</operator> <call><name>TOLOWER</name> <argument_list>(<argument><expr><name><name>hexagon_operands</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>enc_letter</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><name><name>hexagon_operands</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>EXTENDABLE_UPPER_CASE_IMMEDIATE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>hexagon_operands</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>enc_letter</name>
<operator>!=</operator> <call><name>TOUPPER</name> <argument_list>(<argument><expr><name><name>hexagon_operands</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>enc_letter</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><name><name>hexagon_operands</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<break>break;</break>
</block_content>}</block></switch></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>hexagon_operands</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reloc_kxed</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>hexagon_operands</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reloc_type</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>reloc_type</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>hexagon_operands</name> <operator>+</operator> <name>i</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>hexagon_extract_operand</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name></type> <name>insn</name></decl></parameter>,
<parameter><decl><type><name>bfd_vma</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>return_value</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>enc_letter</name> <init>= <expr><name><name>operand</name><operator>-&gt;</operator><name>enc_letter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc_ptr</name> <init>= <expr><name>enc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bits_found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hexagon_insn</name></type> <name>mask</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HEXAGON_IS16BITS</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>bits_found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>enc_ptr</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><operator>*</operator><name>enc_ptr</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISSPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>enc_letter</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bits_found</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>bits_found</name> <operator>!=</operator> <name><name>operand</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>xx</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><literal type="string">"operand %c wrong number of bits found in %s, %d != %d"</literal></expr></argument>,
<argument><expr><name><name>operand</name><operator>-&gt;</operator><name>enc_letter</name></name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>bits_found</name></expr></argument>, <argument><expr><name><name>operand</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_SIGNED</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bits_found</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bits_found</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal> <operator>-</operator> <name>bits_found</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal> <operator>-</operator> <name>bits_found</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>&lt;&lt;=</operator> <name><name>operand</name><operator>-&gt;</operator><name>shift_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_PC_RELATIVE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>addr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_SUBSET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>HEXAGON_SUBREGS_FROM</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_PAIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>return_value</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>hexagon_dis_named_reg</name>
<parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_reg</name> <modifier>*</modifier></type><name>regs</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>regs</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>cpu_flag</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name><name>regs</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reg_num</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>regs</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>xx</name> <index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><literal type="string">"control register not found: %d"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>buf</name> <operator>+</operator> <name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>hexagon_dis_operand</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name></type> <name>insn</name></decl></parameter>, <parameter><decl><type><name>bfd_vma</name></type> <name>iaddr</name></decl></parameter>, <parameter><decl><type><name>bfd_vma</name></type> <name>paddr</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>bfd_vma</name></type> <name>previous</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xer</name></decl>, <decl><type ref="prev"/><name>xreg</name></decl>, <decl><type ref="prev"/><name>xvalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xed</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<struct><specifier>static</specifier> struct <block>{<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>}</block> <decl><name><name>reg</name> <index>[<expr><name>MAX_PACKET_INSNS</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>size_t</name></type> <name>ireg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hexagon_extract_operand</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>xed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_KXER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>xreg</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>xer</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xvalue</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>xer</name> <operator>&amp;&amp;</operator> <name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_KXED</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_PC_RELATIVE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>xed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>-=</operator> <name>paddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>&gt;&gt;=</operator> <name><name>operand</name><operator>-&gt;</operator><name>shift_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><operator>~</operator><literal type="number">0UL</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>xvalue</name> <operator>+</operator> <name>paddr</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>xed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>&gt;&gt;=</operator> <name><name>operand</name><operator>-&gt;</operator><name>shift_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><operator>~</operator><literal type="number">0UL</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>xvalue</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>xer</name> <operator>=</operator> <name>xvalue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>previous</name> <operator>!=</operator> <name>paddr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>previous</name> <operator>=</operator> <name>paddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xreg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ireg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>iaddr</name> <operator>-</operator> <name>paddr</name><operator>)</operator> <operator>%</operator> <operator>(</operator><name>MAX_PACKET_INSNS</name> <operator>*</operator> <name>HEXAGON_INSN_LEN</name><operator>)</operator><operator>)</operator> <operator>/</operator> <name>MAX_PACKET_INSNS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ireg</name> <operator>-=</operator> <name>xreg</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_WRITE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_REGISTER</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_PAIR</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_SUBSET</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>reg</name> <index>[<expr><name>ireg</name></expr>]</index></name><operator>.</operator><name>y</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>reg</name> <index>[<expr><name>ireg</name></expr>]</index></name><operator>.</operator><name>n</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reg</name> <index>[<expr><name>ireg</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_READ</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_NEW</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>reg</name> <index>[<expr><name>ireg</name> <operator>-</operator> <operator>(</operator><name>value</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name><operator>.</operator><name>n</name>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>reg</name> <index>[<expr><name>ireg</name> <operator>-</operator> <operator>(</operator><name>value</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name><operator>.</operator><name>n</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>value</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_PAIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>operand</name><operator>-&gt;</operator><name>dis_fmt</name></name></expr></argument>, <argument><expr><name>value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_CONTROL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>hexagon_dis_named_reg</name> <argument_list>(<argument><expr><name>value</name></expr></argument>,
<argument><expr><name>hexagon_control_regs_count</name></expr></argument>, <argument><expr><name>hexagon_control_regs</name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_GUEST</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>hexagon_dis_named_reg</name> <argument_list>(<argument><expr><name>value</name></expr></argument>,
<argument><expr><name>hexagon_guest_regs_count</name></expr></argument>, <argument><expr><name>hexagon_guest_regs</name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_SYSTEM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>hexagon_dis_named_reg</name> <argument_list>(<argument><expr><name>value</name></expr></argument>,
<argument><expr><name>hexagon_supervisor_regs_count</name></expr></argument>, <argument><expr><name>hexagon_supervisor_regs</name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name> <index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>operand</name><operator>-&gt;</operator><name>dis_fmt</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>buf</name> <operator>+</operator> <name>n</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>xx</name> <index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><literal type="string">"bad return code from sprintf: %d"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>hexagon_dis_opcode</name>
<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name></type> <name>insn</name></decl></parameter>, <parameter><decl><type><name>bfd_vma</name></type> <name>address</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>temp</name> <index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>in_packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>end_inner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>end_outer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bfd_vma</name></type> <name>packet_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hexagon_insn</name></type> <name>packet_bits</name> <init>= <expr><call><name>HEXAGON_END_PACKET_GET</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_packet</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>opcode</name><operator>-&gt;</operator><name>syntax</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>packet_bits</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>HEXAGON_END_PACKET</name></expr>:</case>
<case>case <expr><name>HEXAGON_END_PAIR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>in_packet</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>sprintf</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>packet_addr</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>end_packet</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>HEXAGON_END_LOOP</name></expr>:</case>
<case>case <expr><name>HEXAGON_END_NOT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_packet</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>sprintf</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%c "</literal></expr></argument>, <argument><expr><name>PACKET_BEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_addr</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>sprintf</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>in_packet</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>packet_bits</name> <operator>==</operator> <name>HEXAGON_END_LOOP</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>in_packet</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end_inner</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>in_packet</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end_outer</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"invalid packet bits: %.8x"</literal></expr></argument>, <argument><expr><name>packet_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
<break>break;</break>
</block_content>}</block></switch>

<while>while <condition>(<expr><operator>*</operator><name>src</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>ISUPPER</name><argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>TOUPPER</name><argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'I'</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hexagon_operand_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>hexagon_operand</name></type> <name>operand</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>operand</name> <operator>=</operator> <name><name>hexagon_operands</name> <index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>operand</name><operator>.</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>operand</name><operator>.</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>attributes</name></name> <operator>&amp;</operator> <name>A_IT_EXTENDER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>operand</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>HEXAGON_OPERAND_IS_KXER</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEXAGON_OPERAND_IS_IMMEDIATE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>attributes</name></name> <operator>&amp;</operator> <name>EXTENDABLE_LOWER_CASE_IMMEDIATE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>ISLOWER</name> <argument_list>(<argument><expr><name><name>operand</name><operator>.</operator><name>enc_letter</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>attributes</name></name> <operator>&amp;</operator> <name>EXTENDABLE_UPPER_CASE_IMMEDIATE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>ISUPPER</name> <argument_list>(<argument><expr><name><name>operand</name><operator>.</operator><name>enc_letter</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>operand</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>HEXAGON_OPERAND_IS_KXED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>hexagon_dis_operand</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>packet_addr</name></expr></argument>,
<argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"&lt;unknown insn 0x%08x&gt;"</literal></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"&lt;unknown insn 0x%08x&gt;"</literal></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"unknown operand: %s"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>src</name></expr>)</condition>
<block>{<block_content>

<case>case <expr><literal type="char">'('</literal></expr>:</case>
<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>ISBLANK</name> <argument_list>(<argument><expr><name><name>src</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<break>break;</break>


<case>case <expr><literal type="char">')'</literal></expr>:</case>
<case>case <expr><literal type="char">'.'</literal></expr>:</case>
<case>case <expr><literal type="char">','</literal></expr>:</case>
<case>case <expr><literal type="char">':'</literal></expr>:</case>
<while>while <condition>(<expr><call><name>ISBLANK</name> <argument_list>(<argument><expr><name><name>dst</name> <index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>


<default>default:</default>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end_packet</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>in_packet</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>sprintf</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">" %c"</literal></expr></argument>, <argument><expr><name>PACKET_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end_inner</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>sprintf</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>PACKET_END_INNER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>end_outer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>sprintf</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>PACKET_END_OUTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>in_packet</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_inner</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_outer</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type>
<name>hexagon_operand_find</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloca</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>operand</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>operand</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hexagon_operand_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>hexagon_operands</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>hexagon_operands</name> <operator>+</operator> <name>i</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type>
<name>hexagon_operand_find_xx16</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>operand</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hexagon_operand_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>oper</name> <init>= <expr><operator>&amp;</operator><name><name>hexagon_operands</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>oper</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>oper</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type>
<name>hexagon_operand_find_lo16</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>hexagon_operand_find_xx16</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><literal type="string">"_lo16"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type>
<name>hexagon_operand_find_hi16</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>hexagon_operand_find_xx16</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><literal type="string">"_hi16"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>hexagon_extract_modifier_operand</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>,
<parameter><decl><type><name>hexagon_insn</name></type> <name>insn</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>return_value</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>reg_name</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>xx</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>hexagon_dis_operand</name><argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>reg_name</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>



<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>hexagon_control_regs_count</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>hexagon_control_regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_name</name></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>return_value</name> <operator>=</operator> <name><name>hexagon_control_regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reg_num</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><literal type="string">"Illegal modifier operand: %s"</literal></expr></argument>, <argument><expr><name>reg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>hexagon_extract_predicate_operand</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name></type> <name>insn</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>return_value</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>reg_name</name> <index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg_num</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hexagon_dis_operand</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>reg_name</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hexagon_extract_operand</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg_num</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>return_value</name> <operator>=</operator> <name>reg_num</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type>
<name>hexagon_opcode_next_asm</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>next_asm</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>op</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
