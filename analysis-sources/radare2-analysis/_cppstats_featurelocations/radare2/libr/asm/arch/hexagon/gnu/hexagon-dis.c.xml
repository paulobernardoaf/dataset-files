<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\hexagon\gnu\hexagon-dis.c">


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ansidecl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libiberty.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"disas-asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opcode/hexagon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mybfd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opintl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe-ctype.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hexagon_dis_inst</name><parameter_list>(
<parameter><decl><type><name>bfd_vma</name></type> <name>address</name></decl></parameter>,
<parameter><decl><type><name>hexagon_insn</name></type> <name>insn</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>instrBuffer</name></decl></parameter>,
<parameter><decl><type><name>disassemble_info</name> <modifier>*</modifier></type> <name>info</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>HEXAGON_INSN_LEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>hexagon_lookup_insn</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hexagon_dis_opcode</name><argument_list>(<argument><expr><name>instrBuffer</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>instrBuffer</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>instrBuffer</name></expr></argument>, <argument><expr><literal type="string">"&lt;unknown&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>hexagon_decode_inst</name><parameter_list>(
<parameter><decl><type><name>bfd_vma</name></type> <name>address</name></decl></parameter>, 
<parameter><decl><type><name>disassemble_info</name> <modifier>*</modifier></type> <name>info</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hexagon_insn</name></type> <name>insn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bfd_byte</name></type> <name><name>buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>fprintf_ftype</name></type> <name>func</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>instrBuffer</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>


status = (*info-&gt;read_memory_func)(address, buffer, 2, info);
if (status != 0) {
(*info-&gt;memory_error_func)(status, address, info);
return -1;
}
if (info-&gt;endian == BFD_ENDIAN_LITTLE) {
insn = bfd_getl16 (buffer);
}
else {
insn = bfd_getb16 (buffer);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>read_memory_func</name></name>)<argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>memory_error_func</name></name>)<argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>endian</name></name> <operator>==</operator> <name>BFD_ENDIAN_LITTLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>insn</name> <operator>=</operator> <call><name>bfd_getl32</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>insn</name> <operator>=</operator> <call><name>bfd_getb32</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>hexagon_dis_inst</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>instrBuffer</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" %04x "</literal></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%08x "</literal></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>str</name> <operator>=</operator> <name>instrBuffer</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><operator>*</operator><name>str</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bfd_vma</name></type> <name>addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>addr</name> <operator>+</operator> <operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>)<argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>bytes</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>disassembler_ftype</name></type>
<name>hexagon_get_disassembler_from_mach</name><parameter_list>(
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>machine</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>big_p</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hexagon_opcode_init_tables</name><argument_list>(<argument><expr><call><name>hexagon_get_opcode_mach</name><argument_list>(<argument><expr><name>machine</name></expr></argument>, <argument><expr><name>big_p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hexagon_decode_inst</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>disassembler_ftype</name></type>
<name>hexagon_get_disassembler</name><parameter_list>(
<parameter><decl><type><name>bfd</name> <modifier>*</modifier></type><name>abfd</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>machine</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>big_p</name> <init>= <expr><call><name>bfd_big_endian</name><argument_list>(<argument><expr><name>abfd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><call><name>hexagon_get_disassembler_from_mach</name><argument_list>(<argument><expr><name>machine</name></expr></argument>, <argument><expr><name>big_p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
