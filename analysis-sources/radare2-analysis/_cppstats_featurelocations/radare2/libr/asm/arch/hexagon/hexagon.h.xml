<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\hexagon\hexagon.h">
<typedef>typedef <type><enum>enum <block>{
<decl><name>HEX_NOPRED</name></decl>, 
<decl><name>HEX_PRED_TRUE</name></decl>, 
<decl><name>HEX_PRED_FALSE</name></decl>, 
<decl><name>HEX_PRED_TRUE_NEW</name></decl>, 
<decl><name>HEX_PRED_FALSE_NEW</name></decl>, 
}</block></enum></type> <name>HexPred</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>HEX_PF_RND</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>HEX_PF_CRND</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></init></decl>, 
<decl><name>HEX_PF_RAW</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr></init></decl>, 
<decl><name>HEX_PF_CHOP</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">3</literal></expr></init></decl>, 
<decl><name>HEX_PF_SAT</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">4</literal></expr></init></decl>, 
<decl><name>HEX_PF_HI</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">5</literal></expr></init></decl>, 
<decl><name>HEX_PF_LO</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">6</literal></expr></init></decl>, 
<decl><name>HEX_PF_LSH1</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">7</literal></expr></init></decl>, 
<decl><name>HEX_PF_LSH16</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">8</literal></expr></init></decl>, 
<decl><name>HEX_PF_RSH1</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">9</literal></expr></init></decl>, 
<decl><name>HEX_PF_NEG</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">10</literal></expr></init></decl>, 
<decl><name>HEX_PF_POS</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">11</literal></expr></init></decl>, 
<decl><name>HEX_PF_SCALE</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">12</literal></expr></init></decl>, 
<decl><name>HEX_PF_DEPRECATED</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">15</literal></expr></init></decl>, 
}</block></enum></type> <name>HexPf</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>HEX_OP_TYPE_IMM</name></decl>,
<decl><name>HEX_OP_TYPE_REG</name></decl>,
<decl><name>HEX_OP_TYPE_PREDICATE</name></decl>,
<decl><name>HEX_OP_TYPE_CONTROL</name></decl>,
<decl><name>HEX_OP_TYPE_SYSTEM</name></decl>,
<decl><name>HEX_OP_TYPE_OPT</name></decl>, 
}</block></enum></type> <name>HexOpType</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>HEX_OP_CONST_EXT</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>, 
<decl><name>HEX_OP_REG_HI</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>, 
<decl><name>HEX_OP_REG_LO</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>, 
<decl><name>HEX_OP_REG_PAIR</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>, 
}</block></enum></type> <name>HexOpAttr</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut8</name></type> <name>type</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>ut8</name></type> <name>reg</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>imm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>pred</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name></type> <name>cr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name></type> <name>sys</name></decl>;</decl_stmt> 
}</block> <decl><name>op</name></decl>;</union>
<decl_stmt><decl><type><name>ut8</name></type> <name>attr</name></decl>;</decl_stmt>
}</block></struct></type> <name>HexOp</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>instruction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HexPred</name></type> <name>predicate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut16</name></type> <name>pf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>duplex</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>compound</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>last</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name></type> <name>op_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HexOp</name></type> <name><name>ops</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>mnem</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>HexInsn</name>;</typedef>



<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>duplex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HexInsn</name></type> <name><name>ins</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>HexInsnCont</name>;</typedef>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>loop0</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>loop1</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cont_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HexInsnCont</name></type> <name><name>ins</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>HexInsnPkt</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>HEX_INSN_CLASS_CEXT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>HEX_INSN_CLASS_J1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>HEX_INSN_CLASS_J2</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>HEX_INSN_CLASS_LD_ST</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 
<decl><name>HEX_INSN_CLASS_LD_ST_COND_GP</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 
<decl><name>HEX_INSN_CLASS_J3</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, 
<decl><name>HEX_INSN_CLASS_CR</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>, 
<decl><name>HEX_INSN_CLASS_ALU32</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>, 
<decl><name>HEX_INSN_CLASS_XTYPE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 
<decl><name>HEX_INSN_CLASS_LD</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>, 
<decl><name>HEX_INSN_CLASS_ST</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, 
<decl><name>HEX_INSN_CLASS_ALU32_1</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>, 
<decl><name>HEX_INSN_CLASS_XTYPE_1</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>, 
<decl><name>HEX_INSN_CLASS_XTYPE_2</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>, 
<decl><name>HEX_INSN_CLASS_XTYPE_3</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>, 
<decl><name>HEX_INSN_CLASS_ALU32_2</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>, 
}</block></enum></type> <name>HEX_INSN_CLASS</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>HEX_REG_R0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>HEX_REG_R1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>HEX_REG_R2</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>HEX_REG_R3</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>HEX_REG_R4</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>HEX_REG_R5</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>HEX_REG_R6</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>HEX_REG_R7</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>HEX_REG_R8</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>HEX_REG_R9</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>HEX_REG_R10</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>HEX_REG_R11</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>HEX_REG_R12</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>HEX_REG_R13</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>HEX_REG_R14</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>HEX_REG_R15</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,
<decl><name>HEX_REG_R16</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>HEX_REG_R17</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,
<decl><name>HEX_REG_R18</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,
<decl><name>HEX_REG_R19</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,
<decl><name>HEX_REG_R20</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,
<decl><name>HEX_REG_R21</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,
<decl><name>HEX_REG_R22</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,
<decl><name>HEX_REG_R23</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,
<decl><name>HEX_REG_R24</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,
<decl><name>HEX_REG_R25</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>,
<decl><name>HEX_REG_R26</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>,
<decl><name>HEX_REG_R27</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>,
<decl><name>HEX_REG_R28</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>,
<decl><name>HEX_REG_R29</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>,
<decl><name>HEX_REG_R30</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>,
<decl><name>HEX_REG_R31</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>,
}</block></enum></type> <name>HEX_REG</name>;</typedef>




<typedef>typedef <type><enum>enum <block>{

<decl><name>HEX_REG_SA0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>HEX_REG_LC0</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>HEX_REG_SA1</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>HEX_REG_LC1</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 
<decl><name>HEX_REG_P</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 


<decl><name>HEX_REG_M0</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>, 
<decl><name>HEX_REG_M1</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>, 
<decl><name>HEX_REG_USR</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 
<decl><name>HEX_REG_PC</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>, 
<decl><name>HEX_REG_UGP</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, 
<decl><name>HEX_REG_GP</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>, 

<decl><name>HEX_REG_CS0</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>, 
<decl><name>HEX_REG_CS1</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>, 

<decl><name>HEX_REG_UPCYCLELO</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>, 
<decl><name>HEX_REG_UPCYCLEHI</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>, 
<decl><name>HEX_REG_FRAMELIMIT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>, 
<decl><name>HEX_REG_FRAMEKEY</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>, 

<decl><name>HEX_REG_PKTCOUNTLO</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>, 
<decl><name>HEX_REG_PKTCOUNTHI</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>, 


<decl><name>HEX_REG_UTIMERLO</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>, 
<decl><name>HEX_REG_UTIMERHI</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>, 
}</block></enum></type> <name>HEX_CR_REG</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>HEX_REG_SGP0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>HEX_REG_SGP1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>HEX_REG_STID</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>HEX_REG_ELR</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 
<decl><name>HEX_REG_BADVA0</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 
<decl><name>HEX_REG_BADVA1</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, 
<decl><name>HEX_REG_SSR</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>, 
<decl><name>HEX_REG_CCR</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>, 
<decl><name>HEX_REG_HTID</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 
<decl><name>HEX_REG_BADVA</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>, 
<decl><name>HEX_REG_IMASK</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, 

<decl><name>HEX_REG_EVB</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>, 
<decl><name>HEX_REG_MODECTL</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>, 
<decl><name>HEX_REG_SYSCFG</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>, 

<decl><name>HEX_REG_IPEND</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>, 
<decl><name>HEX_REG_VID</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>, 
<decl><name>HEX_REG_IAD</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>, 

<decl><name>HEX_REG_IEL</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>, 

<decl><name>HEX_REG_IAHL</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>, 
<decl><name>HEX_REG_CFGBASE</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>, 
<decl><name>HEX_REG_DIAG</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>, 
<decl><name>HEX_REG_REV</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>, 
<decl><name>HEX_REG_PCYCLELO</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>, 
<decl><name>HEX_REG_PCYCLEHI</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>, 
<decl><name>HEX_REG_ISDBST</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>, 
<decl><name>HEX_REG_ISDBCFG0</name> <init>= <expr><literal type="number">33</literal></expr></init></decl>, 
<decl><name>HEX_REG_ISDBCFG1</name> <init>= <expr><literal type="number">34</literal></expr></init></decl>, 

<decl><name>HEX_REG_BRKPTPC0</name> <init>= <expr><literal type="number">36</literal></expr></init></decl>, 
<decl><name>HEX_REG_BRKPTCFG0</name> <init>= <expr><literal type="number">37</literal></expr></init></decl>, 
<decl><name>HEX_REG_BRKPTPC1</name> <init>= <expr><literal type="number">38</literal></expr></init></decl>, 
<decl><name>HEX_REG_BRKPTCFG1</name> <init>= <expr><literal type="number">39</literal></expr></init></decl>, 
<decl><name>HEX_REG_ISDBMBXIN</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>, 
<decl><name>HEX_REG_ISDBMBXOUT</name> <init>= <expr><literal type="number">41</literal></expr></init></decl>, 
<decl><name>HEX_REG_ISDBEN</name> <init>= <expr><literal type="number">42</literal></expr></init></decl>, 
<decl><name>HEX_REG_ISDBGPR</name> <init>= <expr><literal type="number">43</literal></expr></init></decl>, 

<decl><name>HEX_REG_PMUCNT0</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>, 
<decl><name>HEX_REG_PMUCNT1</name> <init>= <expr><literal type="number">49</literal></expr></init></decl>, 
<decl><name>HEX_REG_PMUCNT2</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>, 
<decl><name>HEX_REG_PMUCNT3</name> <init>= <expr><literal type="number">51</literal></expr></init></decl>, 
<decl><name>HEX_REG_PMUEVTCFG</name> <init>= <expr><literal type="number">52</literal></expr></init></decl>, 
<decl><name>HEX_REG_PMUCFG</name> <init>= <expr><literal type="number">53</literal></expr></init></decl>, 

}</block></enum></type> <name>HEX_SYSCR_REG</name>;</typedef>



<typedef>typedef <type><enum>enum <block>{
<decl><name>HEX_SUB_REG_R0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REG_R1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REG_R2</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REG_R3</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REG_R4</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REG_R5</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REG_R6</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REG_R7</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REG_R16</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REG_R17</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REG_R18</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REG_R19</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REG_R20</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REG_R21</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REG_R22</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REG_R23</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>, 
}</block></enum></type> <name>HEX_SUB_REG</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>HEX_SUB_REGPAIR_R1_R0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REGPAIR_R3_R2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REGPAIR_R5_R4</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REGPAIR_R7_R6</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REGPAIR_R17_R16</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REGPAIR_R19_R18</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REGPAIR_R21_R20</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>, 
<decl><name>HEX_SUB_REGPAIR_R23_R22</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>, 
}</block></enum></type> <name>HEX_SUB_REGPAIR</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_MASK</name><parameter_list>(<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BIT(len)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF_MASK</name><parameter_list>(<parameter><type><name>start</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BIT_MASK(len)&lt;&lt;(start))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF_PREP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;BIT_MASK(len))&lt;&lt;(start))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF_GET</name><parameter_list>(<parameter><type><name>y</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((y)&gt;&gt;(start)) &amp; BIT_MASK(len))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF_GETB</name><parameter_list>(<parameter><type><name>y</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BF_GET((y), (start), (end) - (start) + 1)</cpp:value></cpp:define>

<function_decl><type><name>char</name><modifier>*</modifier></type> <name>hex_get_cntl_reg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opreg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>hex_get_sys_reg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opreg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>hex_get_sub_reg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opreg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>hex_get_sub_regpair</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opreg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>hex_if_duplex</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>insn_word</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hex_op_extend</name><parameter_list>(<parameter><decl><type><name>HexOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hex_op_extend_off</name><parameter_list>(<parameter><decl><type><name>HexOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>hexagon_disasm_instruction</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>hi_u32</name></decl></parameter>, <parameter><decl><type><name>HexInsn</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
