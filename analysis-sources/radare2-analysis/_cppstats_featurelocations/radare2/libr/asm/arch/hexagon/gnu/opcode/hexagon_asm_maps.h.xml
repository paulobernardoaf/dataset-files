<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\hexagon\gnu\opcode\hexagon_asm_maps.h">







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_addsp</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d=add(R%d:%d,R%d:%d):raw:hi"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d=add(R%d:%d,R%d:%d):raw:lo"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_neg</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=sub(#0,R%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_not</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=sub(#-1,R%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_tfrf</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) R%d=add(R%d,#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_tfrf_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) R%d=add(R%d,#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_tfrfnew</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) R%d=add(R%d,#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_tfrfnew_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) R%d=add(R%d,#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_tfrp</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d=combine(R%d,R%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_tfrpf</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) R%d:%d=combine(R%d,R%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_tfrpf_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) R%d:%d=combine(R%d,R%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_tfrpfnew</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) R%d:%d=combine(R%d,R%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_tfrpfnew_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) R%d:%d=combine(R%d,R%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>









<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_tfrpi</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d=combine(#-1,#%s)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d=combine(#0,#%s)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_tfrpt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) R%d:%d=combine(R%d,R%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_tfrpt_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) R%d:%d=combine(R%d,R%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_tfrptnew</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) R%d:%d=combine(R%d,R%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_tfrptnew_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) R%d:%d=combine(R%d,R%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_tfrt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) R%d=add(R%d,#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_tfrt_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) R%d=add(R%d,#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_tfrtnew</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) R%d=add(R%d,#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_tfrtnew_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) R%d=add(R%d,#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_vaddb_map</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d=vaddub(R%d:%d,R%d:%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_vsubb_map</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d=vsubub(R%d:%d,R%d:%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A2_zxtb</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=and(R%d,#255)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>









<macro><name>MAP_FUNCTION</name><argument_list>(<argument>A4_boundscheck</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"P%d=boundscheck(R%d:%d,R%d:%d):raw:hi"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"P%d=boundscheck(R%d:%d,R%d:%d):raw:lo"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>C2_cmpgei</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"P%d=cmp.gt(R%d,#%s-1)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>









<macro><name>MAP_FUNCTION</name><argument_list>(<argument>C2_cmpgeui</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"P%d=cmp.eq(R%d,R%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"P%d=cmp.gtu(R%d,#%s-1)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>C2_cmplt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"P%d=cmp.gt(R%d,R%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>C2_cmpltu</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"P%d=cmp.gtu(R%d,R%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>C2_pxfer_map</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"P%d=or(P%d,P%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_loadalignb_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d=memb_fifo(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_loadalignh_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d=memh_fifo(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_loadbsw2_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=membh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_loadbsw4_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d=membh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_loadbzw2_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=memubh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_loadbzw4_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d=memubh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_loadrb_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=memb(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_loadrd_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d=memd(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_loadrh_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=memh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_loadri_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=memw(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_loadrub_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=memub(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_loadruh_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=memuh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrbf_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) R%d=memb(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrbf_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) R%d=memb(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrbfnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) R%d=memb(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrbfnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) R%d=memb(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrbt_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) R%d=memb(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrbt_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) R%d=memb(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrbtnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) R%d=memb(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrbtnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) R%d=memb(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrdf_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) R%d:%d=memd(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrdf_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) R%d:%d=memd(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrdfnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) R%d:%d=memd(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrdfnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) R%d:%d=memd(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrdt_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) R%d:%d=memd(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrdt_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) R%d:%d=memd(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrdtnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) R%d:%d=memd(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrdtnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) R%d:%d=memd(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrhf_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) R%d=memh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrhf_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) R%d=memh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrhfnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) R%d=memh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrhfnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) R%d=memh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrht_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) R%d=memh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrht_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) R%d=memh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrhtnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) R%d=memh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrhtnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) R%d=memh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrif_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) R%d=memw(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrif_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) R%d=memw(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrifnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) R%d=memw(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrifnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) R%d=memw(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrit_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) R%d=memw(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrit_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) R%d=memw(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadritnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) R%d=memw(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadritnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) R%d=memw(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrubf_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) R%d=memub(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrubf_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) R%d=memub(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrubfnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) R%d=memub(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrubfnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) R%d=memub(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrubt_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) R%d=memub(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrubt_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) R%d=memub(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrubtnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) R%d=memub(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadrubtnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) R%d=memub(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadruhf_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) R%d=memuh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadruhf_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) R%d=memuh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadruhfnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) R%d=memuh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadruhfnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) R%d=memuh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadruht_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) R%d=memuh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadruht_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) R%d=memuh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadruhtnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) R%d=memuh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L2_ploadruhtnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) R%d=memuh(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_add_memopb_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memb(R%d+#0)+=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_add_memoph_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memh(R%d+#0)+=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_add_memopw_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memw(R%d+#0)+=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_and_memopb_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memb(R%d+#0)&amp;=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_and_memoph_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memh(R%d+#0)&amp;=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_and_memopw_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memw(R%d+#0)&amp;=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_iadd_memopb_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memb(R%d+#0)+=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_iadd_memoph_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memh(R%d+#0)+=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_iadd_memopw_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memw(R%d+#0)+=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_iand_memopb_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memb(R%d+#0)=clrbit(#%s)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_iand_memoph_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memh(R%d+#0)=clrbit(#%s)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_iand_memopw_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memw(R%d+#0)=clrbit(#%s)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_ior_memopb_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memb(R%d+#0)=setbit(#%s)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_ior_memoph_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memh(R%d+#0)=setbit(#%s)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_ior_memopw_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memw(R%d+#0)=setbit(#%s)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_isub_memopb_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memb(R%d+#0)-=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_isub_memoph_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memh(R%d+#0)-=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_isub_memopw_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memw(R%d+#0)-=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_or_memopb_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memb(R%d+#0)|=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_or_memoph_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memh(R%d+#0)|=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_or_memopw_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memw(R%d+#0)|=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_sub_memopb_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memb(R%d+#0)-=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_sub_memoph_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memh(R%d+#0)-=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>L4_sub_memopw_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memw(R%d+#0)-=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>









<macro><name>MAP_FUNCTION</name><argument_list>(<argument>M2_mpysmi</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>&gt;</operator><operator>-</operator><literal type="number">256</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=-mpyi(R%d,#%s*(-1))"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=+mpyi(R%d,#%s)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>M2_mpyui</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=mpyi(R%d,R%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>









<macro><name>MAP_FUNCTION</name><argument_list>(<argument>M2_vrcmpys_acc_s1</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d+=vrcmpys(R%d:%d,R%d:%d):&lt;&lt;1:sat:raw:hi"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d+=vrcmpys(R%d:%d,R%d:%d):&lt;&lt;1:sat:raw:lo"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>









<macro><name>MAP_FUNCTION</name><argument_list>(<argument>M2_vrcmpys_s1</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d=vrcmpys(R%d:%d,R%d:%d):&lt;&lt;1:sat:raw:hi"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d=vrcmpys(R%d:%d,R%d:%d):&lt;&lt;1:sat:raw:lo"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>









<macro><name>MAP_FUNCTION</name><argument_list>(<argument>M2_vrcmpys_s1rp</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=vrcmpys(R%d:%d,R%d:%d):&lt;&lt;1:rnd:sat:raw:hi"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=vrcmpys(R%d:%d,R%d:%d):&lt;&lt;1:rnd:sat:raw:lo"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>









<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_asr_i_p_rnd_goodsyntax</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d=R%d:%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d=asr(R%d:%d,#u5-1):rnd"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>









<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_asr_i_r_rnd_goodsyntax</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=asr(R%d,#%s-1):rnd"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerbf_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memb(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerbf_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memb(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerbnewf_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memb(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerbnewf_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memb(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerbnewt_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memb(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerbnewt_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memb(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerbt_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memb(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerbt_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memb(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerdf_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memd(R%d+#0)=R%d:%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerdf_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memd(R%d+#0)=R%d:%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerdt_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memd(R%d+#0)=R%d:%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerdt_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memd(R%d+#0)=R%d:%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerff_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memh(R%d+#0)=R%d.h"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerff_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memh(R%d+#0)=R%d.h"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerft_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memh(R%d+#0)=R%d.h"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerft_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memh(R%d+#0)=R%d.h"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerhf_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memh(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerhf_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memh(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerhnewf_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memh(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerhnewf_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memh(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerhnewt_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memh(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerhnewt_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memh(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerht_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memh(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerht_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memh(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerif_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memw(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerif_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memw(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerinewf_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memw(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerinewf_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memw(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerinewt_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memw(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerinewt_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memw(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerit_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memw(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_pstorerit_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memw(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_storerb_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memb(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_storerbnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memb(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_storerd_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memd(R%d+#0)=R%d:%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_storerf_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memh(R%d+#0)=R%d.h"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_storerh_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memh(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_storerhnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memh(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_storeri_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memw(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_storerinew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memw(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_tableidxb_goodsyntax</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=tableidxb(R%d,#%s,#%s):raw"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_tableidxd_goodsyntax</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=tableidxd(R%d,#%s,#%s-3):raw"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_tableidxh_goodsyntax</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=tableidxh(R%d,#%s,#%s-1):raw"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S2_tableidxw_goodsyntax</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=tableidxw(R%d,#%s,#%s-2):raw"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerbfnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memb(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerbfnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memb(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerbnewfnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memb(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerbnewfnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memb(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerbnewtnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memb(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerbnewtnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memb(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerbtnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memb(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerbtnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memb(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerdfnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memd(R%d+#0)=R%d:%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerdfnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memd(R%d+#0)=R%d:%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerdtnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memd(R%d+#0)=R%d:%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerdtnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memd(R%d+#0)=R%d:%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerffnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memh(R%d+#0)=R%d.h"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerffnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memh(R%d+#0)=R%d.h"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerftnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memh(R%d+#0)=R%d.h"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerftnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memh(R%d+#0)=R%d.h"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerhfnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memh(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerhfnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memh(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerhnewfnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memh(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerhnewfnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memh(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerhnewtnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memh(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerhnewtnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memh(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerhtnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memh(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerhtnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memh(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerifnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memw(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerifnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memw(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerinewfnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memw(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerinewfnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memw(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerinewtnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memw(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstorerinewtnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memw(R%d+#0)=R%d.new"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstoreritnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memw(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_pstoreritnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memw(R%d+#0)=R%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirb_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memb(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirbf_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memb(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirbf_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memb(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirbfnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memb(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirbfnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memb(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirbt_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memb(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirbt_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memb(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirbtnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memb(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirbtnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memb(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirh_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memh(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirhf_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memh(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirhf_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memh(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirhfnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memh(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirhfnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memh(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirht_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memh(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirht_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memh(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirhtnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memh(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirhtnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memh(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeiri_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"memw(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirif_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memw(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirif_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d) memw(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirifnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memw(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirifnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (!P%d.new) memw(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirit_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memw(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeirit_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d) memw(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeiritnew_zomap</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memw(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S4_storeiritnew_zomap_alt</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"if (P%d.new) memw(R%d+#0)=#%s"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>









<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S5_asrhub_rnd_sat_goodsyntax</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=vsathub(R%d:%d)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d=vasrhub(R%d:%d,#%s-1):raw"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>









<macro><name>MAP_FUNCTION</name><argument_list>(<argument>S5_vasrhrnd_goodsyntax</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d=R%d:%d"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"R%d:%d=vasrh(R%d:%d,#%s-1):raw"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>GET_OP_STR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>Y2_crswap_old</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"crswap(R%d,sgp0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<macro><name>MAP_FUNCTION</name><argument_list>(<argument>Y2_dcfetch</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="string">"dcfetch(R%d+#0)"</literal></expr></argument>,<argument><expr><call><name>GET_OP_VAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

</unit>
