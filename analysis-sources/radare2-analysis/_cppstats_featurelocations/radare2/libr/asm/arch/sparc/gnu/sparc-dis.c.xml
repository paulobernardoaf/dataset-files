<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\sparc\gnu\sparc-dis.c">





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmalloc</name></cpp:macro> <cpp:value>malloc</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sysdep.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opcode/sparc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"disas-asm.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libiberty.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XNEWVEC</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T *) malloc (sizeof (T) * (N)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XCNEWVEC</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T *) calloc ((N), sizeof (T)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XNEW</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T *) malloc (sizeof (T)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmalloc</name></cpp:macro> <cpp:value>malloc</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opintl.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_V9</name></cpp:macro> <cpp:value>((1 &lt;&lt; SPARC_OPCODE_ARCH_V9) | (1 &lt;&lt; SPARC_OPCODE_ARCH_V9A) | (1 &lt;&lt; SPARC_OPCODE_ARCH_V9B))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V9_ONLY_P</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(! ((insn)-&gt;architecture &amp; ~MASK_V9))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V9_P</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((insn)-&gt;architecture &amp; MASK_V9) != 0)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sparc_opcode</name> <modifier>*</modifier><modifier>*</modifier></type><name>sorted_opcodes</name></decl>;</decl_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>opcode_bits</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x01c00000</literal></expr>, <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x01f80000</literal></expr>, <expr><literal type="number">0x01f80000</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_INSN</name><parameter_list>(<parameter><type><name>INSN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((INSN) &gt;&gt; 24) &amp; 0xc0) | (((INSN) &amp; opcode_bits[((INSN) &gt;&gt; 30) &amp; 3]) &gt;&gt; 19))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>sparc_opcode_hash</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>sparc_opcode_hash</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>sparc_opcode</name> <modifier>*</modifier></type><name>opcode</name></decl>;</decl_stmt>
}</block></struct></type> <name>sparc_opcode_hash</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>sparc_opcode_hash</name> <modifier>*</modifier></type><name><name>opcode_hash_table</name><index>[<expr><name>HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEX</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((int)(value)) &lt;&lt; ((8 * sizeof (int)) - (bits))) &gt;&gt; ((8 * sizeof (int)) - (bits)) )</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>reg_names</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="string">"g0"</literal></expr>, <expr><literal type="string">"g1"</literal></expr>, <expr><literal type="string">"g2"</literal></expr>, <expr><literal type="string">"g3"</literal></expr>, <expr><literal type="string">"g4"</literal></expr>, <expr><literal type="string">"g5"</literal></expr>, <expr><literal type="string">"g6"</literal></expr>, <expr><literal type="string">"g7"</literal></expr>,
<expr><literal type="string">"o0"</literal></expr>, <expr><literal type="string">"o1"</literal></expr>, <expr><literal type="string">"o2"</literal></expr>, <expr><literal type="string">"o3"</literal></expr>, <expr><literal type="string">"o4"</literal></expr>, <expr><literal type="string">"o5"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>, <expr><literal type="string">"o7"</literal></expr>,
<expr><literal type="string">"l0"</literal></expr>, <expr><literal type="string">"l1"</literal></expr>, <expr><literal type="string">"l2"</literal></expr>, <expr><literal type="string">"l3"</literal></expr>, <expr><literal type="string">"l4"</literal></expr>, <expr><literal type="string">"l5"</literal></expr>, <expr><literal type="string">"l6"</literal></expr>, <expr><literal type="string">"l7"</literal></expr>,
<expr><literal type="string">"i0"</literal></expr>, <expr><literal type="string">"i1"</literal></expr>, <expr><literal type="string">"i2"</literal></expr>, <expr><literal type="string">"i3"</literal></expr>, <expr><literal type="string">"i4"</literal></expr>, <expr><literal type="string">"i5"</literal></expr>, <expr><literal type="string">"fp"</literal></expr>, <expr><literal type="string">"i7"</literal></expr>,
<expr><literal type="string">"f0"</literal></expr>, <expr><literal type="string">"f1"</literal></expr>, <expr><literal type="string">"f2"</literal></expr>, <expr><literal type="string">"f3"</literal></expr>, <expr><literal type="string">"f4"</literal></expr>, <expr><literal type="string">"f5"</literal></expr>, <expr><literal type="string">"f6"</literal></expr>, <expr><literal type="string">"f7"</literal></expr>,
<expr><literal type="string">"f8"</literal></expr>, <expr><literal type="string">"f9"</literal></expr>, <expr><literal type="string">"f10"</literal></expr>, <expr><literal type="string">"f11"</literal></expr>, <expr><literal type="string">"f12"</literal></expr>, <expr><literal type="string">"f13"</literal></expr>, <expr><literal type="string">"f14"</literal></expr>, <expr><literal type="string">"f15"</literal></expr>,
<expr><literal type="string">"f16"</literal></expr>, <expr><literal type="string">"f17"</literal></expr>, <expr><literal type="string">"f18"</literal></expr>, <expr><literal type="string">"f19"</literal></expr>, <expr><literal type="string">"f20"</literal></expr>, <expr><literal type="string">"f21"</literal></expr>, <expr><literal type="string">"f22"</literal></expr>, <expr><literal type="string">"f23"</literal></expr>,
<expr><literal type="string">"f24"</literal></expr>, <expr><literal type="string">"f25"</literal></expr>, <expr><literal type="string">"f26"</literal></expr>, <expr><literal type="string">"f27"</literal></expr>, <expr><literal type="string">"f28"</literal></expr>, <expr><literal type="string">"f29"</literal></expr>, <expr><literal type="string">"f30"</literal></expr>, <expr><literal type="string">"f31"</literal></expr>,
<expr><literal type="string">"f32"</literal></expr>, <expr><literal type="string">"f33"</literal></expr>, <expr><literal type="string">"f34"</literal></expr>, <expr><literal type="string">"f35"</literal></expr>, <expr><literal type="string">"f36"</literal></expr>, <expr><literal type="string">"f37"</literal></expr>, <expr><literal type="string">"f38"</literal></expr>, <expr><literal type="string">"f39"</literal></expr>,
<expr><literal type="string">"f40"</literal></expr>, <expr><literal type="string">"f41"</literal></expr>, <expr><literal type="string">"f42"</literal></expr>, <expr><literal type="string">"f43"</literal></expr>, <expr><literal type="string">"f44"</literal></expr>, <expr><literal type="string">"f45"</literal></expr>, <expr><literal type="string">"f46"</literal></expr>, <expr><literal type="string">"f47"</literal></expr>,
<expr><literal type="string">"f48"</literal></expr>, <expr><literal type="string">"f49"</literal></expr>, <expr><literal type="string">"f50"</literal></expr>, <expr><literal type="string">"f51"</literal></expr>, <expr><literal type="string">"f52"</literal></expr>, <expr><literal type="string">"f53"</literal></expr>, <expr><literal type="string">"f54"</literal></expr>, <expr><literal type="string">"f55"</literal></expr>,
<expr><literal type="string">"f56"</literal></expr>, <expr><literal type="string">"f57"</literal></expr>, <expr><literal type="string">"f58"</literal></expr>, <expr><literal type="string">"f59"</literal></expr>, <expr><literal type="string">"f60"</literal></expr>, <expr><literal type="string">"f61"</literal></expr>, <expr><literal type="string">"f62"</literal></expr>, <expr><literal type="string">"f63"</literal></expr>,

<expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"psr"</literal></expr>, <expr><literal type="string">"wim"</literal></expr>, <expr><literal type="string">"tbr"</literal></expr>, <expr><literal type="string">"pc"</literal></expr>, <expr><literal type="string">"npc"</literal></expr>, <expr><literal type="string">"fpsr"</literal></expr>, <expr><literal type="string">"cpsr"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>freg_names</name></cpp:macro> <cpp:value>(&amp;reg_names[4 * 8])</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>v9_priv_reg_names</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"tpc"</literal></expr>, <expr><literal type="string">"tnpc"</literal></expr>, <expr><literal type="string">"tstate"</literal></expr>, <expr><literal type="string">"tt"</literal></expr>, <expr><literal type="string">"tick"</literal></expr>, <expr><literal type="string">"tba"</literal></expr>, <expr><literal type="string">"pstate"</literal></expr>, <expr><literal type="string">"tl"</literal></expr>,
<expr><literal type="string">"pil"</literal></expr>, <expr><literal type="string">"cwp"</literal></expr>, <expr><literal type="string">"cansave"</literal></expr>, <expr><literal type="string">"canrestore"</literal></expr>, <expr><literal type="string">"cleanwin"</literal></expr>, <expr><literal type="string">"otherwin"</literal></expr>,
<expr><literal type="string">"wstate"</literal></expr>, <expr><literal type="string">"fq"</literal></expr>, <expr><literal type="string">"gl"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>v9_hpriv_reg_names</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"hpstate"</literal></expr>, <expr><literal type="string">"htstate"</literal></expr>, <expr><literal type="string">"resv2"</literal></expr>, <expr><literal type="string">"hintp"</literal></expr>, <expr><literal type="string">"resv4"</literal></expr>, <expr><literal type="string">"htba"</literal></expr>, <expr><literal type="string">"hver"</literal></expr>,
<expr><literal type="string">"resv7"</literal></expr>, <expr><literal type="string">"resv8"</literal></expr>, <expr><literal type="string">"resv9"</literal></expr>, <expr><literal type="string">"resv10"</literal></expr>, <expr><literal type="string">"resv11"</literal></expr>, <expr><literal type="string">"resv12"</literal></expr>, <expr><literal type="string">"resv13"</literal></expr>, 
<expr><literal type="string">"resv14"</literal></expr>, <expr><literal type="string">"resv15"</literal></expr>, <expr><literal type="string">"resv16"</literal></expr>, <expr><literal type="string">"resv17"</literal></expr>, <expr><literal type="string">"resv18"</literal></expr>, <expr><literal type="string">"resv19"</literal></expr>, <expr><literal type="string">"resv20"</literal></expr>,
<expr><literal type="string">"resv21"</literal></expr>, <expr><literal type="string">"resv22"</literal></expr>, <expr><literal type="string">"resv23"</literal></expr>, <expr><literal type="string">"resv24"</literal></expr>, <expr><literal type="string">"resv25"</literal></expr>, <expr><literal type="string">"resv26"</literal></expr>, <expr><literal type="string">"resv27"</literal></expr>,
<expr><literal type="string">"resv28"</literal></expr>, <expr><literal type="string">"resv29"</literal></expr>, <expr><literal type="string">"resv30"</literal></expr>, <expr><literal type="string">"hstick_cmpr"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>v9a_asr_reg_names</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"pcr"</literal></expr>, <expr><literal type="string">"pic"</literal></expr>, <expr><literal type="string">"dcr"</literal></expr>, <expr><literal type="string">"gsr"</literal></expr>, <expr><literal type="string">"set_softint"</literal></expr>, <expr><literal type="string">"clear_softint"</literal></expr>,
<expr><literal type="string">"softint"</literal></expr>, <expr><literal type="string">"tick_cmpr"</literal></expr>, <expr><literal type="string">"stick"</literal></expr>, <expr><literal type="string">"stick_cmpr"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_RD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((i) &gt;&gt; 25) &amp; 0x1f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_RS1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((i) &gt;&gt; 14) &amp; 0x1f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_LDST_I</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((i) &gt;&gt; 13) &amp; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_ASI</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((i) &gt;&gt; 5) &amp; 0xff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_RS2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((i) &gt;&gt; 0) &amp; 0x1f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_IMM</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((i) &gt;&gt; 0) &amp; ((1 &lt;&lt; (n)) - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_SIMM</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SEX (X_IMM ((i), (n)), (n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_DISP22</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((i) &gt;&gt; 0) &amp; 0x3fffff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_IMM22</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X_DISP22 (i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_DISP30</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((i) &gt;&gt; 0) &amp; 0x3fffffff)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_DISP16</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((((i) &gt;&gt; 20) &amp; 3) &lt;&lt; 14) | (((i) &gt;&gt; 0) &amp; 0x3fff))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_DISP19</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((i) &gt;&gt; 0) &amp; 0x7ffff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_MEMBAR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) &amp; 0x7f)</cpp:value></cpp:define>





























































<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_delayed_branch</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>insn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sparc_opcode_hash</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>op</name> <operator>=</operator> <name><name>opcode_hash_table</name><index>[<expr><call><name>HASH_INSN</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</init> <condition><expr><name>op</name></expr>;</condition> <incr><expr><name>op</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>sparc_opcode</name> <modifier>*</modifier></type><name>opcode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>match</name></name> <operator>&amp;</operator> <name>insn</name><operator>)</operator> <operator>==</operator> <name><name>opcode</name><operator>-&gt;</operator><name>match</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>lose</name></name> <operator>&amp;</operator> <name>insn</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>opcode</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DELAYED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>current_arch_mask</name></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>compute_arch_mask</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>mach</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>mach</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr> :</case>
<case>case <expr><name>bfd_mach_sparc</name></expr> :</case>
<return>return <expr><call><name>SPARC_OPCODE_ARCH_MASK</name> <argument_list>(<argument><expr><name>SPARC_OPCODE_ARCH_V8</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>bfd_mach_sparc_sparclet</name></expr> :</case>
<return>return <expr><call><name>SPARC_OPCODE_ARCH_MASK</name> <argument_list>(<argument><expr><name>SPARC_OPCODE_ARCH_SPARCLET</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>bfd_mach_sparc_sparclite</name></expr> :</case>
<case>case <expr><name>bfd_mach_sparc_sparclite_le</name></expr> :</case>



<return>return <expr><operator>(</operator><call><name>SPARC_OPCODE_ARCH_MASK</name> <argument_list>(<argument><expr><name>SPARC_OPCODE_ARCH_SPARCLITE</name></expr></argument>)</argument_list></call>
<operator>|</operator> <call><name>SPARC_OPCODE_ARCH_MASK</name> <argument_list>(<argument><expr><name>SPARC_OPCODE_ARCH_V8</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>bfd_mach_sparc_v8plus</name></expr> :</case>
<case>case <expr><name>bfd_mach_sparc_v9</name></expr> :</case>
<return>return <expr><call><name>SPARC_OPCODE_ARCH_MASK</name> <argument_list>(<argument><expr><name>SPARC_OPCODE_ARCH_V9</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>bfd_mach_sparc_v8plusa</name></expr> :</case>
<case>case <expr><name>bfd_mach_sparc_v9a</name></expr> :</case>
<return>return <expr><call><name>SPARC_OPCODE_ARCH_MASK</name> <argument_list>(<argument><expr><name>SPARC_OPCODE_ARCH_V9A</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>bfd_mach_sparc_v8plusb</name></expr> :</case>
<case>case <expr><name>bfd_mach_sparc_v9b</name></expr> :</case>
<return>return <expr><call><name>SPARC_OPCODE_ARCH_MASK</name> <argument_list>(<argument><expr><name>SPARC_OPCODE_ARCH_V9B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_opcodes</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sparc_opcode</name> <modifier>*</modifier></type><name>op0</name> <init>= <expr><operator>*</operator> <operator>(</operator><name>sparc_opcode</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sparc_opcode</name> <modifier>*</modifier></type><name>op1</name> <init>= <expr><operator>*</operator> <operator>(</operator><name>sparc_opcode</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>match0</name> <init>= <expr><name><name>op0</name><operator>-&gt;</operator><name>match</name></name></expr></init></decl>, <decl><type ref="prev"/><name>match1</name> <init>= <expr><name><name>op1</name><operator>-&gt;</operator><name>match</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>lose0</name> <init>= <expr><name><name>op0</name><operator>-&gt;</operator><name>lose</name></name></expr></init></decl>, <decl><type ref="prev"/><name>lose1</name> <init>= <expr><name><name>op1</name><operator>-&gt;</operator><name>lose</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><name><name>op0</name><operator>-&gt;</operator><name>architecture</name></name> <operator>&amp;</operator> <name>current_arch_mask</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op1</name><operator>-&gt;</operator><name>architecture</name></name> <operator>&amp;</operator> <name>current_arch_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op1</name><operator>-&gt;</operator><name>architecture</name></name> <operator>&amp;</operator> <name>current_arch_mask</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op0</name><operator>-&gt;</operator><name>architecture</name></name> <operator>!=</operator> <name><name>op1</name><operator>-&gt;</operator><name>architecture</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op0</name><operator>-&gt;</operator><name>architecture</name></name> <operator>-</operator> <name><name>op1</name><operator>-&gt;</operator><name>architecture</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>match0</name> <operator>&amp;</operator> <name>lose0</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name>
<argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Internal error: bad sparc-opcode.h: \"%s\", %#.8lx, %#.8lx\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>op0</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>match0</name></expr></argument>, <argument><expr><name>lose0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op0</name><operator>-&gt;</operator><name>lose</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>op0</name><operator>-&gt;</operator><name>match</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lose0</name> <operator>=</operator> <name><name>op0</name><operator>-&gt;</operator><name>lose</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>match1</name> <operator>&amp;</operator> <name>lose1</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name>
<argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Internal error: bad sparc-opcode.h: \"%s\", %#.8lx, %#.8lx\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>op1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>match1</name></expr></argument>, <argument><expr><name>lose1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op1</name><operator>-&gt;</operator><name>lose</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>op1</name><operator>-&gt;</operator><name>match</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lose1</name> <operator>=</operator> <name><name>op1</name><operator>-&gt;</operator><name>lose</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x0</name> <init>= <expr><operator>(</operator><name>match0</name> <operator>&amp;</operator> <name>x</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><operator>(</operator><name>match1</name> <operator>&amp;</operator> <name>x</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x0</name> <operator>!=</operator> <name>x1</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>x1</name> <operator>-</operator> <name>x0</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x0</name> <init>= <expr><operator>(</operator><name>lose0</name> <operator>&amp;</operator> <name>x</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><operator>(</operator><name>lose1</name> <operator>&amp;</operator> <name>x</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x0</name> <operator>!=</operator> <name>x1</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>x1</name> <operator>-</operator> <name>x0</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>





<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>alias_diff</name> <init>= <expr><operator>(</operator><name><name>op0</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_ALIAS</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>op1</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_ALIAS</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alias_diff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>alias_diff</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>



<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op0</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>op1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op0</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_ALIAS</name></expr>)</condition> <block>{<block_content> 
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>_</name> <argument_list>(<argument><expr><literal type="string">"Internal error: bad sparc-opcode.h: \"%s\" == \"%s\"\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>op0</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>op1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>length_diff</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>op0</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>op1</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>length_diff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>length_diff</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>


<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>op0</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>op1</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p0</name> <operator>&amp;&amp;</operator> <name>p1</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>p0</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal> <operator>&amp;&amp;</operator> <name><name>p1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal> <operator>&amp;&amp;</operator> <name><name>p1</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>


<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i0</name> <init>= <expr><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>op0</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"i,1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>op1</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"i,1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i0</name> <operator>^</operator> <name>i1</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>i0</name> <operator>-</operator> <name>i1</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>







<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>build_hash_table</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sparc_opcode</name> <modifier>*</modifier><modifier>*</modifier></type><name>opcode_table</name></decl></parameter>,
<parameter><decl><type><name>sparc_opcode_hash</name> <modifier>*</modifier><modifier>*</modifier></type><name>hash_table</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_opcodes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>hash_count</name><index>[<expr><name>HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sparc_opcode_hash</name> <modifier>*</modifier></type><name>hash_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>hash_table</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HASH_SIZE</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>hash_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>hash_count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HASH_SIZE</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>hash_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hash_buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hash_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hash_buf</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator> <name>hash_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>num_opcodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hash_buf</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>num_opcodes</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hash</name> <init>= <expr><call><name>HASH_INSN</name> <argument_list>(<argument><expr><name><name>opcode_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>match</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sparc_opcode_hash</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>&amp;</operator><name><name>hash_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>hash_table</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name><name>opcode_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash_table</name><index>[<expr><name>hash</name></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>hash_count</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
{
int min_count = num_opcodes, max_count = 0;
int total;

for (i = 0; i &lt; HASH_SIZE; i++)
{
if (hash_count[i] &lt; min_count)
min_count = hash_count[i];
if (hash_count[i] &gt; max_count)
max_count = hash_count[i];
total += hash_count[i];
}

printf ("Opcode hash table stats: min %d, max %d, ave %f\n",
min_count, max_count, (double) total / HASH_SIZE);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>print_insn_sparc</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl></parameter>, <parameter><decl><type><name>disassemble_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bfd_byte</name></type> <name><name>buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>insn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sparc_opcode_hash</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>opcodes_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>current_mach</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name>bfd_vma</name></type> (<modifier>*</modifier><name>getword</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opcodes_initialized</name>
<operator>||</operator> <name><name>info</name><operator>-&gt;</operator><name>mach</name></name> <operator>!=</operator> <name>current_mach</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>current_arch_mask</name> <operator>=</operator> <call><name>compute_arch_mask</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>mach</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opcodes_initialized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sorted_opcodes</name> <operator>=</operator>
<call><name>xmalloc</name> <argument_list>(<argument><expr><name>sparc_num_opcodes</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>sparc_opcode</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sparc_num_opcodes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>sorted_opcodes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>sparc_opcodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>qsort</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sorted_opcodes</name></expr></argument>, <argument><expr><name>sparc_num_opcodes</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>sorted_opcodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compare_opcodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>build_hash_table</name> <argument_list>(<argument><expr><name>sorted_opcodes</name></expr></argument>, <argument><expr><name>opcode_hash_table</name></expr></argument>, <argument><expr><name>sparc_num_opcodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_mach</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>mach</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>opcodes_initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>=
<expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>read_memory_func</name></name>) <argument_list>(<argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>memory_error_func</name></name>) <argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>



<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>endian</name></name> <operator>==</operator> <name>BFD_ENDIAN_BIG</name> <operator>||</operator> <name><name>info</name><operator>-&gt;</operator><name>mach</name></name> <operator>==</operator> <name>bfd_mach_sparc_sparclite</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>getword</name> <operator>=</operator> <name>bfd_getb32</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>getword</name> <operator>=</operator> <name>bfd_getl32</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>insn</name> <operator>=</operator> <call><name>getword</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>insn_info_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>insn_type</name></name> <operator>=</operator> <name>dis_nonbranch</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>branch_delay_insns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>op</name> <operator>=</operator> <name><name>opcode_hash_table</name><index>[<expr><call><name>HASH_INSN</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</init> <condition><expr><name>op</name></expr>;</condition> <incr><expr><name>op</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>sparc_opcode</name> <modifier>*</modifier></type><name>opcode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>architecture</name></name> <operator>&amp;</operator> <name>current_arch_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>match</name></name> <operator>&amp;</operator> <name>insn</name><operator>)</operator> <operator>==</operator> <name><name>opcode</name><operator>-&gt;</operator><name>match</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>lose</name></name> <operator>&amp;</operator> <name>insn</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>imm_added_to_rs1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>imm_ored_to_rs1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>found_plus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>is_annulled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>match</name></name> <operator>==</operator> <literal type="number">0x80102000</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>imm_ored_to_rs1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>match</name></name> <operator>==</operator> <literal type="number">0x80002000</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>imm_added_to_rs1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>X_RS2</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>brackets</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name><name>opcode</name><operator>-&gt;</operator><name>args</name></name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_annulled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"pn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"pt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
<continue>continue;</continue>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>brackets</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>brackets</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" %c"</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>brackets</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<expr_stmt><expr><name>found_plus</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<default>default:</default>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reg</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*info-&gt;fprintf_func) (stream, "%%%s", reg_names[n])</cpp:value></cpp:define>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><call><name>reg</name> <argument_list>(<argument><expr><call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<expr_stmt><expr><call><name>reg</name> <argument_list>(<argument><expr><call><name>X_RS2</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><call><name>reg</name> <argument_list>(<argument><expr><call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>reg</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>freg</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*info-&gt;fprintf_func) (stream, "%%%s", freg_names[n])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fregx</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*info-&gt;fprintf_func) (stream, "%%%s", freg_names[((n) &amp; ~1) | (((n) &amp; 1) &lt;&lt; 5)])</cpp:value></cpp:define>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<expr_stmt><expr><call><name>freg</name> <argument_list>(<argument><expr><call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case> 
<case>case <expr><literal type="char">'V'</literal></expr>:</case> 
<expr_stmt><expr><call><name>fregx</name> <argument_list>(<argument><expr><call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><call><name>freg</name> <argument_list>(<argument><expr><call><name>X_RS2</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'B'</literal></expr>:</case> 
<case>case <expr><literal type="char">'R'</literal></expr>:</case> 
<expr_stmt><expr><call><name>fregx</name> <argument_list>(<argument><expr><call><name>X_RS2</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<expr_stmt><expr><call><name>freg</name> <argument_list>(<argument><expr><call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'H'</literal></expr>:</case> 
<case>case <expr><literal type="char">'J'</literal></expr>:</case> 
<expr_stmt><expr><call><name>fregx</name> <argument_list>(<argument><expr><call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>freg</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fregx</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>creg</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*info-&gt;fprintf_func) (stream, "%%c%u", (unsigned int) (n))</cpp:value></cpp:define>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><call><name>creg</name> <argument_list>(<argument><expr><call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><call><name>creg</name> <argument_list>(<argument><expr><call><name>X_RS2</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><call><name>creg</name> <argument_list>(<argument><expr><call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>creg</name></cpp:undef>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%hi(%#x)"</literal></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator> <literal type="number">0xFFFFFFFF</literal>
<operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <call><name>X_IMM22</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> 
<case>case <expr><literal type="char">'I'</literal></expr>:</case> 
<case>case <expr><literal type="char">'j'</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>imm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>X_SIMM</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>X_SIMM</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>X_SIMM</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>








<if_stmt><if>if <condition>(<expr><name>found_plus</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>imm_added_to_rs1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%#x"</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case> 
<case>case <expr><literal type="char">'Y'</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>imm</name> <init>= <expr><call><name>X_IMM</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'X'</literal></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name><operator>)</operator> <operator>(</operator><name>stream</name><operator>,</operator> <literal type="string">"%d"</literal><operator>,</operator> <name>imm</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name><operator>)</operator> <operator>(</operator><name>stream</name><operator>,</operator> <literal type="string">"%#x"</literal><operator>,</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>imm</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<expr_stmt><expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name><operator>)</operator> <operator>(</operator><name>stream</name><operator>,</operator> <literal type="string">"%ld"</literal><operator>,</operator> <call><name>X_IMM</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'K'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><call><name>X_MEMBAR</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>, <decl><type ref="prev"/><name>printed_one</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name><operator>)</operator> <operator>(</operator><name>stream</name><operator>,</operator> <literal type="string">"0"</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><name>bit</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>bit</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>printed_one</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name><operator>)</operator> <operator>(</operator><name>stream</name><operator>,</operator> <literal type="string">"|"</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>sparc_decode_membar</name> <argument_list>(<argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name><operator>)</operator> <operator>(</operator><name>stream</name><operator>,</operator> <literal type="string">"%s"</literal><operator>,</operator> <name>name</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>printed_one</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bit</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>memaddr</name> <operator>+</operator> <call><name>SEX</name> <argument_list>(<argument><expr><call><name>X_DISP16</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>memaddr</name> <operator>+</operator> <call><name>SEX</name> <argument_list>(<argument><expr><call><name>X_DISP19</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'6'</literal></expr>:</case>
<case>case <expr><literal type="char">'7'</literal></expr>:</case>
<case>case <expr><literal type="char">'8'</literal></expr>:</case>
<case>case <expr><literal type="char">'9'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%fcc%c"</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name> <operator>-</operator> <literal type="char">'6'</literal> <operator>+</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%icc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%xcc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%ccr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%fprs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%asi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%tick"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%pc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%ver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">17</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%%s"</literal></expr></argument>,
<argument><expr><name><name>v9_priv_reg_names</name><index>[<expr><call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%reserved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">17</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%%s"</literal></expr></argument>,
<argument><expr><name><name>v9_priv_reg_names</name><index>[<expr><call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%reserved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'$'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%%s"</literal></expr></argument>,
<argument><expr><name><name>v9_hpriv_reg_names</name><index>[<expr><call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%reserved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%%s"</literal></expr></argument>,
<argument><expr><name><name>v9_hpriv_reg_names</name><index>[<expr><call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%reserved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">16</literal> <operator>||</operator> <call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%reserved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%%s"</literal></expr></argument>,
<argument><expr><name><name>v9a_asr_reg_names</name><index>[<expr><call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'_'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">16</literal> <operator>||</operator> <call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%reserved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%%s"</literal></expr></argument>,
<argument><expr><name><name>v9a_asr_reg_names</name><index>[<expr><call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>sparc_decode_prefetch</name> <argument_list>(<argument><expr><call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%asr%ld"</literal></expr></argument>, <argument><expr><call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%asr%ld"</literal></expr></argument>, <argument><expr><call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>memaddr</name> <operator>+</operator> <call><name>SEX</name> <argument_list>(<argument><expr><call><name>X_DISP30</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)
<argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%#x"</literal></expr></argument>, <argument><expr><call><name>SEX</name> <argument_list>(<argument><expr><call><name>X_DISP22</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>memaddr</name> <operator>+</operator> <call><name>SEX</name> <argument_list>(<argument><expr><call><name>X_DISP22</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>sparc_decode_asi</name> <argument_list>(<argument><expr><call><name>X_ASI</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"(%ld)"</literal></expr></argument>, <argument><expr><call><name>X_ASI</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%csr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%fsr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%psr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%fq"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%cq"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%tbr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%wim"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><call><name>X_LDST_I</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
<operator>+</operator> <call><name>X_ASI</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'y'</literal></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><ternary><condition><expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'U'</literal></expr> ?</condition><then> <expr><call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>X_RD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>sparc_decode_sparclet_cpreg</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%%cpreg(%d)"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block>







<if_stmt><if>if <condition>(<expr><name>imm_ored_to_rs1</name> <operator>||</operator> <name>imm_added_to_rs1</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>prev_insn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errcode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>memaddr</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errcode</name> <operator>=</operator>
<call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>read_memory_func</name></name>) <argument_list>(<argument><expr><name>memaddr</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>errcode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>prev_insn</name> <operator>=</operator> <call><name>getword</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>








<if_stmt><if>if <condition>(<expr><call><name>is_delayed_branch</name> <argument_list>(<argument><expr><name>prev_insn</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>memaddr</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errcode</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>read_memory_func</name></name>) <argument_list>(<argument><expr><name>memaddr</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>errcode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>prev_insn</name> <operator>=</operator> <call><name>getword</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>errcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prev_insn</name> <operator>&amp;</operator> <literal type="number">0xc1c00000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x01000000</literal>
<operator>&amp;&amp;</operator> <call><name>X_RD</name> <argument_list>(<argument><expr><name>prev_insn</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>X_RS1</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"\t! "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator> <literal type="number">0xFFFFFFFF</literal>
<operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <call><name>X_IMM22</name> <argument_list>(<argument><expr><name>prev_insn</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>imm_added_to_rs1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name> <operator>+=</operator> <call><name>X_SIMM</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name> <operator>|=</operator> <call><name>X_SIMM</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>insn_type</name></name> <operator>=</operator> <name>dis_dref</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_UNBR</name><operator>|</operator><name>F_CONDBR</name><operator>|</operator><name>F_JSR</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>is_annulled</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_UNBR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>insn_type</name></name> <operator>=</operator> <name>dis_branch</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CONDBR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>insn_type</name></name> <operator>=</operator> <name>dis_condbranch</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_JSR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>insn_type</name></name> <operator>=</operator> <name>dis_jsr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DELAYED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>branch_delay_insns</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><sizeof>sizeof <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>insn_type</name></name> <operator>=</operator> <name>dis_noninsn</name></expr>;</expr_stmt> 
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><sizeof>sizeof <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xmalloc</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
