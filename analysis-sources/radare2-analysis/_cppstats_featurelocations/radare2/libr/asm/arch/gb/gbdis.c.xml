<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\gb\gbdis.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_op_table.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gbOpLength</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gboptype</name></decl></parameter>)</parameter_list><block>{<block_content>
<switch>switch <condition>(<expr><name>gboptype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GB_8BIT</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>GB_8BIT</name> <operator>+</operator> <name>ARG_8</name> <operator>+</operator> <name>GB_IO</name></expr>:</case>
<case>case <expr><name>GB_8BIT</name> <operator>+</operator> <name>ARG_8</name></expr>:</case>
<case>case <expr><name>GB_16BIT</name></expr>:</case>
<return>return <expr><literal type="number">2</literal></expr>;</return>
<case>case <expr><name>GB_8BIT</name> <operator>+</operator> <name>ARG_16</name></expr>:</case>
<return>return <expr><literal type="number">3</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gb_hardware_register_name</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rP1"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x01</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rSB"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x02</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rSC"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x04</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rDIV"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x05</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rTIMA"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x06</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rTMA"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x07</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rTAC"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x0f</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rIF"</literal></argument>)</argument_list></macro>
<break>break;</break>

<case>case <expr><literal type="number">0x10</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUD1SWEEP"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x11</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUD1LEN"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x12</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUD1ENV"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x13</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUD1LOW"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x14</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUD1HIGH"</literal></argument>)</argument_list></macro>
<break>break;</break>

<case>case <expr><literal type="number">0x16</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUD2LEN"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x17</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUD2ENV"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x18</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUD2LOW"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x19</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUD2HIGH"</literal></argument>)</argument_list></macro>
<break>break;</break>

<case>case <expr><literal type="number">0x1a</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUD3ENA"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x1b</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUD3LEN"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x1c</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUD3LEVEL"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x1d</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUD3LOW"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x1e</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUD3HIGH"</literal></argument>)</argument_list></macro>
<break>break;</break>

<case>case <expr><literal type="number">0x20</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUD4LEN"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x21</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUD4ENV"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x22</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUD4POLY"</literal></argument>)</argument_list></macro>
<break>break;</break>

<case>case <expr><literal type="number">0x23</literal></expr>:</case>
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUD4GO"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x24</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUDVOL"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x25</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUDTERM"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x26</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rAUDENA"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x76</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rPCM12"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x77</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rPCM34"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x40</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rLCDC"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x41</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rSTAT"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x42</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rSCY"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x43</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rSCX"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x44</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rLY"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x45</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rLYC"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x46</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rDMA"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x47</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rBGP"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x48</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rOBP0"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x49</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rOBP1"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x4a</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rWY"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x4b</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rWX"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x4d</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rKEY1"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x4f</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rVBK"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x51</literal></expr>:</case> 
<case>case <expr><literal type="number">0x52</literal></expr>:</case> 
<case>case <expr><literal type="number">0x53</literal></expr>:</case> 
<case>case <expr><literal type="number">0x54</literal></expr>:</case> 
<case>case <expr><literal type="number">0x55</literal></expr>:</case> 
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"rHDMA%d"</literal></expr></argument>, <argument><expr><name>offset</name> <operator>-</operator> <literal type="number">0x50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x56</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rRP"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x68</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rBCPS"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x69</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rBCPD"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x6a</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rOCPS"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x6b</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rOCPD"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0x70</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rSVBK"</literal></argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><literal type="number">0xff</literal></expr>:</case> 
<macro><name>r_str_cpy</name> <argument_list>(<argument>reg</argument>, <argument><literal type="string">"rIE"</literal></argument>)</argument_list></macro>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"0xff%02x"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GB_DIS_LEN_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>gbDisass</name><parameter_list>(<parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>foo</name> <init>= <expr><call><name>gbOpLength</name> <argument_list>(<argument><expr><name><name>gb_op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>foo</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf_asm</name> <init>= <expr><literal type="string">"invalid"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>reg</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>gb_op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GB_8BIT</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>gb_op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GB_16BIT</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>cb_ops</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3u</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cb_regs</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7u</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GB_8BIT</name> <operator>+</operator> <name>ARG_8</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>gb_op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GB_8BIT</name> <operator>+</operator> <name>ARG_16</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>gb_op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x100</literal> <operator>*</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GB_8BIT</name> <operator>+</operator> <name>ARG_8</name> <operator>+</operator> <name>GB_IO</name></expr>:</case>
<expr_stmt><expr><call><name>gb_hardware_register_name</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>gb_op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name>buf_asm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>foo</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
