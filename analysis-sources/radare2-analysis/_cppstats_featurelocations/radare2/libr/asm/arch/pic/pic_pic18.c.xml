<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\pic\pic_pic18.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pic_pic18.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_ARG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAF_T</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F32_T</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAF_T</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K_T</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_T</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_T</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEX_T</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_T</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOTO_T</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHK_T</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_T</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LFSR_T</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fsr</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"fsr0"</literal></expr>, <expr><literal type="string">"fsr1"</literal></expr>, <expr><literal type="string">"fsr2"</literal></expr>, <expr><literal type="string">"reserved"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>ut16</name></type> <name>opmin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>opmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>optype</name></decl>;</decl_stmt>

}</block> <decl><name><name>ops</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0xf000</literal></expr>, <expr><literal type="number">0xffff</literal></expr>, <expr><literal type="string">"nop"</literal></expr>, <expr><name>NO_ARG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xef00</literal></expr>, <expr><literal type="number">0xefff</literal></expr>, <expr><literal type="string">"goto"</literal></expr>, <expr><name>GOTO_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xee00</literal></expr>, <expr><literal type="number">0xee3f</literal></expr>, <expr><literal type="string">"lfsr"</literal></expr>, <expr><name>LFSR_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xec00</literal></expr>, <expr><literal type="number">0xedff</literal></expr>, <expr><literal type="string">"call"</literal></expr>, <expr><name>CALL_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xe700</literal></expr>, <expr><literal type="number">0xe7ff</literal></expr>, <expr><literal type="string">"bnn"</literal></expr>, <expr><name>N_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xe600</literal></expr>, <expr><literal type="number">0xe6ff</literal></expr>, <expr><literal type="string">"bn"</literal></expr>, <expr><name>N_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xe500</literal></expr>, <expr><literal type="number">0xe5ff</literal></expr>, <expr><literal type="string">"bnov"</literal></expr>, <expr><name>N_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xe400</literal></expr>, <expr><literal type="number">0xe4ff</literal></expr>, <expr><literal type="string">"bov"</literal></expr>, <expr><name>N_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xe300</literal></expr>, <expr><literal type="number">0xe3ff</literal></expr>, <expr><literal type="string">"bnc"</literal></expr>, <expr><name>N_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xe200</literal></expr>, <expr><literal type="number">0xe2ff</literal></expr>, <expr><literal type="string">"bc"</literal></expr>, <expr><name>N_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xe100</literal></expr>, <expr><literal type="number">0xe1ff</literal></expr>, <expr><literal type="string">"bnz"</literal></expr>, <expr><name>N_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xe000</literal></expr>, <expr><literal type="number">0xe0ff</literal></expr>, <expr><literal type="string">"bz"</literal></expr>, <expr><name>N_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xd800</literal></expr>, <expr><literal type="number">0xdfff</literal></expr>, <expr><literal type="string">"rcall"</literal></expr>, <expr><name>NEX_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xd000</literal></expr>, <expr><literal type="number">0xd7ff</literal></expr>, <expr><literal type="string">"bra"</literal></expr>, <expr><name>NEX_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xc000</literal></expr>, <expr><literal type="number">0xcfff</literal></expr>, <expr><literal type="string">"movff"</literal></expr>, <expr><name>F32_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xb000</literal></expr>, <expr><literal type="number">0xbfff</literal></expr>, <expr><literal type="string">"btfsc"</literal></expr>, <expr><name>BAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa000</literal></expr>, <expr><literal type="number">0xafff</literal></expr>, <expr><literal type="string">"btfss"</literal></expr>, <expr><name>BAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x9000</literal></expr>, <expr><literal type="number">0x9fff</literal></expr>, <expr><literal type="string">"bcf"</literal></expr>, <expr><name>BAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x8000</literal></expr>, <expr><literal type="number">0x8fff</literal></expr>, <expr><literal type="string">"bsf"</literal></expr>, <expr><name>BAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x7000</literal></expr>, <expr><literal type="number">0x7fff</literal></expr>, <expr><literal type="string">"btg"</literal></expr>, <expr><name>BAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x6e00</literal></expr>, <expr><literal type="number">0x6fff</literal></expr>, <expr><literal type="string">"movwf"</literal></expr>, <expr><name>AF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x6c00</literal></expr>, <expr><literal type="number">0x6dff</literal></expr>, <expr><literal type="string">"negf"</literal></expr>, <expr><name>AF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x6a00</literal></expr>, <expr><literal type="number">0x6bff</literal></expr>, <expr><literal type="string">"clrf"</literal></expr>, <expr><name>AF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x6800</literal></expr>, <expr><literal type="number">0x69ff</literal></expr>, <expr><literal type="string">"setf"</literal></expr>, <expr><name>AF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x6600</literal></expr>, <expr><literal type="number">0x67ff</literal></expr>, <expr><literal type="string">"tstfsz"</literal></expr>, <expr><name>AF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x6400</literal></expr>, <expr><literal type="number">0x65ff</literal></expr>, <expr><literal type="string">"cpfsgt"</literal></expr>, <expr><name>AF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x6200</literal></expr>, <expr><literal type="number">0x63ff</literal></expr>, <expr><literal type="string">"cpfseq"</literal></expr>, <expr><name>AF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x6000</literal></expr>, <expr><literal type="number">0x61ff</literal></expr>, <expr><literal type="string">"cpfslt"</literal></expr>, <expr><name>AF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x5c00</literal></expr>, <expr><literal type="number">0x5fff</literal></expr>, <expr><literal type="string">"subwf"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x5800</literal></expr>, <expr><literal type="number">0x5bff</literal></expr>, <expr><literal type="string">"subwfb"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x5400</literal></expr>, <expr><literal type="number">0x57ff</literal></expr>, <expr><literal type="string">"subfwb"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x5000</literal></expr>, <expr><literal type="number">0x53ff</literal></expr>, <expr><literal type="string">"movf"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x4c00</literal></expr>, <expr><literal type="number">0x4fff</literal></expr>, <expr><literal type="string">"dcfsnz"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x4800</literal></expr>, <expr><literal type="number">0x4bff</literal></expr>, <expr><literal type="string">"infsnz"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x4400</literal></expr>, <expr><literal type="number">0x47ff</literal></expr>, <expr><literal type="string">"rlncf"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x4000</literal></expr>, <expr><literal type="number">0x43ff</literal></expr>, <expr><literal type="string">"rrncf"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3c00</literal></expr>, <expr><literal type="number">0x3fff</literal></expr>, <expr><literal type="string">"incfsz"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3800</literal></expr>, <expr><literal type="number">0x3bff</literal></expr>, <expr><literal type="string">"swapf"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3400</literal></expr>, <expr><literal type="number">0x37ff</literal></expr>, <expr><literal type="string">"rlcf"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3000</literal></expr>, <expr><literal type="number">0x33ff</literal></expr>, <expr><literal type="string">"rrcf"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c00</literal></expr>, <expr><literal type="number">0x2fff</literal></expr>, <expr><literal type="string">"decfsz"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2800</literal></expr>, <expr><literal type="number">0x2bff</literal></expr>, <expr><literal type="string">"incf"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2400</literal></expr>, <expr><literal type="number">0x27ff</literal></expr>, <expr><literal type="string">"addwf"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2000</literal></expr>, <expr><literal type="number">0x23ff</literal></expr>, <expr><literal type="string">"addwfc"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c00</literal></expr>, <expr><literal type="number">0x1fff</literal></expr>, <expr><literal type="string">"comf"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1800</literal></expr>, <expr><literal type="number">0x1bff</literal></expr>, <expr><literal type="string">"xorwf"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1400</literal></expr>, <expr><literal type="number">0x17ff</literal></expr>, <expr><literal type="string">"andwf"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1000</literal></expr>, <expr><literal type="number">0x13ff</literal></expr>, <expr><literal type="string">"iorwf"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xf00</literal></expr>, <expr><literal type="number">0xfff</literal></expr>, <expr><literal type="string">"addlw"</literal></expr>, <expr><name>K_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xe00</literal></expr>, <expr><literal type="number">0xeff</literal></expr>, <expr><literal type="string">"movlw"</literal></expr>, <expr><name>K_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xd00</literal></expr>, <expr><literal type="number">0xdff</literal></expr>, <expr><literal type="string">"mullw"</literal></expr>, <expr><name>K_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xc00</literal></expr>, <expr><literal type="number">0xcff</literal></expr>, <expr><literal type="string">"retlw"</literal></expr>, <expr><name>K_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xb00</literal></expr>, <expr><literal type="number">0xbff</literal></expr>, <expr><literal type="string">"andlw"</literal></expr>, <expr><name>K_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa00</literal></expr>, <expr><literal type="number">0xaff</literal></expr>, <expr><literal type="string">"xorlw"</literal></expr>, <expr><name>K_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x900</literal></expr>, <expr><literal type="number">0x9ff</literal></expr>, <expr><literal type="string">"iorlw"</literal></expr>, <expr><name>K_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x800</literal></expr>, <expr><literal type="number">0x8ff</literal></expr>, <expr><literal type="string">"sublw"</literal></expr>, <expr><name>K_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x400</literal></expr>, <expr><literal type="number">0x7ff</literal></expr>, <expr><literal type="string">"decf"</literal></expr>, <expr><name>DAF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x200</literal></expr>, <expr><literal type="number">0x3ff</literal></expr>, <expr><literal type="string">"mulwf"</literal></expr>, <expr><name>AF_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x100</literal></expr>, <expr><literal type="number">0x10f</literal></expr>, <expr><literal type="string">"movlb"</literal></expr>, <expr><name>SHK_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="string">"reset"</literal></expr>, <expr><name>NO_ARG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="string">"return"</literal></expr>, <expr><name>S_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="string">"retfie"</literal></expr>, <expr><name>S_T</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xf</literal></expr>, <expr><literal type="number">0xf</literal></expr>, <expr><literal type="string">"tblwt+*"</literal></expr>, <expr><name>NO_ARG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xe</literal></expr>, <expr><literal type="number">0xe</literal></expr>, <expr><literal type="string">"tblwt*-"</literal></expr>, <expr><name>NO_ARG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xd</literal></expr>, <expr><literal type="number">0xd</literal></expr>, <expr><literal type="string">"tblwt*+"</literal></expr>, <expr><name>NO_ARG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xc</literal></expr>, <expr><literal type="string">"tblwt*"</literal></expr>, <expr><name>NO_ARG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xb</literal></expr>, <expr><literal type="number">0xb</literal></expr>, <expr><literal type="string">"tblrd+*"</literal></expr>, <expr><name>NO_ARG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="string">"tblrd*-"</literal></expr>, <expr><name>NO_ARG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0x9</literal></expr>, <expr><literal type="string">"tblrd*+"</literal></expr>, <expr><name>NO_ARG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x8</literal></expr>, <expr><literal type="string">"tblrd*"</literal></expr>, <expr><name>NO_ARG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0x7</literal></expr>, <expr><literal type="string">"daw"</literal></expr>, <expr><name>NO_ARG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="string">"pop"</literal></expr>, <expr><name>NO_ARG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="string">"push"</literal></expr>, <expr><name>NO_ARG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="string">"clrwdt"</literal></expr>, <expr><name>NO_ARG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="string">"sleep"</literal></expr>, <expr><name>NO_ARG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x0</literal></expr>, <expr><literal type="string">"nop"</literal></expr>, <expr><name>NO_ARG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0xffff</literal></expr>, <expr><literal type="string">"invalid"</literal></expr>, <expr><name>NO_ARG</name></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type> <name>pic_pic18_disassemble</name><parameter_list>(<parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>opbuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>blen</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>opbuf</name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>blen</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>instr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> 
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>instr</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf_asm</name> <init>= <expr><literal type="string">"invalid"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>opbuf</name></expr></argument>, <argument><expr><name>buf_asm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opmin</name> <operator>!=</operator> <operator>(</operator><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opmin</name> <operator>&amp;</operator> <name>instr</name><operator>)</operator> <operator>||</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opmax</name> <operator>!=</operator> <operator>(</operator><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opmax</name> <operator>|</operator> <name>instr</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<empty_stmt>;</empty_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opmin</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opmax</name> <operator>==</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>opbuf</name></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>optype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NO_ARG</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>N_T</name></expr>:</case>
<case>case <expr><name>K_T</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x"</literal></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DAF_T</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x, %d, %d"</literal></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AF_T</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x, %d"</literal></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BAF_T</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x, %d, %d"</literal></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NEX_T</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x"</literal></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CALL_T</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>blen</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>dword_instr</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>dword_instr</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal> <operator>!=</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x, %d"</literal></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><name>dword_instr</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>dword_instr</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0xfff00</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>dword_instr</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>GOTO_T</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>blen</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>dword_instr</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dword_instr</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal> <operator>!=</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x"</literal></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>dword_instr</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>dword_instr</name> <operator>&amp;</operator> <literal type="number">0xfff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>F32_T</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>blen</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>dword_instr</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dword_instr</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal> <operator>!=</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x, 0x%x"</literal></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><name>dword_instr</name> <operator>&amp;</operator> <literal type="number">0xfff</literal></expr></argument>, <argument><expr><operator>(</operator><name>dword_instr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xfff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>SHK_T</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x"</literal></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>S_T</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s %d"</literal></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LFSR_T</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>dword_instr</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dword_instr</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal> <operator>!=</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>reg_n</name> <init>= <expr><operator>(</operator><name>dword_instr</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s %s, %d"</literal></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>fsr</name><index>[<expr><name>reg_n</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>dword_instr</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>dword_instr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <literal type="string">"unknown args"</literal></expr>;</expr_stmt>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>opbuf</name></expr></argument>, <argument><expr><name>buf_asm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
