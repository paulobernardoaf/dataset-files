<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\pic\pic_baseline.h">

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PIC_BASELINE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_BASELINE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{
<decl><name>PIC_BASELINE_OP_ARGS_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>PIC_BASELINE_OP_ARGS_2F</name></decl>,
<decl><name>PIC_BASELINE_OP_ARGS_3F</name></decl>,
<decl><name>PIC_BASELINE_OP_ARGS_3K</name></decl>,
<decl><name>PIC_BASELINE_OP_ARGS_1D_5F</name></decl>,
<decl><name>PIC_BASELINE_OP_ARGS_5F</name></decl>,
<decl><name>PIC_BASELINE_OP_ARGS_3B_5F</name></decl>,
<decl><name>PIC_BASELINE_OP_ARGS_8K</name></decl>,
<decl><name>PIC_BASELINE_OP_ARGS_9K</name></decl>
}</block></enum></type> <name>PicBaselineOpArgs</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_BASELINE_OP_ARGS_2F_MASK_F</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_BASELINE_OP_ARGS_3F_MASK_F</name></cpp:macro> <cpp:value>0x7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_BASELINE_OP_ARGS_3K_MASK_K</name></cpp:macro> <cpp:value>0x7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_BASELINE_OP_ARGS_1D_5F_MASK_D</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_BASELINE_OP_ARGS_1D_5F_MASK_F</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_BASELINE_OP_ARGS_5F_MASK_F</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_BASELINE_OP_ARGS_3B_5F_MASK_B</name></cpp:macro> <cpp:value>(0x7 &lt;&lt; 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_BASELINE_OP_ARGS_3B_5F_MASK_F</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_BASELINE_OP_ARGS_8K_MASK_K</name></cpp:macro> <cpp:value>0xff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_BASELINE_OP_ARGS_9K_MASK_K</name></cpp:macro> <cpp:value>0x1ff</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_pic_baseline_op</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mnemonic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PicBaselineOpArgs</name></type> <name>args</name></decl>;</decl_stmt>
}</block></struct></type> <name>PicBaselineOpInfo</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>PIC_BASELINE_OPCODE_NOP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>PIC_BASELINE_OPCODE_OPTION</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_SLEEP</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_CLRWDT</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_TRIS</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_MOVLB</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_RETURN</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_RETFIE</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_MOVWF</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_CLRF</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_CLRW</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_SUBWF</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_DECF</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_IORWF</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_ANDWF</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_XORWF</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_ADDWF</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_MOVF</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_COMF</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_INCF</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_DECFSZ</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_RRF</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_RLF</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_SWAPF</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_INCFSZ</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_BCF</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_BSF</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_BTFSC</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_BTFSS</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_RETLW</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_CALL</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_GOTO</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_MOVLW</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_IORLW</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_ANDLW</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_XORLW</name></decl>,
<decl><name>PIC_BASELINE_OPCODE_INVALID</name></decl>
}</block></enum></type> <name>PicBaselineOpcode</name>;</typedef>

<function_decl><type><name>PicBaselineOpcode</name></type> <name>pic_baseline_get_opcode</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>PicBaselineOpInfo</name> <modifier>*</modifier></type><name>pic_baseline_get_op_info</name><parameter_list>(<parameter><decl><type><name>PicBaselineOpcode</name></type> <name>opcode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>pic_baseline_disassemble</name><parameter_list>(<parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>opbuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
