<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\pic\pic_baseline.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pic_baseline.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PicBaselineOpInfo</name></type> <name><name>pic_baseline_op_info</name><index>[<expr><name>PIC_BASELINE_OPCODE_INVALID</name></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"nop"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_NONE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"option"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_NONE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sleep"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_NONE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"clrwdt"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_NONE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tris"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_3F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"movlb"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_3K</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"return"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_NONE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"retfie"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_NONE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"movwf"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"clrf"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"clrw"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_NONE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"subwf"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_1D_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"decf"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_1D_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iorwf"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_1D_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"andwf"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_1D_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xorwf"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_1D_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"andwf"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_1D_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"movf"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_1D_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"comf"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_1D_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"incf"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_1D_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"decfsz"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_1D_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rrf"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_1D_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rlf"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_1D_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"swapf"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_1D_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"incfsz"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_1D_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bcf"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_3B_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bsf"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_3B_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"btfsc"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_3B_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"btfss"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_3B_5F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"retlw"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_8K</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"call"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_8K</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"goto"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_9K</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"movlw"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_8K</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iorlw"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_8K</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"andlw"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_8K</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xorlw"</literal></expr>, <expr><name>PIC_BASELINE_OP_ARGS_8K</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>PicBaselineOpcode</name></type> <name>pic_baseline_get_opcode</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>instr</name> <operator>&amp;</operator> <literal type="number">0xf000</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>PIC_BASELINE_OPCODE_INVALID</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>)</condition> <block>{<block_content> 
<case>case <expr><literal type="number">0x7</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_ADDWF</name></expr>;</return>
<case>case <expr><literal type="number">0x5</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_ANDWF</name></expr>;</return>
<case>case <expr><literal type="number">0x1</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>instr</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>PIC_BASELINE_OPCODE_CLRF</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>instr</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<return>return <expr><name>PIC_BASELINE_OPCODE_CLRW</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>PIC_BASELINE_OPCODE_INVALID</name></expr>;</return>
<case>case <expr><literal type="number">0x9</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_COMF</name></expr>;</return>
<case>case <expr><literal type="number">0x3</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_DECF</name></expr>;</return>
<case>case <expr><literal type="number">0xb</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_DECFSZ</name></expr>;</return>
<case>case <expr><literal type="number">0xa</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_INCF</name></expr>;</return>
<case>case <expr><literal type="number">0xf</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_INCFSZ</name></expr>;</return>
<case>case <expr><literal type="number">0x4</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_IORWF</name></expr>;</return>
<case>case <expr><literal type="number">0x8</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_MOVF</name></expr>;</return>
<case>case <expr><literal type="number">0x0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>instr</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>PIC_BASELINE_OPCODE_MOVWF</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>instr</name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>)</condition> <block>{<block_content> 
<case>case <expr><literal type="number">0x0</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_NOP</name></expr>;</return>
<case>case <expr><literal type="number">0x4</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_CLRWDT</name></expr>;</return>
<case>case <expr><literal type="number">0x2</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_OPTION</name></expr>;</return>
<case>case <expr><literal type="number">0x3</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_SLEEP</name></expr>;</return>
<case>case <expr><literal type="number">0x1</literal></expr>:</case> 
<case>case <expr><literal type="number">0x5</literal></expr>:</case> 
<case>case <expr><literal type="number">0x6</literal></expr>:</case> 
<case>case <expr><literal type="number">0x7</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_TRIS</name></expr>;</return>
<case>case <expr><literal type="number">0x10</literal></expr>:</case> 
<case>case <expr><literal type="number">0x11</literal></expr>:</case> 
<case>case <expr><literal type="number">0x12</literal></expr>:</case> 
<case>case <expr><literal type="number">0x13</literal></expr>:</case> 
<case>case <expr><literal type="number">0x14</literal></expr>:</case> 
<case>case <expr><literal type="number">0x15</literal></expr>:</case> 
<case>case <expr><literal type="number">0x16</literal></expr>:</case> 
<case>case <expr><literal type="number">0x17</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_MOVLB</name></expr>;</return>
<case>case <expr><literal type="number">0x1e</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_RETURN</name></expr>;</return>
<case>case <expr><literal type="number">0x1f</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_RETFIE</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>PIC_BASELINE_OPCODE_INVALID</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<case>case <expr><literal type="number">0xd</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_RLF</name></expr>;</return>
<case>case <expr><literal type="number">0xc</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_RRF</name></expr>;</return>
<case>case <expr><literal type="number">0x2</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_SUBWF</name></expr>;</return>
<case>case <expr><literal type="number">0xe</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_SWAPF</name></expr>;</return>
<case>case <expr><literal type="number">0x6</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_XORWF</name></expr>;</return>
<case>case <expr><literal type="number">0x10</literal></expr>:</case> 
<case>case <expr><literal type="number">0x11</literal></expr>:</case> 
<case>case <expr><literal type="number">0x12</literal></expr>:</case> 
<case>case <expr><literal type="number">0x13</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_BCF</name></expr>;</return>
<case>case <expr><literal type="number">0x14</literal></expr>:</case> 
<case>case <expr><literal type="number">0x15</literal></expr>:</case> 
<case>case <expr><literal type="number">0x16</literal></expr>:</case> 
<case>case <expr><literal type="number">0x17</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_BSF</name></expr>;</return>
<case>case <expr><literal type="number">0x18</literal></expr>:</case> 
<case>case <expr><literal type="number">0x19</literal></expr>:</case> 
<case>case <expr><literal type="number">0x1a</literal></expr>:</case> 
<case>case <expr><literal type="number">0x1b</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_BTFSC</name></expr>;</return>
<case>case <expr><literal type="number">0x1c</literal></expr>:</case> 
<case>case <expr><literal type="number">0x1d</literal></expr>:</case> 
<case>case <expr><literal type="number">0x1e</literal></expr>:</case> 
<case>case <expr><literal type="number">0x1f</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_BTFSS</name></expr>;</return>
<case>case <expr><literal type="number">0x38</literal></expr>:</case> 
<case>case <expr><literal type="number">0x39</literal></expr>:</case> 
<case>case <expr><literal type="number">0x3a</literal></expr>:</case> 
<case>case <expr><literal type="number">0x3b</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_ANDLW</name></expr>;</return>
<case>case <expr><literal type="number">0x24</literal></expr>:</case> 
<case>case <expr><literal type="number">0x25</literal></expr>:</case> 
<case>case <expr><literal type="number">0x26</literal></expr>:</case> 
<case>case <expr><literal type="number">0x27</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_CALL</name></expr>;</return>
<case>case <expr><literal type="number">0x28</literal></expr>:</case> 
<case>case <expr><literal type="number">0x29</literal></expr>:</case> 
<case>case <expr><literal type="number">0x2a</literal></expr>:</case> 
<case>case <expr><literal type="number">0x2b</literal></expr>:</case> 
<case>case <expr><literal type="number">0x2c</literal></expr>:</case> 
<case>case <expr><literal type="number">0x2d</literal></expr>:</case> 
<case>case <expr><literal type="number">0x2e</literal></expr>:</case> 
<case>case <expr><literal type="number">0x2f</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_GOTO</name></expr>;</return>
<case>case <expr><literal type="number">0x34</literal></expr>:</case> 
<case>case <expr><literal type="number">0x35</literal></expr>:</case> 
<case>case <expr><literal type="number">0x36</literal></expr>:</case> 
<case>case <expr><literal type="number">0x37</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_IORLW</name></expr>;</return>
<case>case <expr><literal type="number">0x30</literal></expr>:</case> 
<case>case <expr><literal type="number">0x31</literal></expr>:</case> 
<case>case <expr><literal type="number">0x32</literal></expr>:</case> 
<case>case <expr><literal type="number">0x33</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_MOVLW</name></expr>;</return>
<case>case <expr><literal type="number">0x20</literal></expr>:</case> 
<case>case <expr><literal type="number">0x21</literal></expr>:</case> 
<case>case <expr><literal type="number">0x22</literal></expr>:</case> 
<case>case <expr><literal type="number">0x23</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_RETLW</name></expr>;</return>
<case>case <expr><literal type="number">0x3c</literal></expr>:</case> 
<case>case <expr><literal type="number">0x3d</literal></expr>:</case> 
<case>case <expr><literal type="number">0x3e</literal></expr>:</case> 
<case>case <expr><literal type="number">0x3f</literal></expr>:</case> 
<return>return <expr><name>PIC_BASELINE_OPCODE_XORLW</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>PIC_BASELINE_OPCODE_INVALID</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>PicBaselineOpInfo</name> <modifier>*</modifier></type><name>pic_baseline_get_op_info</name><parameter_list>(<parameter><decl><type><name>PicBaselineOpcode</name></type> <name>opcode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&gt;=</operator> <name>PIC_BASELINE_OPCODE_INVALID</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>&amp;</operator><name><name>pic_baseline_op_info</name><index>[<expr><name>opcode</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>pic_baseline_disassemble</name><parameter_list>(<parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>opbuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMIT_INVALID</name></cpp:macro> <cpp:value>{ op-&gt;size = 1; strcpy (opbuf, "invalid"); return 1; }</cpp:value></cpp:define>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name> <operator>||</operator> <name>l</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>EMIT_INVALID</name></expr></expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>instr</name> <init>= <expr><call><name>r_read_le16</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PicBaselineOpcode</name></type> <name>opcode</name> <init>= <expr><call><name>pic_baseline_get_opcode</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>PIC_BASELINE_OPCODE_INVALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>EMIT_INVALID</name></expr></expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>PicBaselineOpInfo</name> <modifier>*</modifier></type><name>op_info</name> <init>= <expr><call><name>pic_baseline_get_op_info</name><argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op_info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>EMIT_INVALID</name></expr></expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EMIT_INVALID</name></cpp:undef>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf_asm</name> <init>= <expr><literal type="string">"invalid"</literal></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>op_info</name><operator>-&gt;</operator><name>args</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PIC_BASELINE_OP_ARGS_NONE</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PIC_BASELINE_OP_ARGS_2F</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x"</literal></expr></argument>, <argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <name>PIC_BASELINE_OP_ARGS_2F_MASK_F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PIC_BASELINE_OP_ARGS_3F</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x"</literal></expr></argument>, <argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <name>PIC_BASELINE_OP_ARGS_3F_MASK_F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PIC_BASELINE_OP_ARGS_3K</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x"</literal></expr></argument>, <argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <name>PIC_BASELINE_OP_ARGS_3K_MASK_K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PIC_BASELINE_OP_ARGS_1D_5F</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x, %c"</literal></expr></argument>, <argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <name>PIC_BASELINE_OP_ARGS_1D_5F_MASK_F</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>instr</name> <operator>&amp;</operator> <name>PIC_BASELINE_OP_ARGS_1D_5F_MASK_D</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><literal type="char">'f'</literal></expr> </then><else>: <expr><literal type="char">'w'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PIC_BASELINE_OP_ARGS_5F</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x"</literal></expr></argument>, <argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <name>PIC_BASELINE_OP_ARGS_5F_MASK_F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PIC_BASELINE_OP_ARGS_3B_5F</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x, 0x%x"</literal></expr></argument>, <argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <name>PIC_BASELINE_OP_ARGS_3B_5F_MASK_F</name></expr></argument>,
<argument><expr><operator>(</operator><name>instr</name> <operator>&amp;</operator> <name>PIC_BASELINE_OP_ARGS_3B_5F_MASK_B</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PIC_BASELINE_OP_ARGS_8K</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x"</literal></expr></argument>, <argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <name>PIC_BASELINE_OP_ARGS_8K_MASK_K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PIC_BASELINE_OP_ARGS_9K</name></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x"</literal></expr></argument>, <argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <name>PIC_BASELINE_OP_ARGS_9K_MASK_K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>opbuf</name></expr></argument>, <argument><expr><name>buf_asm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
