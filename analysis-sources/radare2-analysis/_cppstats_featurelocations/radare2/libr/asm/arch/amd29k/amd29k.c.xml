<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\amd29k\amd29k.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"amd29k.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"amd29k_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPU_ANY</name></cpp:macro> <cpp:value>"*"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_AMD29K_INSTRUCTIONS</name></cpp:macro> <cpp:value>207</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMD29K_GET_TYPE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;type[(i)])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMD29K_GET_VALUE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;operands[(i)])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMD29K_SET_VALUE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>v</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;operands[(i)]=(v));((x)-&gt;type[(i)]=(t))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMD29K_SET_INVALID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;type[(i)]=AMD29K_TYPE_UNK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMD29K_HAS_BIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)[0] &amp; 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMD29K_IS_REG_GR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&gt;=0&amp;&amp;(x)&lt;128)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMD29K_IS_REG_LR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&gt;=128&amp;&amp;(x)&lt;256)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMD29K_REGNAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(AMD29K_IS_REG_GR(x)?"gr":"lr")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMD29K_LR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(AMD29K_IS_REG_GR(x)?(x):(x)-127)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_ra_rb_rci</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>AMD29K_HAS_BIT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_ra_rb_rc</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_ra_imm16</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>word</name> <init>= <expr><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_ra_i16_sh2</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>word</name> <init>= <expr><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>word</name> <operator>&amp;</operator> <literal type="number">0x20000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>word</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0xfffc0000</literal> <operator>|</operator> <name>word</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>AMD29K_HAS_BIT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator> <name>word</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_JMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_imm16_sh2</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>word</name> <init>= <expr><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>word</name> <operator>&amp;</operator> <literal type="number">0x20000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>word</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0xfffc0000</literal> <operator>|</operator> <name>word</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>AMD29K_HAS_BIT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>AMD29K_TYPE_JMP</name></expr> </then><else>: <expr><name>AMD29K_TYPE_IMM</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_load_store</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>AMD29K_HAS_BIT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>AMD29K_TYPE_IMM</name></expr> </then><else>: <expr><name>AMD29K_TYPE_REG</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_calli</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_rc_ra_imm</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_clz</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>AMD29K_HAS_BIT</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>AMD29K_TYPE_IMM</name></expr> </then><else>: <expr><name>AMD29K_TYPE_REG</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_convert</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x70</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0c</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_rc_ra</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_dmac_fmac</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3c</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_ra_rb</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_rb</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_rc_imm</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0c</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_ra_imm</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0c</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_mfsr</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_mtsr</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_none</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AMD29K_SET_INVALID</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>amd29k_instruction_t</name></type> <name><name>amd29k_instructions</name><index>[<expr><name>N_AMD29K_INSTRUCTIONS</name></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"illegal"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0x00</literal></expr> , <expr><name>decode_none</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"add"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><literal type="number">0x14</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"add"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><literal type="number">0x15</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"addc"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><literal type="number">0x1C</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"addc"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><literal type="number">0x1D</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"addcs"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><literal type="number">0x18</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"addcs"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><literal type="number">0x19</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"addcu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><literal type="number">0x1A</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"addcu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><literal type="number">0x1B</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"adds"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><literal type="number">0x10</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"adds"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><literal type="number">0x11</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"addu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><literal type="number">0x12</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"addu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><literal type="number">0x13</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"and"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><literal type="number">0x90</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"and"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><literal type="number">0x91</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"andn"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><literal type="number">0x9C</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"andn"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><literal type="number">0x9D</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"aseq"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x70</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"asge"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x5C</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"asge"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x5D</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"asgeu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x5E</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"asgeu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x5F</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"asgt"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x58</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"asgt"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x59</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"asgtu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x5A</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"asgtu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x5B</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"asle"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x54</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"asle"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x55</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"asleu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x56</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"asleu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x57</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"aslt"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x50</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"aslt"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x51</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"asltu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x52</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"asltu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x53</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"asneq"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x72</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"asneq"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x73</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"call"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>, <expr><literal type="number">0xA8</literal></expr> , <expr><name>decode_ra_i16_sh2</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"call"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>, <expr><literal type="number">0xA9</literal></expr> , <expr><name>decode_ra_i16_sh2</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"calli"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_ICALL</name></expr>, <expr><literal type="number">0xC8</literal></expr> , <expr><name>decode_calli</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29050</name></expr>, <expr><literal type="string">"class"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xE6</literal></expr> , <expr><name>decode_rc_ra_imm</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"clz"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0x08</literal></expr> , <expr><name>decode_clz</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"clz"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0x09</literal></expr> , <expr><name>decode_clz</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"const"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><literal type="number">0x03</literal></expr> , <expr><name>decode_ra_imm16</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"consth"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><literal type="number">0x02</literal></expr> , <expr><name>decode_ra_imm16</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"consthz"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><literal type="number">0x05</literal></expr> , <expr><name>decode_ra_imm16</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"constn"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>, <expr><literal type="number">0x01</literal></expr> , <expr><name>decode_ra_imm16</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29050</name></expr>, <expr><literal type="string">"convert"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xE4</literal></expr> , <expr><name>decode_convert</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cpbyte"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x2E</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cpbyte"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x2F</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cpeq"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x60</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cpeq"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x61</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cpge"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x4C</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cpge"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x4D</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cpgeu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x4E</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cpgeu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x4F</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cpgt"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x48</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cpgt"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x49</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cpgtu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x4A</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cpgtu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x4B</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cple"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x44</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cple"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x45</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cpleu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x46</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cpleu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x47</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cplt"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x40</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cplt"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x41</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cpltu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x42</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cpltu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x43</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cpneq"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x62</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"cpneq"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0x63</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29000</name></expr>, <expr><literal type="string">"cvdf"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xE9</literal></expr> , <expr><name>decode_rc_ra</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29000</name></expr>, <expr><literal type="string">"cvdint"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xE7</literal></expr> , <expr><name>decode_rc_ra</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29000</name></expr>, <expr><literal type="string">"cvfd"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xE8</literal></expr> , <expr><name>decode_rc_ra</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29000</name></expr>, <expr><literal type="string">"cvfint"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xE6</literal></expr> , <expr><name>decode_rc_ra</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29000</name></expr>, <expr><literal type="string">"cvintd"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xE5</literal></expr> , <expr><name>decode_rc_ra</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29000</name></expr>, <expr><literal type="string">"cvintf"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xE4</literal></expr> , <expr><name>decode_rc_ra</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"dadd"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xF1</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"ddiv"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><literal type="number">0xF7</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"deq"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0xEB</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29050</name></expr>, <expr><literal type="string">"dge"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0xEF</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"dgt"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0xED</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"div"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><literal type="number">0x6A</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"div"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><literal type="number">0x6B</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"div0"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><literal type="number">0x68</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"div0"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><literal type="number">0x69</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"divide"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><literal type="number">0xE1</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29050</name></expr>, <expr><literal type="string">"dividu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><literal type="number">0xE3</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"divl"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><literal type="number">0x6C</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"divl"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><literal type="number">0x6D</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"divrem"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><literal type="number">0x6E</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"divrem"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><literal type="number">0x6F</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29000</name></expr>, <expr><literal type="string">"dlt"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0xEF</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29050</name></expr>, <expr><literal type="string">"dmac"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xD9</literal></expr> , <expr><name>decode_dmac_fmac</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29050</name></expr>, <expr><literal type="string">"dmsm"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xDB</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"dmul"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><literal type="number">0xF5</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"dsub"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0xF3</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"emulate"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xF8</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"exbyte"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0x0A</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"exbyte"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0x0B</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"exhw"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0x7C</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"exhw"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0x7D</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"exhws"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0x7E</literal></expr> , <expr><name>decode_rc_ra</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"extract"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0x7A</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"extract"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0x7B</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"fadd"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>, <expr><literal type="number">0xF0</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"fdiv"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>, <expr><literal type="number">0xF6</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29050</name></expr>, <expr><literal type="string">"fdmul"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><literal type="number">0xF9</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"feq"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0xEA</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29050</name></expr>, <expr><literal type="string">"fge"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0xEE</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"fgt"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0xEC</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29000</name></expr>, <expr><literal type="string">"flt"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>, <expr><literal type="number">0xEE</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29050</name></expr>, <expr><literal type="string">"fmac"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xD8</literal></expr> , <expr><name>decode_dmac_fmac</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29050</name></expr>, <expr><literal type="string">"fmsm"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xDA</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"fmul"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><literal type="number">0xF4</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"fsub"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0xF2</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"halt"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_RET</name></expr>, <expr><literal type="number">0x89</literal></expr> , <expr><name>decode_none</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"inbyte"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0x0C</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"inbyte"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0x0D</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"inhw"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0x78</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"inhw"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0x79</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"inv"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0x9F</literal></expr> , <expr><name>decode_none</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"iret"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_RET</name></expr>, <expr><literal type="number">0x88</literal></expr> , <expr><name>decode_none</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"iretinv"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_RET</name></expr>, <expr><literal type="number">0x8C</literal></expr> , <expr><name>decode_none</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"jmp"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>, <expr><literal type="number">0xA0</literal></expr> , <expr><name>decode_imm16_sh2</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"jmp"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>, <expr><literal type="number">0xA1</literal></expr> , <expr><name>decode_imm16_sh2</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"jmpf"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><literal type="number">0xA4</literal></expr> , <expr><name>decode_ra_i16_sh2</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"jmpf"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><literal type="number">0xA5</literal></expr> , <expr><name>decode_ra_i16_sh2</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"jmpfdec"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><literal type="number">0xB4</literal></expr> , <expr><name>decode_ra_i16_sh2</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"jmpfdec"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><literal type="number">0xB5</literal></expr> , <expr><name>decode_ra_i16_sh2</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"jmpfi"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_RCJMP</name></expr>, <expr><literal type="number">0xC4</literal></expr> , <expr><name>decode_ra_rb</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"jmpi"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_RJMP</name></expr>, <expr><literal type="number">0xC0</literal></expr> , <expr><name>decode_rb</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"jmpt"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>, <expr><literal type="number">0xAC</literal></expr> , <expr><name>decode_ra_i16_sh2</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"jmpti"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_RCJMP</name></expr>, <expr><literal type="number">0xCC</literal></expr> , <expr><name>decode_ra_rb</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29050</name></expr>, <expr><literal type="string">"mfacc"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xE9</literal></expr> , <expr><name>decode_rc_imm</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29050</name></expr>, <expr><literal type="string">"mtacc"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xE8</literal></expr> , <expr><name>decode_ra_imm</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"mfsr"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xC6</literal></expr> , <expr><name>decode_mfsr</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"mftlb"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xB6</literal></expr> , <expr><name>decode_rc_ra</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"mtsr"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xCE</literal></expr> , <expr><name>decode_mtsr</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"mtsrim"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0x04</literal></expr> , <expr><name>decode_ra_imm16</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"mttlb"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xBE</literal></expr> , <expr><name>decode_ra_rb</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"mul"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><literal type="number">0x64</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"mul"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><literal type="number">0x65</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"mull"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><literal type="number">0x66</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"mull"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><literal type="number">0x67</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29050</name></expr>, <expr><literal type="string">"multiplu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><literal type="number">0xE2</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"multiply"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><literal type="number">0xE0</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29050</name></expr>, <expr><literal type="string">"multm"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><literal type="number">0xDE</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29050</name></expr>, <expr><literal type="string">"multmu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><literal type="number">0xDF</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"mulu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><literal type="number">0x74</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"mulu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>, <expr><literal type="number">0x75</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"nand"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><literal type="number">0x9A</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"nand"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_AND</name></expr>, <expr><literal type="number">0x9B</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"nor"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NOR</name></expr>, <expr><literal type="number">0x98</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"nor"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NOR</name></expr>, <expr><literal type="number">0x99</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"or"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><literal type="number">0x92</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"or"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><literal type="number">0x93</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29050</name></expr>, <expr><literal type="string">"orn"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><literal type="number">0xAA</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29050</name></expr>, <expr><literal type="string">"orn"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_OR</name></expr>, <expr><literal type="number">0xAB</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"setip"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0x9E</literal></expr> , <expr><name>decode_ra_rb_rc</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"sll"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SHL</name></expr>, <expr><literal type="number">0x80</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"sll"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SHL</name></expr>, <expr><literal type="number">0x81</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_29050</name></expr>, <expr><literal type="string">"sqrt"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>, <expr><literal type="number">0xE5</literal></expr> , <expr><name>decode_rc_ra_imm</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"sra"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>, <expr><literal type="number">0x86</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"sra"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>, <expr><literal type="number">0x87</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"srl"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SAL</name></expr>, <expr><literal type="number">0x82</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"srl"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SAL</name></expr>, <expr><literal type="number">0x83</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"load"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><literal type="number">0x16</literal></expr> , <expr><name>decode_load_store</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"load"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><literal type="number">0x17</literal></expr> , <expr><name>decode_load_store</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"loadl"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><literal type="number">0x06</literal></expr> , <expr><name>decode_load_store</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"loadl"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><literal type="number">0x07</literal></expr> , <expr><name>decode_load_store</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"loadm"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><literal type="number">0x36</literal></expr> , <expr><name>decode_load_store</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"loadm"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><literal type="number">0x37</literal></expr> , <expr><name>decode_load_store</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"loadset"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><literal type="number">0x26</literal></expr> , <expr><name>decode_load_store</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"loadset"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>, <expr><literal type="number">0x27</literal></expr> , <expr><name>decode_load_store</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"store"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><literal type="number">0x1E</literal></expr> , <expr><name>decode_load_store</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"store"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><literal type="number">0x1F</literal></expr> , <expr><name>decode_load_store</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"storel"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><literal type="number">0x0E</literal></expr> , <expr><name>decode_load_store</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"storel"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><literal type="number">0x0F</literal></expr> , <expr><name>decode_load_store</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"storem"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><literal type="number">0x3E</literal></expr> , <expr><name>decode_load_store</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"storem"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>, <expr><literal type="number">0x3F</literal></expr> , <expr><name>decode_load_store</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"sub"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x24</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"sub"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x25</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subc"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x2C</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subc"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x2D</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subcs"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x28</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subcs"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x29</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subcu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x2A</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subcu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x2B</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subr"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x34</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subr"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x35</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subrc"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x3C</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subrc"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x3D</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subrcs"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x38</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subrcs"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x39</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subrcu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x3A</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subrcu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x3B</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subrs"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x30</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subrs"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x31</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subru"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x32</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subru"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x33</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subs"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x20</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subs"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x21</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x22</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"subu"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>, <expr><literal type="number">0x23</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"xnor"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_XOR</name></expr>, <expr><literal type="number">0x96</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"xnor"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_XOR</name></expr>, <expr><literal type="number">0x97</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"xor"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_XOR</name></expr>, <expr><literal type="number">0x94</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>CPU_ANY</name></expr>, <expr><literal type="string">"xor"</literal></expr>, <expr><name>R_ANAL_OP_TYPE_XOR</name></expr>, <expr><literal type="number">0x95</literal></expr> , <expr><name>decode_ra_rb_rci</name></expr> , <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>amd29k_instr_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>buffer_size</name></decl></parameter>, <parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>cpu</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <name>buffer_size</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>!</operator><name>instruction</name> <operator>||</operator> <operator>(</operator><name>cpu</name> <operator>&amp;&amp;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>cpu</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cpu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cpu</name> <operator>=</operator> <name>CPU_29000</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x70</literal> <operator>&amp;&amp;</operator> <name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator> <name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x01</literal> <operator>&amp;&amp;</operator> <name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_none</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <literal type="string">"nop"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instruction</name><operator>-&gt;</operator><name>op_type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N_AMD29K_INSTRUCTIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>amd29k_instruction_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>&amp;</operator><name><name>amd29k_instructions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>cpu</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>in</name><operator>-&gt;</operator><name>decode</name></name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>mnemonic</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instruction</name><operator>-&gt;</operator><name>op_type</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>op_type</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>cpu</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>cpu</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>in</name><operator>-&gt;</operator><name>decode</name></name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>mnemonic</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instruction</name><operator>-&gt;</operator><name>op_type</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>op_type</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>cpu</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>cpu</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'5'</literal> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>in</name><operator>-&gt;</operator><name>decode</name></name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>mnemonic</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instruction</name><operator>-&gt;</operator><name>op_type</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>op_type</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMD29K_IS_6</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(t0==(a)&amp;&amp;t1==(b)&amp;&amp;t2==(c)&amp;&amp;t3==(d)&amp;&amp;t4==(e)&amp;&amp;t5==(f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMD29K_IS_1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AMD29K_IS_6(a,(AMD29K_TYPE_UNK),(AMD29K_TYPE_UNK),(AMD29K_TYPE_UNK),(AMD29K_TYPE_UNK),(AMD29K_TYPE_UNK))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMD29K_IS_2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AMD29K_IS_6(a,b,(AMD29K_TYPE_UNK),(AMD29K_TYPE_UNK),(AMD29K_TYPE_UNK),(AMD29K_TYPE_UNK))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMD29K_IS_3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AMD29K_IS_6(a,b,c,(AMD29K_TYPE_UNK),(AMD29K_TYPE_UNK),(AMD29K_TYPE_UNK))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMD29K_IS_4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AMD29K_IS_6(a,b,c,d,(AMD29K_TYPE_UNK),(AMD29K_TYPE_UNK))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMD29K_IS_5</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AMD29K_IS_6(a,b,c,d,e,(AMD29K_TYPE_UNK))</cpp:value></cpp:define>

<function><type><name>bool</name></type> <name>amd29k_instr_is_ret</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>instruction</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"calli"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>instruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <name><name>instruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>ut64</name></type> <name>amd29k_instr_jump</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>instruction</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>UT64_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name> <init>= <expr><call><name>AMD29K_GET_TYPE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t1</name> <init>= <expr><call><name>AMD29K_GET_TYPE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t2</name> <init>= <expr><call><name>AMD29K_GET_TYPE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t3</name> <init>= <expr><call><name>AMD29K_GET_TYPE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t4</name> <init>= <expr><call><name>AMD29K_GET_TYPE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t5</name> <init>= <expr><call><name>AMD29K_GET_TYPE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v0</name> <init>= <expr><call><name>AMD29K_GET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v1</name> <init>= <expr><call><name>AMD29K_GET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>AMD29K_IS_1</name> <argument_list>(<argument><expr><name>AMD29K_TYPE_JMP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>address</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>v0</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>AMD29K_IS_2</name> <argument_list>(<argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_JMP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>address</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>v1</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>UT64_MAX</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>amd29k_instr_print</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>string_size</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>string</name> <operator>||</operator> <name>string_size</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>instruction</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name> <init>= <expr><call><name>AMD29K_GET_TYPE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t1</name> <init>= <expr><call><name>AMD29K_GET_TYPE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t2</name> <init>= <expr><call><name>AMD29K_GET_TYPE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t3</name> <init>= <expr><call><name>AMD29K_GET_TYPE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t4</name> <init>= <expr><call><name>AMD29K_GET_TYPE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t5</name> <init>= <expr><call><name>AMD29K_GET_TYPE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v0</name> <init>= <expr><call><name>AMD29K_GET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v1</name> <init>= <expr><call><name>AMD29K_GET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v2</name> <init>= <expr><call><name>AMD29K_GET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v3</name> <init>= <expr><call><name>AMD29K_GET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v4</name> <init>= <expr><call><name>AMD29K_GET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v5</name> <init>= <expr><call><name>AMD29K_GET_VALUE</name> <argument_list>(<argument><expr><name>instruction</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AMD29K_IS_1</name> <argument_list>(<argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p0</name> <init>= <expr><call><name>AMD29K_REGNAME</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string_size</name></expr></argument>, <argument><expr><literal type="string">"%s %s%d"</literal></expr></argument>, <argument><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><call><name>AMD29K_LR</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>AMD29K_IS_1</name> <argument_list>(<argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>v0</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string_size</name></expr></argument>, <argument><expr><literal type="string">"%s 0x%x"</literal></expr></argument>, <argument><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>v0</name> <operator>=</operator> <literal type="number">0</literal> <operator>-</operator> <name>v0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string_size</name></expr></argument>, <argument><expr><literal type="string">"%s -0x%x"</literal></expr></argument>, <argument><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>AMD29K_IS_1</name> <argument_list>(<argument><expr><name>AMD29K_TYPE_JMP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>ptr</name> <init>= <expr><name>address</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>v0</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string_size</name></expr></argument>, <argument><expr><literal type="string">"%s 0x%"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>AMD29K_IS_2</name> <argument_list>(<argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p0</name> <init>= <expr><call><name>AMD29K_REGNAME</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>AMD29K_REGNAME</name> <argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string_size</name></expr></argument>, <argument><expr><literal type="string">"%s %s%d %s%d"</literal></expr></argument>, <argument><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><call><name>AMD29K_LR</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><call><name>AMD29K_LR</name> <argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>AMD29K_IS_2</name> <argument_list>(<argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p0</name> <init>= <expr><call><name>AMD29K_REGNAME</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v1</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string_size</name></expr></argument>, <argument><expr><literal type="string">"%s %s%d 0x%x"</literal></expr></argument>, <argument><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><call><name>AMD29K_LR</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <literal type="number">0</literal> <operator>-</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string_size</name></expr></argument>, <argument><expr><literal type="string">"%s %s%d -0x%x"</literal></expr></argument>, <argument><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><call><name>AMD29K_LR</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>AMD29K_IS_2</name> <argument_list>(<argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_JMP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p0</name> <init>= <expr><call><name>AMD29K_REGNAME</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>ptr</name> <init>= <expr><name>address</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>v1</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string_size</name></expr></argument>, <argument><expr><literal type="string">"%s %s%d 0x%"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><call><name>AMD29K_LR</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>AMD29K_IS_3</name> <argument_list>(<argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p0</name> <init>= <expr><call><name>AMD29K_REGNAME</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>AMD29K_REGNAME</name> <argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p2</name> <init>= <expr><call><name>AMD29K_REGNAME</name> <argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string_size</name></expr></argument>, <argument><expr><literal type="string">"%s %s%d %s%d %s%d"</literal></expr></argument>, <argument><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><call><name>AMD29K_LR</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><call><name>AMD29K_LR</name> <argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><call><name>AMD29K_LR</name> <argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>AMD29K_IS_3</name> <argument_list>(<argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p0</name> <init>= <expr><call><name>AMD29K_REGNAME</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>AMD29K_REGNAME</name> <argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string_size</name></expr></argument>, <argument><expr><literal type="string">"%s %s%d %s%d 0x%x"</literal></expr></argument>, <argument><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><call><name>AMD29K_LR</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><call><name>AMD29K_LR</name> <argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <literal type="number">0</literal> <operator>-</operator> <name>v2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string_size</name></expr></argument>, <argument><expr><literal type="string">"%s %s%d %s%d -0x%x"</literal></expr></argument>, <argument><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><call><name>AMD29K_LR</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><call><name>AMD29K_LR</name> <argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>AMD29K_IS_4</name> <argument_list>(<argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p2</name> <init>= <expr><call><name>AMD29K_REGNAME</name> <argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p3</name> <init>= <expr><call><name>AMD29K_REGNAME</name> <argument_list>(<argument><expr><name>v3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string_size</name></expr></argument>, <argument><expr><literal type="string">"%s %d %d %s%d %s%d"</literal></expr></argument>, <argument><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><call><name>AMD29K_LR</name> <argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><call><name>AMD29K_LR</name> <argument_list>(<argument><expr><name>v3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>AMD29K_IS_6</name> <argument_list>(<argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_REG</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>, <argument><expr><name>AMD29K_TYPE_IMM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p0</name> <init>= <expr><call><name>AMD29K_REGNAME</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>AMD29K_REGNAME</name> <argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string_size</name></expr></argument>, <argument><expr><literal type="string">"%s %s%d %s%d %d %d %d %d"</literal></expr></argument>, <argument><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><call><name>AMD29K_LR</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><call><name>AMD29K_LR</name> <argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>, <argument><expr><name>v4</name></expr></argument>, <argument><expr><name>v5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string_size</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AMD29K_IS_6</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AMD29K_IS_1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AMD29K_IS_2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AMD29K_IS_3</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AMD29K_IS_4</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AMD29K_IS_5</name></cpp:undef></unit>
