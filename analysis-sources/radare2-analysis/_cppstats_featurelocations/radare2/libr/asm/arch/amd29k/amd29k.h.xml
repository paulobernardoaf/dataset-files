<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\amd29k\amd29k.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASM_AMD_29K_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_AMD_29K_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPU_29000</name></cpp:macro> <cpp:value>"29000"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPU_29050</name></cpp:macro> <cpp:value>"29050"</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>amd29k_instr_s</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>mnemonic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>op_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name><name>operands</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>type</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>amd29k_instr_t</name>;</typedef>

<function_decl><type><name>bool</name></type> <name>amd29k_instr_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>buffer_size</name></decl></parameter>, <parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>cpu</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>amd29k_instr_print</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>string_size</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>amd29k_instr_is_ret</name><parameter_list>(<parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ut64</name></type> <name>amd29k_instr_jump</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>amd29k_instr_t</name><modifier>*</modifier></type> <name>instruction</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></unit>
