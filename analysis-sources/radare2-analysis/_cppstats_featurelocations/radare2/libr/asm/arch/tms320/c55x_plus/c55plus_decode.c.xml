<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\tms320\c55x_plus\c55plus_decode.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hashtable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode_funcs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ins_str</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ut32</name></type> <name>ins_buff_len</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>get_q_bits</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ins</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>ins_len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>err_code</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>ins</name></expr></argument>, <argument><expr><literal type="string">"q_MMAP"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>ins</name></expr></argument>, <argument><expr><literal type="string">"q_LOCK"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>ins</name></expr></argument>, <argument><expr><literal type="string">"q_LINR"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>ins</name></expr></argument>, <argument><expr><literal type="string">"q_CIRC"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>ins</name></expr></argument>, <argument><expr><literal type="string">"q_PORT_READ"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>ins</name></expr></argument>, <argument><expr><literal type="string">"q_PORT_WRITE"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>ins</name></expr></argument>, <argument><expr><literal type="string">"q_XPORT_READ"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>ins</name></expr></argument>, <argument><expr><literal type="string">"q_XPORT_WRITE"</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>ins</name></expr></argument>, <argument><expr><literal type="string">"q_SAT"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>ins</name></expr></argument>, <argument><expr><literal type="string">"q_XC0"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>ins</name></expr></argument>, <argument><expr><literal type="string">"q_XC1"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid token %s\n"</literal></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>err_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>ut32</name></type> <name>get_ins_bits</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>hash_code</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>ins_pos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ins</name></decl></parameter>,
<parameter><decl><type><name>ut32</name></type> <name>ins_len</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>magic_value</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>err_code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>op_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>aux</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ins</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>get_q_bits</name> <argument_list>(<argument><expr><name>magic_value</name></expr></argument>, <argument><expr><name>ins</name></expr></argument>, <argument><expr><name>ins_len</name></expr></argument>, <argument><expr><name>err_code</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>op_str</name> <operator>=</operator> <name><name>ins_str</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>hash_code</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ins_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op_str</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ins</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>aux</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>op_str</name></expr></argument>, <argument><expr><name><name>ins</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>aux</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid token %s\n"</literal></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>err_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>aux</name> <operator>-</operator> <name>op_str</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>op_b</name> <operator>=</operator> <call><name>get_ins_part</name><argument_list>(<argument><expr><name>ins_pos</name> <operator>+</operator> <name>len</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>op_b</name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><literal type="number">1023</literal> <operator>-</operator> <name>len</name><operator>)</operator> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>op_str</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>C55PLUS_DEBUG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"INS_BITS =&gt; 0x%x\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_arg</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>ins_bits</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>err_code</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ins_bits</name> <operator>&lt;=</operator> <literal type="number">31</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>ins_bits</name> <operator>&gt;=</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <name>ins_bits</name> <operator>&lt;</operator> <literal type="number">160</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ins_bits</name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>ins_bits</name> <operator>&lt;=</operator> <literal type="number">252</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid arg: %u\n"</literal></expr></argument>, <argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>decode_regis</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reg_arg</name></decl></parameter>, <parameter><decl><type><name>st32</name></type> <name>hash_code</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>ins_bits</name></decl></parameter>,
<parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>ret_ins_bits</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>err_code</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>reg_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg_type</name> <operator>=</operator> <operator>*</operator><name>reg_arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<switch>switch <condition>(<expr><name>reg_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">33</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_reg_name_1</name><argument_list>(<argument><expr><operator>(</operator><name>ins_bits</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>ins_bits</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">100</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"d(ALLx"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"invalid register! %s\n"</literal></expr></argument>, <argument><expr><name>reg_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>check_arg</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>, <argument><expr><name>err_code</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>err_code</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"dbl("</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>err_code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">41</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">")ALLx"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"invalid register! %s\n"</literal></expr></argument>, <argument><expr><name>reg_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>check_arg</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>, <argument><expr><name>err_code</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>err_code</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>err_code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">65</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"ACLH"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_reg_name_1</name><argument_list>(<argument><expr><name>ins_bits</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"ACxP"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_reg_name_1</name><argument_list>(<argument><expr><name>ins_bits</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"ACx"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"ADR"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> 
)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_reg_name_1</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hash_code</name> <operator>==</operator> <literal type="number">0xDF</literal> <operator>||</operator> <name>hash_code</name> <operator>==</operator> <literal type="number">0xE0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ret_ins_bits</name> <operator>=</operator> <name>ins_bits</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">68</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_reg_name_1</name><argument_list>(<argument><expr><name>ins_bits</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">77</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"MA"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"MR"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_reg_name_1</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_reg_name_2</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">83</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_reg_name_1</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">82</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"RA"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"RL"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_reg_name_1</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"RLP"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"RxP"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_reg_name_1</name><argument_list>(<argument><expr><name>ins_bits</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"RX"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_reg_name_1</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_reg_name_2</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">84</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_reg_name_1</name><argument_list>(<argument><expr><name>ins_bits</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">87</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"WD"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_reg_name_2</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"WA"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_reg_name_1</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">88</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"XR"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_reg_name_3</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"XD"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_reg_name_2</name><argument_list>(<argument><expr><name>ins_bits</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>decode_ins</name><parameter_list>(<parameter><decl><type><name>st32</name></type> <name>hash_code</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>ins_pos</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>ins_off</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>ins_len_dec</name></decl></parameter>,
<parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>reg_len_dec</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>ret_ins_bits</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>magic_value</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>two_ins</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>err_code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>ins_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ins</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>token_aux</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res_decode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>ins_len</name> <operator>=</operator> <call><name>get_ins_len</name><argument_list>(<argument><expr><call><name>get_ins_part</name><argument_list>(<argument><expr><name>ins_pos</name> <operator>+</operator> <name>ins_off</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ins</name> <operator>=</operator> <name><name>ins_str</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>hash_code</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid instruction %s /hash %x\n"</literal></expr></argument>, <argument><expr><name>ins</name></expr></argument>, <argument><expr><name>hash_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hash_code</name> <operator>==</operator> <literal type="number">0x19C</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res_decode</name> <operator>=</operator> <call><name>get_token_decoded</name><argument_list>(<argument><expr><name>hash_code</name></expr></argument>, <argument><expr><literal type="string">"MMMMxxxxmm"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ret_ins_bits</name></expr></argument>,
<argument><expr><name>reg_len_dec</name></expr></argument>, <argument><expr><name>magic_value</name></expr></argument>, <argument><expr><name>ins_pos</name> <operator>+</operator> <name>ins_off</name></expr></argument>, <argument><expr><name>ins_len</name></expr></argument>, <argument><expr><name>two_ins</name></expr></argument>, <argument><expr><name>err_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>err_code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>C55PLUS_DEBUG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"PSEUDO INS %s\n"</literal></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>ins</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ins_len_dec</name> <operator>=</operator> <name>ins_len</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>pos</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>==</operator> <literal type="char">'`'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="char">'`'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>aux</name> <operator>||</operator> <name>pos</name> <operator>==</operator> <name>aux</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid instruction %s\n"</literal></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res_decode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>aux</name><operator>-</operator><name>pos</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid length token %d\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res_decode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>token_aux</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>token_aux</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>aux</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>C55PLUS_DEBUG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"TOKEN AUX: %s\n"</literal></expr></argument>, <argument><expr><name>token_aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>token_aux</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>token_aux</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>token_aux</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <operator>&amp;</operator><name><name>token_aux</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>C55PLUS_DEBUG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"REG : %s\n"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>get_token_decoded</name><argument_list>(<argument><expr><name>hash_code</name></expr></argument>, <argument><expr><name>token_aux</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>ret_ins_bits</name></expr></argument>,
<argument><expr><name>reg_len_dec</name></expr></argument>, <argument><expr><name>magic_value</name></expr></argument>, <argument><expr><name>ins_pos</name> <operator>+</operator> <name>ins_off</name></expr></argument>, <argument><expr><name>ins_len</name></expr></argument>, <argument><expr><name>two_ins</name></expr></argument>, <argument><expr><name>err_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>err_code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>res_decode</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>res_decode</name></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>C55PLUS_DEBUG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"RET TOKEN %s\n"</literal></expr></argument>, <argument><expr><name>res_decode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>token_aux</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>token_aux</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res_decode</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>res_decode</name></expr></argument>, <argument><expr><name>token_aux</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>C55PLUS_DEBUG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"RESULT DECODE: %s\n"</literal></expr></argument>, <argument><expr><name>res_decode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res_decode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_hash</name><parameter_list>(<parameter><decl><type><name>st32</name></type> <name>hash_code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>hash_code</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0xE8</literal></expr>:</case>
<case>case <expr><literal type="number">0xE9</literal></expr>:</case>
<case>case <expr><literal type="number">0xEA</literal></expr>:</case>
<case>case <expr><literal type="number">0xEC</literal></expr>:</case>
<case>case <expr><literal type="number">0x1A8</literal></expr>:</case>
<case>case <expr><literal type="number">0x1DC</literal></expr>:</case>
<case>case <expr><literal type="number">0x1E1</literal></expr>:</case>
<case>case <expr><literal type="number">0x1E2</literal></expr>:</case>
<case>case <expr><literal type="number">0x1E3</literal></expr>:</case>
<case>case <expr><literal type="number">0x1E4</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_magic_value</name><parameter_list>(<parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>magic_value</name></decl></parameter>, <parameter><decl><type><name>st32</name></type> <name>hash_code</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>err_code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>hash_code</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">232</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>magic_value</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">424</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>magic_value</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">236</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>magic_value</name> <operator>|=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">233</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>magic_value</name> <operator>|=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">234</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>magic_value</name> <operator>|=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">483</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>magic_value</name> <operator>|=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">484</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>magic_value</name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">476</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>magic_value</name> <operator>|=</operator> <literal type="number">0x100</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">481</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>magic_value</name> <operator>|=</operator> <literal type="number">0x200</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">482</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>magic_value</name> <operator>|=</operator> <literal type="number">0x400</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"invalid hash code 0x%x for magic value 0x%x\n"</literal></expr></argument>, <argument><expr><name>hash_code</name></expr></argument>, <argument><expr><operator>*</operator><name>magic_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>do_decode</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>ins_off</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>ins_pos</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>two_ins</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>next_ins_pos</name></decl></parameter>,
<parameter><decl><type><name>st32</name> <modifier>*</modifier></type><name>ins_hash_code</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>err_code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>st32</name></type> <name>hash_code</name></decl>, <decl><type ref="prev"/><name>hash_aux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>reg_len_dec</name></decl>, <decl><type ref="prev"/><name>ins_len_dec</name></decl>, <decl><type ref="prev"/><name>ret_ins_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ins_res</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ins_aux</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>magic_value</name> <init>= <expr><literal type="number">0x800</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>next_ins_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg_len_dec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret_ins_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ins_len_dec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hash_code</name> <operator>=</operator> <call><name>get_hash_code</name><argument_list>(<argument><expr><name>ins_pos</name> <operator>+</operator> <name>ins_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_hash</name><argument_list>(<argument><expr><name>hash_code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hash_aux</name> <operator>=</operator> <name>hash_code</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ins_off</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_magic_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>magic_value</name></expr></argument>, <argument><expr><name>hash_code</name></expr></argument>, <argument><expr><name>err_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>err_code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hash_code</name> <operator>=</operator> <call><name>get_hash_code</name><argument_list>(<argument><expr><name>ins_pos</name> <operator>+</operator> <name>ins_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>next_ins_pos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>hash_aux</name> <operator>=</operator> <literal type="number">0x223</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ins_hash_code</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ins_hash_code</name> <operator>=</operator> <name>hash_code</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>C55PLUS_DEBUG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"MAGIC VALUE 0x%x\n"</literal></expr></argument>, <argument><expr><literal type="number">0x800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hash_aux</name> <operator>==</operator> <literal type="number">0x1E1</literal> <operator>||</operator> <name>hash_aux</name> <operator>==</operator> <literal type="number">0x1E2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ins_aux</name> <operator>=</operator> <call><name>decode_ins</name><argument_list>(<argument><expr><name>hash_aux</name></expr></argument>, <argument><expr><name>ins_pos</name></expr></argument>, <argument><expr><name>ins_off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ins_len_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg_len_dec</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ret_ins_bits</name></expr></argument>, <argument><expr><name>magic_value</name></expr></argument>, <argument><expr><name>two_ins</name></expr></argument>, <argument><expr><name>err_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>err_code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ins_aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>ins_aux</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hash_code</name> <operator>==</operator> <literal type="number">0x223</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ins_res</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>ins_aux</name></expr></argument>, <argument><expr><literal type="string">".byte 0x"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ins_aux</name> <operator>=</operator> <call><name>get_hex_str</name><argument_list>(<argument><expr><call><name>get_ins_part</name><argument_list>(<argument><expr><name>ins_pos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ins_res</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>ins_res</name></expr></argument>, <argument><expr><name>ins_aux</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>next_ins_pos</name> <operator>=</operator> <operator>*</operator><name>next_ins_pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ins_aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ins_aux</name> <operator>=</operator> <call><name>decode_ins</name><argument_list>(<argument><expr><name>hash_code</name></expr></argument>, <argument><expr><name>ins_pos</name></expr></argument>, <argument><expr><name>ins_off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ins_len_dec</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>reg_len_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret_ins_bits</name></expr></argument>, <argument><expr><name>magic_value</name></expr></argument>, <argument><expr><name>two_ins</name></expr></argument>, <argument><expr><name>err_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>err_code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ins_aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ins_res</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>ins_aux</name></expr></argument>, <argument><expr><name>ins_res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>next_ins_pos</name> <operator>+=</operator> <name>ins_len_dec</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ins_res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>c55plus_decode</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>ins_pos</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>next_ins_pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name></decl>, <decl><type ref="prev"/><name>two_ins</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>next_ins1_pos</name></decl>, <decl><type ref="prev"/><name>next_ins2_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st32</name></type> <name>hash_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ins1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ins2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>aux</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ins_res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err_code</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ins_pos</name> <operator>&gt;=</operator> <name>ins_buff_len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ins_res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err_code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>get_ins_part</name><argument_list>(<argument><expr><name>ins_pos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x30</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>two_ins</name> <operator>=</operator> <name>opcode</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>two_ins</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>two_ins</name> <operator>+=</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>two_ins</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>two_ins</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ins1</name> <operator>=</operator> <call><name>do_decode</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ins_pos</name></expr></argument>, <argument><expr><name>two_ins</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_ins1_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hash_code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err_code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ins1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ins2</name> <operator>=</operator> <call><name>do_decode</name><argument_list>(<argument><expr><name>next_ins1_pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ins_pos</name></expr></argument>, <argument><expr><name>two_ins</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_ins2_pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err_code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ins1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ins2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>next_ins_pos</name> <operator>=</operator> <name>next_ins2_pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hash_code</name> <operator>==</operator> <literal type="number">0xF0</literal> <operator>||</operator> <name>hash_code</name> <operator>==</operator> <literal type="number">0xF1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>ins2</name></expr></argument>, <argument><expr><literal type="string">" || "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ins_res</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><name>ins1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ins1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>ins1</name></expr></argument>, <argument><expr><literal type="string">" || "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ins_res</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><name>ins2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ins2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>next_ins_pos</name> <operator>=</operator> <name>next_ins1_pos</name> <operator>+</operator> <name>next_ins2_pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>next_ins_pos</name> <operator>!=</operator> <name>two_ins</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ins_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ins_res</name> <operator>=</operator> <call><name>do_decode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ins_pos</name></expr></argument>, <argument><expr><name>two_ins</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_ins1_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hash_code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err_code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ins_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>next_ins_pos</name> <operator>=</operator> <name>next_ins1_pos</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ins_res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_linear_circular</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>ins_bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>op</name></decl>, <decl><type ref="prev"/><name>op2</name></decl>, <decl><type ref="prev"/><name>op3</name></decl>;</decl_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <operator>(</operator><name>ins_bits</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <literal type="number">16</literal> <operator>*</operator> <operator>(</operator><name>ins_bits</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>op2</name> <operator>=</operator> <operator>(</operator><name>ins_bits</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>op3</name> <operator>=</operator> <name>op2</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>op</name> <operator>==</operator> <literal type="number">26</literal> <operator>||</operator> <name>op</name> <operator>==</operator> <literal type="number">30</literal> <operator>||</operator> <operator>(</operator><name>op3</name> <operator>&gt;</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name>op3</name> <operator>!=</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>get_token_decoded</name><parameter_list>(<parameter><decl><type><name>st32</name></type> <name>hash_code</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ins_token</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>ins_token_len</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reg_arg</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>ret_ins_bits</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>ret_reg_len</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>magic_value</name></decl></parameter>,
<parameter><decl><type><name>ut32</name></type> <name>ins_pos</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>ins_len</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>two_ins</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>err_code</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>tok_op</name></decl>, <decl><type ref="prev"/><name>ins_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff_aux</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>ret_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>flag</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_ins_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret_reg_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ins_bits</name> <operator>=</operator> <call><name>get_ins_bits</name><argument_list>(<argument><expr><name>hash_code</name></expr></argument>, <argument><expr><name>ins_pos</name></expr></argument>, <argument><expr><name>ins_token</name></expr></argument>, <argument><expr><name>ins_token_len</name></expr></argument>, <argument><expr><name>magic_value</name></expr></argument>, <argument><expr><name>err_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>err_code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tok_op</name> <operator>=</operator> <operator>*</operator><name>ins_token</name> <operator>-</operator> <literal type="number">0x23</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>C55PLUS_DEBUG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"WAY ins_bits: OP = %d 0x%x %s %d %d\n"</literal></expr></argument>, <argument><expr><name>tok_op</name></expr></argument>, <argument><expr><name>ins_bits</name></expr></argument>, <argument><expr><name>ins_token</name></expr></argument>, <argument><expr><name>ins_token_len</name></expr></argument>, <argument><expr><name>ins_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>tok_op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">30</literal></expr>:</case>
<case>case <expr><literal type="number">31</literal></expr>:</case>
<case>case <expr><literal type="number">32</literal></expr>:</case>
<case>case <expr><literal type="number">33</literal></expr>:</case>
<case>case <expr><literal type="number">43</literal></expr>:</case>
<case>case <expr><literal type="number">62</literal></expr>:</case>
<case>case <expr><literal type="number">63</literal></expr>:</case>
<case>case <expr><literal type="number">64</literal></expr>:</case>
<case>case <expr><literal type="number">65</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg_arg</name> <operator>||</operator> <operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"&lt;register&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>ret_decode</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>decode_regis</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><name>hash_code</name></expr></argument>, <argument><expr><name>ins_bits</name></expr></argument>, <argument><expr><name>ret_ins_bits</name></expr></argument>, <argument><expr><name>err_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>err_code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">35</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><name>ins_bits</name></expr>?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">" || far()"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">36</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><name>ins_bits</name></expr>?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">" || local()"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">37</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_opers</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">38</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><name>ins_bits</name></expr>?</condition><then> <expr><literal type="string">"lo"</literal></expr> </then><else>: <expr><literal type="string">"hi"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">39</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_cmp_op</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">40</literal></expr>:</case>
<case>case <expr><literal type="number">48</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff_aux</name></expr></argument>, <argument><expr><literal type="string">"#0x%x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ins_bits</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>ins_token_len</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>ins_token_len</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>buff_aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">70</literal></expr>:</case>
<case>case <expr><literal type="number">72</literal></expr>:</case>
<case>case <expr><literal type="number">80</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>reg_arg</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_reg_pair</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"ST"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_status_regs_and_bits</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hash_code</name> <operator>==</operator> <literal type="number">0xDF</literal> <operator>||</operator> <name>hash_code</name> <operator>==</operator> <literal type="number">0xE0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ret_ins_bits</name> <operator>=</operator> <name>ins_bits</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg_arg</name> <operator>||</operator> <operator>*</operator><name>reg_arg</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff_aux</name></expr></argument>, <argument><expr><literal type="string">"#0x%lx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff_aux</name></expr></argument>, <argument><expr><literal type="string">"-#0x%lx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>buff_aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg_arg</name> <operator>||</operator> <operator>*</operator><name>reg_arg</name> <operator>!=</operator> <literal type="char">'m'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><literal type="string">"*("</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>magic_value</name> <operator>&amp;</operator> <literal type="number">0xC0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><literal type="string">"volatile("</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>magic_value</name> <operator>&amp;</operator> <literal type="number">0x30</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><literal type="string">"port("</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">41</literal></expr>:</case>
<case>case <expr><literal type="number">73</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg_arg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">'L'</literal><operator>)</operator> <operator>||</operator> <name>hash_code</name> <operator>==</operator> <literal type="number">105</literal> <operator>||</operator> <name>hash_code</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>C55PLUS_DEBUG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Ooops!!! look up address in sections!! %d"</literal></expr></argument>, <argument><expr><name>hash_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_arg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ins_bits</name> <operator>=</operator> <name>ins_bits</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>ins_token_len</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>ins_token_len</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_arg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff_aux</name></expr></argument>, <argument><expr><literal type="string">"#0x%06lx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>buff_aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">42</literal></expr>:</case>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_arg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">'3'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>ins_bits</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ins_bits</name> <operator>=</operator> <name>ins_bits</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_arg</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>magic_value</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>get_sim_reg</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reg_arg</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>reg_arg</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name>reg_arg</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'!'</literal></expr>:</case>

<expr_stmt><expr><name>reg_arg</name><operator>+=</operator><literal type="number">10</literal></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>get_AR_regs_class2</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret_len</name></expr></argument>, <argument><expr><name>ins_len</name> <operator>+</operator> <name>ins_pos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>magic_value</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><literal type="string">"mmap("</literal></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>magic_value</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>is_linear_circular</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><literal type="string">"linear("</literal></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>magic_value</name> <operator>&amp;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>is_linear_circular</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><literal type="string">"circular("</literal></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>magic_value</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><literal type="string">"lock("</literal></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reg_arg</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>magic_value</name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>magic_value</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><literal type="string">"port("</literal></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(
<expr><operator>(</operator><operator>(</operator><name>magic_value</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>magic_value</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><literal type="string">"volatile("</literal></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><literal type="string">"t3 = "</literal></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>aux</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret_reg_len</name> <operator>=</operator> <name>ret_len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">79</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_trans_reg</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">49</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>reg_arg</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_tc2_tc1</name><argument_list>(<argument><expr><name>ins_bits</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">'2'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_tc2_tc1</name> <argument_list>(<argument><expr><name>ins_bits</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_tc2_tc1</name> <argument_list>(<argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">52</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ins_bits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_arg</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">'H'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"hi("</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"lo("</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"dbl("</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"&lt;W&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"&lt;W !flags&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">53</literal></expr>:</case>
<case>case <expr><literal type="number">54</literal></expr>:</case>
<case>case <expr><literal type="number">55</literal></expr>:</case>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_arg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">'3'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>ins_bits</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ins_bits</name> <operator>=</operator> <name>ins_bits</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_arg</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>get_AR_regs_class1</name><argument_list>(<argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tok_op</name> <operator>=</operator> <name>ins_bits</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>magic_value</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tok_op</name> <operator>&lt;=</operator> <literal type="number">7</literal> <operator>||</operator> <name>tok_op</name> <operator>==</operator> <literal type="number">0xF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><literal type="string">"linear("</literal></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>magic_value</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tok_op</name> <operator>&lt;=</operator> <literal type="number">7</literal> <operator>||</operator> <name>tok_op</name> <operator>==</operator> <literal type="number">0xF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><literal type="string">"circular("</literal></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>magic_value</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><literal type="string">"lock("</literal></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reg_arg</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(
<expr><operator>(</operator><operator>(</operator><name>magic_value</name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>ins_token</name> <operator>==</operator> <literal type="char">'X'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator>
<operator>(</operator><operator>(</operator><name>magic_value</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>ins_token</name> <operator>==</operator> <literal type="char">'Y'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>
)</condition> <block>{<block_content>

<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><literal type="string">"port("</literal></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(
<expr><operator>(</operator><operator>(</operator><name>magic_value</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>ins_token</name> <operator>==</operator> <literal type="char">'X'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator>
<operator>(</operator><operator>(</operator><name>magic_value</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>ins_token</name> <operator>==</operator> <literal type="char">'Y'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>

)</condition> <block>{<block_content>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strcat_dup</name><argument_list>(<argument><expr><literal type="string">"volatile("</literal></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><name>flag</name></expr>?</condition><then> <expr><call><name>strcat_dup</name> <argument_list>(<argument><expr><literal type="string">"t3 = "</literal></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>aux</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins_bits</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg_arg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"U"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"uns("</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"&lt;$/#&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins_bits</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg_arg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"R"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"rnd("</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"&lt;%&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins_bits</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>reg_arg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"F"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"frct("</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"&lt;%&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"&lt;/&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">29</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins_bits</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg_arg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"saturate"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"saturate("</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"&lt;saturate&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ins_bits</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"t3 = "</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">17</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins_bits</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg_arg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"40"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"m40("</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>reg_arg</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"&lt;4&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">78</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name>ins_token</name></expr></argument>, <argument><expr><literal type="string">"q_SAT"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><name>ins_bits</name></expr>?</condition><then> <expr><literal type="string">"s"</literal></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>ins_token</name></expr></argument>, <argument><expr><literal type="string">"q_CIRC"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><name>ins_bits</name></expr>?</condition><then> <expr><literal type="string">".cr"</literal></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name><argument_list>(<argument><expr><name>ins_token</name></expr></argument>, <argument><expr><literal type="string">"q_LINR"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><name>ins_bits</name></expr>?</condition><then> <expr><literal type="string">".lr"</literal></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid instruction %s\n!"</literal></expr></argument>, <argument><expr><name>ins_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>C55PLUS_DEBUG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OP(78): TOKEN=%s\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<label><name>ret_decode</name>:</label>
<if_stmt><if>if <condition>(<expr><name>C55PLUS_DEBUG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"RES = %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>res</name><operator>)</operator></expr> ?</condition><then> <expr><name>res</name></expr> </then><else>:<expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
