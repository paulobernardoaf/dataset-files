<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\tms320\c55x_plus\decode_funcs.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_tc2_tc1</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>ins_bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><literal type="string">"tc1"</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ins_bits</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ins_bits</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid instruction TC2 or TC1 (%d)\n"</literal></expr></argument>, <argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"tc2"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_trans_reg</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>ins_bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>ins_bits</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"trn0"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"trn1"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"trn2"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"trn3"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"trn4"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"trn5"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"trn6"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"trn7"</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid transaction instruction 0x%x\n"</literal></expr></argument>, <argument><expr><name>ins_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><ternary><condition><expr><name>res</name></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_AR_regs_class1</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>ins_bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>op</name> <init>= <expr><operator>(</operator><name>ins_bits</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*ar-%ld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>ins_bits</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*ar+%ld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>ins_bits</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*ar%ld(t0)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>ins_bits</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*ar%ld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>ins_bits</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*(ar%ld-t0)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>ins_bits</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*(ar%ld-t1)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>ins_bits</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*(ar%ld+t0)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>ins_bits</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*(ar%ld+t1)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>ins_bits</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_AR_regs_class2</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>ins_bits</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>ret_len</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>ins_pos</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>op</name></decl>, <decl><type ref="prev"/><name>op2</name></decl>, <decl><type ref="prev"/><name>reg_num</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name>ins_bits</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>op2</name> <operator>=</operator> <name>ins_bits</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_num</name> <operator>=</operator> <operator>(</operator><name>ins_bits</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ret_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt> 
<if_stmt><if>if<condition>(<expr><name>op2</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*ar%ld(short(#0x%lx))"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>idx</name> <operator>*</operator> <name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*ar%ld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>op</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">2</literal> <operator>*</operator> <name>op2</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"@#0x%lx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>idx</name> <operator>*</operator> <operator>(</operator><name>reg_num</name> <operator>|</operator> <literal type="number">16</literal> <operator>*</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*sp(#0x%lx)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>idx</name> <operator>*</operator> <operator>(</operator><name>reg_num</name> <operator>|</operator> <literal type="number">16</literal> <operator>*</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>idx</name> <operator>|</operator> <literal type="number">16</literal> <operator>*</operator> <name>op</name></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*ar%ld-"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*ar%ld+"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*ar%ld(t0)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*ar%ld(t1)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*(ar%ld-t0)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*(ar%ld-t1)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*(ar%ld+t0)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*(ar%ld+t1)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*-ar%ld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*+ar%ld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*ar%ld(t2)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*ar%ld(t3)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*(ar%ld-t2)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">13</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*(ar%ld-t3)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">14</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*(ar%ld+t2)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*(ar%ld+t3)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*(ar%ld-t0b)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">17</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*(ar%ld+t0b)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">18</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*ar%ld(t0&lt;&lt;#1)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">19</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*ar%ld(t1&lt;&lt;#1)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">23</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*ar%ld(xar15)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">24</literal></expr>:</case>
<case>case <expr><literal type="number">25</literal></expr>:</case>
<case>case <expr><literal type="number">26</literal></expr>:</case>
<case>case <expr><literal type="number">27</literal></expr>:</case>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>get_ins_part</name><argument_list>(<argument><expr><name>ins_pos</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ret_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*ar%ld(#%ld)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>op</name> <operator>*</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">25</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*+ar%ld(#%ld)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>op</name> <operator>*</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">26</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*abs16(#0x%lx)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*port(#0x%lx)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">28</literal></expr>:</case>
<case>case <expr><literal type="number">29</literal></expr>:</case>
<case>case <expr><literal type="number">30</literal></expr>:</case>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>get_ins_part</name><argument_list>(<argument><expr><name>ins_pos</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ret_len</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">28</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*ar%ld(#0x%lx)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>idx</name> <operator>*</operator> <name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">29</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*+ar%ld(#0x%lx)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>reg_num</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>idx</name> <operator>*</operator> <name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"*(#0x%lx)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_reg_pair</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>idx</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac0, ac2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac1, ac3"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"pair(ac0), pair(ac2)"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar0, ar1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar0, ar2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar1, ar3"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"pair(ar0), pair(ar2)"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"t0, t2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"t1, t3"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"pair(t0), pair(t2)"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">21</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar4, t0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">22</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar5, t1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">23</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"pair(ar4), pair(t0)"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">25</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar6, t2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">26</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar7, t3"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">27</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"pair(ar6), pair(t2)"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">31</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"block(ar4), block(t0)"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_reg_name_3</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>idx</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac3"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac4"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac5"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac6"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac7"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac8"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac9"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac10"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac11"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac12"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac13"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">14</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac14"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac15"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac16"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">17</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac17"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">18</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac18"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">19</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac19"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">20</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac20"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">21</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac21"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">22</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac22"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">23</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac23"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">24</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac24"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">25</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac25"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">26</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac26"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">27</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac27"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">28</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac28"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">29</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac29"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">30</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac30"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">31</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac31"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">33</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">34</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">35</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar3"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">36</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar4"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">37</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar5"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">38</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar6"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">39</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar7"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">40</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar8"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">41</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar9"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">42</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar10"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">43</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar11"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">44</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar12"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">45</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar13"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">46</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar14"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">47</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar15"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">52</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xssp"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">53</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xsp"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">54</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xdp"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type><name>get_reg_name_2</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>idx</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar3"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar4"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar5"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar6"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar7"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar8"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar9"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar10"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar11"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar12"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar13"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">14</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar14"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar15"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"t0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">17</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"t1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">18</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"t2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">19</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"t3"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">20</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ssp"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">21</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"sp"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">22</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"dp"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">33</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">34</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">35</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar3"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">36</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar4"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">37</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar5"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">38</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar6"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">39</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar7"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">40</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar8"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">41</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar9"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">42</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar10"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">43</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar11"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">44</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar12"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">45</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar13"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">46</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar14"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">47</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar15"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">52</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xssp"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">53</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xsp"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">54</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xdp"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_reg_name_1</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>idx</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac3"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac4"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac5"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac6"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac7"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac8"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac9"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac10"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac11"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac12"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac13"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">14</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac14"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac15"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac16"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">17</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac17"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">18</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac18"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">19</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac19"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">20</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac20"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">21</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac21"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">22</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac22"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">23</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac23"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">24</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac24"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">25</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac25"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">26</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac26"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">27</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac27"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">28</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac28"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">29</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac29"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">30</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac30"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">31</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac31"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">33</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">34</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">35</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar3"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">36</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar4"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">37</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar5"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">38</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar6"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">39</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar7"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">40</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar8"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">41</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar9"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">42</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar10"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">43</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar11"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">44</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar12"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">45</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar13"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">46</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar14"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">47</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar15"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">48</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"t0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">49</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"t1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">50</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"t2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">51</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"t3"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">52</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ssp"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">53</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"sp"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">54</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"dp"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">56</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"csr"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">57</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"rptc"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">58</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"brc0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">59</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"brc1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">62</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"config"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">63</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"cpurev"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">64</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac0.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">65</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac1.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">66</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac2.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">67</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac3.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">68</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac4.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">69</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac5.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">70</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac6.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">71</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac7.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">72</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac8.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">73</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac9.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">74</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac10.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">75</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac11.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">76</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac12.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">77</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac13.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">78</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac14.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">79</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac15.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">80</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac16.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">81</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac17.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">82</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac18.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">83</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac19.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">84</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac20.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">85</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac21.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">86</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac22.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">87</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac23.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">88</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac24.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">89</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac25.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">90</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac26.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">91</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac27.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">92</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac28.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">93</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac29.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">94</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac30.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">95</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac31.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">96</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac0.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">97</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac1.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">98</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac2.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">99</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac3.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">100</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac4.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">101</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac5.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">102</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac6.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">103</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac7.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">104</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac8.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">105</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac9.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">106</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac10.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">107</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac11.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">108</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac12.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">109</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac13.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">110</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac14.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">111</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac15.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">112</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac16.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">113</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac17.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">114</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac18.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">115</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac19.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">116</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac20.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">117</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac21.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">118</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac22.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">119</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac23.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">120</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac24.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">121</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac25.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">122</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac26.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">123</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac27.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">124</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac28.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">125</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac29.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">126</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac30.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">127</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac31.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">128</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">129</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">130</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">131</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar3"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">132</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar4"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">133</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar5"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">134</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar6"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">135</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar7"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">136</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar8"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">137</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar9"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">138</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar10"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">139</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar11"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">140</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar12"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">141</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar13"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">142</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar14"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">143</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar15"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">148</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xssp"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">149</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xsp"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">150</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xdp"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">152</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"rsa0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">153</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"rsa1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">154</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"rea0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">155</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"rea1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">156</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"dbgpaddr"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">157</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"dbgpdata"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">159</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"reta"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">160</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar0.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">161</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar1.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">162</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar2.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">163</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar3.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">164</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar4.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">165</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar5.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">166</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar6.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">167</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar7.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">168</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar8.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">169</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar9.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">170</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar10.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">171</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar11.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">172</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar12.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">173</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar13.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">174</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar14.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">175</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xar15.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">180</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xssp.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">181</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xsp.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">182</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"xdp.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">183</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"pdp"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">184</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"bsa01"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">185</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"bsa23"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">186</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"bsa45"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">187</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"bsa67"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">188</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"bsac"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">189</literal></expr>:</case> 
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"bkc"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">190</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"bk03"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">191</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"bk47"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">192</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac0.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">193</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac1.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">194</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac2.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">195</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac3.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">196</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac4.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">197</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac5.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">198</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac6.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">199</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac7.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">200</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac8.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">201</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac9.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">202</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac10.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">203</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac11.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">204</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac12.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">205</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac13.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">206</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac14.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">207</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac15.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">208</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac16.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">209</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac17.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">210</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac18.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">211</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac19.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">212</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac20.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">213</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac21.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">214</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac22.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">215</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac23.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">216</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac24.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">217</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac25.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">218</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac26.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">219</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac27.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">220</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac28.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">221</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac29.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">222</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac30.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">223</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac31.g"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">224</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">225</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">226</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">227</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st3"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">228</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st0_55"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">229</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st1_55"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">231</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st3_55"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">232</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ier0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">233</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ier1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">234</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ifr0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">235</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ifr1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">236</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"dbier0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">237</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"dbier1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">238</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ivpd"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">239</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ivph"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">240</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"rsa0.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">241</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"rsa1.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">242</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"rea0.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">243</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"rea1.h"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">244</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"bios"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">245</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"brs1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">246</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"iir"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">247</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ber"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">248</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"rsa0.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">249</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"rsa1.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">250</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"rea0.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">251</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"rea1.l"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">252</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"tsdr"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type><name>get_status_regs_and_bits</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reg_arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg_bit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"ST0"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name>reg_bit</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st0_dp07"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st0_dp08"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st0_dp09"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st0_dp10"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st0_dp11"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st0_dp12"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st0_dp13"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st0_dp14"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st0_dp15"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st0_acov1"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st0_acov0"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st0_carry"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st0_tc2"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">13</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st0_tc1"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">14</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st0_acov3"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st0_acov2"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"ST1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name>reg_bit</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st1_dr2_00"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st1_dr2_01"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st1_dr2_02"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st1_dr2_03"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st1_dr2_04"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st1_c54cm"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st1_frct"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st1_c16"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st1_sxmd"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st1_satd"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st1_m40"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st1_intm"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st1_hm"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">13</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st1_xf"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">14</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st1_cpl"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st1_braf"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"ST2"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>( <expr><name>reg_bit</name></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st2_ar0lc"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st2_ar1lc"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st2_ar2lc"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st2_ar3lc"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st2_ar4lc"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st2_ar5lc"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st2_ar6lc"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st2_ar7lc"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st2_cdplc"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st2_govf"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st2_rdm"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st2_eallow"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st2_dbgm"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">13</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st2_xcnd"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">14</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st2_xcna"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st2_arms"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="string">"ST3"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>reg_bit</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st3_sst"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st3_smul"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st3_clkoff"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st3_bptr"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st3_avis"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st3_sata"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st3_mpnmc"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st3_cberr"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st3_homp"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st3_homr"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st3_homx"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st3_homy"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st3_hint"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">13</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st3_caclr"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">14</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st3_caen"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"st3_cafrz"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type><name>get_reg_name_4</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>idx</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac0"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac1"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac2"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac3"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac4"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac5"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac6"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac7"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"t0"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"t1"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"t2"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"t3"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar0"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">17</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar1"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">18</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar2"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">19</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar3"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">20</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar4"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">21</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar5"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">22</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar6"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">23</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ar7"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac0.l"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">25</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac1.l"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">26</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac2.l"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">27</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac3.l"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">28</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac4.l"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">29</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac5.l"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">30</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac6.l"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">31</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"ac7.l"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><ternary><condition><expr><name>res</name></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_opers</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>oper_byte</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>oper_byte</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0xE0u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"overflow(ac0)"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xE1u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"overflow(ac1)"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xE2u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"overflow(ac2)"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xE3u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"overflow(ac3)"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xE4u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"tc1"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xE5u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"tc2"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xE6u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"carry"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xE7u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"overflow(govf)"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xE8u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"tc1 &amp; tc2"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xE9u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"tc1 &amp; !tc2"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xEAu</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"!tc1 &amp; tc2"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xEBu</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"!tc1 &amp; !tc2"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xECu</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"word_mode"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xEDu</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"byte_mode"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xF0u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"!overflow(ac0)"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xF1u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"!overflow(ac1)"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xF2u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"!overflow(ac2)"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xF3u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"!overflow(ac3)"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xF4u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"!tc1"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xF5u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"!tc2"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xF6u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"!carry"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xF7u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"!overflow(govf)"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xF8u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"tc1 | tc2"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xF9u</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"tc1 | !tc2"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xFAu</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"!tc1 | tc2"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xFBu</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"!tc1 | !tc2"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xFCu</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"tc1 ^ tc2"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xFDu</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"tc1 ^ !tc2"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xFEu</literal></expr>:</case>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"!tc1 ^ tc2"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0xFFu</literal></expr>:</case>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"!tc1 ^ !tc2"</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>oper_type</name> <init>= <expr><name>oper_byte</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>oper_type</name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reg_name</name> <init>= <expr><call><name>get_reg_name_4</name> <argument_list>(<argument><expr><name>oper_byte</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>oper_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1u</literal></expr>:</case>
<return>return <expr><call><name>strcat_dup</name> <argument_list>(<argument><expr><name>reg_name</name></expr></argument>, <argument><expr><literal type="string">" != #0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">0u</literal></expr>:</case>
<return>return <expr><call><name>strcat_dup</name> <argument_list>(<argument><expr><name>reg_name</name></expr></argument>, <argument><expr><literal type="string">" == #0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">2u</literal></expr>:</case>
<return>return <expr><call><name>strcat_dup</name> <argument_list>(<argument><expr><name>reg_name</name></expr></argument>, <argument><expr><literal type="string">" &lt; #0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">3u</literal></expr>:</case>
<return>return <expr><call><name>strcat_dup</name> <argument_list>(<argument><expr><name>reg_name</name></expr></argument>, <argument><expr><literal type="string">" &gt;= #0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">4u</literal></expr>:</case>
<return>return <expr><call><name>strcat_dup</name> <argument_list>(<argument><expr><name>reg_name</name></expr></argument>, <argument><expr><literal type="string">" &gt; #0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">5u</literal></expr>:</case>
<return>return <expr><call><name>strcat_dup</name> <argument_list>(<argument><expr><name>reg_name</name></expr></argument>, <argument><expr><literal type="string">" &lt;= #0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reg_name</name> <init>= <expr><call><name>get_reg_name_1</name> <argument_list>(<argument><expr><operator>(</operator><name>oper_byte</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>oper_type</name> <operator>=</operator> <operator>(</operator><name>oper_byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>oper_type</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>oper_type</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>strcat_dup</name> <argument_list>(<argument><expr><name>reg_name</name></expr></argument>, <argument><expr><literal type="string">" != #0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>


<return>return <expr><call><name>strcat_dup</name> <argument_list>(<argument><expr><name>reg_name</name></expr></argument>, <argument><expr><literal type="string">" == #0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_cmp_op</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>idx</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"=="</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"!="</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"&lt;"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">"&gt;="</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<return>return <expr><ternary><condition><expr><name>res</name></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_sim_reg</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reg_arg</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>ins_bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>st32</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aux</name></decl>;</decl_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>ins_bits</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>reg_arg</name> <operator>&amp;&amp;</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>reg_arg</name></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">62</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"sim0"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"sim0"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>get_reg_name_1</name> <argument_list>(<argument><expr><name>ins_bits</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strcat_dup</name> <argument_list>(<argument><expr><literal type="string">"@"</literal></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>aux</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="string">"@#0x%x"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>aux</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"&lt;reserved&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
