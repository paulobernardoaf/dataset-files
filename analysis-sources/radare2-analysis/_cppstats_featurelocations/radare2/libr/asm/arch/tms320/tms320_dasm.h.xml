<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\tms320\tms320_dasm.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__TMS320_DASM_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__TMS320_DASM_H__</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDA_COMPATIBLE_MODE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>



<struct_decl>struct <name>tms320_instruction</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>tms320_instruction</name></name></type> <name>insn_item_t</name>;</typedef>

<struct_decl>struct <name>tms320_instruction_mask</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>tms320_instruction_mask</name></name></type> <name>insn_mask_t</name>;</typedef>

<struct_decl>struct <name>tms320_instruction_flag</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>tms320_instruction_flag</name></name></type> <name>insn_flag_t</name>;</typedef>

<struct_decl>struct <name>tms320_instruction_head</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>tms320_instruction_head</name></name></type> <name>insn_head_t</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>TMS320_FLAG_E</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>TMS320_FLAG_R</name></decl>,
<decl><name>TMS320_FLAG_U</name></decl>,
<decl><name>TMS320_FLAG_u</name></decl>,
<decl><name>TMS320_FLAG_g</name></decl>,
<decl><name>TMS320_FLAG_r</name></decl>,
<decl><name>TMS320_FLAG_t</name></decl>,

<decl><name>TMS320_FLAG_uu</name></decl>,
<decl><name>TMS320_FLAG_mm</name></decl>,
<decl><name>TMS320_FLAG_cc</name></decl>,
<decl><name>TMS320_FLAG_tt</name></decl>,
<decl><name>TMS320_FLAG_vv</name></decl>,
<decl><name>TMS320_FLAG_ss</name></decl>,
<decl><name>TMS320_FLAG_dd</name></decl>,
<decl><name>TMS320_FLAG_SS</name></decl>,
<decl><name>TMS320_FLAG_DD</name></decl>,

<decl><name>TMS320_FLAG_k3</name></decl>,
<decl><name>TMS320_FLAG_k4</name></decl>,
<decl><name>TMS320_FLAG_k5</name></decl>,
<decl><name>TMS320_FLAG_k6</name></decl>,
<decl><name>TMS320_FLAG_k8</name></decl>,
<decl><name>TMS320_FLAG_k12</name></decl>,
<decl><name>TMS320_FLAG_k16</name></decl>,

<decl><name>TMS320_FLAG_K8</name></decl>,
<decl><name>TMS320_FLAG_K16</name></decl>,

<decl><name>TMS320_FLAG_l1</name></decl>,
<decl><name>TMS320_FLAG_l3</name></decl>,
<decl><name>TMS320_FLAG_l7</name></decl>,
<decl><name>TMS320_FLAG_l16</name></decl>,

<decl><name>TMS320_FLAG_L7</name></decl>,
<decl><name>TMS320_FLAG_L8</name></decl>,
<decl><name>TMS320_FLAG_L16</name></decl>,

<decl><name>TMS320_FLAG_P8</name></decl>,
<decl><name>TMS320_FLAG_P24</name></decl>,
<decl><name>TMS320_FLAG_D16</name></decl>,

<decl><name>TMS320_FLAG_SHFT</name></decl>,
<decl><name>TMS320_FLAG_SHIFTW</name></decl>,
<decl><name>TMS320_FLAG_CCCCCCC</name></decl>,
<decl><name>TMS320_FLAG_AAAAAAAI</name></decl>,

<decl><name>TMS320_FLAG_FSSS</name></decl>,
<decl><name>TMS320_FLAG_FDDD</name></decl>,
<decl><name>TMS320_FLAG_XSSS</name></decl>,
<decl><name>TMS320_FLAG_XDDD</name></decl>,
<decl><name>TMS320_FLAG_XACS</name></decl>,
<decl><name>TMS320_FLAG_XACD</name></decl>,

<decl><name>TMS320_FLAG_XXX</name></decl>,
<decl><name>TMS320_FLAG_MMM</name></decl>,
<decl><name>TMS320_FLAG_Y</name></decl>,
<decl><name>TMS320_FLAG_YY</name></decl>,
}</block></enum></type> <name>insn_flag_e</name>;</typedef>

<struct>struct <name>tms320_instruction</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>i_list_last</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>!(((x)-&gt;i_list || (x)-&gt;m_list || (x)-&gt;f_list || (x)-&gt;syntax))</cpp:value></cpp:define>
<decl_stmt><decl><type><name>insn_item_t</name> <modifier>*</modifier></type> <name>i_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>insn_mask_t</name> <modifier>*</modifier></type> <name>m_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>insn_flag_t</name> <modifier>*</modifier></type> <name>f_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>syntax</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>tms320_instruction_mask</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>m_list_last</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>!(((x)-&gt;f || (x)-&gt;n || (x)-&gt;v))</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ut8</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt> 
}</block>;</struct>

<struct>struct <name>tms320_instruction_flag</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_list_last</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>!(((x)-&gt;f || (x)-&gt;v))</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ut8</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt> 
}</block>;</struct>

<struct>struct <name>tms320_instruction_head</name> <block>{
<decl_stmt><decl><type><name>ut8</name></type> <name>byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>insn_item_t</name></type> <name>insn</name></decl>;</decl_stmt>
}</block>;</struct>





<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>insn_head_t</name> <modifier>*</modifier></type> <name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>insn_item_t</name> <modifier>*</modifier></type> <name>insn</name></decl>;</decl_stmt>

<union>union <block>{
<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>stream</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>opcode64</name></decl>;</decl_stmt>
}</block>;</union>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMS320_S_INVAL</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ut8</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>syntax</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>def_field</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>unsigned int bf_##name##_valid:1; unsigned int bf_##name##_value:size</cpp:value></cpp:define>



<struct>struct <block>{
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>k3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>k4</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>k5</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>k6</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>k8</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>k12</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>k16</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>l3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>l7</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>l16</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>K8</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>K16</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>L7</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>L8</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>L16</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>P8</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>P24</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>D16</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>SHFT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>SHIFTW</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>dd</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>uu</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>mm</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>tt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>FSSS</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>FDDD</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>XSSS</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>XDDD</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>XACS</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>XACD</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>CCCCCCC</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>AAAAAAAI</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>SS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>SS2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>DD</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>DD2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>Xmem_mmm</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>Xmem_reg</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>Ymem_mmm</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>Ymem_reg</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>q_lr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>def_field</name> <argument_list>(<argument><expr><name>q_cr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> <decl><name>f</name></decl>;</struct>
<decl_stmt><decl><type><name>HtUP</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMS320_F_CPU_C54X</name></cpp:macro> <cpp:value>0x0000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMS320_F_CPU_C55X</name></cpp:macro> <cpp:value>0x0000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMS320_F_CPU_C55X_PLUS</name></cpp:macro> <cpp:value>0x0000003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMS320_F_CPU_MASK</name></cpp:macro> <cpp:value>0x00000FF</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ut32</name></type> <name>features</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tms320_f_get_cpu</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d)-&gt;features &amp; TMS320_F_CPU_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tms320_f_set_cpu</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d)-&gt;features = ((d)-&gt;features &amp; ~TMS320_F_CPU_MASK) | (v))</cpp:value></cpp:define>
}</block></struct></type> <name>tms320_dasm_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>field_valid</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(d)-&gt;f.bf_##name##_valid</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>field_value</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(d)-&gt;f.bf_##name##_value</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_field_value</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ field_valid(d, name) = 1; field_value(d, name) = value; }</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_field_value</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ field_valid(d, name) = 1; field_value(d, name) = value; })</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_END</name></cpp:macro> <cpp:value>{ 0 }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_MASK</name><parameter_list>(<parameter><type><name>af</name></type></parameter>, <parameter><type><name>an</name></type></parameter>, <parameter><type><name>av</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .f = af, .n = an, .v = av }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_FLAG</name><parameter_list>(<parameter><type><name>af</name></type></parameter>, <parameter><type><name>av</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .f = af, .v = TMS320_FLAG_##av }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_SYNTAX</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(char *)#__VA_ARGS__</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>tms320_dasm</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>tms320_dasm_init</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>tms320_dasm_fini</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
