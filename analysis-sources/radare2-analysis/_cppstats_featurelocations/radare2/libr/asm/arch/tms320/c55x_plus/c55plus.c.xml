<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\tms320\c55x_plus\c55plus.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_DECODE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../tms320_p.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../tms320_dasm.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ut8</name> <modifier>*</modifier></type><name>ins_buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ut32</name></type> <name>ins_buff_len</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>c55plus_decode</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>ins_pos</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>next_ins_pos</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>c55x_plus_disassemble</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type><name>dasm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>next_ins_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ins_decoded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ins_decoded_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ins_buff</name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ins_buff_len</name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_ins_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>ins_decoded</name> <operator>=</operator> <call><name>c55plus_decode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_ins_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>next_ins_pos</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins_decoded</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>next_ins_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ins_decoded_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ins_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ins_decoded_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<block>{<block_content>
<expr_stmt><expr><name><name>ins_decoded</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>tolower</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>ins_decoded</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></for>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>ins_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ins_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>next_ins_pos</name></expr>;</return>
</block_content>}</block></function>
</unit>
