<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\sh\gnu\sh-dis.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATIC_TABLE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_TABLE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sh-opc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"disas-asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mybfd.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LITTLE_BIT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>print_insn_shx</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fprintf_ftype</name></type> <name>fprintf_fn</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>insn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>nibs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bfd_vma</name></type> <name>relmask</name> <init>= <expr><operator>~</operator> <operator>(</operator><name>bfd_vma</name><operator>)</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sh_opcode_info</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>info</name><operator>-&gt;</operator><name>read_memory_func</name></name> <argument_list>(<argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>info</name><operator>-&gt;</operator><name>memory_error_func</name></name> <argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LITTLE_BIT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>nibs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>insn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nibs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>insn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nibs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>insn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nibs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>insn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>nibs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>insn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nibs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>insn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nibs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>insn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nibs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>insn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>op</name> <operator>=</operator> <name>sh_table</name></expr>;</init> <condition><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>op</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>imm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>disp_pc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bfd_vma</name></type> <name>disp_pc_addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>nibbles</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nibs</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>i</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>BRANCH_8</name></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>(</operator><name><name>nibs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>nibs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>imm</name> <operator>|=</operator> <operator>~</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>(</operator><name>imm</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr> ;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
<case>case <expr><name>BRANCH_12</name></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>nibs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>nibs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>nibs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&amp;</operator> <literal type="number">0x800</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>imm</name> <operator>|=</operator> <operator>~</operator><literal type="number">0xfff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <name>imm</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
<case>case <expr><name>IMM_4</name></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <name><name>nibs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
<case>case <expr><name>IMM_4BY2</name></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <name><name>nibs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
<case>case <expr><name>IMM_4BY4</name></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <name><name>nibs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
<case>case <expr><name>IMM_8</name></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>(</operator><name><name>nibs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name><name>nibs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
<case>case <expr><name>PCRELIMM_8BY2</name></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>nibs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name><name>nibs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>relmask</name> <operator>=</operator> <operator>~</operator> <operator>(</operator><name>bfd_vma</name><operator>)</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
<case>case <expr><name>PCRELIMM_8BY4</name></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>nibs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name><name>nibs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>relmask</name> <operator>=</operator> <operator>~</operator> <operator>(</operator><name>bfd_vma</name><operator>)</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
<case>case <expr><name>IMM_8BY2</name></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>nibs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name><name>nibs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
<case>case <expr><name>IMM_8BY4</name></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>nibs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name><name>nibs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
<case>case <expr><name>DISP_8</name></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>(</operator><name><name>nibs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>nibs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
<case>case <expr><name>DISP_4</name></expr>:</case>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <name><name>nibs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
<case>case <expr><name>REG_N</name></expr>:</case>
<expr_stmt><expr><name>rn</name> <operator>=</operator> <name><name>nibs</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REG_M</name></expr>:</case>
<expr_stmt><expr><name>rm</name> <operator>=</operator> <name><name>nibs</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REG_NM</name></expr>:</case>
<expr_stmt><expr><name>rn</name> <operator>=</operator> <operator>(</operator><name><name>nibs</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rm</name> <operator>=</operator> <operator>(</operator><name><name>nibs</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REG_B</name></expr>:</case>
<expr_stmt><expr><name>rb</name> <operator>=</operator> <name><name>nibs</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"sh-dis: abort"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>

<label><name>ok</name>:</label>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>,<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>arg</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <name>A_END</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>A_END</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>arg</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>A_IMM</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" 0x%02X"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>imm</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_R0</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" r0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_REG_N</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" r%d"</literal></expr></argument>, <argument><expr><name>rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_INC_N</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" @r%d+"</literal></expr></argument>, <argument><expr><name>rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_DEC_N</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" @-r%d"</literal></expr></argument>, <argument><expr><name>rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_IND_N</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" @r%d"</literal></expr></argument>, <argument><expr><name>rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_DISP_REG_N</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" @(0x%x,r%d)"</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><name>rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_REG_M</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" r%d"</literal></expr></argument>, <argument><expr><name>rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_INC_M</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" @r%d+"</literal></expr></argument>, <argument><expr><name>rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_DEC_M</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" @-r%d"</literal></expr></argument>, <argument><expr><name>rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_IND_M</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" @r%d"</literal></expr></argument>, <argument><expr><name>rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_DISP_REG_M</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" @(0x%x,r%d)"</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_REG_B</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" r%d_bank"</literal></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_DISP_PC</name></expr>:</case>
<expr_stmt><expr><name>disp_pc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>disp_pc_addr</name> <operator>=</operator> <name>imm</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>memaddr</name> <operator>&amp;</operator> <name>relmask</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" @(0x%x,pc)"</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_IND_R0_REG_N</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" @(r0,r%d)"</literal></expr></argument>, <argument><expr><name>rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_IND_R0_REG_M</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" @(r0,r%d)"</literal></expr></argument>, <argument><expr><name>rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_DISP_GBR</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" @(0x%x,gbr)"</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_R0_GBR</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" @(r0,gbr)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_BDISP12</name></expr>:</case>
<case>case <expr><name>A_BDISP8</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name>imm</name> <operator>+</operator> <name>memaddr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_SR</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" sr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_GBR</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" gbr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_VBR</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" vbr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_SSR</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" ssr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_SPC</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" spc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_MACH</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" mach"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_MACL</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" macl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_PR</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" pr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_SGR</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" sgr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_DBR</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" dbr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FD_REG_N</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>d_reg_n</name>;</goto>
</block_content>}</block></if></if_stmt>
<case>case <expr><name>F_REG_N</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" fr%d"</literal></expr></argument>, <argument><expr><name>rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>F_REG_M</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" fr%d"</literal></expr></argument>, <argument><expr><name>rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DX_REG_N</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>rn</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" xd%d"</literal></expr></argument>, <argument><expr><name>rn</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<label><name>d_reg_n</name>:</label>
<case>case <expr><name>D_REG_N</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" dr%d"</literal></expr></argument>, <argument><expr><name>rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DX_REG_M</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>rm</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" xd%d"</literal></expr></argument>, <argument><expr><name>rm</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<case>case <expr><name>D_REG_M</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" dr%d"</literal></expr></argument>, <argument><expr><name>rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FPSCR_M</name></expr>:</case>
<case>case <expr><name>FPSCR_N</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" fpscr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FPUL_M</name></expr>:</case>
<case>case <expr><name>FPUL_N</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" fpul"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>F_FR0</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" fr0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V_REG_N</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" fv%d"</literal></expr></argument>, <argument><expr><name>rn</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V_REG_M</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" fv%d"</literal></expr></argument>, <argument><expr><name>rm</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>XMTRX_M4</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" xmtrx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"sh-dis: abort"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>





if (!(info-&gt;flags &amp; 1)
&amp;&amp; (op-&gt;name[0] == 'j'
|| (op-&gt;name[0] == 'b'
&amp;&amp; (op-&gt;name[1] == 'r'
|| op-&gt;name[1] == 's'))
|| (op-&gt;name[0] == 'r' &amp;&amp; op-&gt;name[1] == 't')
|| (op-&gt;name[0] == 'b' &amp;&amp; op-&gt;name[2] == '.')))
{
info-&gt;flags |= 1;
fprintf_fn (stream, " (slot ");
print_insn_shx (memaddr + 2, info);
info-&gt;flags &amp;= ~1;
fprintf_fn (stream, ")");
return 4;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>disp_pc</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"mova"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bfd_byte</name></type> <name><name>bytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>relmask</name> <operator>==</operator> <operator>~</operator><operator>(</operator><name>bfd_vma</name><operator>)</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>info</name><operator>-&gt;</operator><name>read_memory_func</name></name> <argument_list>(<argument><expr><name>disp_pc_addr</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>info</name><operator>-&gt;</operator><name>memory_error_func</name></name> <argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name><operator>=</operator><ternary><condition><expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LITTLE_BIT</name><operator>)</operator></expr>?</condition><then> <expr><call><name>bfd_getl16</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><call><name>bfd_getb16</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name><operator>=</operator> <ternary><condition><expr><operator>(</operator><name>val</name><operator>&amp;</operator><literal type="number">0x8000</literal><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name>val</name> <operator>|</operator> <literal type="number">0xFFFF0000</literal><operator>)</operator></expr></then><else>:<expr><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x0000FFFF</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>val</name><operator>=</operator><ternary><condition><expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LITTLE_BIT</name><operator>)</operator></expr>?</condition><then> <expr><call><name>bfd_getl32</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><call><name>bfd_getb32</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>
<label><name>fail</name>:</label>
<empty_stmt>;</empty_stmt>

</block_content>}</block></for> 
<expr_stmt><expr><call><name>fprintf_fn</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">".word 0x%02x%02x%02x%02x"</literal></expr></argument>, <argument><expr><name><name>nibs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>nibs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>nibs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>nibs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>print_insn_shl</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>LITTLE_BIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>print_insn_shx</name> <argument_list>(<argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>print_insn_shb</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>print_insn_shx</name> <argument_list>(<argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
</unit>
