<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\avr\avr_disasm.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avr_disasm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"errorcodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avr_instructionset.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>








<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>AVR_Long_Instruction</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>AVR_Long_Address</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>disassembledInstruction</name></type> <name>longInstruction</name></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>disassembleOperands</name><parameter_list>(<parameter><decl><type><name>disassembledInstruction</name> <modifier>*</modifier></type><name>dInstruction</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint16_t</name></type> <name>extractDataFromMask</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>lookupInstruction</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><specifier>static</specifier> <name>int</name></type> <name>disassembleInstruction</name><parameter_list>(<parameter><decl><type><name>disassembledInstruction</name> <modifier>*</modifier></type><name>dInstruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>assembledInstruction</name></type> <name>aInstruction</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>insidx</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dInstruction</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERROR_INVALID_ARGUMENTS</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>insidx</name> <operator>=</operator> <call><name>lookupInstruction</name><argument_list>(<argument><expr><name><name>aInstruction</name><operator>.</operator><name>opcode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>insidx</name> <operator>==</operator> <name>AVR_TOTAL_INSTRUCTIONS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>AVR_Long_Instruction</name> <operator>==</operator> <name>AVR_LONG_INSTRUCTION_FOUND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>AVR_Long_Instruction</name> <operator>=</operator> <name>AVR_LONG_INSTRUCTION_PRINT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>AVR_Long_Address</name> <operator>|=</operator> <name><name>aInstruction</name><operator>.</operator><name>opcode</name></name></expr>;</expr_stmt>




<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>longInstruction</name><operator>.</operator><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>,<argument><expr><literal type="string">"call"</literal></expr></argument>)</argument_list></call><operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>longInstruction</name><operator>.</operator><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>,<argument><expr><literal type="string">"jmp"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>AVR_Long_Address</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>dInstruction</name> <operator>=</operator> <name>longInstruction</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>


</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>AVR_Long_Instruction</name> <operator>==</operator> <name>AVR_LONG_INSTRUCTION_PRINT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>AVR_Long_Instruction</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>dInstruction</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <name><name>aInstruction</name><operator>.</operator><name>address</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dInstruction</name><operator>-&gt;</operator><name>instruction</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>instructionSet</name><index>[<expr><name>insidx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dInstruction</name><operator>-&gt;</operator><name>alternateInstruction</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>instructionSet</name><index>[<expr><name>insidx</name></expr>]</index></name><operator>.</operator><name>numOperands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>extractDataFromMask</name><argument_list>(<argument><expr><name><name>aInstruction</name><operator>.</operator><name>opcode</name></name></expr></argument>, <argument><expr><name><name>dInstruction</name><operator>-&gt;</operator><name>instruction</name><operator>-&gt;</operator><name>operandMasks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>dInstruction</name><operator>-&gt;</operator><name>instruction</name><operator>-&gt;</operator><name>operandTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>OPERAND_LONG_ABSOLUTE_ADDRESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>AVR_Long_Instruction</name> <operator>=</operator> <name>AVR_LONG_INSTRUCTION_FOUND</name></expr>;</expr_stmt>
<expr_stmt><expr><name>AVR_Long_Address</name> <operator>=</operator> <name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>longInstruction</name> <operator>=</operator> <operator>*</operator><name>dInstruction</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><call><name>disassembleOperands</name><argument_list>(<argument><expr><name>dInstruction</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERROR_INVALID_ARGUMENTS</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>AVR_Long_Instruction</name> <operator>==</operator> <name>AVR_LONG_INSTRUCTION_FOUND</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>longInstruction</name> <operator>=</operator> <operator>*</operator><name>dInstruction</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>extractDataFromMask</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>data</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>j</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>lookupInstruction</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>opcodeSearch</name></decl>, <decl><type ref="prev"/><name>operandTemp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>insidx</name></decl>, <decl><type ref="prev"/><name>ghostRegisterConfirmed</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>insidx</name> <operator>=</operator> <name>offset</name></expr>;</init> <condition><expr><name>insidx</name> <operator>&lt;</operator> <name>AVR_TOTAL_INSTRUCTIONS</name></expr>;</condition> <incr><expr><name>insidx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>opcodeSearch</name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>


<expr_stmt><expr><name>ghostRegisterConfirmed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AVR_MAX_NUM_OPERANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>instructionSet</name><index>[<expr><name>insidx</name></expr>]</index></name><operator>.</operator><name><name>operandTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>OPERAND_REGISTER_GHOST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>operandTemp</name> <operator>=</operator> <call><name>extractDataFromMask</name><argument_list>(<argument><expr><name>opcode</name></expr></argument>, <argument><expr><name><name>instructionSet</name><index>[<expr><name>insidx</name></expr>]</index></name><operator>.</operator><name><name>operandMasks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>AVR_MAX_NUM_OPERANDS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>extractDataFromMask</name><argument_list>(<argument><expr><name>opcode</name></expr></argument>, <argument><expr><name><name>instructionSet</name><index>[<expr><name>insidx</name></expr>]</index></name><operator>.</operator><name><name>operandMasks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name>operandTemp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ghostRegisterConfirmed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt> 
<expr_stmt><expr><name>opcodeSearch</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name><name>instructionSet</name><index>[<expr><name>insidx</name></expr>]</index></name><operator>.</operator><name><name>operandMasks</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name>ghostRegisterConfirmed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opcodeSearch</name> <operator>==</operator> <name><name>instructionSet</name><index>[<expr><name>insidx</name></expr>]</index></name><operator>.</operator><name>opcodeMask</name></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>




<return>return <expr><name>insidx</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>disassembleOperands</name><parameter_list>(<parameter><decl><type><name>disassembledInstruction</name> <modifier>*</modifier></type><name>dInstruction</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dInstruction</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERROR_INVALID_ARGUMENTS</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dInstruction</name><operator>-&gt;</operator><name>instruction</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERROR_INVALID_ARGUMENTS</name></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dInstruction</name><operator>-&gt;</operator><name>instruction</name><operator>-&gt;</operator><name>numOperands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>dInstruction</name><operator>-&gt;</operator><name>instruction</name><operator>-&gt;</operator><name>operandTypes</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OPERAND_BRANCH_ADDRESS</name></expr>:</case>














<expr_stmt><expr><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>~</operator><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x7F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>OPERAND_RELATIVE_ADDRESS</name></expr>:</case>














<expr_stmt><expr><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1000</literal></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>short</name></type> <name>val</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>~</operator><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFF</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>val</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>OPERAND_REGISTER_STARTR16</name></expr>:</case>
<expr_stmt><expr><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal> <operator>+</operator> <name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPERAND_REGISTER_EVEN_PAIR</name></expr>:</case>
<expr_stmt><expr><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPERAND_REGISTER_EVEN_PAIR_STARTR24</name></expr>:</case>
<expr_stmt><expr><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">24</literal> <operator>+</operator> <operator>(</operator><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPERAND_COMPLEMENTED_DATA</name></expr>:</case>
<expr_stmt><expr><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>dInstruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
