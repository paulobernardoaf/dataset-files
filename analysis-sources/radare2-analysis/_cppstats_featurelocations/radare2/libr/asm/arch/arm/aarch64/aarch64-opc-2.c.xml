<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\arm\aarch64\aarch64-opc-2.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sysdep.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aarch64-opc.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>aarch64_operand</name></name></type> <name><name>aarch64_operands</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><name>AARCH64_OPND_CLASS_NIL</name></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"&lt;none&gt;"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_INT_REG</name></expr>, <expr><literal type="string">"Rd"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rd</name></expr>}</block></expr>, <expr><literal type="string">"an integer register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_INT_REG</name></expr>, <expr><literal type="string">"Rn"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"an integer register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_INT_REG</name></expr>, <expr><literal type="string">"Rm"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rm</name></expr>}</block></expr>, <expr><literal type="string">"an integer register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_INT_REG</name></expr>, <expr><literal type="string">"Rt"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rt</name></expr>}</block></expr>, <expr><literal type="string">"an integer register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_INT_REG</name></expr>, <expr><literal type="string">"Rt2"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rt2</name></expr>}</block></expr>, <expr><literal type="string">"an integer register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_INT_REG</name></expr>, <expr><literal type="string">"Rs"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rs</name></expr>}</block></expr>, <expr><literal type="string">"an integer register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_INT_REG</name></expr>, <expr><literal type="string">"Ra"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Ra</name></expr>}</block></expr>, <expr><literal type="string">"an integer register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_INT_REG</name></expr>, <expr><literal type="string">"Rt_SYS"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rt</name></expr>}</block></expr>, <expr><literal type="string">"an integer register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_INT_REG</name></expr>, <expr><literal type="string">"Rd_SP"</literal></expr>, <expr><name>OPD_F_MAYBE_SP</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rd</name></expr>}</block></expr>, <expr><literal type="string">"an integer or stack pointer register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_INT_REG</name></expr>, <expr><literal type="string">"Rn_SP"</literal></expr>, <expr><name>OPD_F_MAYBE_SP</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"an integer or stack pointer register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_INT_REG</name></expr>, <expr><literal type="string">"Rm_SP"</literal></expr>, <expr><name>OPD_F_MAYBE_SP</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rm</name></expr>}</block></expr>, <expr><literal type="string">"an integer or stack pointer register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_INT_REG</name></expr>, <expr><literal type="string">"PAIRREG"</literal></expr>, <expr><name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"the second reg of a pair"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_MODIFIED_REG</name></expr>, <expr><literal type="string">"Rm_EXT"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"an integer register with optional extension"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_MODIFIED_REG</name></expr>, <expr><literal type="string">"Rm_SFT"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"an integer register with optional shift"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_FP_REG</name></expr>, <expr><literal type="string">"Fd"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rd</name></expr>}</block></expr>, <expr><literal type="string">"a floating-point register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_FP_REG</name></expr>, <expr><literal type="string">"Fn"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"a floating-point register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_FP_REG</name></expr>, <expr><literal type="string">"Fm"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rm</name></expr>}</block></expr>, <expr><literal type="string">"a floating-point register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_FP_REG</name></expr>, <expr><literal type="string">"Fa"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Ra</name></expr>}</block></expr>, <expr><literal type="string">"a floating-point register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_FP_REG</name></expr>, <expr><literal type="string">"Ft"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rt</name></expr>}</block></expr>, <expr><literal type="string">"a floating-point register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_FP_REG</name></expr>, <expr><literal type="string">"Ft2"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rt2</name></expr>}</block></expr>, <expr><literal type="string">"a floating-point register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SISD_REG</name></expr>, <expr><literal type="string">"Sd"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rd</name></expr>}</block></expr>, <expr><literal type="string">"a SIMD scalar register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SISD_REG</name></expr>, <expr><literal type="string">"Sn"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"a SIMD scalar register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SISD_REG</name></expr>, <expr><literal type="string">"Sm"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rm</name></expr>}</block></expr>, <expr><literal type="string">"a SIMD scalar register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SIMD_REG</name></expr>, <expr><literal type="string">"Va"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Ra</name></expr>}</block></expr>, <expr><literal type="string">"a SIMD vector register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SIMD_REG</name></expr>, <expr><literal type="string">"Vd"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rd</name></expr>}</block></expr>, <expr><literal type="string">"a SIMD vector register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SIMD_REG</name></expr>, <expr><literal type="string">"Vn"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"a SIMD vector register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SIMD_REG</name></expr>, <expr><literal type="string">"Vm"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rm</name></expr>}</block></expr>, <expr><literal type="string">"a SIMD vector register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_FP_REG</name></expr>, <expr><literal type="string">"VdD1"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rd</name></expr>}</block></expr>, <expr><literal type="string">"the top half of a 128-bit FP/SIMD register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_FP_REG</name></expr>, <expr><literal type="string">"VnD1"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"the top half of a 128-bit FP/SIMD register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SIMD_ELEMENT</name></expr>, <expr><literal type="string">"Ed"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rd</name></expr>}</block></expr>, <expr><literal type="string">"a SIMD vector element"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SIMD_ELEMENT</name></expr>, <expr><literal type="string">"En"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"a SIMD vector element"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SIMD_ELEMENT</name></expr>, <expr><literal type="string">"Em"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rm</name></expr>}</block></expr>, <expr><literal type="string">"a SIMD vector element"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SIMD_ELEMENT</name></expr>, <expr><literal type="string">"Em16"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rm</name></expr>}</block></expr>, <expr><literal type="string">"a SIMD vector element limited to V0-V15"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SIMD_REGLIST</name></expr>, <expr><literal type="string">"LVn"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"a SIMD vector register list"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SIMD_REGLIST</name></expr>, <expr><literal type="string">"LVt"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"a SIMD vector register list"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SIMD_REGLIST</name></expr>, <expr><literal type="string">"LVt_AL"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"a SIMD vector register list"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SIMD_REGLIST</name></expr>, <expr><literal type="string">"LEt"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"a SIMD vector element list"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"CRn"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_CRn</name></expr>}</block></expr>, <expr><literal type="string">"a 4-bit opcode field named for historical reasons C0 - C15"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"CRm"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_CRm</name></expr>}</block></expr>, <expr><literal type="string">"a 4-bit opcode field named for historical reasons C0 - C15"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"IDX"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_imm4</name></expr>}</block></expr>, <expr><literal type="string">"an immediate as the index of the least significant byte"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"MASK"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_imm4_2</name></expr>}</block></expr>, <expr><literal type="string">"an immediate as the index of the least significant byte"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"IMM_VLSL"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"a left shift amount for an AdvSIMD register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"IMM_VLSR"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"a right shift amount for an AdvSIMD register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SIMD_IMM"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"an immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SIMD_IMM_SFT"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"an 8-bit unsigned immediate with optional shift"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SIMD_FPIMM"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"an 8-bit floating-point constant"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SHLL_IMM"</literal></expr>, <expr><name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"an immediate shift amount of 8, 16 or 32"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"IMM0"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"0"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"FPIMM0"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"0.0"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"FPIMM"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_imm8</name></expr>}</block></expr>, <expr><literal type="string">"an 8-bit floating-point constant"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"IMMR"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_immr</name></expr>}</block></expr>, <expr><literal type="string">"the right rotate amount"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"IMMS"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_imm6</name></expr>}</block></expr>, <expr><literal type="string">"the leftmost bit number to be moved from the source"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"WIDTH"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_imm6</name></expr>}</block></expr>, <expr><literal type="string">"the width of the bit-field"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"IMM"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_imm6</name></expr>}</block></expr>, <expr><literal type="string">"an immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"IMM_2"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_imm6_2</name></expr>}</block></expr>, <expr><literal type="string">"an immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"UIMM3_OP1"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_op1</name></expr>}</block></expr>, <expr><literal type="string">"a 3-bit unsigned immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"UIMM3_OP2"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_op2</name></expr>}</block></expr>, <expr><literal type="string">"a 3-bit unsigned immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"UIMM4"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_CRm</name></expr>}</block></expr>, <expr><literal type="string">"a 4-bit unsigned immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"UIMM7"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_CRm</name></expr>, <expr><name>FLD_op2</name></expr>}</block></expr>, <expr><literal type="string">"a 7-bit unsigned immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"BIT_NUM"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_b5</name></expr>, <expr><name>FLD_b40</name></expr>}</block></expr>, <expr><literal type="string">"the bit number to be tested"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"EXCEPTION"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_imm16</name></expr>}</block></expr>, <expr><literal type="string">"a 16-bit unsigned immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"CCMP_IMM"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_imm5</name></expr>}</block></expr>, <expr><literal type="string">"a 5-bit unsigned immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SIMM5"</literal></expr>, <expr><name>OPD_F_SEXT</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_imm5</name></expr>}</block></expr>, <expr><literal type="string">"a 5-bit signed immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"NZCV"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_nzcv</name></expr>}</block></expr>, <expr><literal type="string">"a flag bit specifier giving an alternative value for each flag"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"LIMM"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_N</name></expr>,<expr><name>FLD_immr</name></expr>,<expr><name>FLD_imms</name></expr>}</block></expr>, <expr><literal type="string">"Logical immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"AIMM"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_shift</name></expr>,<expr><name>FLD_imm12</name></expr>}</block></expr>, <expr><literal type="string">"a 12-bit unsigned immediate with optional left shift of 12 bits"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"HALF"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_imm16</name></expr>}</block></expr>, <expr><literal type="string">"a 16-bit immediate with optional left shift"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"FBITS"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_scale</name></expr>}</block></expr>, <expr><literal type="string">"the number of bits after the binary point in the fixed-point value"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"IMM_MOV"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"an immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"IMM_ROT1"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_rotate1</name></expr>}</block></expr>, <expr><literal type="string">"a 2-bit rotation specifier for complex arithmetic operations"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"IMM_ROT2"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_rotate2</name></expr>}</block></expr>, <expr><literal type="string">"a 2-bit rotation specifier for complex arithmetic operations"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"IMM_ROT3"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_rotate3</name></expr>}</block></expr>, <expr><literal type="string">"a 1-bit rotation specifier for complex arithmetic operations"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_COND</name></expr>, <expr><literal type="string">"COND"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"a condition"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_COND</name></expr>, <expr><literal type="string">"COND1"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"one of the standard conditions, excluding AL and NV."</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"ADDR_ADRP"</literal></expr>, <expr><name>OPD_F_SEXT</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_immhi</name></expr>, <expr><name>FLD_immlo</name></expr>}</block></expr>, <expr><literal type="string">"21-bit PC-relative address of a 4KB page"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"ADDR_PCREL14"</literal></expr>, <expr><name>OPD_F_SEXT</name> <operator>|</operator> <name>OPD_F_SHIFT_BY_2</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_imm14</name></expr>}</block></expr>, <expr><literal type="string">"14-bit PC-relative address"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"ADDR_PCREL19"</literal></expr>, <expr><name>OPD_F_SEXT</name> <operator>|</operator> <name>OPD_F_SHIFT_BY_2</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_imm19</name></expr>}</block></expr>, <expr><literal type="string">"19-bit PC-relative address"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"ADDR_PCREL21"</literal></expr>, <expr><name>OPD_F_SEXT</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_immhi</name></expr>,<expr><name>FLD_immlo</name></expr>}</block></expr>, <expr><literal type="string">"21-bit PC-relative address"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"ADDR_PCREL26"</literal></expr>, <expr><name>OPD_F_SEXT</name> <operator>|</operator> <name>OPD_F_SHIFT_BY_2</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_imm26</name></expr>}</block></expr>, <expr><literal type="string">"26-bit PC-relative address"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"ADDR_SIMPLE"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"an address with base register (no offset)"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"ADDR_REGOFF"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"an address with register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"ADDR_SIMM7"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_imm7</name></expr>,<expr><name>FLD_index2</name></expr>}</block></expr>, <expr><literal type="string">"an address with 7-bit signed immediate offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"ADDR_SIMM9"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_imm9</name></expr>,<expr><name>FLD_index</name></expr>}</block></expr>, <expr><literal type="string">"an address with 9-bit signed immediate offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"ADDR_SIMM9_2"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_imm9</name></expr>,<expr><name>FLD_index</name></expr>}</block></expr>, <expr><literal type="string">"an address with 9-bit negative or unaligned immediate offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"ADDR_SIMM10"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_S_imm10</name></expr>,<expr><name>FLD_imm9</name></expr>,<expr><name>FLD_index</name></expr>}</block></expr>, <expr><literal type="string">"an address with 10-bit scaled, signed immediate offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"ADDR_UIMM12"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_imm12</name></expr>}</block></expr>, <expr><literal type="string">"an address with scaled, unsigned immediate offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SIMD_ADDR_SIMPLE"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"an address with base register (no offset)"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"ADDR_OFFSET"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_imm9</name></expr>,<expr><name>FLD_index</name></expr>}</block></expr>, <expr><literal type="string">"an address with an optional 8-bit signed immediate offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SIMD_ADDR_POST"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"a post-indexed address with immediate or register increment"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SYSTEM</name></expr>, <expr><literal type="string">"SYSREG"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"a system register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SYSTEM</name></expr>, <expr><literal type="string">"PSTATEFIELD"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"a PSTATE field name"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SYSTEM</name></expr>, <expr><literal type="string">"SYSREG_AT"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"an address translation operation specifier"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SYSTEM</name></expr>, <expr><literal type="string">"SYSREG_DC"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"a data cache maintenance operation specifier"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SYSTEM</name></expr>, <expr><literal type="string">"SYSREG_IC"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"an instruction cache maintenance operation specifier"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SYSTEM</name></expr>, <expr><literal type="string">"SYSREG_TLBI"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"a TBL invalidation operation specifier"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SYSTEM</name></expr>, <expr><literal type="string">"BARRIER"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"a barrier option name"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SYSTEM</name></expr>, <expr><literal type="string">"BARRIER_ISB"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"the ISB option name SY or an optional 4-bit unsigned immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SYSTEM</name></expr>, <expr><literal type="string">"PRFOP"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"a prefetch operation specifier"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SYSTEM</name></expr>, <expr><literal type="string">"BARRIER_PSB"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"the PSB option name CSYNC"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RI_S4x16"</literal></expr>, <expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"an address with a 4-bit signed offset, multiplied by 16"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RI_S4xVL"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"an address with a 4-bit signed offset, multiplied by VL"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RI_S4x2xVL"</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"an address with a 4-bit signed offset, multiplied by 2*VL"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RI_S4x3xVL"</literal></expr>, <expr><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"an address with a 4-bit signed offset, multiplied by 3*VL"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RI_S4x4xVL"</literal></expr>, <expr><literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"an address with a 4-bit signed offset, multiplied by 4*VL"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RI_S6xVL"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"an address with a 6-bit signed offset, multiplied by VL"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RI_S9xVL"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"an address with a 9-bit signed offset, multiplied by VL"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RI_U6"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"an address with a 6-bit unsigned offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RI_U6x2"</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"an address with a 6-bit unsigned offset, multiplied by 2"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RI_U6x4"</literal></expr>, <expr><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"an address with a 6-bit unsigned offset, multiplied by 4"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RI_U6x8"</literal></expr>, <expr><literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>}</block></expr>, <expr><literal type="string">"an address with a 6-bit unsigned offset, multiplied by 8"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_R"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_Rm</name></expr>}</block></expr>, <expr><literal type="string">"an address with an optional scalar register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RR"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_Rm</name></expr>}</block></expr>, <expr><literal type="string">"an address with a scalar register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RR_LSL1"</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_Rm</name></expr>}</block></expr>, <expr><literal type="string">"an address with a scalar register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RR_LSL2"</literal></expr>, <expr><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_Rm</name></expr>}</block></expr>, <expr><literal type="string">"an address with a scalar register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RR_LSL3"</literal></expr>, <expr><literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_Rm</name></expr>}</block></expr>, <expr><literal type="string">"an address with a scalar register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RX"</literal></expr>, <expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name><operator>)</operator> <operator>|</operator> <name>OPD_F_NO_ZR</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_Rm</name></expr>}</block></expr>, <expr><literal type="string">"an address with a scalar register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RX_LSL1"</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name><operator>)</operator> <operator>|</operator> <name>OPD_F_NO_ZR</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_Rm</name></expr>}</block></expr>, <expr><literal type="string">"an address with a scalar register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RX_LSL2"</literal></expr>, <expr><operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name><operator>)</operator> <operator>|</operator> <name>OPD_F_NO_ZR</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_Rm</name></expr>}</block></expr>, <expr><literal type="string">"an address with a scalar register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RX_LSL3"</literal></expr>, <expr><operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name><operator>)</operator> <operator>|</operator> <name>OPD_F_NO_ZR</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_Rm</name></expr>}</block></expr>, <expr><literal type="string">"an address with a scalar register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RZ"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_SVE_Zm_16</name></expr>}</block></expr>, <expr><literal type="string">"an address with a vector register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RZ_LSL1"</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_SVE_Zm_16</name></expr>}</block></expr>, <expr><literal type="string">"an address with a vector register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RZ_LSL2"</literal></expr>, <expr><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_SVE_Zm_16</name></expr>}</block></expr>, <expr><literal type="string">"an address with a vector register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RZ_LSL3"</literal></expr>, <expr><literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_SVE_Zm_16</name></expr>}</block></expr>, <expr><literal type="string">"an address with a vector register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RZ_XTW_14"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_SVE_Zm_16</name></expr>,<expr><name>FLD_SVE_xs_14</name></expr>}</block></expr>, <expr><literal type="string">"an address with a vector register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RZ_XTW_22"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_SVE_Zm_16</name></expr>,<expr><name>FLD_SVE_xs_22</name></expr>}</block></expr>, <expr><literal type="string">"an address with a vector register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RZ_XTW1_14"</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_SVE_Zm_16</name></expr>,<expr><name>FLD_SVE_xs_14</name></expr>}</block></expr>, <expr><literal type="string">"an address with a vector register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RZ_XTW1_22"</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_SVE_Zm_16</name></expr>,<expr><name>FLD_SVE_xs_22</name></expr>}</block></expr>, <expr><literal type="string">"an address with a vector register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RZ_XTW2_14"</literal></expr>, <expr><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_SVE_Zm_16</name></expr>,<expr><name>FLD_SVE_xs_14</name></expr>}</block></expr>, <expr><literal type="string">"an address with a vector register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RZ_XTW2_22"</literal></expr>, <expr><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_SVE_Zm_16</name></expr>,<expr><name>FLD_SVE_xs_22</name></expr>}</block></expr>, <expr><literal type="string">"an address with a vector register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RZ_XTW3_14"</literal></expr>, <expr><literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_SVE_Zm_16</name></expr>,<expr><name>FLD_SVE_xs_14</name></expr>}</block></expr>, <expr><literal type="string">"an address with a vector register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_RZ_XTW3_22"</literal></expr>, <expr><literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_Rn</name></expr>,<expr><name>FLD_SVE_Zm_16</name></expr>,<expr><name>FLD_SVE_xs_22</name></expr>}</block></expr>, <expr><literal type="string">"an address with a vector register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_ZI_U5"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Zn</name></expr>}</block></expr>, <expr><literal type="string">"an address with a 5-bit unsigned offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_ZI_U5x2"</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Zn</name></expr>}</block></expr>, <expr><literal type="string">"an address with a 5-bit unsigned offset, multiplied by 2"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_ZI_U5x4"</literal></expr>, <expr><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Zn</name></expr>}</block></expr>, <expr><literal type="string">"an address with a 5-bit unsigned offset, multiplied by 4"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_ZI_U5x8"</literal></expr>, <expr><literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Zn</name></expr>}</block></expr>, <expr><literal type="string">"an address with a 5-bit unsigned offset, multiplied by 8"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_ZZ_LSL"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Zn</name></expr>,<expr><name>FLD_SVE_Zm_16</name></expr>}</block></expr>, <expr><literal type="string">"an address with a vector register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_ZZ_SXTW"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Zn</name></expr>,<expr><name>FLD_SVE_Zm_16</name></expr>}</block></expr>, <expr><literal type="string">"an address with a vector register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_ADDRESS</name></expr>, <expr><literal type="string">"SVE_ADDR_ZZ_UXTW"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Zn</name></expr>,<expr><name>FLD_SVE_Zm_16</name></expr>}</block></expr>, <expr><literal type="string">"an address with a vector register offset"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_AIMM"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_imm9</name></expr>}</block></expr>, <expr><literal type="string">"a 9-bit unsigned arithmetic operand"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_ASIMM"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_imm9</name></expr>}</block></expr>, <expr><literal type="string">"a 9-bit signed arithmetic operand"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_FPIMM8"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_imm8</name></expr>}</block></expr>, <expr><literal type="string">"an 8-bit floating-point immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_I1_HALF_ONE"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_i1</name></expr>}</block></expr>, <expr><literal type="string">"either 0.5 or 1.0"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_I1_HALF_TWO"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_i1</name></expr>}</block></expr>, <expr><literal type="string">"either 0.5 or 2.0"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_I1_ZERO_ONE"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_i1</name></expr>}</block></expr>, <expr><literal type="string">"either 0.0 or 1.0"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_IMM_ROT1"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_rot1</name></expr>}</block></expr>, <expr><literal type="string">"a 1-bit rotation specifier for complex arithmetic operations"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_IMM_ROT2"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_rot2</name></expr>}</block></expr>, <expr><literal type="string">"a 2-bit rotation specifier for complex arithmetic operations"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_INV_LIMM"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_N</name></expr>,<expr><name>FLD_SVE_immr</name></expr>,<expr><name>FLD_SVE_imms</name></expr>}</block></expr>, <expr><literal type="string">"an inverted 13-bit logical immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_LIMM"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_N</name></expr>,<expr><name>FLD_SVE_immr</name></expr>,<expr><name>FLD_SVE_imms</name></expr>}</block></expr>, <expr><literal type="string">"a 13-bit logical immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_LIMM_MOV"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_N</name></expr>,<expr><name>FLD_SVE_immr</name></expr>,<expr><name>FLD_SVE_imms</name></expr>}</block></expr>, <expr><literal type="string">"a 13-bit logical move immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_PATTERN"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_pattern</name></expr>}</block></expr>, <expr><literal type="string">"an enumeration value such as POW2"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_PATTERN_SCALED"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_pattern</name></expr>}</block></expr>, <expr><literal type="string">"an enumeration value such as POW2"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_PRFOP"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_prfop</name></expr>}</block></expr>, <expr><literal type="string">"an enumeration value such as PLDL1KEEP"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_PRED_REG</name></expr>, <expr><literal type="string">"SVE_Pd"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Pd</name></expr>}</block></expr>, <expr><literal type="string">"an SVE predicate register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_PRED_REG</name></expr>, <expr><literal type="string">"SVE_Pg3"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Pg3</name></expr>}</block></expr>, <expr><literal type="string">"an SVE predicate register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_PRED_REG</name></expr>, <expr><literal type="string">"SVE_Pg4_5"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Pg4_5</name></expr>}</block></expr>, <expr><literal type="string">"an SVE predicate register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_PRED_REG</name></expr>, <expr><literal type="string">"SVE_Pg4_10"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Pg4_10</name></expr>}</block></expr>, <expr><literal type="string">"an SVE predicate register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_PRED_REG</name></expr>, <expr><literal type="string">"SVE_Pg4_16"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Pg4_16</name></expr>}</block></expr>, <expr><literal type="string">"an SVE predicate register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_PRED_REG</name></expr>, <expr><literal type="string">"SVE_Pm"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Pm</name></expr>}</block></expr>, <expr><literal type="string">"an SVE predicate register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_PRED_REG</name></expr>, <expr><literal type="string">"SVE_Pn"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Pn</name></expr>}</block></expr>, <expr><literal type="string">"an SVE predicate register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_PRED_REG</name></expr>, <expr><literal type="string">"SVE_Pt"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Pt</name></expr>}</block></expr>, <expr><literal type="string">"an SVE predicate register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_INT_REG</name></expr>, <expr><literal type="string">"SVE_Rm"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Rm</name></expr>}</block></expr>, <expr><literal type="string">"an integer register or zero"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_INT_REG</name></expr>, <expr><literal type="string">"SVE_Rn_SP"</literal></expr>, <expr><name>OPD_F_MAYBE_SP</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Rn</name></expr>}</block></expr>, <expr><literal type="string">"an integer register or SP"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_SHLIMM_PRED"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_tszh</name></expr>,<expr><name>FLD_SVE_imm5</name></expr>}</block></expr>, <expr><literal type="string">"a shift-left immediate operand"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_SHLIMM_UNPRED"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_tszh</name></expr>,<expr><name>FLD_imm5</name></expr>}</block></expr>, <expr><literal type="string">"a shift-left immediate operand"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_SHRIMM_PRED"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_tszh</name></expr>,<expr><name>FLD_SVE_imm5</name></expr>}</block></expr>, <expr><literal type="string">"a shift-right immediate operand"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_SHRIMM_UNPRED"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_tszh</name></expr>,<expr><name>FLD_imm5</name></expr>}</block></expr>, <expr><literal type="string">"a shift-right immediate operand"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_SIMM5"</literal></expr>, <expr><name>OPD_F_SEXT</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_imm5</name></expr>}</block></expr>, <expr><literal type="string">"a 5-bit signed immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_SIMM5B"</literal></expr>, <expr><name>OPD_F_SEXT</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_imm5b</name></expr>}</block></expr>, <expr><literal type="string">"a 5-bit signed immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_SIMM6"</literal></expr>, <expr><name>OPD_F_SEXT</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_imms</name></expr>}</block></expr>, <expr><literal type="string">"a 6-bit signed immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_SIMM8"</literal></expr>, <expr><name>OPD_F_SEXT</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_imm8</name></expr>}</block></expr>, <expr><literal type="string">"an 8-bit signed immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_UIMM3"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_imm3</name></expr>}</block></expr>, <expr><literal type="string">"a 3-bit unsigned immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_UIMM7"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_imm7</name></expr>}</block></expr>, <expr><literal type="string">"a 7-bit unsigned immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_UIMM8"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_imm8</name></expr>}</block></expr>, <expr><literal type="string">"an 8-bit unsigned immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_IMMEDIATE</name></expr>, <expr><literal type="string">"SVE_UIMM8_53"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_imm5</name></expr>,<expr><name>FLD_imm3</name></expr>}</block></expr>, <expr><literal type="string">"an 8-bit unsigned immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SIMD_REG</name></expr>, <expr><literal type="string">"SVE_VZn"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Zn</name></expr>}</block></expr>, <expr><literal type="string">"a SIMD register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SIMD_REG</name></expr>, <expr><literal type="string">"SVE_Vd"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Vd</name></expr>}</block></expr>, <expr><literal type="string">"a SIMD register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SIMD_REG</name></expr>, <expr><literal type="string">"SVE_Vm"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Vm</name></expr>}</block></expr>, <expr><literal type="string">"a SIMD register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SIMD_REG</name></expr>, <expr><literal type="string">"SVE_Vn"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Vn</name></expr>}</block></expr>, <expr><literal type="string">"a SIMD register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SVE_REG</name></expr>, <expr><literal type="string">"SVE_Za_5"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Za_5</name></expr>}</block></expr>, <expr><literal type="string">"an SVE vector register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SVE_REG</name></expr>, <expr><literal type="string">"SVE_Za_16"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Za_16</name></expr>}</block></expr>, <expr><literal type="string">"an SVE vector register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SVE_REG</name></expr>, <expr><literal type="string">"SVE_Zd"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Zd</name></expr>}</block></expr>, <expr><literal type="string">"an SVE vector register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SVE_REG</name></expr>, <expr><literal type="string">"SVE_Zm_5"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Zm_5</name></expr>}</block></expr>, <expr><literal type="string">"an SVE vector register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SVE_REG</name></expr>, <expr><literal type="string">"SVE_Zm_16"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Zm_16</name></expr>}</block></expr>, <expr><literal type="string">"an SVE vector register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SVE_REG</name></expr>, <expr><literal type="string">"SVE_Zm3_INDEX"</literal></expr>, <expr><literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Zm_16</name></expr>}</block></expr>, <expr><literal type="string">"an indexed SVE vector register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SVE_REG</name></expr>, <expr><literal type="string">"SVE_Zm3_22_INDEX"</literal></expr>, <expr><literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_i3h</name></expr>, <expr><name>FLD_SVE_Zm_16</name></expr>}</block></expr>, <expr><literal type="string">"an indexed SVE vector register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SVE_REG</name></expr>, <expr><literal type="string">"SVE_Zm4_INDEX"</literal></expr>, <expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name>OPD_F_OD_LSB</name> <operator>|</operator> <name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Zm_16</name></expr>}</block></expr>, <expr><literal type="string">"an indexed SVE vector register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SVE_REG</name></expr>, <expr><literal type="string">"SVE_Zn"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Zn</name></expr>}</block></expr>, <expr><literal type="string">"an SVE vector register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SVE_REG</name></expr>, <expr><literal type="string">"SVE_Zn_INDEX"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Zn</name></expr>}</block></expr>, <expr><literal type="string">"an indexed SVE vector register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SVE_REG</name></expr>, <expr><literal type="string">"SVE_ZnxN"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Zn</name></expr>}</block></expr>, <expr><literal type="string">"a list of SVE vector registers"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SVE_REG</name></expr>, <expr><literal type="string">"SVE_Zt"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Zt</name></expr>}</block></expr>, <expr><literal type="string">"an SVE vector register"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SVE_REG</name></expr>, <expr><literal type="string">"SVE_ZtxN"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SVE_Zt</name></expr>}</block></expr>, <expr><literal type="string">"a list of SVE vector registers"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_SIMD_ELEMENT</name></expr>, <expr><literal type="string">"SM3_IMM2"</literal></expr>, <expr><name>OPD_F_HAS_INSERTER</name> <operator>|</operator> <name>OPD_F_HAS_EXTRACTOR</name></expr>, <expr><block>{<expr><name>FLD_SM3_imm2</name></expr>}</block></expr>, <expr><literal type="string">"an indexed SM3 vector immediate"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>AARCH64_OPND_CLASS_NIL</name></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="string">"DUMMY"</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>op_enum_table</name> <index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">863</literal></expr>,
<expr><literal type="number">864</literal></expr>,
<expr><literal type="number">865</literal></expr>,
<expr><literal type="number">868</literal></expr>,
<expr><literal type="number">869</literal></expr>,
<expr><literal type="number">870</literal></expr>,
<expr><literal type="number">871</literal></expr>,
<expr><literal type="number">872</literal></expr>,
<expr><literal type="number">866</literal></expr>,
<expr><literal type="number">867</literal></expr>,
<expr><literal type="number">873</literal></expr>,
<expr><literal type="number">874</literal></expr>,
<expr><literal type="number">896</literal></expr>,
<expr><literal type="number">897</literal></expr>,
<expr><literal type="number">898</literal></expr>,
<expr><literal type="number">901</literal></expr>,
<expr><literal type="number">902</literal></expr>,
<expr><literal type="number">903</literal></expr>,
<expr><literal type="number">904</literal></expr>,
<expr><literal type="number">905</literal></expr>,
<expr><literal type="number">899</literal></expr>,
<expr><literal type="number">900</literal></expr>,
<expr><literal type="number">906</literal></expr>,
<expr><literal type="number">907</literal></expr>,
<expr><literal type="number">955</literal></expr>,
<expr><literal type="number">956</literal></expr>,
<expr><literal type="number">957</literal></expr>,
<expr><literal type="number">958</literal></expr>,
<expr><literal type="number">12</literal></expr>,
<expr><literal type="number">630</literal></expr>,
<expr><literal type="number">631</literal></expr>,
<expr><literal type="number">1150</literal></expr>,
<expr><literal type="number">1152</literal></expr>,
<expr><literal type="number">1154</literal></expr>,
<expr><literal type="number">962</literal></expr>,
<expr><literal type="number">1153</literal></expr>,
<expr><literal type="number">1151</literal></expr>,
<expr><literal type="number">312</literal></expr>,
<expr><literal type="number">618</literal></expr>,
<expr><literal type="number">629</literal></expr>,
<expr><literal type="number">628</literal></expr>,
<expr><literal type="number">960</literal></expr>,
<expr><literal type="number">625</literal></expr>,
<expr><literal type="number">622</literal></expr>,
<expr><literal type="number">614</literal></expr>,
<expr><literal type="number">613</literal></expr>,
<expr><literal type="number">620</literal></expr>,
<expr><literal type="number">621</literal></expr>,
<expr><literal type="number">624</literal></expr>,
<expr><literal type="number">626</literal></expr>,
<expr><literal type="number">627</literal></expr>,
<expr><literal type="number">970</literal></expr>,
<expr><literal type="number">658</literal></expr>,
<expr><literal type="number">661</literal></expr>,
<expr><literal type="number">664</literal></expr>,
<expr><literal type="number">659</literal></expr>,
<expr><literal type="number">662</literal></expr>,
<expr><literal type="number">807</literal></expr>,
<expr><literal type="number">172</literal></expr>,
<expr><literal type="number">173</literal></expr>,
<expr><literal type="number">174</literal></expr>,
<expr><literal type="number">175</literal></expr>,
<expr><literal type="number">510</literal></expr>,
<expr><literal type="number">747</literal></expr>,
<expr><literal type="number">383</literal></expr>,
<expr><literal type="number">385</literal></expr>,
<expr><literal type="number">407</literal></expr>,
<expr><literal type="number">409</literal></expr>,
<expr><literal type="number">1218</literal></expr>,
<expr><literal type="number">1223</literal></expr>,
<expr><literal type="number">1216</literal></expr>,
<expr><literal type="number">1215</literal></expr>,
<expr><literal type="number">1219</literal></expr>,
<expr><literal type="number">1226</literal></expr>,
<expr><literal type="number">1228</literal></expr>,
<expr><literal type="number">1229</literal></expr>,
<expr><literal type="number">1225</literal></expr>,
<expr><literal type="number">1231</literal></expr>,
<expr><literal type="number">1230</literal></expr>,
<expr><literal type="number">129</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>const</specifier> <name>aarch64_opcode</name> <modifier>*</modifier></type>
<name>aarch64_get_opcode</name> <parameter_list>(<parameter><decl><type><name><name>enum</name> <name>aarch64_op</name></name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>aarch64_opcode_table</name> <operator>+</operator> <name><name>op_enum_table</name><index>[<expr><name>op</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
</unit>
