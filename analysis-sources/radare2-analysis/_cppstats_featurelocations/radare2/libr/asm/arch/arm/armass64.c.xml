<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\arm\armass64.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <name>optype_t</name> <block>{
<decl><name>ARM_NOTYPE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>ARM_GPR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>ARM_CONSTANT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>ARM_FP</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>ARM_MEM_OPT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>
}</block></enum></type> <name>OpType</name>;</typedef>

<typedef>typedef <type><enum>enum <name>regtype_t</name> <block>{
<decl><name>ARM_UNDEFINED</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>ARM_REG64</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>ARM_REG32</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>ARM_SP</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>ARM_PC</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>ARM_SIMD</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>
}</block></enum></type> <name>RegType</name>;</typedef>

<typedef>typedef <type><enum>enum <name>shifttype_t</name> <block>{
<decl><name>ARM_NO_SHIFT</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>ARM_LSL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ARM_LSR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>ARM_ASR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>ShiftType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>operand_t</name> <block>{
<decl_stmt><decl><type><name>OpType</name></type> <name>type</name></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RegType</name></type> <name>reg_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>sp_val</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>immediate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>shift_amount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ShiftType</name></type> <name>shift</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>mem_option</name></decl>;</decl_stmt>
}</block>;</struct>
}</block>;</union>
}</block></struct></type> <name>Operand</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_OPERANDS</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>Opcode_t</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mnemonic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>op_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>opcode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>operands_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Operand</name></type> <name><name>operands</name><index>[<expr><name>MAX_OPERANDS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ArmOp</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_mem_option</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>options</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"sy"</literal></expr>, <expr><literal type="string">"st"</literal></expr>, <expr><literal type="string">"ld"</literal></expr>, <expr><literal type="string">"xxx"</literal></expr>, <expr><literal type="string">"ish"</literal></expr>, <expr><literal type="string">"ishst"</literal></expr>,
<expr><literal type="string">"ishld"</literal></expr>, <expr><literal type="string">"xxx"</literal></expr>, <expr><literal type="string">"nsh"</literal></expr>, <expr><literal type="string">"nshst"</literal></expr>, <expr><literal type="string">"nshld"</literal></expr>,
<expr><literal type="string">"xxx"</literal></expr>, <expr><literal type="string">"osh"</literal></expr>, <expr><literal type="string">"oshst"</literal></expr>, <expr><literal type="string">"oshld"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">15</literal> <operator>-</operator> <name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>countLeadingZeros</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>countTrailingZeros</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>calcNegOffset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <name>shift</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0xff</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0x400</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>t</name> <operator>&amp;</operator> <name>a</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>a</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <operator>(</operator><name>t</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>^</operator> <name>t</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>countTrailingZeros</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>shift</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0xff</literal> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xff</literal> <operator>-</operator> <name>a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>countLeadingOnes</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>countLeadingZeros</name> <argument_list>(<argument><expr><operator>~</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>countTrailingOnes</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>countTrailingZeros</name> <argument_list>(<argument><expr><operator>~</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isMask</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>value</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>value</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>value</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isShiftedMask</name> <parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>value</name> <operator>&amp;&amp;</operator> <call><name>isMask</name> <argument_list>(<argument><expr><operator>(</operator><name>value</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>decodeBitMasks</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>imm</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>cto</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>mask</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator> <operator>-</operator> <literal type="number">1LL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>size</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isShiftedMask</name> <argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>countTrailingZeros</name> <argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cto</name> <operator>=</operator> <call><name>countTrailingOnes</name> <argument_list>(<argument><expr><name>imm</name> <operator>&gt;&gt;</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>imm</name> <operator>|=</operator> <operator>~</operator><name>mask</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isShiftedMask</name> <argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>UT32_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>clo</name> <init>= <expr><call><name>countLeadingOnes</name> <argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>clo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cto</name> <operator>=</operator> <name>clo</name> <operator>+</operator> <call><name>countTrailingOnes</name> <argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>size</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<decl_stmt><decl><type><name>ut32</name></type> <name>immr</name> <init>= <expr><operator>(</operator><name>size</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ut64</name></type> <name>nimms</name> <init>= <expr><operator>~</operator><operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>nimms</name> <operator>|=</operator> <operator>(</operator><name>cto</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>n</name> <init>= <expr><operator>(</operator><operator>(</operator><name>nimms</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>encoding</name> <init>= <expr><operator>(</operator><name>n</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>immr</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>nimms</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>encoding</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>mov</name><parameter_list>(<parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"movz"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0x80d2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0x8052</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"movk"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0x8072</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0x80f2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"movn"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0x8012</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0x8092</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"mov"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG64</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0xe00300aa</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ARM_CONSTANT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0x80d2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG32</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0xe003002a</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ARM_CONSTANT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0x8052</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ARM_GPR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ARM_GPR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>k</name> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ARM_CONSTANT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>imm</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>k</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0x1f0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr> ;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt> 
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>cb</name><parameter_list>(<parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"cbnz"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0x000000b5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0x00000035</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>UT32_MAX</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"cbz"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0x000000b4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0x00000034</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>UT32_MAX</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>UT32_MAX</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>imm</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>k</name> <operator>|</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0x1c</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">27</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0x1fe0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>data</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0x1fe000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ut32</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG64</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0x1f0000eb</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG32</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG32</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>shift_amount</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>UT32_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0x1f00006b</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>UT32_MAX</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>k</name> <operator>|</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&amp;</operator> <literal type="number">0x18</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">13</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">29</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>shift</name> <operator>!=</operator> <name>ARM_NO_SHIFT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>shift_amount</name> <operator>&lt;&lt;</operator> <literal type="number">18</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>shift</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ut32</name></type> <name>regsluop</name><parameter_list>(<parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG32</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ARM_GPR</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>immediate</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0xff</literal> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>k</name> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">29</literal> <operator>|</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&amp;</operator> <literal type="number">56</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator> <literal type="number">0xf</literal> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xf</literal> <operator>-</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>countTrailingZeros</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x1f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x1f</literal> <operator>-</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0xf</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">63</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>countTrailingZeros</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0xff</literal> <operator>&amp;</operator> <name>n</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ut32</name></type> <name>reglsop</name><parameter_list>(<parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG32</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ARM_GPR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">0x00682000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>k</name> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">29</literal> <operator>|</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&amp;</operator> <literal type="number">56</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>immediate</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0x100</literal> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>UT32_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>countTrailingZeros</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>k</name> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">29</literal> <operator>|</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&amp;</operator> <literal type="number">56</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator> <literal type="number">0xf</literal> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xf</literal> <operator>-</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>countTrailingZeros</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x1f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x1f</literal> <operator>-</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG32</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>countTrailingZeros</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0xf</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">63</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0xff</literal> <operator>&amp;</operator> <name>n</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0xf</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">63</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>countTrailingZeros</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0xff</literal> <operator>&amp;</operator> <name>n</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ut32</name></type> <name>bytelsop</name><parameter_list>(<parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG64</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG32</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ARM_GPR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">0x00682000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>k</name> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">29</literal> <operator>|</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&amp;</operator> <literal type="number">56</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>immediate</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0xfff</literal> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>UT32_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>halfop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>halfop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><call><name>countTrailingZeros</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>k</name> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">29</literal> <operator>|</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&amp;</operator> <literal type="number">56</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>imm</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>low_shift</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>high_shift</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_shift</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">0xfff</literal> <operator>+</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>halfop</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&amp;</operator> <literal type="number">0x1</literal> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0xf</literal> <operator>&amp;</operator> <name>imm</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>low_shift</name></expr> ;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x7</literal> <operator>&amp;</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>high_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x7</literal> <operator>&amp;</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>top_shift</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0xf</literal> <operator>&amp;</operator> <name>imm</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>low_shift</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x7</literal> <operator>&amp;</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>high_shift</name> <operator>+</operator> <literal type="number">13</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x7</literal> <operator>&amp;</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>top_shift</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0xf</literal> <operator>&amp;</operator> <name>imm</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x1f</literal> <operator>&amp;</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0xf</literal> <operator>&amp;</operator> <name>imm</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x3</literal> <operator>&amp;</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x7</literal> <operator>&amp;</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>branch</name><parameter_list>(<parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ARM_CONSTANT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>immediate</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>addr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>&amp;</operator> <literal type="number">0xfffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>|=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>n</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>m</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>h</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>n</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>h</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>bdot</name><parameter_list>(<parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>immediate</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x3</literal> <operator>||</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">0x7ffffff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0xff</literal> <operator>-</operator> <name>a</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>calcNegOffset</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>calcNegOffset</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">27</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0xff</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">0xff</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>mem_barrier</name> <parameter_list>(<parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"isb"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mem_option</name> <operator>==</operator> <literal type="number">15</literal> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>ARM_NOTYPE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>UT32_MAX</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>ARM_MEM_OPT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mem_option</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>ARM_CONSTANT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"armass64_const.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>msr</name><parameter_list>(<parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>seq_data</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_immediate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>!=</operator> <operator>(</operator><name>ARM_REG64</name> <operator>|</operator> <name>ARM_SP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>ARM_CONSTANT</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>msr_const</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>==</operator> <name><name>msr_const</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sp_val</name> <operator>=</operator> <name><name>msr_const</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sp_val</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>!=</operator> <operator>(</operator><name>ARM_REG64</name> <operator>|</operator> <name>ARM_SP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>ARM_CONSTANT</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>msr_const</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>==</operator> <name><name>msr_const</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sp_val</name> <operator>=</operator> <name><name>msr_const</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>immediate</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sp_val</name> <operator>==</operator> <literal type="number">0xfffe</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>is_immediate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sp_val</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_immediate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">0xd500401f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0xc210</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0x05</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>w</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>|=</operator> <literal type="number">0xd5200000</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <literal type="number">0xd5000000</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>b</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>seq_data</name> <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>seq_data</name> <operator>|=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>seq_data</name> <operator>|=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>*</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>seq_data</name> <operator>|=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>*</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>seq_data</name> <operator>|=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>





<return>return <expr><name>seq_data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>orr</name><parameter_list>(<parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ARM_GPR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;&amp;</operator>
<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>reg_type</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">0x000000aa</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">0x0000002a</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ARM_CONSTANT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg_type</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">0x000040b2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">0x00000032</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>imm</name> <init>= <expr><call><name>decodeBitMasks</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>immediate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>imm</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>low</name> <init>= <expr><name>imm</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>&amp;</operator> <name>ARM_REG64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x78</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&gt;</operator> <literal type="number">120</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>imm</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&gt;</operator> <literal type="number">120</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>imm</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>low</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>adrp</name><parameter_list>(<parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content> 
<decl_stmt><decl><type><name>ut64</name></type> <name>at</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><name>k</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>ARM_GPR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Usage: adrp x0, addr\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UT32_MAX</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>ARM_CONSTANT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>at</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>-</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Usage: adrp, x0, addr\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UT32_MAX</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>b0</name> <init>= <expr><name>at</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>b1</name> <init>= <expr><operator>(</operator><name>at</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
ut8 b2 = (at &gt;&gt; (8 + 7)) &amp; 0xff;
data += b0 &lt;&lt; 29;
data += b1 &lt;&lt; 16;
data += b2 &lt;&lt; 24;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>b0</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>b1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>adr</name><parameter_list>(<parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>at</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ARM_CONSTANT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>at</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>-</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">0x00000030</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">0x01000000</literal> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>b0</name> <init>= <expr><name>at</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>b1</name> <init>= <expr><operator>(</operator><name>at</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>b2</name> <init>= <expr><operator>(</operator><name>at</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>b0</name> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>b1</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>b2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>stp</name><parameter_list>(<parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0x000040a9</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>&amp;</operator> <literal type="number">0x8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>exception</name><parameter_list>(<parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>ARM_CONSTANT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>immediate</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>n</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>n</name> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arithmetic</name> <parameter_list>(<parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ARM_GPR</name> <operator>&amp;&amp;</operator>
<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ARM_GPR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ARM_GPR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">24</literal> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ARM_GPR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>neg</name><parameter_list>(<parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>=</operator> <literal type="number">31</literal></expr>;</expr_stmt> 

<return>return <expr><call><name>arithmetic</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0xd1</literal></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>parseOperands</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>operand</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><name>t</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>imm_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mem_opt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>msr_op_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>token</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><operator>*</operator><name>next</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>operand</name> <operator>&gt;=</operator> <name>MAX_OPERANDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Too many operands\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>ARM_NOTYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>=</operator> <name>ARM_UNDEFINED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>shift</name> <operator>=</operator> <name>ARM_NO_SHIFT</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"msr"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>operand</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>( <expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>||</operator> <operator>(</operator><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>sp_val</name> <operator>=</operator> <literal type="number">0xfffe</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'#'</literal></expr>?</condition><then><expr><name>token</name><operator>+</operator><literal type="number">1</literal></expr></then><else>:<expr><name>token</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"mrs"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>operand</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"msr"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>operand</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>msr_op_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>msr_const</name><index>[<expr><name>msr_op_index</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>msr_op_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name><name>msr_const</name><index>[<expr><name>msr_op_index</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>ARM_CONSTANT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>=</operator> <name><name>msr_const</name><index>[<expr><name>msr_op_index</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>imm_count</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>msr_const</name><index>[<expr><name>msr_op_index</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>operand</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal> <operator>||</operator> <name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"lsl"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>shift</name> <operator>=</operator> <name>ARM_LSL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"lsr"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>shift</name> <operator>=</operator> <name>ARM_LSR</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"asr"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>shift</name> <operator>=</operator> <name>ARM_ASR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>shift</name> <operator>!=</operator> <name>ARM_NO_SHIFT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>shift_amount</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>token</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>shift_amount</name> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>operand</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>ARM_GPR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>=</operator> <name>ARM_REG64</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>token</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"zr"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>reg</name> <operator>=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>reg</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>token</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>ARM_GPR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>=</operator> <name>ARM_REG32</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>token</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"zr"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>reg</name> <operator>=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>token</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"sp"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>reg</name> <operator>=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>reg</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>token</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>ARM_FP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>reg</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>token</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>||</operator> <name><name>token</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>msr_const</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name><name>msr_const</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>msr_const</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>sp_val</name> <operator>=</operator> <name><name>msr_const</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>ARM_GPR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>reg_type</name> <operator>=</operator> <name>ARM_SP</name> <operator>|</operator> <name>ARM_REG64</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>reg</name> <operator>=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mem_opt</name> <operator>=</operator> <call><name>get_mem_option</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mem_opt</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>ARM_MEM_OPT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>mem_option</name> <operator>=</operator> <name>mem_opt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<expr_stmt><expr><name>mem_opt</name> <operator>=</operator> <call><name>get_mem_option</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mem_opt</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>ARM_MEM_OPT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>mem_option</name> <operator>=</operator> <name>mem_opt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'#'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>ARM_CONSTANT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>token</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imm_count</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<default>default:</default>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>ARM_CONSTANT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imm_count</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>token</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><name>operand</name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>operand</name> <operator>&gt;</operator> <name>MAX_OPERANDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>parseOpcode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ArmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>space</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>space</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>ARM_NOTYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>space</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name>space</name> <operator>++</operator></expr>;</expr_stmt>
<return>return <expr><call><name>parseOperands</name> <argument_list>(<argument><expr><name>space</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>handlePAC</name><parameter_list>(<parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"autiasp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <literal type="number">0xbf2303d5</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"autiaz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <literal type="number">0x9f2303d5</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"autibsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <literal type="number">0xff2303d5</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"autibz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <literal type="number">0xdf2303d5</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"paciaz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <literal type="number">0x1f2303d5</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"pacibz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <literal type="number">0x5f2303d5</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"paciasp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <literal type="number">0x3f2303d5</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"pacibsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <literal type="number">0x7f2303d5</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"retab"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <literal type="number">0xff0f5fd6</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>arm64ass</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ArmOp</name></type> <name>ops</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parseOpcode</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"mov"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>mov</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"cb"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>cb</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"cmp"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>cmp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ldrb"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>bytelsop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x00004039</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ldrh"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>bytelsop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x00004078</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ldrsh"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>bytelsop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x0000c078</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ldrsw"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>bytelsop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x000080b8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ldrsb"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>bytelsop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x0000c039</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"strb"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>bytelsop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x00000039</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"strh"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>bytelsop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x00000078</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ldr"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>reglsop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x000040f8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"stur"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>regsluop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x000000f8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ldur"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>regsluop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x000040f8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"str"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>reglsop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x000000f8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"stp"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>stp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x000000a9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ldp"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>stp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x000040a9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"sub"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>arithmetic</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0xd1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"add x"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>arithmetic</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x91</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"add w"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>arithmetic</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"adr x"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>adr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"adrp x"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>adrp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0x00000090</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"neg"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>neg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"isb"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <literal type="number">0xdf3f03d5</literal></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>handlePAC</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"nop"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <literal type="number">0x1f2003d5</literal></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ret"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <literal type="number">0xc0035fd6</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"msr "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>msr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>op</name> <operator>!=</operator> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"mrs "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>msr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>op</name> <operator>!=</operator> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"orr "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>orr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <name>UT32_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"svc "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>exception</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x010000d4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"hvc "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>exception</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x020000d4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"smc "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>exception</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x030000d4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"brk "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>exception</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x000020d4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"hlt "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>exception</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><literal type="number">0x000040d4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"b "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>branch</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"b.eq "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>bdot</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0x00000054</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"b.hs "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>bdot</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0x02000054</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"bl "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>branch</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0x94</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"br x"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>branch</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0x1fd6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"blr x"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>branch</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0x3fd6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"dmb "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>mem_barrier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0xbf3003d5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"dsb "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>mem_barrier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0x9f3003d5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"isb"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>mem_barrier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0xdf3f03d5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>op</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
