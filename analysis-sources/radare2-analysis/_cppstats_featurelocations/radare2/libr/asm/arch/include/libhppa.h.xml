<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\include\libhppa.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBHPPA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBHPPA_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_IN_WORD</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PA_PAGESIZE</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>


<enum>enum <name>pa_arch</name> <block>{<decl><name>pa10</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, <decl><name>pa11</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>, <decl><name>pa20</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>, <decl><name>pa20w</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>}</block>;</enum>



<enum>enum <name>hppa_reloc_field_selector_type</name>
<block>{
<decl><name>R_HPPA_FSEL</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>,
<decl><name>R_HPPA_LSSEL</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,
<decl><name>R_HPPA_RSSEL</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,
<decl><name>R_HPPA_LSEL</name> <init>= <expr><literal type="number">0x3</literal></expr></init></decl>,
<decl><name>R_HPPA_RSEL</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>,
<decl><name>R_HPPA_LDSEL</name> <init>= <expr><literal type="number">0x5</literal></expr></init></decl>,
<decl><name>R_HPPA_RDSEL</name> <init>= <expr><literal type="number">0x6</literal></expr></init></decl>,
<decl><name>R_HPPA_LRSEL</name> <init>= <expr><literal type="number">0x7</literal></expr></init></decl>,
<decl><name>R_HPPA_RRSEL</name> <init>= <expr><literal type="number">0x8</literal></expr></init></decl>,
<decl><name>R_HPPA_NSEL</name> <init>= <expr><literal type="number">0x9</literal></expr></init></decl>,
<decl><name>R_HPPA_NLSEL</name> <init>= <expr><literal type="number">0xa</literal></expr></init></decl>,
<decl><name>R_HPPA_NLRSEL</name> <init>= <expr><literal type="number">0xb</literal></expr></init></decl>,
<decl><name>R_HPPA_PSEL</name> <init>= <expr><literal type="number">0xc</literal></expr></init></decl>,
<decl><name>R_HPPA_LPSEL</name> <init>= <expr><literal type="number">0xd</literal></expr></init></decl>,
<decl><name>R_HPPA_RPSEL</name> <init>= <expr><literal type="number">0xe</literal></expr></init></decl>,
<decl><name>R_HPPA_TSEL</name> <init>= <expr><literal type="number">0xf</literal></expr></init></decl>,
<decl><name>R_HPPA_LTSEL</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>R_HPPA_RTSEL</name> <init>= <expr><literal type="number">0x11</literal></expr></init></decl>,
<decl><name>R_HPPA_LTPSEL</name> <init>= <expr><literal type="number">0x12</literal></expr></init></decl>,
<decl><name>R_HPPA_RTPSEL</name> <init>= <expr><literal type="number">0x13</literal></expr></init></decl>
}</block>;</enum>






<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_fsel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_lssel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_rssel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_lsel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_rsel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_ldsel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_rdsel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_lrsel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_rrsel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_nsel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_nlsel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_nlrsel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_psel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_lpsel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_rpsel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_tsel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_ltsel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_rtsel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_one</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_two</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_pcrel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_con</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_plabel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>e_abs</name></cpp:undef>


<enum>enum <name>hppa_reloc_field_selector_type_alt</name>
<block>{
<decl><name>e_fsel</name> <init>= <expr><name>R_HPPA_FSEL</name></expr></init></decl>,
<decl><name>e_lssel</name> <init>= <expr><name>R_HPPA_LSSEL</name></expr></init></decl>,
<decl><name>e_rssel</name> <init>= <expr><name>R_HPPA_RSSEL</name></expr></init></decl>,
<decl><name>e_lsel</name> <init>= <expr><name>R_HPPA_LSEL</name></expr></init></decl>,
<decl><name>e_rsel</name> <init>= <expr><name>R_HPPA_RSEL</name></expr></init></decl>,
<decl><name>e_ldsel</name> <init>= <expr><name>R_HPPA_LDSEL</name></expr></init></decl>,
<decl><name>e_rdsel</name> <init>= <expr><name>R_HPPA_RDSEL</name></expr></init></decl>,
<decl><name>e_lrsel</name> <init>= <expr><name>R_HPPA_LRSEL</name></expr></init></decl>,
<decl><name>e_rrsel</name> <init>= <expr><name>R_HPPA_RRSEL</name></expr></init></decl>,
<decl><name>e_nsel</name> <init>= <expr><name>R_HPPA_NSEL</name></expr></init></decl>,
<decl><name>e_nlsel</name> <init>= <expr><name>R_HPPA_NLSEL</name></expr></init></decl>,
<decl><name>e_nlrsel</name> <init>= <expr><name>R_HPPA_NLRSEL</name></expr></init></decl>,
<decl><name>e_psel</name> <init>= <expr><name>R_HPPA_PSEL</name></expr></init></decl>,
<decl><name>e_lpsel</name> <init>= <expr><name>R_HPPA_LPSEL</name></expr></init></decl>,
<decl><name>e_rpsel</name> <init>= <expr><name>R_HPPA_RPSEL</name></expr></init></decl>,
<decl><name>e_tsel</name> <init>= <expr><name>R_HPPA_TSEL</name></expr></init></decl>,
<decl><name>e_ltsel</name> <init>= <expr><name>R_HPPA_LTSEL</name></expr></init></decl>,
<decl><name>e_rtsel</name> <init>= <expr><name>R_HPPA_RTSEL</name></expr></init></decl>,
<decl><name>e_ltpsel</name> <init>= <expr><name>R_HPPA_LTPSEL</name></expr></init></decl>,
<decl><name>e_rtpsel</name> <init>= <expr><name>R_HPPA_RTPSEL</name></expr></init></decl>
}</block>;</enum>

<enum>enum <name>hppa_reloc_expr_type</name>
<block>{
<decl><name>R_HPPA_E_ONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>R_HPPA_E_TWO</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>R_HPPA_E_PCREL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>R_HPPA_E_CON</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>R_HPPA_E_PLABEL</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>R_HPPA_E_ABS</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <name>hppa_reloc_expr_type_alt</name>
<block>{
<decl><name>e_one</name> <init>= <expr><name>R_HPPA_E_ONE</name></expr></init></decl>,
<decl><name>e_two</name> <init>= <expr><name>R_HPPA_E_TWO</name></expr></init></decl>,
<decl><name>e_pcrel</name> <init>= <expr><name>R_HPPA_E_PCREL</name></expr></init></decl>,
<decl><name>e_con</name> <init>= <expr><name>R_HPPA_E_CON</name></expr></init></decl>,
<decl><name>e_plabel</name> <init>= <expr><name>R_HPPA_E_PLABEL</name></expr></init></decl>,
<decl><name>e_abs</name> <init>= <expr><name>R_HPPA_E_ABS</name></expr></init></decl>
}</block>;</enum>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HPPA_R_ARG_RELOC</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) &gt;&gt; 22) &amp; 0x3ff)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HPPA_R_CONSTANT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((bfd_signed_vma)(a)) &lt;&lt; (BFD_ARCH_SIZE-22)) &gt;&gt; (BFD_ARCH_SIZE-22))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HPPA_R_ADDEND</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((r) &lt;&lt; 22) + ((c) &amp; 0x3fffff))</cpp:value></cpp:define>






<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sign_extend</name> <argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list> <name>ATTRIBUTE_UNUSED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>low_sign_extend</name> <argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list> <name>ATTRIBUTE_UNUSED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sign_unext</name> <argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list> <name>ATTRIBUTE_UNUSED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>low_sign_unext</name> <argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list> <name>ATTRIBUTE_UNUSED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>re_assemble_3</name> <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list> <name>ATTRIBUTE_UNUSED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>re_assemble_12</name> <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list> <name>ATTRIBUTE_UNUSED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>re_assemble_14</name> <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list> <name>ATTRIBUTE_UNUSED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>re_assemble_16</name> <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list> <name>ATTRIBUTE_UNUSED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>re_assemble_17</name> <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list> <name>ATTRIBUTE_UNUSED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>re_assemble_21</name> <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list> <name>ATTRIBUTE_UNUSED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>re_assemble_22</name> <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list> <name>ATTRIBUTE_UNUSED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bfd_signed_vma</name></type> <name>hppa_field_adjust</name>
<argument_list>(<argument><expr><name>bfd_vma</name></expr></argument>, <argument><expr><name>bfd_signed_vma</name></expr></argument>, <argument><expr>enum <name>hppa_reloc_field_selector_type_alt</name></expr></argument>)</argument_list>
<name>ATTRIBUTE_UNUSED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>bfd_hppa_insn2fmt</name> <argument_list>(<argument><expr><name>bfd</name> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list> <name>ATTRIBUTE_UNUSED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>hppa_rebuild_insn</name> <argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list> <name>ATTRIBUTE_UNUSED</name></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>sign_extend</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>signbit</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><operator>(</operator><name>signbit</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>^</operator> <name>signbit</name><operator>)</operator> <operator>-</operator> <name>signbit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>low_sign_extend</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>sign_unext</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len_ones</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len_ones</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>len</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>x</name> <operator>&amp;</operator> <name>len_ones</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>low_sign_unext</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>len</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>sign_unext</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>temp</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name>sign</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>re_assemble_3</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>as3</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator> <operator>(</operator><name>as3</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">13</literal><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>as3</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">13</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>re_assemble_12</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>as12</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator> <operator>(</operator><name>as12</name> <operator>&amp;</operator> <literal type="number">0x800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>as12</name> <operator>&amp;</operator> <literal type="number">0x400</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">10</literal> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>as12</name> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>re_assemble_14</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>as14</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator> <operator>(</operator><name>as14</name> <operator>&amp;</operator> <literal type="number">0x1fff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>as14</name> <operator>&amp;</operator> <literal type="number">0x2000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>re_assemble_16</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>as16</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>


<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>as16</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>as16</name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>t</name> <operator>^</operator> <name>s</name> <operator>^</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>re_assemble_17</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>as17</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator> <operator>(</operator><name>as17</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>as17</name> <operator>&amp;</operator> <literal type="number">0x0f800</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <literal type="number">11</literal><operator>)</operator><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>as17</name> <operator>&amp;</operator> <literal type="number">0x00400</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">10</literal> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>as17</name> <operator>&amp;</operator> <literal type="number">0x003ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>re_assemble_21</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>as21</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator> <operator>(</operator><name>as21</name> <operator>&amp;</operator> <literal type="number">0x100000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>as21</name> <operator>&amp;</operator> <literal type="number">0x0ffe00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>as21</name> <operator>&amp;</operator> <literal type="number">0x000180</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>as21</name> <operator>&amp;</operator> <literal type="number">0x00007c</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>as21</name> <operator>&amp;</operator> <literal type="number">0x000003</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>re_assemble_22</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>as22</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator> <operator>(</operator><name>as22</name> <operator>&amp;</operator> <literal type="number">0x200000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>as22</name> <operator>&amp;</operator> <literal type="number">0x1f0000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">21</literal> <operator>-</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>as22</name> <operator>&amp;</operator> <literal type="number">0x00f800</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <literal type="number">11</literal><operator>)</operator><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>as22</name> <operator>&amp;</operator> <literal type="number">0x000400</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">10</literal> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>as22</name> <operator>&amp;</operator> <literal type="number">0x0003ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bfd_signed_vma</name></type>
<name>hppa_field_adjust</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>sym_val</name></decl></parameter>,
<parameter><decl><type><name>bfd_signed_vma</name></type> <name>addend</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>hppa_reloc_field_selector_type_alt</name></name></type> <name>r_field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bfd_signed_vma</name></type> <name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>sym_val</name> <operator>+</operator> <name>addend</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r_field</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>e_fsel</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>e_nsel</name></expr>:</case>





<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>e_lsel</name></expr>:</case>
<case>case <expr><name>e_nlsel</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>value</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>e_rsel</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>value</name> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>e_lssel</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>value</name> <operator>+</operator> <literal type="number">0x400</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>value</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>e_rssel</name></expr>:</case>




<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x7ff</literal><operator>)</operator> <operator>^</operator> <literal type="number">0x400</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x400</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>e_ldsel</name></expr>:</case>



<expr_stmt><expr><name>value</name> <operator>=</operator> <name>value</name> <operator>+</operator> <literal type="number">0x800</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>value</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>e_rdsel</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>value</name> <operator>|</operator> <operator>-</operator><literal type="number">0x800</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>e_lrsel</name></expr>:</case>
<case>case <expr><name>e_nlrsel</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>sym_val</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>addend</name> <operator>+</operator> <literal type="number">0x1000</literal><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><literal type="number">0x2000</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>value</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>e_rrsel</name></expr>:</case>





<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>sym_val</name> <operator>&amp;</operator> <literal type="number">0x7ff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>addend</name> <operator>&amp;</operator> <literal type="number">0x1fff</literal><operator>)</operator> <operator>^</operator> <literal type="number">0x1000</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x1000</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_opcode</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((insn) &gt;&gt; 26) &amp; 0x3f)</cpp:value></cpp:define>

<enum>enum <name>hppa_opcode_type</name>
<block>{


<decl><name>OP_SYSOP</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>OP_MEMMNG</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>OP_ALU</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>OP_NDXMEM</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,
<decl><name>OP_SPOP</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
<decl><name>OP_DIAG</name> <init>= <expr><literal type="number">0x05</literal></expr></init></decl>,
<decl><name>OP_FMPYADD</name> <init>= <expr><literal type="number">0x06</literal></expr></init></decl>,
<decl><name>OP_UNDEF07</name> <init>= <expr><literal type="number">0x07</literal></expr></init></decl>,
<decl><name>OP_COPRW</name> <init>= <expr><literal type="number">0x09</literal></expr></init></decl>,
<decl><name>OP_COPRDW</name> <init>= <expr><literal type="number">0x0b</literal></expr></init></decl>,
<decl><name>OP_COPR</name> <init>= <expr><literal type="number">0x0c</literal></expr></init></decl>,
<decl><name>OP_FLOAT</name> <init>= <expr><literal type="number">0x0e</literal></expr></init></decl>,
<decl><name>OP_PRDSPEC</name> <init>= <expr><literal type="number">0x0f</literal></expr></init></decl>,
<decl><name>OP_UNDEF15</name> <init>= <expr><literal type="number">0x15</literal></expr></init></decl>,
<decl><name>OP_UNDEF1d</name> <init>= <expr><literal type="number">0x1d</literal></expr></init></decl>,
<decl><name>OP_FMPYSUB</name> <init>= <expr><literal type="number">0x26</literal></expr></init></decl>,
<decl><name>OP_FPFUSED</name> <init>= <expr><literal type="number">0x2e</literal></expr></init></decl>,
<decl><name>OP_SHEXDP0</name> <init>= <expr><literal type="number">0x34</literal></expr></init></decl>,
<decl><name>OP_SHEXDP1</name> <init>= <expr><literal type="number">0x35</literal></expr></init></decl>,
<decl><name>OP_SHEXDP2</name> <init>= <expr><literal type="number">0x36</literal></expr></init></decl>,
<decl><name>OP_UNDEF37</name> <init>= <expr><literal type="number">0x37</literal></expr></init></decl>,
<decl><name>OP_SHEXDP3</name> <init>= <expr><literal type="number">0x3c</literal></expr></init></decl>,
<decl><name>OP_SHEXDP4</name> <init>= <expr><literal type="number">0x3d</literal></expr></init></decl>,
<decl><name>OP_MULTMED</name> <init>= <expr><literal type="number">0x3e</literal></expr></init></decl>,
<decl><name>OP_UNDEF3f</name> <init>= <expr><literal type="number">0x3f</literal></expr></init></decl>,

<decl><name>OP_LDIL</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,
<decl><name>OP_ADDIL</name> <init>= <expr><literal type="number">0x0a</literal></expr></init></decl>,

<decl><name>OP_LDO</name> <init>= <expr><literal type="number">0x0d</literal></expr></init></decl>,
<decl><name>OP_LDB</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>OP_LDH</name> <init>= <expr><literal type="number">0x11</literal></expr></init></decl>,
<decl><name>OP_LDW</name> <init>= <expr><literal type="number">0x12</literal></expr></init></decl>,
<decl><name>OP_LDWM</name> <init>= <expr><literal type="number">0x13</literal></expr></init></decl>,
<decl><name>OP_STB</name> <init>= <expr><literal type="number">0x18</literal></expr></init></decl>,
<decl><name>OP_STH</name> <init>= <expr><literal type="number">0x19</literal></expr></init></decl>,
<decl><name>OP_STW</name> <init>= <expr><literal type="number">0x1a</literal></expr></init></decl>,
<decl><name>OP_STWM</name> <init>= <expr><literal type="number">0x1b</literal></expr></init></decl>,

<decl><name>OP_LDD</name> <init>= <expr><literal type="number">0x14</literal></expr></init></decl>,
<decl><name>OP_STD</name> <init>= <expr><literal type="number">0x1c</literal></expr></init></decl>,

<decl><name>OP_FLDW</name> <init>= <expr><literal type="number">0x16</literal></expr></init></decl>,
<decl><name>OP_LDWL</name> <init>= <expr><literal type="number">0x17</literal></expr></init></decl>,
<decl><name>OP_FSTW</name> <init>= <expr><literal type="number">0x1e</literal></expr></init></decl>,
<decl><name>OP_STWL</name> <init>= <expr><literal type="number">0x1f</literal></expr></init></decl>,

<decl><name>OP_COMBT</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,
<decl><name>OP_COMIBT</name> <init>= <expr><literal type="number">0x21</literal></expr></init></decl>,
<decl><name>OP_COMBF</name> <init>= <expr><literal type="number">0x22</literal></expr></init></decl>,
<decl><name>OP_COMIBF</name> <init>= <expr><literal type="number">0x23</literal></expr></init></decl>,
<decl><name>OP_CMPBDT</name> <init>= <expr><literal type="number">0x27</literal></expr></init></decl>,
<decl><name>OP_ADDBT</name> <init>= <expr><literal type="number">0x28</literal></expr></init></decl>,
<decl><name>OP_ADDIBT</name> <init>= <expr><literal type="number">0x29</literal></expr></init></decl>,
<decl><name>OP_ADDBF</name> <init>= <expr><literal type="number">0x2a</literal></expr></init></decl>,
<decl><name>OP_ADDIBF</name> <init>= <expr><literal type="number">0x2b</literal></expr></init></decl>,
<decl><name>OP_CMPBDF</name> <init>= <expr><literal type="number">0x2f</literal></expr></init></decl>,
<decl><name>OP_BVB</name> <init>= <expr><literal type="number">0x30</literal></expr></init></decl>,
<decl><name>OP_BB</name> <init>= <expr><literal type="number">0x31</literal></expr></init></decl>,
<decl><name>OP_MOVB</name> <init>= <expr><literal type="number">0x32</literal></expr></init></decl>,
<decl><name>OP_MOVIB</name> <init>= <expr><literal type="number">0x33</literal></expr></init></decl>,
<decl><name>OP_CMPIBD</name> <init>= <expr><literal type="number">0x3b</literal></expr></init></decl>,

<decl><name>OP_COMICLR</name> <init>= <expr><literal type="number">0x24</literal></expr></init></decl>,
<decl><name>OP_SUBI</name> <init>= <expr><literal type="number">0x25</literal></expr></init></decl>,
<decl><name>OP_ADDIT</name> <init>= <expr><literal type="number">0x2c</literal></expr></init></decl>,
<decl><name>OP_ADDI</name> <init>= <expr><literal type="number">0x2d</literal></expr></init></decl>,

<decl><name>OP_BE</name> <init>= <expr><literal type="number">0x38</literal></expr></init></decl>,
<decl><name>OP_BLE</name> <init>= <expr><literal type="number">0x39</literal></expr></init></decl>,
<decl><name>OP_BL</name> <init>= <expr><literal type="number">0x3a</literal></expr></init></decl>
}</block>;</enum>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>bfd_hppa_insn2fmt</name> <parameter_list>(<parameter><decl><type><name>bfd</name> <modifier>*</modifier></type><name>abfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>insn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>hppa_opcode_type</name></name></type> <name>op</name> <init>= <expr><call><name>get_opcode</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>OP_COMICLR</name></expr>:</case>
<case>case <expr><name>OP_SUBI</name></expr>:</case>
<case>case <expr><name>OP_ADDIT</name></expr>:</case>
<case>case <expr><name>OP_ADDI</name></expr>:</case>
<return>return <expr><literal type="number">11</literal></expr>;</return>

<case>case <expr><name>OP_COMBT</name></expr>:</case>
<case>case <expr><name>OP_COMIBT</name></expr>:</case>
<case>case <expr><name>OP_COMBF</name></expr>:</case>
<case>case <expr><name>OP_COMIBF</name></expr>:</case>
<case>case <expr><name>OP_CMPBDT</name></expr>:</case>
<case>case <expr><name>OP_ADDBT</name></expr>:</case>
<case>case <expr><name>OP_ADDIBT</name></expr>:</case>
<case>case <expr><name>OP_ADDBF</name></expr>:</case>
<case>case <expr><name>OP_ADDIBF</name></expr>:</case>
<case>case <expr><name>OP_CMPBDF</name></expr>:</case>
<case>case <expr><name>OP_BVB</name></expr>:</case>
<case>case <expr><name>OP_BB</name></expr>:</case>
<case>case <expr><name>OP_MOVB</name></expr>:</case>
<case>case <expr><name>OP_MOVIB</name></expr>:</case>
<case>case <expr><name>OP_CMPIBD</name></expr>:</case>
<return>return <expr><literal type="number">12</literal></expr>;</return>

<case>case <expr><name>OP_LDO</name></expr>:</case>
<case>case <expr><name>OP_LDB</name></expr>:</case>
<case>case <expr><name>OP_LDH</name></expr>:</case>
<case>case <expr><name>OP_LDW</name></expr>:</case>
<case>case <expr><name>OP_LDWM</name></expr>:</case>
<case>case <expr><name>OP_STB</name></expr>:</case>
<case>case <expr><name>OP_STH</name></expr>:</case>
<case>case <expr><name>OP_STW</name></expr>:</case>
<case>case <expr><name>OP_STWM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>abfd</name><operator>-&gt;</operator><name>arch_info</name><operator>-&gt;</operator><name>mach</name></name> <operator>&gt;=</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">16</literal></expr>;</return></block_content></block></if></if_stmt> 
<return>return <expr><literal type="number">14</literal></expr>;</return>

<case>case <expr><name>OP_FLDW</name></expr>:</case>
<case>case <expr><name>OP_LDWL</name></expr>:</case>
<case>case <expr><name>OP_FSTW</name></expr>:</case>
<case>case <expr><name>OP_STWL</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name><name>abfd</name><operator>-&gt;</operator><name>arch_info</name><operator>-&gt;</operator><name>mach</name></name> <operator>&gt;=</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">16</literal></expr>;</return></block_content></block></if></if_stmt> 
<return>return <expr><operator>-</operator><literal type="number">11</literal></expr>;</return>

<case>case <expr><name>OP_LDD</name></expr>:</case>
<case>case <expr><name>OP_STD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>abfd</name><operator>-&gt;</operator><name>arch_info</name><operator>-&gt;</operator><name>mach</name></name> <operator>&gt;=</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt> 
<return>return <expr><literal type="number">10</literal></expr>;</return>

<case>case <expr><name>OP_BL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">22</literal></expr>;</return></block_content></block></if></if_stmt>

<case>case <expr><name>OP_BE</name></expr>:</case>
<case>case <expr><name>OP_BLE</name></expr>:</case>
<return>return <expr><literal type="number">17</literal></expr>;</return>

<case>case <expr><name>OP_LDIL</name></expr>:</case>
<case>case <expr><name>OP_ADDIL</name></expr>:</case>
<return>return <expr><literal type="number">21</literal></expr>;</return>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">32</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>hppa_rebuild_insn</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>insn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r_format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>r_format</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">11</literal></expr>:</case>
<return>return <expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <operator>~</operator> <literal type="number">0x7ff</literal><operator>)</operator> <operator>|</operator> <call><name>low_sign_unext</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">12</literal></expr>:</case>
<return>return <expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <operator>~</operator> <literal type="number">0x1ffd</literal><operator>)</operator> <operator>|</operator> <call><name>re_assemble_12</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>


<case>case <expr><literal type="number">10</literal></expr>:</case>
<return>return <expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <operator>~</operator> <literal type="number">0x3ff1</literal><operator>)</operator> <operator>|</operator> <call><name>re_assemble_14</name> <argument_list>(<argument><expr><name>value</name> <operator>&amp;</operator> <operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><operator>-</operator><literal type="number">11</literal></expr>:</case>
<return>return <expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <operator>~</operator> <literal type="number">0x3ff9</literal><operator>)</operator> <operator>|</operator> <call><name>re_assemble_14</name> <argument_list>(<argument><expr><name>value</name> <operator>&amp;</operator> <operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">14</literal></expr>:</case>
<return>return <expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <operator>~</operator> <literal type="number">0x3fff</literal><operator>)</operator> <operator>|</operator> <call><name>re_assemble_14</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>


<case>case <expr><operator>-</operator><literal type="number">10</literal></expr>:</case>
<return>return <expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <operator>~</operator> <literal type="number">0xfff1</literal><operator>)</operator> <operator>|</operator> <call><name>re_assemble_16</name> <argument_list>(<argument><expr><name>value</name> <operator>&amp;</operator> <operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><operator>-</operator><literal type="number">16</literal></expr>:</case>
<return>return <expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <operator>~</operator> <literal type="number">0xfff9</literal><operator>)</operator> <operator>|</operator> <call><name>re_assemble_16</name> <argument_list>(<argument><expr><name>value</name> <operator>&amp;</operator> <operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">16</literal></expr>:</case>
<return>return <expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <operator>~</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>|</operator> <call><name>re_assemble_16</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>


<case>case <expr><literal type="number">17</literal></expr>:</case>
<return>return <expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <operator>~</operator> <literal type="number">0x1f1ffd</literal><operator>)</operator> <operator>|</operator> <call><name>re_assemble_17</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">21</literal></expr>:</case>
<return>return <expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <operator>~</operator> <literal type="number">0x1fffff</literal><operator>)</operator> <operator>|</operator> <call><name>re_assemble_21</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">22</literal></expr>:</case>
<return>return <expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <operator>~</operator> <literal type="number">0x3ff1ffd</literal><operator>)</operator> <operator>|</operator> <call><name>re_assemble_22</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">32</literal></expr>:</case>
<return>return <expr><name>value</name></expr>;</return>

<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>insn</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
