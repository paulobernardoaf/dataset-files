<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\include\opcode\tricore.h">























<typedef>typedef <type><enum>enum <name>_tricore_opcode_arch_val</name>
<block>{
<decl><name>TRICORE_GENERIC</name> <init>= <expr><literal type="number">0x00000000</literal></expr></init></decl>,
<decl><name>TRICORE_RIDER_A</name> <init>= <expr><literal type="number">0x00000001</literal></expr></init></decl>,
<decl><name>TRICORE_RIDER_B</name> <init>= <expr><literal type="number">0x00000002</literal></expr></init></decl>,
<decl><name>TRICORE_RIDER_D</name> <init>= <expr><name>TRICORE_RIDER_B</name></expr></init></decl>,
<decl><name>TRICORE_V2</name> <init>= <expr><literal type="number">0x00000004</literal></expr></init></decl>,
<decl><name>TRICORE_PCP</name> <init>= <expr><literal type="number">0x00000010</literal></expr></init></decl>,
<decl><name>TRICORE_PCP2</name> <init>= <expr><literal type="number">0x00000020</literal></expr></init></decl>
}</block></enum></type> <name>tricore_isa</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bfd_mach_rider_a</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bfd_mach_rider_b</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bfd_mach_rider_c</name></cpp:macro> <cpp:value>0x0003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bfd_mach_rider_2</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bfd_mach_rider_d</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bfd_mach_rider_mask</name></cpp:macro> <cpp:value>0x000f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEC_ARCH_BIT_0</name></cpp:macro> <cpp:value>0x008</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRICORE_V2_UP</name></cpp:macro> <cpp:value>TRICORE_V2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRICORE_RIDER_D_UP</name></cpp:macro> <cpp:value>(TRICORE_RIDER_D | TRICORE_V2_UP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRICORE_RIDER_B_UP</name></cpp:macro> <cpp:value>(TRICORE_RIDER_B | TRICORE_RIDER_D_UP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRICORE_RIDER_B_DN</name></cpp:macro> <cpp:value>TRICORE_RIDER_B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRICORE_RIDER_D_DN</name></cpp:macro> <cpp:value>(TRICORE_RIDER_D | TRICORE_RIDER_B_DN)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRICORE_V2_DN</name></cpp:macro> <cpp:value>(TRICORE_V2 | TRICORE_RIDER_D_DN)</cpp:value></cpp:define>



<typedef>typedef <type><enum>enum <name>_tricore_fmt</name>
<block>{


<decl><name>TRICORE_FMT_ABS</name></decl>,
<decl><name>TRICORE_FMT_ABSB</name></decl>,
<decl><name>TRICORE_FMT_B</name></decl>,
<decl><name>TRICORE_FMT_BIT</name></decl>,
<decl><name>TRICORE_FMT_BO</name></decl>,
<decl><name>TRICORE_FMT_BOL</name></decl>,
<decl><name>TRICORE_FMT_BRC</name></decl>,
<decl><name>TRICORE_FMT_BRN</name></decl>,
<decl><name>TRICORE_FMT_BRR</name></decl>,
<decl><name>TRICORE_FMT_RC</name></decl>,
<decl><name>TRICORE_FMT_RCPW</name></decl>,
<decl><name>TRICORE_FMT_RCR</name></decl>,
<decl><name>TRICORE_FMT_RCRR</name></decl>,
<decl><name>TRICORE_FMT_RCRW</name></decl>,
<decl><name>TRICORE_FMT_RLC</name></decl>,
<decl><name>TRICORE_FMT_RR</name></decl>,
<decl><name>TRICORE_FMT_RR1</name></decl>,
<decl><name>TRICORE_FMT_RR2</name></decl>,
<decl><name>TRICORE_FMT_RRPW</name></decl>,
<decl><name>TRICORE_FMT_RRR</name></decl>,
<decl><name>TRICORE_FMT_RRR1</name></decl>,
<decl><name>TRICORE_FMT_RRR2</name></decl>,
<decl><name>TRICORE_FMT_RRRR</name></decl>,
<decl><name>TRICORE_FMT_RRRW</name></decl>,
<decl><name>TRICORE_FMT_SYS</name></decl>,



<decl><name>TRICORE_FMT_SB</name></decl>,
<decl><name>TRICORE_FMT_SBC</name></decl>,
<decl><name>TRICORE_FMT_SBR</name></decl>,
<decl><name>TRICORE_FMT_SBRN</name></decl>,
<decl><name>TRICORE_FMT_SC</name></decl>,
<decl><name>TRICORE_FMT_SLR</name></decl>,
<decl><name>TRICORE_FMT_SLRO</name></decl>,
<decl><name>TRICORE_FMT_SR</name></decl>,
<decl><name>TRICORE_FMT_SRC</name></decl>,
<decl><name>TRICORE_FMT_SRO</name></decl>,
<decl><name>TRICORE_FMT_SRR</name></decl>,
<decl><name>TRICORE_FMT_SRRS</name></decl>,
<decl><name>TRICORE_FMT_SSR</name></decl>,
<decl><name>TRICORE_FMT_SSRO</name></decl>,
<decl><name>TRICORE_FMT_MAX</name></decl> 
}</block></enum></type> <name>tricore_fmt</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALMOST_STDC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TRICORE_FMT_ ##x</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TRICORE_FMT_ ##x</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TRICORE_FMT_x</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_abs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_absb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_bo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_bol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_brc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_brn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_brr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_rcpw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_rcr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_rcrr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_rcrw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_rlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_rr1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_rr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_rrpw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_rrr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_rrr1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_rrr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_rrrr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_rrrw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_sbc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_sbr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_sbrn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_slr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_slro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_sr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_sro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_srr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_srrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_ssr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>tricore_mask_ssro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name><name>tricore_opmask</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>tricore_init_arch_vars</name></type> <name>PARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>



<struct>struct <name>tricore_opcode</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len32</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>opcode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>lose</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>tricore_fmt</name></type> <name>format</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nr_operands</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fields</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>tricore_isa</name></type> <name>isa</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>insind</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>inslast</name></decl>;</decl_stmt> 
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>tricore_opcode</name></name></type> <name><name>tricore_opcodes</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int</name></type> <name>tricore_numopcodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name><name>tricore_opmask</name><index>[]</index></name></decl>;</decl_stmt>



<struct>struct <name>pcp_opcode</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len32</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>opcode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>lose</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fmt_group</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ooo</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nr_operands</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>tricore_isa</name></type> <name>isa</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>insind</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>inslast</name></decl>;</decl_stmt> 
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>pcp_opcode</name></name></type> <name><name>pcp_opcodes</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int</name></type> <name>pcp_numopcodes</name></decl>;</decl_stmt>



<struct>struct <name>tricore_core_register</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>addr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>tricore_isa</name></type> <name>isa</name></decl>;</decl_stmt> 
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>tricore_core_register</name></name></type> <name><name>tricore_sfrs</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int</name></type> <name>tricore_numsfrs</name></decl>;</decl_stmt>























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_ABS_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_ABS_OFF18</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_ABS_S1_D</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_ABSB_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_ABSB_OFF18</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_ABSB_B</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_ABSB_BPOS3</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_B_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_B_DISP24</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BIT_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BIT_D</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BIT_P2</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BIT_P1</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BIT_S2</name></cpp:macro> <cpp:value>'4'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BIT_S1</name></cpp:macro> <cpp:value>'5'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BO_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BO_OFF10</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BO_S2</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BO_S1_D</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BOL_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BOL_OFF16</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BOL_S2</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BOL_S1_D</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BRC_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BRC_DISP15</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BRC_CONST4</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BRC_S1</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BRN_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BRN_DISP15</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BRN_N</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BRN_S1</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BRR_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BRR_DISP15</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BRR_S2</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_BRR_S1</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RC_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RC_D</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RC_CONST9</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RC_S1</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCPW_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCPW_D</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCPW_P</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCPW_W</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCPW_CONST4</name></cpp:macro> <cpp:value>'4'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCPW_S1</name></cpp:macro> <cpp:value>'5'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCR_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCR_D</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCR_S3</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCR_CONST9</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCR_S1</name></cpp:macro> <cpp:value>'4'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCRR_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCRR_D</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCRR_S3</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCRR_CONST4</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCRR_S1</name></cpp:macro> <cpp:value>'4'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCRW_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCRW_D</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCRW_S3</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCRW_W</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCRW_CONST4</name></cpp:macro> <cpp:value>'4'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RCRW_S1</name></cpp:macro> <cpp:value>'5'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RLC_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RLC_D</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RLC_CONST16</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RLC_S1</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RR_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RR_D</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RR_N</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RR_S2</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RR_S1</name></cpp:macro> <cpp:value>'4'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RR1_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RR1_D</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RR1_N</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RR1_S2</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RR1_S1</name></cpp:macro> <cpp:value>'4'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RR2_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RR2_D</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RR2_S2</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RR2_S1</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRPW_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRPW_D</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRPW_P</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRPW_W</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRPW_S2</name></cpp:macro> <cpp:value>'4'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRPW_S1</name></cpp:macro> <cpp:value>'5'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRR_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRR_D</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRR_S3</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRR_N</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRR_S2</name></cpp:macro> <cpp:value>'4'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRR_S1</name></cpp:macro> <cpp:value>'5'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRR1_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRR1_D</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRR1_S3</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRR1_N</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRR1_S2</name></cpp:macro> <cpp:value>'4'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRR1_S1</name></cpp:macro> <cpp:value>'5'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRR2_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRR2_D</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRR2_S3</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRR2_S2</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRR2_S1</name></cpp:macro> <cpp:value>'4'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRRR_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRRR_D</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRRR_S3</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRRR_S2</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRRR_S1</name></cpp:macro> <cpp:value>'4'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRRW_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRRW_D</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRRW_S3</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRRW_W</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRRW_S2</name></cpp:macro> <cpp:value>'4'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_RRRW_S1</name></cpp:macro> <cpp:value>'5'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SYS_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SYS_S1_D</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SB_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SB_DISP8</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SBC_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SBC_CONST4</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SBC_DISP4</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SBR_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SBR_S2</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SBR_DISP4</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SBRN_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SBRN_N</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SBRN_DISP4</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SC_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SC_CONST8</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SLR_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SLR_S2</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SLR_D</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SLRO_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SLRO_OFF4</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SLRO_D</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SR_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SR_S1_D</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SRC_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SRC_CONST4</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SRC_S1_D</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SRO_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SRO_S2</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SRO_OFF4</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SRR_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SRR_S2</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SRR_S1_D</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SRRS_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SRRS_S2</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SRRS_S1_D</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SRRS_N</name></cpp:macro> <cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SSR_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SSR_S2</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SSR_S1</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SSRO_NONE</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SSRO_OFF4</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SSRO_S1</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>




























</unit>
