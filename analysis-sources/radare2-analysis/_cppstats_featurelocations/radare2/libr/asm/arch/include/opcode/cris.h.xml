<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\include\opcode\cris.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CRIS_H_INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CRIS_H_INCLUDED_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><specifier>const</specifier></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>const</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_REG</name></cpp:macro> <cpp:value>(15)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_SP</name></cpp:macro> <cpp:value>(14)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_PC</name></cpp:macro> <cpp:value>(15)</cpp:value></cpp:define>




<enum>enum <name>cris_insn_version_usage</name>
<block>{

<decl><name>cris_ver_version_all</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>cris_ver_warning</name></decl>,


<decl><name>cris_ver_v0_3</name></decl>,


<decl><name>cris_ver_v3p</name></decl>,


<decl><name>cris_ver_v8</name></decl>,


<decl><name>cris_ver_v8p</name></decl>,


<decl><name>cris_ver_sim_v0_10</name></decl>,


<decl><name>cris_ver_v0_10</name></decl>,


<decl><name>cris_ver_v3_10</name></decl>,


<decl><name>cris_ver_v8_10</name></decl>,


<decl><name>cris_ver_v10</name></decl>,


<decl><name>cris_ver_v10p</name></decl>,




<decl><name>cris_ver_v32p</name></decl>
}</block>;</enum>



<struct>struct <name>cris_spec_reg</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>number</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>reg_size</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>enum</name> <name>cris_insn_version_usage</name></name></type> <name>applicable_version</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>warning</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>cris_spec_reg</name></name></type> <name><name>cris_spec_regs</name><index>[]</index></name></decl>;</decl_stmt>



<struct>struct <name>cris_support_reg</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>number</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>cris_support_reg</name></name></type> <name><name>cris_support_regs</name><index>[]</index></name></decl>;</decl_stmt>

<struct>struct <name>cris_cond15</name>
<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>cris_insn_version_usage</name></name></type> <name>applicable_version</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>cris_cond15</name></name></type> <name><name>cris_conds15</name><index>[]</index></name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTOINCR_BIT</name></cpp:macro> <cpp:value>(0x04)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDAP_QUICK_OPCODE</name></cpp:macro> <cpp:value>(0x0100)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDAP_QUICK_Z_BITS</name></cpp:macro> <cpp:value>(0x0e00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIAP_OPCODE</name></cpp:macro> <cpp:value>(0x0540)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIAP_Z_BITS</name></cpp:macro> <cpp:value>(0x0a80)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIP_OPCODE</name></cpp:macro> <cpp:value>(0x0970)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIP_Z_BITS</name></cpp:macro> <cpp:value>(0xf280)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDAP_INDIR_LOW</name></cpp:macro> <cpp:value>(0x40)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDAP_INDIR_LOW_Z</name></cpp:macro> <cpp:value>(0x80)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDAP_INDIR_HIGH</name></cpp:macro> <cpp:value>(0x09)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDAP_INDIR_HIGH_Z</name></cpp:macro> <cpp:value>(0x02)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDAP_INDIR_OPCODE</name></cpp:macro> <cpp:value>(BDAP_INDIR_HIGH * 0x0100 + BDAP_INDIR_LOW)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDAP_INDIR_Z_BITS</name></cpp:macro> <cpp:value>(BDAP_INDIR_HIGH_Z * 0x100 + BDAP_INDIR_LOW_Z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDAP_PC_LOW</name></cpp:macro> <cpp:value>(BDAP_INDIR_LOW + REG_PC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDAP_INCR_HIGH</name></cpp:macro> <cpp:value>(BDAP_INDIR_HIGH + AUTOINCR_BIT)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_CRIS_PREFIX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_CC</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_HS</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_CS</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_LO</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_NE</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_EQ</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_VC</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_VS</name></cpp:macro> <cpp:value>0x5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_PL</name></cpp:macro> <cpp:value>0x6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_MI</name></cpp:macro> <cpp:value>0x7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_LS</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_HI</name></cpp:macro> <cpp:value>0x9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_GE</name></cpp:macro> <cpp:value>0xA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_LT</name></cpp:macro> <cpp:value>0xB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_GT</name></cpp:macro> <cpp:value>0xC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_LE</name></cpp:macro> <cpp:value>0xD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_A</name></cpp:macro> <cpp:value>0xE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_EXT</name></cpp:macro> <cpp:value>0xF</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>cris_cc_strings</name><index>[]</index></name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRANCH_QUICK_LOW</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRANCH_QUICK_HIGH</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRANCH_QUICK_OPCODE</name></cpp:macro> <cpp:value>(BRANCH_QUICK_HIGH * 0x0100 + BRANCH_QUICK_LOW)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRANCH_QUICK_Z_BITS</name></cpp:macro> <cpp:value>(0x0F00)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BA_QUICK_HIGH</name></cpp:macro> <cpp:value>(BRANCH_QUICK_HIGH + CC_A * 0x10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BA_QUICK_OPCODE</name></cpp:macro> <cpp:value>(BA_QUICK_HIGH * 0x100 + BRANCH_QUICK_LOW)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRANCH_PC_LOW</name></cpp:macro> <cpp:value>(0xFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRANCH_INCR_HIGH</name></cpp:macro> <cpp:value>(0x0D)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BA_PC_INCR_OPCODE</name></cpp:macro> <cpp:value>((BRANCH_INCR_HIGH + CC_A * 0x10) * 0x0100 + BRANCH_PC_LOW)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_INDIR_OPCODE</name></cpp:macro> <cpp:value>(0x0930)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_INDIR_Z_BITS</name></cpp:macro> <cpp:value>(0xf2c0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_PC_INCR_OPCODE</name></cpp:macro> <cpp:value>(JUMP_INDIR_OPCODE + AUTOINCR_BIT * 0x0100 + REG_PC)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVE_M_TO_PREG_OPCODE</name></cpp:macro> <cpp:value>0x0a30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVE_M_TO_PREG_ZBITS</name></cpp:macro> <cpp:value>0x01c0</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVE_PC_INCR_OPCODE_PREFIX</name></cpp:macro> <cpp:value>(((BDAP_INCR_HIGH | (REG_PC &lt;&lt; 4)) &lt;&lt; 8) | BDAP_PC_LOW | (2 &lt;&lt; 4))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVE_PC_INCR_OPCODE_SUFFIX</name></cpp:macro> <cpp:value>(MOVE_M_TO_PREG_OPCODE | REG_PC | (AUTOINCR_BIT &lt;&lt; 8))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_PC_INCR_OPCODE_V32</name></cpp:macro> <cpp:value>(0x0DBF)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BA_DWORD_OPCODE</name></cpp:macro> <cpp:value>(0x0EBF)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOP_OPCODE</name></cpp:macro> <cpp:value>(0x050F)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOP_Z_BITS</name></cpp:macro> <cpp:value>(0xFFFF ^ NOP_OPCODE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOP_OPCODE_V32</name></cpp:macro> <cpp:value>(0x05B0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOP_Z_BITS_V32</name></cpp:macro> <cpp:value>(0xFFFF ^ NOP_OPCODE_V32)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOP_OPCODE_COMMON</name></cpp:macro> <cpp:value>(0x630)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOP_OPCODE_ZBITS_COMMON</name></cpp:macro> <cpp:value>(0xffff &amp; ~NOP_OPCODE_COMMON)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAPC_DWORD_OPCODE</name></cpp:macro> <cpp:value>(0x0D7F)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAPC_DWORD_Z_BITS</name></cpp:macro> <cpp:value>(0x0fff &amp; ~LAPC_DWORD_OPCODE)</cpp:value></cpp:define>


<enum>enum <name>cris_imm_oprnd_size_type</name>
<block>{

<decl><name>SIZE_NONE</name></decl>,


<decl><name>SIZE_FIX_32</name></decl>,


<decl><name>SIZE_SPEC_REG</name></decl>,


<decl><name>SIZE_FIELD_SIGNED</name></decl>,


<decl><name>SIZE_FIELD_UNSIGNED</name></decl>,


<decl><name>SIZE_FIELD</name></decl>
}</block>;</enum>



<enum>enum <name>cris_op_type</name>
<block>{
<decl><name>cris_not_implemented_op</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>cris_abs_op</name></decl>,
<decl><name>cris_addi_op</name></decl>,
<decl><name>cris_asr_op</name></decl>,
<decl><name>cris_asrq_op</name></decl>,
<decl><name>cris_ax_ei_setf_op</name></decl>,
<decl><name>cris_bdap_prefix</name></decl>,
<decl><name>cris_biap_prefix</name></decl>,
<decl><name>cris_break_op</name></decl>,
<decl><name>cris_btst_nop_op</name></decl>,
<decl><name>cris_clearf_di_op</name></decl>,
<decl><name>cris_dip_prefix</name></decl>,
<decl><name>cris_dstep_logshift_mstep_neg_not_op</name></decl>,
<decl><name>cris_eight_bit_offset_branch_op</name></decl>,
<decl><name>cris_move_mem_to_reg_movem_op</name></decl>,
<decl><name>cris_move_reg_to_mem_movem_op</name></decl>,
<decl><name>cris_move_to_preg_op</name></decl>,
<decl><name>cris_muls_op</name></decl>,
<decl><name>cris_mulu_op</name></decl>,
<decl><name>cris_none_reg_mode_add_sub_cmp_and_or_move_op</name></decl>,
<decl><name>cris_none_reg_mode_clear_test_op</name></decl>,
<decl><name>cris_none_reg_mode_jump_op</name></decl>,
<decl><name>cris_none_reg_mode_move_from_preg_op</name></decl>,
<decl><name>cris_quick_mode_add_sub_op</name></decl>,
<decl><name>cris_quick_mode_and_cmp_move_or_op</name></decl>,
<decl><name>cris_quick_mode_bdap_prefix</name></decl>,
<decl><name>cris_reg_mode_add_sub_cmp_and_or_move_op</name></decl>,
<decl><name>cris_reg_mode_clear_op</name></decl>,
<decl><name>cris_reg_mode_jump_op</name></decl>,
<decl><name>cris_reg_mode_move_from_preg_op</name></decl>,
<decl><name>cris_reg_mode_test_op</name></decl>,
<decl><name>cris_scc_op</name></decl>,
<decl><name>cris_sixteen_bit_offset_branch_op</name></decl>,
<decl><name>cris_three_operand_add_sub_cmp_and_or_op</name></decl>,
<decl><name>cris_three_operand_bound_op</name></decl>,
<decl><name>cris_two_operand_bound_op</name></decl>,
<decl><name>cris_xor_op</name></decl>
}</block>;</enum>

<struct>struct <name>cris_opcode</name>
<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>match</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lose</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name></type> <name>delayed</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>cris_imm_oprnd_size_type</name></name></type> <name>imm_oprnd_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>cris_insn_version_usage</name></name></type> <name>applicable_version</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>cris_op_type</name></name></type> <name>op</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>cris_opcode</name></name></type> <name><name>cris_opcodes</name><index>[]</index></name></decl>;</decl_stmt>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRIS_DIS_FLAG_MEMREF</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRIS_DIS_FLAG_MEM_TARGET_IS_REG</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRIS_DIS_FLAG_MEM_TARGET2_IS_REG</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRIS_DIS_FLAG_MEM_TARGET2_MULT2</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRIS_DIS_FLAG_MEM_TARGET2_MULT4</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRIS_DIS_FLAG_MEM_TARGET2_MEM</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRIS_DIS_FLAG_MEM_TARGET2_MEM_BYTE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRIS_DIS_FLAG_MEM_TARGET2_MEM_WORD</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 







</unit>
