<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\include\opcode\lanai.h">




































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lanai_architecture</name></cpp:macro> <cpp:value>bfd_lanai_architecture</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>architecture_pname</name></cpp:macro> <cpp:value>bfd_lanai_architecture_pname</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lanai_opcode</name></cpp:macro> <cpp:value>bfd_lanai_opcode</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lanai_opcodes</name></cpp:macro> <cpp:value>bfd_lanai_opcodes</cpp:value></cpp:define>






<enum>enum <name>lanai_architecture</name> <block>{
<decl><name>v0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>v1</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>architecture_pname</name><index>[]</index></name></decl>;</decl_stmt>

<struct>struct <name>lanai_opcode</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>match</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>lose</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>lanai_architecture</name></name></type> <name>architecture</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_ALIAS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_JSR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_RI</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_RR</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_RRR</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_RM</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_RRM</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_BR</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SLS</name></cpp:macro> <cpp:value>0x400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SLI</name></cpp:macro> <cpp:value>0x800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SPLS</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_PUNT</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SBR</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SCC</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_BYTE</name></cpp:macro> <cpp:value>0x20000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_HALF</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_FULL</name></cpp:macro> <cpp:value>0x00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_DATA_SIZE</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(4&gt;&gt;((X)&amp;0x30000))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_CONDITIONAL</name></cpp:macro> <cpp:value>0x40000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_REL</name></cpp:macro> <cpp:value>0x80000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_LEADZ</name></cpp:macro> <cpp:value>0x100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_POPC</name></cpp:macro> <cpp:value>0x200000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_CONDBR</name></cpp:macro> <cpp:value>(F_BR|F_CONDITIONAL)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_UNBR</name></cpp:macro> <cpp:value>(F_BR)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_RELCONDBR</name></cpp:macro> <cpp:value>(F_REL|F_BR|F_CONDITIONAL)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_RELUNBR</name></cpp:macro> <cpp:value>(F_REL|F_BR)</cpp:value></cpp:define> 





















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_USE_SI</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_USE_SPLS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_USE_SLS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_USE_SLI</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_USE_SBR</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_T</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_F</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_HI</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_LS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_CC</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_CS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_NE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_EQ</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_VC</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_VS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_PL</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_MI</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_GE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_LT</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_GT</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_LE</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_UGE</name></cpp:macro> <cpp:value>L3_CC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_ULT</name></cpp:macro> <cpp:value>L3_CS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_UGT</name></cpp:macro> <cpp:value>L3_GT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_ULE</name></cpp:macro> <cpp:value>L3_LE</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RI</name></cpp:macro> <cpp:value>(0x00000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RI_OPCODE_MASK</name></cpp:macro> <cpp:value>(0x80000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RI_MASK</name></cpp:macro> <cpp:value>(0xf0030000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RR</name></cpp:macro> <cpp:value>(0xc0000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RR_OPCODE_MASK</name></cpp:macro> <cpp:value>(0xf0000003)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RR_MASK</name></cpp:macro> <cpp:value>(0xf00207fb)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_LEADZ</name></cpp:macro> <cpp:value>(0xc0000002)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_LEADZ_OPCODE_MASK</name></cpp:macro> <cpp:value>L3_RR_OPCODE_MASK</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_LEADZ_MASK</name></cpp:macro> <cpp:value>(0xf00207fb)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_POPC</name></cpp:macro> <cpp:value>(0xc0000003)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_POPC_OPCODE_MASK</name></cpp:macro> <cpp:value>L3_RR_OPCODE_MASK</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_POPC_MASK</name></cpp:macro> <cpp:value>(0xf00207fb)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RRR</name></cpp:macro> <cpp:value>(0xd0000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RRR_OPCODE_MASK</name></cpp:macro> <cpp:value>(0xf0000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RRR_MASK</name></cpp:macro> <cpp:value>(0xf0000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RM</name></cpp:macro> <cpp:value>(0x80000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RM_OPCODE_MASK</name></cpp:macro> <cpp:value>(0xe0000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RM_MASK</name></cpp:macro> <cpp:value>(0xf0030000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RRM</name></cpp:macro> <cpp:value>(0xa0000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RRM_OPCODE_MASK</name></cpp:macro> <cpp:value>(0xe0000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RRM_MASK</name></cpp:macro> <cpp:value>(0xe0030007)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_BR</name></cpp:macro> <cpp:value>(0xe0000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_BR_OPCODE_MASK</name></cpp:macro> <cpp:value>(0xf0000002)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_BR_MASK</name></cpp:macro> <cpp:value>(0xfe000003)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_BRR</name></cpp:macro> <cpp:value>(0xe1000002)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_BRR_OPCODE_MASK</name></cpp:macro> <cpp:value>(0xf1000002)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_BRR_MASK</name></cpp:macro> <cpp:value>(0xff000003)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SCC</name></cpp:macro> <cpp:value>(0xe0000002)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SCC_OPCODE_MASK</name></cpp:macro> <cpp:value>(0xf1000002)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SCC_MASK</name></cpp:macro> <cpp:value>(0xff000003)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SLS</name></cpp:macro> <cpp:value>(0xf0000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SLS_OPCODE_MASK</name></cpp:macro> <cpp:value>(0xf0020000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SLS_MASK</name></cpp:macro> <cpp:value>(0xf0030000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SLI</name></cpp:macro> <cpp:value>(0xf0020000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SLI_OPCODE_MASK</name></cpp:macro> <cpp:value>(0xf0030000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SLI_MASK</name></cpp:macro> <cpp:value>(0xf0030000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SPLS</name></cpp:macro> <cpp:value>(0xf0030000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SPLS_OPCODE_MASK</name></cpp:macro> <cpp:value>(0xf0038000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SPLS_MASK</name></cpp:macro> <cpp:value>(0xf003fc00)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BAD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SI</name></cpp:macro> <cpp:value>(0xf0038000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SI_OPCODE_MASK</name></cpp:macro> <cpp:value>___bogus___</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SI_MASK</name></cpp:macro> <cpp:value>(0xf003cf47)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_PUNT</name></cpp:macro> <cpp:value>(0xf003ff47)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_PUNT_OPCODE_MASK</name></cpp:macro> <cpp:value>(0xf003ff47)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_PUNT_MASK</name></cpp:macro> <cpp:value>(0xf003ff47)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SBR</name></cpp:macro> <cpp:value>(0xf003c000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SBR_OPCODE_MASK</name></cpp:macro> <cpp:value>(0xf003f806)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SBR_MASK</name></cpp:macro> <cpp:value>(0xfe03f807)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_ADD</name></cpp:macro> <cpp:value>(0x00)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_ADDC</name></cpp:macro> <cpp:value>(0x01)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SUB</name></cpp:macro> <cpp:value>(0x02)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SUBB</name></cpp:macro> <cpp:value>(0x03)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_AND</name></cpp:macro> <cpp:value>(0x04)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_OR</name></cpp:macro> <cpp:value>(0x05)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_XOR</name></cpp:macro> <cpp:value>(0x06)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SH</name></cpp:macro> <cpp:value>(0x07)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_OP_MASK</name></cpp:macro> <cpp:value>(0x07)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_FLAGS</name></cpp:macro> <cpp:value>(0x08)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_ARITH</name></cpp:macro> <cpp:value>(0x10)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_HALFWORD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_BYTE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_FULLWORD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SIGNED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_UNSIGNED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SIGNED_HALFWORD</name></cpp:macro> <cpp:value>( L3_SIGNED | L3_HALFWORD )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SIGNED_BYTE</name></cpp:macro> <cpp:value>( L3_SIGNED | L3_BYTE )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SIGNED_FULLWORD</name></cpp:macro> <cpp:value>( L3_SIGNED | L3_FULLWORD )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_UNSIGNED_HALFWORD</name></cpp:macro> <cpp:value>( L3_UNSIGNED | L3_HALFWORD )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_UNSIGNED_BYTE</name></cpp:macro> <cpp:value>( L3_UNSIGNED | L3_BYTE )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_UNSIGNED_FULLWORD</name></cpp:macro> <cpp:value>( L3_UNSIGNED | L3_FULLWORD )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RI_F</name></cpp:macro> <cpp:value>(0x00020000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RI_H</name></cpp:macro> <cpp:value>(0x00010000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RR_F</name></cpp:macro> <cpp:value>(0x00020000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_LEADZ_F</name></cpp:macro> <cpp:value>L3_RR_F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_POPC_F</name></cpp:macro> <cpp:value>L3_RR_F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RRR_F</name></cpp:macro> <cpp:value>(0x00020000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RRR_H</name></cpp:macro> <cpp:value>(0x00010000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RM_P</name></cpp:macro> <cpp:value>(0x00020000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RM_Q</name></cpp:macro> <cpp:value>(0x00010000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RM_S</name></cpp:macro> <cpp:value>(0x10000000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RRM_P</name></cpp:macro> <cpp:value>(0x00020000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RRM_Q</name></cpp:macro> <cpp:value>(0x00010000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RRM_S</name></cpp:macro> <cpp:value>(0x10000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RRM_Y</name></cpp:macro> <cpp:value>(0x00000004)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RRM_L</name></cpp:macro> <cpp:value>(0x00000002)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RRM_E</name></cpp:macro> <cpp:value>(0x00000001)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_BR_R</name></cpp:macro> <cpp:value>(0x00000002)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SLS_S</name></cpp:macro> <cpp:value>(0x00010000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SPLS_Y</name></cpp:macro> <cpp:value>(0x00004000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SPLS_S</name></cpp:macro> <cpp:value>(0x00002000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SPLS_E</name></cpp:macro> <cpp:value>(0x00001000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SPLS_P</name></cpp:macro> <cpp:value>(0x00000800)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SPLS_Q</name></cpp:macro> <cpp:value>(0x00000400)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SI_F</name></cpp:macro> <cpp:value>(0x00002000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SBR_H</name></cpp:macro> <cpp:value>(0x00000004)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SBR_R</name></cpp:macro> <cpp:value>(0x00000002)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SBR_N</name></cpp:macro> <cpp:value>(0x00000001)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_CONST_MASK</name></cpp:macro> <cpp:value>(0x0000ffff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_BR_CONST_MASK</name></cpp:macro> <cpp:value>(0x01fffffc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SPLS_CONST_MASK</name></cpp:macro> <cpp:value>(0x000003ff)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;0x1f) &lt;&lt; 23)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RS1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;0x1f) &lt;&lt; 18)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RS2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;0x1f) &lt;&lt; 11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RS3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;0x1f) &lt;&lt; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RI_OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;L3_OP_MASK) &lt;&lt; 28)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RR_OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;L3_OP_MASK) &lt;&lt; 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RRR_OP1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;L3_OP_MASK) &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RRR_OP2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;L3_OP_MASK) &lt;&lt; 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RRM_OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;L3_OP_MASK) &lt;&lt; 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_RRM_MODE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;0x7) &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_BR_COND</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((x)&amp;0xe) &lt;&lt; 24) | ((x)&amp;1) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SBR_COND</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((x)&amp;0xe) &lt;&lt; 24) | ((x)&amp;1) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SLS_HIBITS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;0x1f) &lt;&lt; 18)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SLS_CONST</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((x)&amp;0x1f) &lt;&lt; 18) | ((x)&amp;0xffff))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SLI_CONST</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((x)&amp;0x1f) &lt;&lt; 18) | ((x)&amp;0xffff))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SPLS_MODE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;0x5) &lt;&lt; 12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_SBR_OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;0x7) &lt;&lt; 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_OP1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;0x7) &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L3_OP2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;0x7) &lt;&lt; 8)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEX</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((int)(value)) &lt;&lt; ((8 * sizeof (int)) - bits) ) &gt;&gt; ((8 * sizeof (int)) - bits) )</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_RD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((i) &gt;&gt; 23) &amp; 0x1f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_RS1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((i) &gt;&gt; 18) &amp; 0x1f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_RS2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((i) &gt;&gt; 11) &amp; 0x1f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_RS3</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((i) &gt;&gt; 3) &amp; 0x1f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_OP1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((i) &gt;&gt; 0) &amp; 0x07)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_OP2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((i) &gt;&gt; 8) &amp; 0x07)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_RI_OP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((i) &gt;&gt; 28) &amp; 0x07)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_RR_OP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X_OP2(i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_RRM_OP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X_OP2(i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_RRR_OP1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X_OP1(i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_RRR_OP2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X_OP2(i)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_C10</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) &amp; 0x3ff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_C16</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) &amp; 0xffff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_C21</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((i) &amp; 0xffff) | (((i) &amp; 0x7c0000)&gt;&gt;2))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_C25</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) &amp; 0x1fffffc)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>lanai_opcode</name></name></type> <name><name>lanai_opcodes</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int</name></type> <name>bfd_lanai_num_opcodes</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMOPCODES</name></cpp:macro> <cpp:value>bfd_lanai_num_opcodes</cpp:value></cpp:define>




</unit>
