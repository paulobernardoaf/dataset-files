<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\whitespace\wsdis.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WS_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WS_API</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <block>{
<decl><name>WS_OP_UNK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>WS_OP_NOP</name></decl>,
<decl><name>WS_OP_PREF</name></decl>,
<decl><name>WS_OP_STACK</name></decl>,
<decl><name>WS_OP_ARITH</name></decl>,
<decl><name>WS_OP_HEAP</name></decl>,
<decl><name>WS_OP_FLOW</name></decl>,
<decl><name>WS_OP_IO</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_ws_pref_optype</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>WS_OP_UNK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case> <return>return <expr><name>WS_OP_STACK</name></expr>;</return>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case> <return>return <expr><name>WS_OP_PREF</name></expr>;</return>
<case>case <expr><literal type="number">10</literal></expr>:</case> <return>return <expr><name>WS_OP_FLOW</name></expr>;</return>
<default>default:</default> <return>return <expr><name>WS_OP_NOP</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_ws_suf_optype</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>WS_OP_UNK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case> <return>return <expr><name>WS_OP_ARITH</name></expr>;</return>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case> <return>return <expr><name>WS_OP_HEAP</name></expr>;</return>
<case>case <expr><literal type="number">10</literal></expr>:</case> <return>return <expr><name>WS_OP_IO</name></expr>;</return>
<default>default:</default> <return>return <expr><name>WS_OP_NOP</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>WS_API</name> <name>int</name></type> <name>get_ws_optype</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_ws_pref_optype</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>WS_OP_PREF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>get_ws_suf_optype</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>WS_OP_NOP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><call><name>get_ws_suf_optype</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>get_ws_pref_optype</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>WS_API</name> <specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>get_ws_next_token</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ret</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st32</name></type> <name>get_ws_val</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>sig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>tok</name> <init>= <expr><call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sig</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>tok</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <operator>(</operator><name>tok</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 
<expr_stmt><expr><name>tok</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tok</name> <operator>||</operator> <operator>*</operator><name>tok</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sig</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name> <operator>*</operator> <operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ret</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>tok</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>-</operator> <operator>(</operator><name>tok</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><ternary><condition><expr><name>sig</name></expr>?</condition><then> <expr><name>ret</name> <operator>*</operator> <operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>WS_API</name> <name>int</name></type> <name>test_ws_token_exist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <name>token</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>WS_API</name> <name>int</name></type> <name>wsdis</name><parameter_list>(<parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf_asm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>get_ws_optype</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WS_OP_UNK</name></expr>:</case>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>WS_OP_NOP</name></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"nop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</return>
<case>case <expr><name>WS_OP_STACK</name></expr>:</case>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>test_ws_token_exist</name> <argument_list>(<argument><expr><call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>test_ws_token_exist</name> <argument_list>(<argument><expr><name>ptr</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"push %d"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>n</name></expr>;</return>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"dup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"swap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"pop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"slide"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"illegal_stack_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>test_ws_token_exist</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_strbuf_length</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><call><name>get_ws_val</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>test_ws_token_exist</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>ptr</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
</block_content>}</block></switch>
<case>case <expr><name>WS_OP_HEAP</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"store"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"load"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"illegal_heap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
<case>case <expr><name>WS_OP_IO</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"putc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"puti"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"getc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"geti"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"illegal_io"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
<break>break;</break>
<case>case <expr><name>WS_OP_ARITH</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <literal type="string">"add"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <literal type="string">"sub"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <literal type="string">"mul"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <literal type="string">"div"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <literal type="string">"mod"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <literal type="string">"illegal_ar_t"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <literal type="string">"illegal_ar"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>buf_asm</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name>buf_asm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
<case>case <expr><name>WS_OP_FLOW</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content> 
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"illegal_fl_lf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"ret"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"jn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"jz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>test_ws_token_exist</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_strbuf_length</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><call><name>get_ws_val</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <call><name>test_ws_token_exist</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_ws_next_token</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <literal type="string">"jmp"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <literal type="string">"call"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">' '</literal></expr>:</case> <expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <literal type="string">"mark"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>test_ws_token_exist</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_asm</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name>buf_asm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><call><name>get_ws_val</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <call><name>test_ws_token_exist</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"wtf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
