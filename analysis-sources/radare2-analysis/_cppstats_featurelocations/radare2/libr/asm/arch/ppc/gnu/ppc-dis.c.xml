<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\asm\arch\ppc\gnu\ppc-dis.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sysdep.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;disas-asm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;opcode/ppc.h&gt;</cpp:file></cpp:include>






<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>print_insn_powerpc</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name>ppc_cpu_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bfd_vma</name></type> <name>__bfd_getb32</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bfd_byte</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>addr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>addr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bfd_vma</name></type> <name>__bfd_getl32</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bfd_byte</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>addr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>addr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>dis_private</name>
<block>{

<decl_stmt><decl><type><name>ppc_cpu_t</name></type> <name>dialect</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POWERPC_DIALECT</name><parameter_list>(<parameter><type><name>INFO</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((struct dis_private *) ((INFO)-&gt;private_data))-&gt;dialect)</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>powerpc_init_dialect</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ppc_cpu_t</name></type> <name>dialect</name> <init>= <expr><name>PPC_OPCODE_PPC</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dis_private</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>priv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>priv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>BFD_DEFAULT_TARGET_SIZE</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>|=</operator> <name>PPC_OPCODE_64</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name></expr></argument>, <argument><expr><literal type="string">"ppcps"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>|=</operator> <name>PPC_OPCODE_PPCPS</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name></expr></argument>, <argument><expr><literal type="string">"booke"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>|=</operator> <name>PPC_OPCODE_BOOKE</name> <operator>|</operator> <name>PPC_OPCODE_BOOKE64</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>mach</name></name> <operator>==</operator> <name>bfd_mach_ppc_e500mc</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name></expr></argument>, <argument><expr><literal type="string">"e500mc"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>|=</operator> <operator>(</operator><name>PPC_OPCODE_BOOKE</name> <operator>|</operator> <name>PPC_OPCODE_ISEL</name> <operator>|</operator> <name>PPC_OPCODE_PMR</name> <operator>|</operator> <name>PPC_OPCODE_CACHELCK</name> <operator>|</operator> <name>PPC_OPCODE_RFMCI</name> <operator>|</operator> <name>PPC_OPCODE_E500MC</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>mach</name></name> <operator>==</operator> <name>bfd_mach_ppc_e500</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name></expr></argument>, <argument><expr><literal type="string">"e500"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>|=</operator> <operator>(</operator><name>PPC_OPCODE_BOOKE</name> <operator>|</operator> <name>PPC_OPCODE_SPE</name> <operator>|</operator> <name>PPC_OPCODE_ISEL</name> <operator>|</operator> <name>PPC_OPCODE_EFS</name> <operator>|</operator> <name>PPC_OPCODE_BRLOCK</name> <operator>|</operator> <name>PPC_OPCODE_PMR</name> <operator>|</operator> <name>PPC_OPCODE_CACHELCK</name> <operator>|</operator> <name>PPC_OPCODE_RFMCI</name> <operator>|</operator> <name>PPC_OPCODE_E500MC</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name></expr></argument>, <argument><expr><literal type="string">"efs"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>|=</operator> <name>PPC_OPCODE_EFS</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name></expr></argument>, <argument><expr><literal type="string">"e300"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>|=</operator> <name>PPC_OPCODE_E300</name> <operator>|</operator> <name>PPC_OPCODE_CLASSIC</name> <operator>|</operator> <name>PPC_OPCODE_COMMON</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name></expr></argument>, <argument><expr><literal type="string">"440"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name></expr></argument>, <argument><expr><literal type="string">"464"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>|=</operator> <name>PPC_OPCODE_BOOKE</name> <operator>|</operator> <name>PPC_OPCODE_32</name> <operator>|</operator> <name>PPC_OPCODE_440</name> <operator>|</operator> <name>PPC_OPCODE_ISEL</name> <operator>|</operator> <name>PPC_OPCODE_RFMCI</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>|=</operator> <operator>(</operator><name>PPC_OPCODE_403</name> <operator>|</operator> <name>PPC_OPCODE_601</name> <operator>|</operator> <name>PPC_OPCODE_CLASSIC</name> <operator>|</operator> <name>PPC_OPCODE_COMMON</name> <operator>|</operator> <name>PPC_OPCODE_ALTIVEC</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name></expr></argument>, <argument><expr><literal type="string">"power4"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>|=</operator> <name>PPC_OPCODE_POWER4</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name></expr></argument>, <argument><expr><literal type="string">"power5"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>|=</operator> <name>PPC_OPCODE_POWER4</name> <operator>|</operator> <name>PPC_OPCODE_POWER5</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name></expr></argument>, <argument><expr><literal type="string">"cell"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>|=</operator> <name>PPC_OPCODE_POWER4</name> <operator>|</operator> <name>PPC_OPCODE_CELL</name> <operator>|</operator> <name>PPC_OPCODE_ALTIVEC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name></expr></argument>, <argument><expr><literal type="string">"power6"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>|=</operator> <name>PPC_OPCODE_POWER4</name> <operator>|</operator> <name>PPC_OPCODE_POWER5</name> <operator>|</operator> <name>PPC_OPCODE_POWER6</name> <operator>|</operator> <name>PPC_OPCODE_ALTIVEC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name></expr></argument>, <argument><expr><literal type="string">"power7"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>|=</operator> <name>PPC_OPCODE_POWER4</name> <operator>|</operator> <name>PPC_OPCODE_POWER5</name> <operator>|</operator> <name>PPC_OPCODE_POWER6</name> <operator>|</operator> <name>PPC_OPCODE_ALTIVEC</name> <operator>|</operator> <name>PPC_OPCODE_VSX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name></expr></argument>, <argument><expr><literal type="string">"vsx"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>|=</operator> <name>PPC_OPCODE_VSX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>|=</operator> <name>PPC_OPCODE_ANY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name></expr></argument>, <argument><expr><literal type="string">"32"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>&amp;=</operator> <operator>~</operator><name>PPC_OPCODE_64</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>disassembler_options</name></name></expr></argument>, <argument><expr><literal type="string">"64"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>|=</operator> <name>PPC_OPCODE_64</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>private_data</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>POWERPC_DIALECT</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>dialect</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>print_insn_big_powerpc</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>private_data</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>powerpc_init_dialect</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>print_insn_powerpc</name> <argument_list>(<argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>POWERPC_DIALECT</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>print_insn_little_powerpc</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>private_data</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>powerpc_init_dialect</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>print_insn_powerpc</name> <argument_list>(<argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>POWERPC_DIALECT</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>print_insn_rs6000</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>print_insn_powerpc</name> <argument_list>(<argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>PPC_OPCODE_POWER</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>long</name></type>
<name>operand_value_powerpc</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>powerpc_operand</name></name> <modifier>*</modifier></type><name>operand</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>insn</name></decl></parameter>, <parameter><decl><type><name>ppc_cpu_t</name></type> <name>dialect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>invalid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>extract</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>operand</name><operator>-&gt;</operator><name>extract</name></name>) <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>dialect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>invalid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&gt;&gt;</operator> <name><name>operand</name><operator>-&gt;</operator><name>shift</name></name><operator>)</operator> <operator>&amp;</operator> <name><name>operand</name><operator>-&gt;</operator><name>bitm</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PPC_OPERAND_SIGNED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>top</name> <init>= <expr><name><name>operand</name><operator>-&gt;</operator><name>bitm</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>top</name> <operator>|=</operator> <operator>(</operator><name>top</name> <operator>&amp;</operator> <operator>-</operator><name>top</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>top</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>top</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>^</operator> <name>top</name><operator>)</operator> <operator>-</operator> <name>top</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>skip_optional_operands</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opindex</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>insn</name></decl></parameter>, <parameter><decl><type><name>ppc_cpu_t</name></type> <name>dialect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>powerpc_operand</name></name> <modifier>*</modifier></type><name>operand</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>opindex</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>opindex</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <operator>&amp;</operator><name><name>powerpc_operands</name><index>[<expr><operator>*</operator><name>opindex</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PPC_OPERAND_NEXT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PPC_OPERAND_OPTIONAL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>operand_value_powerpc</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>dialect</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>print_insn_powerpc</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bigendian</name></decl></parameter>,
<parameter><decl><type><name>ppc_cpu_t</name></type> <name>dialect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bfd_byte</name></type> <name><name>buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>insn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>powerpc_opcode</name></name> <modifier>*</modifier></type><name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>powerpc_opcode</name></name> <modifier>*</modifier></type><name>opcode_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>op</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>read_memory_func</name></name>) <argument_list>(<argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>memory_error_func</name></name>) <argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bigendian</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>insn</name> <operator>=</operator> <call><name>__bfd_getb32</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>insn</name> <operator>=</operator> <call><name>__bfd_getl32</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>PPC_OP</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>opcode_end</name> <operator>=</operator> <name>powerpc_opcodes</name> <operator>+</operator> <name>powerpc_num_opcodes</name></expr>;</expr_stmt>
<label><name>again</name>:</label>
<for>for <control>(<init><expr><name>opcode</name> <operator>=</operator> <name>powerpc_opcodes</name></expr>;</init> <condition><expr><name>opcode</name> <operator>&lt;</operator> <name>opcode_end</name></expr>;</condition> <incr><expr><name>opcode</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>table_op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>powerpc_operand</name></name> <modifier>*</modifier></type><name>operand</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>invalid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_comma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_paren</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_optional</name></decl>;</decl_stmt>

<expr_stmt><expr><name>table_op</name> <operator>=</operator> <call><name>PPC_OP</name> <argument_list>(<argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;</operator> <name>table_op</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&gt;</operator> <name>table_op</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <name><name>opcode</name><operator>-&gt;</operator><name>mask</name></name><operator>)</operator> <operator>!=</operator> <name><name>opcode</name><operator>-&gt;</operator><name>opcode</name></name> <operator>||</operator> <operator>(</operator><name><name>opcode</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>dialect</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>invalid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>opindex</name> <operator>=</operator> <name><name>opcode</name><operator>-&gt;</operator><name>operands</name></name></expr>;</init> <condition><expr><operator>*</operator><name>opindex</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>opindex</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>powerpc_operands</name> <operator>+</operator> <operator>*</operator><name>opindex</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>extract</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>operand</name><operator>-&gt;</operator><name>extract</name></name>) <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>dialect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>invalid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>invalid</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>need_comma</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>need_paren</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>skip_optional</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>opindex</name> <operator>=</operator> <name><name>opcode</name><operator>-&gt;</operator><name>operands</name></name></expr>;</init> <condition><expr><operator>*</operator><name>opindex</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>opindex</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>operand</name> <operator>=</operator> <name>powerpc_operands</name> <operator>+</operator> <operator>*</operator><name>opindex</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PPC_OPERAND_FAKE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PPC_OPERAND_OPTIONAL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>skip_optional</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip_optional</name> <operator>=</operator> <call><name>skip_optional_operands</name> <argument_list>(<argument><expr><name>opindex</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>,
<argument><expr><name>dialect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>skip_optional</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>operand_value_powerpc</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>dialect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_comma</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_comma</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PPC_OPERAND_GPR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PPC_OPERAND_GPR_0</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"r%ld"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PPC_OPERAND_FPR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"f%ld"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PPC_OPERAND_VR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"v%ld"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PPC_OPERAND_VSR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"vs%ld"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PPC_OPERAND_RELATIVE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name>memaddr</name> <operator>+</operator> <name>value</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PPC_OPERAND_ABSOLUTE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><operator>(</operator><name>bfd_vma</name><operator>)</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PPC_OPERAND_CR</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>dialect</name> <operator>&amp;</operator> <name>PPC_OPCODE_PPC</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PPC_OPERAND_FSL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"fsl%ld"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PPC_OPERAND_FCR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"fcr%ld"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PPC_OPERAND_UDI</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>bitm</name></name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"cr%ld"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>cbnames</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"lt"</literal></expr>, <expr><literal type="string">"gt"</literal></expr>, <expr><literal type="string">"eq"</literal></expr>, <expr><literal type="string">"so"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cr</name> <operator>=</operator> <name>value</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"4*cr%d+"</literal></expr></argument>, <argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>value</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>cbnames</name><index>[<expr><name>cc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_paren</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_paren</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>operand</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PPC_OPERAND_PARENS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_comma</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_paren</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dialect</name> <operator>&amp;</operator> <name>PPC_OPCODE_ANY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>dialect</name> <operator>=</operator> <operator>~</operator><name>PPC_OPCODE_ANY</name></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>




<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>print_ppc_disassembler_options</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"\n\
The following PPC specific disassembler options are supported for use with\n\
the -M switch:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" booke|booke32|booke64 Disassemble the BookE instructions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" e300 Disassemble the e300 instructions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" e500|e500x2 Disassemble the e500 instructions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" e500mc Disassemble the e500mc instructions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" 440 Disassemble the 440 instructions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" 464 Disassemble the 464 instructions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" efs Disassemble the EFS instructions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" ppcps Disassemble the PowerPC paired singles instructions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" power4 Disassemble the Power4 instructions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" power5 Disassemble the Power5 instructions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" power6 Disassemble the Power6 instructions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" power7 Disassemble the Power7 instructions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" vsx Disassemble the Vector-Scalar (VSX) instructions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" 32 Do not disassemble 64-bit instructions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" 64 Allow disassembly of 64-bit instructions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
